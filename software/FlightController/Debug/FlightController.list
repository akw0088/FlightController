
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001011c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  080102fc  080102fc  000202fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010970  08010970  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  08010970  08010970  00020970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010978  08010978  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010978  08010978  00020978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801097c  0801097c  0002097c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08010980  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002214  20000178  08010af8  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000238c  08010af8  0003238c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ed6a  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004843  00000000  00000000  0004ef55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00053798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001342  00000000  00000000  000550a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e70  00000000  00000000  000563e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002437a  00000000  00000000  0007e252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ebe  00000000  00000000  000a25cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006eb0  00000000  00000000  0018448c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0018b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000178 	.word	0x20000178
 80001fc:	00000000 	.word	0x00000000
 8000200:	080102e4 	.word	0x080102e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000017c 	.word	0x2000017c
 800021c:	080102e4 	.word	0x080102e4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b970 	b.w	8000e04 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d14a      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4694      	mov	ip, r2
 8000b50:	d965      	bls.n	8000c1e <__udivmoddi4+0xe2>
 8000b52:	fab2 f382 	clz	r3, r2
 8000b56:	b143      	cbz	r3, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b5c:	f1c3 0220 	rsb	r2, r3, #32
 8000b60:	409f      	lsls	r7, r3
 8000b62:	fa20 f202 	lsr.w	r2, r0, r2
 8000b66:	4317      	orrs	r7, r2
 8000b68:	409c      	lsls	r4, r3
 8000b6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b6e:	fa1f f58c 	uxth.w	r5, ip
 8000b72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b76:	0c22      	lsrs	r2, r4, #16
 8000b78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b80:	fb01 f005 	mul.w	r0, r1, r5
 8000b84:	4290      	cmp	r0, r2
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x62>
 8000b88:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b90:	f080 811c 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000b94:	4290      	cmp	r0, r2
 8000b96:	f240 8119 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000b9a:	3902      	subs	r1, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a12      	subs	r2, r2, r0
 8000ba0:	b2a4      	uxth	r4, r4
 8000ba2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ba6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000baa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bae:	fb00 f505 	mul.w	r5, r0, r5
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	d90a      	bls.n	8000bcc <__udivmoddi4+0x90>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x294>
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x294>
 8000bc8:	4464      	add	r4, ip
 8000bca:	3802      	subs	r0, #2
 8000bcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd0:	1b64      	subs	r4, r4, r5
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	b11e      	cbz	r6, 8000bde <__udivmoddi4+0xa2>
 8000bd6:	40dc      	lsrs	r4, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e9c6 4300 	strd	r4, r3, [r6]
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0xbc>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80ed 	beq.w	8000dc6 <__udivmoddi4+0x28a>
 8000bec:	2100      	movs	r1, #0
 8000bee:	e9c6 0500 	strd	r0, r5, [r6]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	fab3 f183 	clz	r1, r3
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	d149      	bne.n	8000c94 <__udivmoddi4+0x158>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	d302      	bcc.n	8000c0a <__udivmoddi4+0xce>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	f200 80f8 	bhi.w	8000dfa <__udivmoddi4+0x2be>
 8000c0a:	1a84      	subs	r4, r0, r2
 8000c0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	4617      	mov	r7, r2
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d0e2      	beq.n	8000bde <__udivmoddi4+0xa2>
 8000c18:	e9c6 4700 	strd	r4, r7, [r6]
 8000c1c:	e7df      	b.n	8000bde <__udivmoddi4+0xa2>
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xe6>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2c:	1a8a      	subs	r2, r1, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2101      	movs	r1, #1
 8000c38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c40:	0c22      	lsrs	r2, r4, #16
 8000c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c46:	fb0e f005 	mul.w	r0, lr, r5
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2b8>
 8000c5e:	4645      	mov	r5, r8
 8000c60:	1a12      	subs	r2, r2, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c68:	fb07 2210 	mls	r2, r7, r0, r2
 8000c6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x14e>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x14c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2c2>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c92:	e79f      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000c94:	f1c1 0720 	rsb	r7, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca6:	fa20 f307 	lsr.w	r3, r0, r7
 8000caa:	40fd      	lsrs	r5, r7
 8000cac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb0:	4323      	orrs	r3, r4
 8000cb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	fb09 5518 	mls	r5, r9, r8, r5
 8000cbe:	0c1c      	lsrs	r4, r3, #16
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	fa00 f001 	lsl.w	r0, r0, r1
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2b4>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4464      	add	r4, ip
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	b29d      	uxth	r5, r3
 8000cf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2ac>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2ac>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46ae      	mov	lr, r5
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x29c>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x298>
 8000d2c:	b156      	cbz	r6, 8000d44 <__udivmoddi4+0x208>
 8000d2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d32:	eb64 040e 	sbc.w	r4, r4, lr
 8000d36:	fa04 f707 	lsl.w	r7, r4, r7
 8000d3a:	40ca      	lsrs	r2, r1
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	4317      	orrs	r7, r2
 8000d40:	e9c6 7400 	strd	r7, r4, [r6]
 8000d44:	4618      	mov	r0, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4c:	f1c3 0120 	rsb	r1, r3, #32
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	fa20 f201 	lsr.w	r2, r0, r1
 8000d58:	fa25 f101 	lsr.w	r1, r5, r1
 8000d5c:	409d      	lsls	r5, r3
 8000d5e:	432a      	orrs	r2, r5
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d70:	0c11      	lsrs	r1, r2, #16
 8000d72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d76:	fb00 f50e 	mul.w	r5, r0, lr
 8000d7a:	428d      	cmp	r5, r1
 8000d7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x258>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000d8c:	428d      	cmp	r5, r1
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1b49      	subs	r1, r1, r5
 8000d96:	b292      	uxth	r2, r2
 8000d98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000da0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da4:	fb05 f10e 	mul.w	r1, r5, lr
 8000da8:	4291      	cmp	r1, r2
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x282>
 8000dac:	eb1c 0202 	adds.w	r2, ip, r2
 8000db0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000db6:	4291      	cmp	r1, r2
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000dba:	3d02      	subs	r5, #2
 8000dbc:	4462      	add	r2, ip
 8000dbe:	1a52      	subs	r2, r2, r1
 8000dc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0xfc>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xa2>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	e6e6      	b.n	8000b9e <__udivmoddi4+0x62>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x90>
 8000dd4:	4548      	cmp	r0, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000de0:	3b01      	subs	r3, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de4:	4645      	mov	r5, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x282>
 8000de8:	462b      	mov	r3, r5
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x258>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df4:	3d02      	subs	r5, #2
 8000df6:	4462      	add	r2, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x124>
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e70a      	b.n	8000c14 <__udivmoddi4+0xd8>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x14e>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	4613      	mov	r3, r2
 8000e18:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f972 	bl	8001104 <null_ptr_check>
 8000e20:	4603      	mov	r3, r0
 8000e22:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d11c      	bne.n	8000e66 <bmp280_get_regs+0x5e>
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d019      	beq.n	8000e66 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	789b      	ldrb	r3, [r3, #2]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e40:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685c      	ldr	r4, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7858      	ldrb	r0, [r3, #1]
 8000e4a:	7bbb      	ldrb	r3, [r7, #14]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	7bf9      	ldrb	r1, [r7, #15]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	47a0      	blx	r4
 8000e54:	4603      	mov	r3, r0
 8000e56:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000e60:	23fc      	movs	r3, #252	; 0xfc
 8000e62:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000e64:	e001      	b.n	8000e6a <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000e66:	23ff      	movs	r3, #255	; 0xff
 8000e68:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}

08000e76 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000e76:	b590      	push	{r4, r7, lr}
 8000e78:	b089      	sub	sp, #36	; 0x24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4613      	mov	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d901      	bls.n	8000e90 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000e90:	6838      	ldr	r0, [r7, #0]
 8000e92:	f000 f937 	bl	8001104 <null_ptr_check>
 8000e96:	4603      	mov	r3, r0
 8000e98:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000e9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d14d      	bne.n	8000f3e <bmp280_set_regs+0xc8>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d04a      	beq.n	8000f3e <bmp280_set_regs+0xc8>
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d047      	beq.n	8000f3e <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d041      	beq.n	8000f38 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d114      	bne.n	8000eec <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	76fb      	strb	r3, [r7, #27]
 8000ec6:	e00d      	b.n	8000ee4 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000ec8:	7efb      	ldrb	r3, [r7, #27]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	7efb      	ldrb	r3, [r7, #27]
 8000ed2:	68f9      	ldr	r1, [r7, #12]
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ede:	7efb      	ldrb	r3, [r7, #27]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	76fb      	strb	r3, [r7, #27]
 8000ee4:	7efa      	ldrb	r2, [r7, #27]
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3ed      	bcc.n	8000ec8 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d90d      	bls.n	8000f0e <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f107 0110 	add.w	r1, r7, #16
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f922 	bl	8001144 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	83bb      	strh	r3, [r7, #28]
 8000f0c:	e001      	b.n	8000f12 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689c      	ldr	r4, [r3, #8]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	7858      	ldrb	r0, [r3, #1]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	7819      	ldrb	r1, [r3, #0]
 8000f1e:	8bbb      	ldrh	r3, [r7, #28]
 8000f20:	f107 0210 	add.w	r2, r7, #16
 8000f24:	47a0      	blx	r4
 8000f26:	4603      	mov	r3, r0
 8000f28:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000f2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d008      	beq.n	8000f44 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000f32:	23fc      	movs	r3, #252	; 0xfc
 8000f34:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000f36:	e005      	b.n	8000f44 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000f38:	23fd      	movs	r3, #253	; 0xfd
 8000f3a:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000f3c:	e002      	b.n	8000f44 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000f3e:	23ff      	movs	r3, #255	; 0xff
 8000f40:	77fb      	strb	r3, [r7, #31]
 8000f42:	e000      	b.n	8000f46 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000f44:	bf00      	nop
    }

    return rslt;
 8000f46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}

08000f52 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000f5a:	23e0      	movs	r3, #224	; 0xe0
 8000f5c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000f5e:	23b6      	movs	r3, #182	; 0xb6
 8000f60:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f8ce 	bl	8001104 <null_ptr_check>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10d      	bne.n	8000f90 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000f74:	f107 010d 	add.w	r1, r7, #13
 8000f78:	f107 000e 	add.w	r0, r7, #14
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f7ff ff79 	bl	8000e76 <bmp280_set_regs>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	4798      	blx	r3
    }

    return rslt;
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f8ab 	bl	8001104 <null_ptr_check>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d150      	bne.n	800105c <bmp280_init+0xc0>
    {
        while (try_count)
 8000fba:	e02d      	b.n	8001018 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	20d0      	movs	r0, #208	; 0xd0
 8000fc4:	f7ff ff20 	bl	8000e08 <bmp280_get_regs>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11a      	bne.n	800100a <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000fd8:	2b56      	cmp	r3, #86	; 0x56
 8000fda:	d007      	beq.n	8000fec <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b57      	cmp	r3, #87	; 0x57
 8000fe2:	d003      	beq.n	8000fec <bmp280_init+0x50>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b58      	cmp	r3, #88	; 0x58
 8000fea:	d10e      	bne.n	800100a <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffb0 	bl	8000f52 <bmp280_soft_reset>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d110      	bne.n	8001020 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f8cc 	bl	800119c <get_calib_param>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001008:	e00a      	b.n	8001020 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	200a      	movs	r0, #10
 8001010:	4798      	blx	r3
            --try_count;
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	3b01      	subs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1ce      	bne.n	8000fbc <bmp280_init+0x20>
 800101e:	e000      	b.n	8001022 <bmp280_init+0x86>
                break;
 8001020:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001028:	23fe      	movs	r3, #254	; 0xfe
 800102a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d113      	bne.n	800105c <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	2300      	movs	r3, #0
 8001078:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f000 f842 	bl	8001104 <null_ptr_check>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d133      	bne.n	80010f4 <bmp280_get_uncomp_data+0x8c>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d030      	beq.n	80010f4 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001092:	f107 0108 	add.w	r1, r7, #8
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2206      	movs	r2, #6
 800109a:	20f7      	movs	r0, #247	; 0xf7
 800109c:	f7ff feb4 	bl	8000e08 <bmp280_get_regs>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d120      	bne.n	80010ee <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80010ac:	7a3b      	ldrb	r3, [r7, #8]
 80010ae:	031a      	lsls	r2, r3, #12
 80010b0:	7a7b      	ldrb	r3, [r7, #9]
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4313      	orrs	r3, r2
 80010b6:	7aba      	ldrb	r2, [r7, #10]
 80010b8:	0912      	lsrs	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	031a      	lsls	r2, r3, #12
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4313      	orrs	r3, r2
 80010cc:	7b7a      	ldrb	r2, [r7, #13]
 80010ce:	0912      	lsrs	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f000 f8f8 	bl	80012d8 <st_check_boundaries>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80010ec:	e004      	b.n	80010f8 <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80010ee:	23f3      	movs	r3, #243	; 0xf3
 80010f0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80010f2:	e001      	b.n	80010f8 <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80010f4:	23ff      	movs	r3, #255	; 0xff
 80010f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <null_ptr_check+0x26>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <null_ptr_check+0x26>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <null_ptr_check+0x26>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 800112a:	23ff      	movs	r3, #255	; 0xff
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e001      	b.n	8001134 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
 8001156:	e016      	b.n	8001186 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	441a      	add	r2, r3
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	3b01      	subs	r3, #1
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	440b      	add	r3, r1
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	441a      	add	r2, r3
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4619      	mov	r1, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	440b      	add	r3, r1
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3301      	adds	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	7dfa      	ldrb	r2, [r7, #23]
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3e4      	bcc.n	8001158 <interleave_data+0x14>
    }
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ffa3 	bl	8001104 <null_ptr_check>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80011c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d17f      	bne.n	80012cc <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80011cc:	f107 010c 	add.w	r1, r7, #12
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2218      	movs	r2, #24
 80011d4:	2088      	movs	r0, #136	; 0x88
 80011d6:	f7ff fe17 	bl	8000e08 <bmp280_get_regs>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80011e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d171      	bne.n	80012cc <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 800120e:	7c7b      	ldrb	r3, [r7, #17]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	7c3b      	ldrb	r3, [r7, #16]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001220:	7cfb      	ldrb	r3, [r7, #19]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	7cbb      	ldrb	r3, [r7, #18]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001234:	7d7b      	ldrb	r3, [r7, #21]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	7d3b      	ldrb	r3, [r7, #20]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	7dbb      	ldrb	r3, [r7, #22]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001258:	7e7b      	ldrb	r3, [r7, #25]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	7e3b      	ldrb	r3, [r7, #24]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800126a:	7efb      	ldrb	r3, [r7, #27]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	7ebb      	ldrb	r3, [r7, #26]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 800127c:	7f7b      	ldrb	r3, [r7, #29]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	7f3b      	ldrb	r3, [r7, #28]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7fbb      	ldrb	r3, [r7, #30]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80012a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80012b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80012cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dd03      	ble.n	80012f4 <st_check_boundaries+0x1c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <st_check_boundaries+0x6c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	dd09      	ble.n	8001308 <st_check_boundaries+0x30>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dd03      	ble.n	8001302 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <st_check_boundaries+0x6c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	dd02      	ble.n	8001308 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001302:	23f4      	movs	r3, #244	; 0xf4
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e015      	b.n	8001334 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dd03      	ble.n	8001316 <st_check_boundaries+0x3e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <st_check_boundaries+0x6c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	dd02      	ble.n	800131c <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8001316:	23f6      	movs	r3, #246	; 0xf6
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e00b      	b.n	8001334 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd03      	ble.n	800132a <st_check_boundaries+0x52>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <st_check_boundaries+0x6c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	dd02      	ble.n	8001330 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 800132a:	23f5      	movs	r3, #245	; 0xf5
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e001      	b.n	8001334 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	000fffef 	.word	0x000fffef

08001348 <usb_printf>:


char spi_buf[32];

void usb_printf(const char *fmt, ...)
{
 8001348:	b40f      	push	{r0, r1, r2, r3}
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135e:	480a      	ldr	r0, [pc, #40]	; (8001388 <usb_printf+0x40>)
 8001360:	f00e fbda 	bl	800fb18 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <usb_printf+0x40>)
 8001366:	f7fe ff5b 	bl	8000220 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	607b      	str	r3, [r7, #4]

  CDC_Transmit_FS((uint8_t *)buffer, len);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <usb_printf+0x40>)
 8001376:	f00d fe11 	bl	800ef9c <CDC_Transmit_FS>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001384:	b004      	add	sp, #16
 8001386:	4770      	bx	lr
 8001388:	200006f8 	.word	0x200006f8

0800138c <SPI1_bmp280_read_id_register>:

// BMP280 is SPI1 in the schematic, but CubeIDE has pin33 marked as SPI2
// nope wrong, everything is SPI1, but they use SPI1_CS and SPI2_CS to select between BMP280 and BMI270
void SPI1_bmp280_read_id_register()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
	char data[4] = {0};
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]

	data[0] = BMP280_ID_REG;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <SPI1_bmp280_read_id_register+0x7c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	713b      	strb	r3, [r7, #4]
	data[1] = BMP280_ID_REG;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <SPI1_bmp280_read_id_register+0x7c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	717b      	strb	r3, [r7, #5]


  // Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <SPI1_bmp280_read_id_register+0x80>)
 80013aa:	f002 fa55 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f001 fcec 	bl	8002d8c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data[0], 1, 100);
 80013b4:	1d39      	adds	r1, r7, #4
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	2201      	movs	r2, #1
 80013ba:	4815      	ldr	r0, [pc, #84]	; (8001410 <SPI1_bmp280_read_id_register+0x84>)
 80013bc:	f005 fc55 	bl	8006c6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf[0], 1, 100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	2201      	movs	r2, #1
 80013c4:	4913      	ldr	r1, [pc, #76]	; (8001414 <SPI1_bmp280_read_id_register+0x88>)
 80013c6:	4812      	ldr	r0, [pc, #72]	; (8001410 <SPI1_bmp280_read_id_register+0x84>)
 80013c8:	f005 fdbd 	bl	8006f46 <HAL_SPI_Receive>
	HAL_Delay(1);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f001 fcdd 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <SPI1_bmp280_read_id_register+0x80>)
 80013da:	f002 fa3d 	bl	8003858 <HAL_GPIO_WritePin>

	// print out status register, should be 0x58
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <SPI1_bmp280_read_id_register+0x88>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80013e2:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <SPI1_bmp280_read_id_register+0x88>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80013e8:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <SPI1_bmp280_read_id_register+0x88>)
 80013ec:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80013ee:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <SPI1_bmp280_read_id_register+0x88>)
 80013f2:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4603      	mov	r3, r0
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <SPI1_bmp280_read_id_register+0x8c>)
 80013fa:	f7ff ffa5 	bl	8001348 <usb_printf>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000000 	.word	0x20000000
 800140c:	40020400 	.word	0x40020400
 8001410:	20000278 	.word	0x20000278
 8001414:	200006d4 	.word	0x200006d4
 8001418:	080102fc 	.word	0x080102fc

0800141c <my_xchg_spi>:


static BYTE my_xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 8001426:	f107 020f 	add.w	r2, r7, #15
 800142a:	1df9      	adds	r1, r7, #7
 800142c:	2332      	movs	r3, #50	; 0x32
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <my_xchg_spi+0x28>)
 8001434:	f005 feb7 	bl	80071a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000278 	.word	0x20000278

08001448 <SPI1_bmp280_read_id_register_xchg>:


void SPI1_bmp280_read_id_register_xchg()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001454:	4817      	ldr	r0, [pc, #92]	; (80014b4 <SPI1_bmp280_read_id_register_xchg+0x6c>)
 8001456:	f002 f9ff 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f001 fc96 	bl	8002d8c <HAL_Delay>
	spi_buf[0] = my_xchg_spi(0x80 | 0xD0);				/* Start + command index */
 8001460:	20d0      	movs	r0, #208	; 0xd0
 8001462:	f7ff ffdb 	bl	800141c <my_xchg_spi>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <SPI1_bmp280_read_id_register_xchg+0x70>)
 800146c:	701a      	strb	r2, [r3, #0]
	spi_buf[0] = my_xchg_spi(0x80 | 0xD0);				/* Start + command index */
 800146e:	20d0      	movs	r0, #208	; 0xd0
 8001470:	f7ff ffd4 	bl	800141c <my_xchg_spi>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <SPI1_bmp280_read_id_register_xchg+0x70>)
 800147a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f001 fc85 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <SPI1_bmp280_read_id_register_xchg+0x6c>)
 800148a:	f002 f9e5 	bl	8003858 <HAL_GPIO_WritePin>

	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <SPI1_bmp280_read_id_register_xchg+0x70>)
 8001490:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001492:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <SPI1_bmp280_read_id_register_xchg+0x70>)
 8001496:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001498:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <SPI1_bmp280_read_id_register_xchg+0x70>)
 800149c:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800149e:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SPI1_bmp280_read_id_register_xchg+0x70>)
 80014a2:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4603      	mov	r3, r0
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <SPI1_bmp280_read_id_register_xchg+0x74>)
 80014aa:	f7ff ff4d 	bl	8001348 <usb_printf>

}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020400 	.word	0x40020400
 80014b8:	200006d4 	.word	0x200006d4
 80014bc:	0801032c 	.word	0x0801032c

080014c0 <SPI1_bmi270_read_id_register_xchg>:

void SPI1_bmi270_read_id_register_xchg()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2110      	movs	r1, #16
 80014ca:	4817      	ldr	r0, [pc, #92]	; (8001528 <SPI1_bmi270_read_id_register_xchg+0x68>)
 80014cc:	f002 f9c4 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 fc5b 	bl	8002d8c <HAL_Delay>
	spi_buf[0] = my_xchg_spi(0x80 | 0x0);				/* Start + command index */
 80014d6:	2080      	movs	r0, #128	; 0x80
 80014d8:	f7ff ffa0 	bl	800141c <my_xchg_spi>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <SPI1_bmi270_read_id_register_xchg+0x6c>)
 80014e2:	701a      	strb	r2, [r3, #0]
	spi_buf[0] = my_xchg_spi(0x80 | 0x0);				/* Start + command index */
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	f7ff ff99 	bl	800141c <my_xchg_spi>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <SPI1_bmi270_read_id_register_xchg+0x6c>)
 80014f0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f001 fc4a 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2110      	movs	r1, #16
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <SPI1_bmi270_read_id_register_xchg+0x68>)
 80014fe:	f002 f9ab 	bl	8003858 <HAL_GPIO_WritePin>

	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001506:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <SPI1_bmi270_read_id_register_xchg+0x6c>)
 800150a:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800150c:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8001510:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001512:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8001516:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4603      	mov	r3, r0
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <SPI1_bmi270_read_id_register_xchg+0x70>)
 800151e:	f7ff ff13 	bl	8001348 <usb_printf>

}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020000 	.word	0x40020000
 800152c:	200006d4 	.word	0x200006d4
 8001530:	0801035c 	.word	0x0801035c

08001534 <SPI1_bmi270_read_id_register>:



// Note: have to do this twice as the first time it just enables the interface from i2c to spi
void SPI1_bmi270_read_id_register()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af02      	add	r7, sp, #8
	char data[4] = {0};
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]

	data[0] = BMI270_ID_REG; // dummy value
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <SPI1_bmi270_read_id_register+0x78>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	713b      	strb	r3, [r7, #4]
	data[1] = BMI270_ID_REG; // actual used value
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <SPI1_bmi270_read_id_register+0x78>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	717b      	strb	r3, [r7, #5]

// Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2110      	movs	r1, #16
 800154e:	4818      	ldr	r0, [pc, #96]	; (80015b0 <SPI1_bmi270_read_id_register+0x7c>)
 8001550:	f002 f982 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001554:	2001      	movs	r0, #1
 8001556:	f001 fc19 	bl	8002d8c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data[0], 1, 100);
 800155a:	1d39      	adds	r1, r7, #4
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	2201      	movs	r2, #1
 8001560:	4814      	ldr	r0, [pc, #80]	; (80015b4 <SPI1_bmi270_read_id_register+0x80>)
 8001562:	f005 fb82 	bl	8006c6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf[0], 1, 100);
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	2201      	movs	r2, #1
 800156a:	4913      	ldr	r1, [pc, #76]	; (80015b8 <SPI1_bmi270_read_id_register+0x84>)
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <SPI1_bmi270_read_id_register+0x80>)
 800156e:	f005 fcea 	bl	8006f46 <HAL_SPI_Receive>
//	HAL_StatusTypeDef ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&data[0], (uint8_t *)&spi_buf[0], 2, 100);
//	if (ret != HAL_OK)
//	{
//		usb_printf("HAL_SPI_TransmitReceive failed %d\n", ret);
//	}
	HAL_Delay(1);
 8001572:	2001      	movs	r0, #1
 8001574:	f001 fc0a 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <SPI1_bmi270_read_id_register+0x7c>)
 800157e:	f002 f96b 	bl	8003858 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

	// print out status register, should be 0x24
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <SPI1_bmi270_read_id_register+0x84>)
 8001584:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001586:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <SPI1_bmi270_read_id_register+0x84>)
 800158a:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800158c:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <SPI1_bmi270_read_id_register+0x84>)
 8001590:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001592:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SPI1_bmi270_read_id_register+0x84>)
 8001596:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	4603      	mov	r3, r0
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <SPI1_bmi270_read_id_register+0x88>)
 800159e:	f7ff fed3 	bl	8001348 <usb_printf>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000001 	.word	0x20000001
 80015b0:	40020000 	.word	0x40020000
 80015b4:	20000278 	.word	0x20000278
 80015b8:	200006d4 	.word	0x200006d4
 80015bc:	0801038c 	.word	0x0801038c

080015c0 <test_bmp280>:
		  */
}


int test_bmp280(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0
    int8_t rslt;
    struct bmp280_dev bmp;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <test_bmp280+0x5c>)
 80015c8:	617b      	str	r3, [r7, #20]

    bmp.dev_id = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	727b      	strb	r3, [r7, #9]
    bmp.read = spi_reg_read;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <test_bmp280+0x60>)
 80015d0:	60fb      	str	r3, [r7, #12]
    bmp.write = spi_reg_write;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <test_bmp280+0x64>)
 80015d4:	613b      	str	r3, [r7, #16]
    bmp.intf = BMP280_SPI_INTF;
 80015d6:	2300      	movs	r3, #0
 80015d8:	72bb      	strb	r3, [r7, #10]
    rslt = bmp280_init(&bmp);
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fcdc 	bl	8000f9c <bmp280_init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    print_rslt(" bmp280_init status", rslt);
 80015ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80015ee:	4619      	mov	r1, r3
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <test_bmp280+0x68>)
 80015f2:	f000 f88d 	bl	8001710 <print_rslt>


    struct bmp280_uncomp_data data;

    bmp280_get_uncomp_data(&data, &bmp);
 80015f6:	f107 0208 	add.w	r2, r7, #8
 80015fa:	463b      	mov	r3, r7
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd32 	bl	8001068 <bmp280_get_uncomp_data>

	usb_printf("BMP280 API : %u temp %u pressureX\r\n",
		  (unsigned int)data.uncomp_temp,
 8001604:	683b      	ldr	r3, [r7, #0]
	usb_printf("BMP280 API : %u temp %u pressureX\r\n",
 8001606:	4619      	mov	r1, r3
		  (unsigned int)data.uncomp_press);
 8001608:	687b      	ldr	r3, [r7, #4]
	usb_printf("BMP280 API : %u temp %u pressureX\r\n",
 800160a:	461a      	mov	r2, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <test_bmp280+0x6c>)
 800160e:	f7ff fe9b 	bl	8001348 <usb_printf>
    return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3740      	adds	r7, #64	; 0x40
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08001631 	.word	0x08001631
 8001620:	080016ad 	.word	0x080016ad
 8001624:	08001649 	.word	0x08001649
 8001628:	080103ec 	.word	0x080103ec
 800162c:	08010400 	.word	0x08010400

08001630 <delay_ms>:


void delay_ms(uint32_t period_ms)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	HAL_Delay(period_ms);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f001 fba7 	bl	8002d8c <HAL_Delay>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <spi_reg_write>:


int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	603a      	str	r2, [r7, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	460b      	mov	r3, r1
 8001658:	71bb      	strb	r3, [r7, #6]
 800165a:	4613      	mov	r3, r2
 800165c:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001664:	480f      	ldr	r0, [pc, #60]	; (80016a4 <spi_reg_write+0x5c>)
 8001666:	f002 f8f7 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f001 fb8e 	bl	8002d8c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_addr, 1, 100);
 8001670:	1db9      	adds	r1, r7, #6
 8001672:	2364      	movs	r3, #100	; 0x64
 8001674:	2201      	movs	r2, #1
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <spi_reg_write+0x60>)
 8001678:	f005 faf7 	bl	8006c6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)reg_data, length, 100);
 800167c:	88ba      	ldrh	r2, [r7, #4]
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <spi_reg_write+0x60>)
 8001684:	f005 faf1 	bl	8006c6a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 fb7f 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <spi_reg_write+0x5c>)
 8001696:	f002 f8df 	bl	8003858 <HAL_GPIO_WritePin>

    return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020400 	.word	0x40020400
 80016a8:	20000278 	.word	0x20000278

080016ac <spi_reg_read>:


int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	603a      	str	r2, [r7, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	460b      	mov	r3, r1
 80016bc:	71bb      	strb	r3, [r7, #6]
 80016be:	4613      	mov	r3, r2
 80016c0:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c8:	480f      	ldr	r0, [pc, #60]	; (8001708 <spi_reg_read+0x5c>)
 80016ca:	f002 f8c5 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f001 fb5c 	bl	8002d8c <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&reg_addr, 1, 100);
 80016d4:	1db9      	adds	r1, r7, #6
 80016d6:	2364      	movs	r3, #100	; 0x64
 80016d8:	2201      	movs	r2, #1
 80016da:	480c      	ldr	r0, [pc, #48]	; (800170c <spi_reg_read+0x60>)
 80016dc:	f005 fac5 	bl	8006c6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)reg_data, length, 100);
 80016e0:	88ba      	ldrh	r2, [r7, #4]
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <spi_reg_read+0x60>)
 80016e8:	f005 fc2d 	bl	8006f46 <HAL_SPI_Receive>
	HAL_Delay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f001 fb4d 	bl	8002d8c <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <spi_reg_read+0x5c>)
 80016fa:	f002 f8ad 	bl	8003858 <HAL_GPIO_WritePin>
    return 0;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40020400 	.word	0x40020400
 800170c:	20000278 	.word	0x20000278

08001710 <print_rslt>:


void print_rslt(const char api_name[], int8_t rslt)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP280_OK)
 800171c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d039      	beq.n	8001798 <print_rslt+0x88>
    {
    	usb_printf("%s\t", api_name);
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	481e      	ldr	r0, [pc, #120]	; (80017a0 <print_rslt+0x90>)
 8001728:	f7ff fe0e 	bl	8001348 <usb_printf>
        if (rslt == BMP280_E_NULL_PTR)
 800172c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d106      	bne.n	8001744 <print_rslt+0x34>
        {
        	usb_printf("Error [%d] : Null pointer error\r\n", (int)rslt);
 8001736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173a:	4619      	mov	r1, r3
 800173c:	4819      	ldr	r0, [pc, #100]	; (80017a4 <print_rslt+0x94>)
 800173e:	f7ff fe03 	bl	8001348 <usb_printf>
        {
            /* For more error codes refer "*_defs.h" */
        	usb_printf("Error [%d] : Unknown error code\r\n", (int)rslt);
        }
    }
}
 8001742:	e029      	b.n	8001798 <print_rslt+0x88>
        else if (rslt == BMP280_E_COMM_FAIL)
 8001744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001748:	f113 0f04 	cmn.w	r3, #4
 800174c:	d106      	bne.n	800175c <print_rslt+0x4c>
        	usb_printf("Error [%d] : Bus communication failed\r\n", (int)rslt);
 800174e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001752:	4619      	mov	r1, r3
 8001754:	4814      	ldr	r0, [pc, #80]	; (80017a8 <print_rslt+0x98>)
 8001756:	f7ff fdf7 	bl	8001348 <usb_printf>
}
 800175a:	e01d      	b.n	8001798 <print_rslt+0x88>
        else if (rslt == BMP280_E_IMPLAUS_TEMP)
 800175c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001760:	f113 0f07 	cmn.w	r3, #7
 8001764:	d106      	bne.n	8001774 <print_rslt+0x64>
        	usb_printf("Error [%d] : Invalid Temperature\r\n", (int)rslt);
 8001766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800176a:	4619      	mov	r1, r3
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <print_rslt+0x9c>)
 800176e:	f7ff fdeb 	bl	8001348 <usb_printf>
}
 8001772:	e011      	b.n	8001798 <print_rslt+0x88>
        else if (rslt == BMP280_E_DEV_NOT_FOUND)
 8001774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001778:	f113 0f02 	cmn.w	r3, #2
 800177c:	d106      	bne.n	800178c <print_rslt+0x7c>
        	usb_printf("Error [%d] : Device not found\r\n", (int)rslt);
 800177e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001782:	4619      	mov	r1, r3
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <print_rslt+0xa0>)
 8001786:	f7ff fddf 	bl	8001348 <usb_printf>
}
 800178a:	e005      	b.n	8001798 <print_rslt+0x88>
        	usb_printf("Error [%d] : Unknown error code\r\n", (int)rslt);
 800178c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001790:	4619      	mov	r1, r3
 8001792:	4808      	ldr	r0, [pc, #32]	; (80017b4 <print_rslt+0xa4>)
 8001794:	f7ff fdd8 	bl	8001348 <usb_printf>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	08010424 	.word	0x08010424
 80017a4:	08010428 	.word	0x08010428
 80017a8:	0801044c 	.word	0x0801044c
 80017ac:	08010474 	.word	0x08010474
 80017b0:	08010498 	.word	0x08010498
 80017b4:	080104b8 	.word	0x080104b8

080017b8 <test_sdcard>:



// https://01001000.xyz/2020-08-09-Tutorial-STM32CubeIDE-SD-card/
void test_sdcard()
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80017be:	af00      	add	r7, sp, #0
	  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80017c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c4:	f001 fae2 	bl	8002d8c <HAL_Delay>
	  FATFS FatFs; 	//Fatfs handle
	  FIL fil; 		//File handle
	  FRESULT fres; //Result after operations

	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 80017c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80017cc:	2201      	movs	r2, #1
 80017ce:	4971      	ldr	r1, [pc, #452]	; (8001994 <test_sdcard+0x1dc>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00c fc4f 	bl	800e074 <f_mount>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if (fres != FR_OK)
 80017dc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <test_sdcard+0x3a>
	  {
		  usb_printf("f_mount error (%i)\r\n", fres);
 80017e4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80017e8:	4619      	mov	r1, r3
 80017ea:	486b      	ldr	r0, [pc, #428]	; (8001998 <test_sdcard+0x1e0>)
 80017ec:	f7ff fdac 	bl	8001348 <usb_printf>
		  return;
 80017f0:	e0cb      	b.n	800198a <test_sdcard+0x1d2>
	  //Let's get some statistics from the SD card
	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 80017f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4865      	ldr	r0, [pc, #404]	; (8001994 <test_sdcard+0x1dc>)
 80017fe:	f00d f999 	bl	800eb34 <f_getfree>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK)
 8001808:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <test_sdcard+0x66>
	  {
		  usb_printf("f_getfree error (%i)\r\n", fres);
 8001810:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001814:	4619      	mov	r1, r3
 8001816:	4861      	ldr	r0, [pc, #388]	; (800199c <test_sdcard+0x1e4>)
 8001818:	f7ff fd96 	bl	8001348 <usb_printf>
		  return;
 800181c:	e0b5      	b.n	800198a <test_sdcard+0x1d2>
	  }

	  //Formula comes from ChaN's documentation
	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800181e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001822:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	3b02      	subs	r3, #2
 800182c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8001830:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	8952      	ldrh	r2, [r2, #10]
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	  free_sectors = free_clusters * getFreeFs->csize;
 8001840:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001844:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	895b      	ldrh	r3, [r3, #10]
 800184c:	461a      	mov	r2, r3
 800184e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001852:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

	  usb_printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001860:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001864:	0859      	lsrs	r1, r3, #1
 8001866:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	461a      	mov	r2, r3
 800186e:	484c      	ldr	r0, [pc, #304]	; (80019a0 <test_sdcard+0x1e8>)
 8001870:	f7ff fd6a 	bl	8001348 <usb_printf>

	  //Now let's try to open file "test.txt"
	  fres = f_open(&fil, "test.txt", FA_READ);
 8001874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001878:	2201      	movs	r2, #1
 800187a:	494a      	ldr	r1, [pc, #296]	; (80019a4 <test_sdcard+0x1ec>)
 800187c:	4618      	mov	r0, r3
 800187e:	f00c fc3f 	bl	800e100 <f_open>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if (fres != FR_OK)
 8001888:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <test_sdcard+0xe0>
	  {
		usb_printf("f_open error (%i)\r\n");
 8001890:	4845      	ldr	r0, [pc, #276]	; (80019a8 <test_sdcard+0x1f0>)
 8001892:	f7ff fd59 	bl	8001348 <usb_printf>
		return;
 8001896:	e078      	b.n	800198a <test_sdcard+0x1d2>
	  }

	  usb_printf("I was able to open 'test.txt' for reading!\r\n");
 8001898:	4844      	ldr	r0, [pc, #272]	; (80019ac <test_sdcard+0x1f4>)
 800189a:	f7ff fd55 	bl	8001348 <usb_printf>

	  //Read 30 bytes from "test.txt" on the SD card
	  BYTE readBuf[30] = {0};
 800189e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80018a2:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	831a      	strh	r2, [r3, #24]

	  //We can either use f_read OR f_gets to get data out of files
	  //f_gets is a wrapper on f_read that does some string formatting for us
	  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80018bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	211e      	movs	r1, #30
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00d f9e9 	bl	800ec9e <f_gets>
 80018cc:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490

	  if(rres != 0)
 80018d0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <test_sdcard+0x12e>
	  {
		  usb_printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	4834      	ldr	r0, [pc, #208]	; (80019b0 <test_sdcard+0x1f8>)
 80018e0:	f7ff fd32 	bl	8001348 <usb_printf>
 80018e4:	e005      	b.n	80018f2 <test_sdcard+0x13a>
	  }
	  else
	  {
		  usb_printf("f_gets error (%i)\r\n", fres);
 80018e6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80018ea:	4619      	mov	r1, r3
 80018ec:	4831      	ldr	r0, [pc, #196]	; (80019b4 <test_sdcard+0x1fc>)
 80018ee:	f7ff fd2b 	bl	8001348 <usb_printf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 80018f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00d f8f2 	bl	800eae0 <f_close>

	  //Now let's try and write a file "write.txt"
	  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80018fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001900:	221a      	movs	r2, #26
 8001902:	492d      	ldr	r1, [pc, #180]	; (80019b8 <test_sdcard+0x200>)
 8001904:	4618      	mov	r0, r3
 8001906:	f00c fbfb 	bl	800e100 <f_open>
 800190a:	4603      	mov	r3, r0
 800190c:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if(fres == FR_OK)
 8001910:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <test_sdcard+0x168>
	  {
		  usb_printf("I was able to open 'write.txt' for writing\r\n");
 8001918:	4828      	ldr	r0, [pc, #160]	; (80019bc <test_sdcard+0x204>)
 800191a:	f7ff fd15 	bl	8001348 <usb_printf>
 800191e:	e005      	b.n	800192c <test_sdcard+0x174>
	  }
	  else
	  {
		  usb_printf("f_open error (%i)\r\n", fres);
 8001920:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001924:	4619      	mov	r1, r3
 8001926:	4820      	ldr	r0, [pc, #128]	; (80019a8 <test_sdcard+0x1f0>)
 8001928:	f7ff fd0e 	bl	8001348 <usb_printf>
	  }

	  //Copy in a string
	  strncpy((char*)readBuf, "a new file is made!", 20);
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <test_sdcard+0x208>)
 8001932:	461c      	mov	r4, r3
 8001934:	4615      	mov	r5, r2
 8001936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193a:	682b      	ldr	r3, [r5, #0]
 800193c:	6023      	str	r3, [r4, #0]
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	f107 0108 	add.w	r1, r7, #8
 8001944:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001948:	2213      	movs	r2, #19
 800194a:	f00c fed6 	bl	800e6fa <f_write>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if(fres == FR_OK)
 8001954:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <test_sdcard+0x1b8>
	  {
		  usb_printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800195c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001960:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	4816      	ldr	r0, [pc, #88]	; (80019c4 <test_sdcard+0x20c>)
 800196a:	f7ff fced 	bl	8001348 <usb_printf>
 800196e:	e002      	b.n	8001976 <test_sdcard+0x1be>
	  }
	  else
	  {
		  usb_printf("f_write error (%i)\r\n");
 8001970:	4815      	ldr	r0, [pc, #84]	; (80019c8 <test_sdcard+0x210>)
 8001972:	f7ff fce9 	bl	8001348 <usb_printf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	4618      	mov	r0, r3
 800197c:	f00d f8b0 	bl	800eae0 <f_close>

	  //We're done, so de-mount the drive
	  f_mount(NULL, "", 0);
 8001980:	2200      	movs	r2, #0
 8001982:	4904      	ldr	r1, [pc, #16]	; (8001994 <test_sdcard+0x1dc>)
 8001984:	2000      	movs	r0, #0
 8001986:	f00c fb75 	bl	800e074 <f_mount>
}
 800198a:	f507 6794 	add.w	r7, r7, #1184	; 0x4a0
 800198e:	46bd      	mov	sp, r7
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	bf00      	nop
 8001994:	08010514 	.word	0x08010514
 8001998:	08010518 	.word	0x08010518
 800199c:	08010530 	.word	0x08010530
 80019a0:	08010548 	.word	0x08010548
 80019a4:	08010590 	.word	0x08010590
 80019a8:	0801059c 	.word	0x0801059c
 80019ac:	080105b0 	.word	0x080105b0
 80019b0:	080105e0 	.word	0x080105e0
 80019b4:	0801060c 	.word	0x0801060c
 80019b8:	08010620 	.word	0x08010620
 80019bc:	0801062c 	.word	0x0801062c
 80019c0:	0801065c 	.word	0x0801065c
 80019c4:	08010670 	.word	0x08010670
 80019c8:	08010694 	.word	0x08010694

080019cc <start_bootloader>:


#define	MCU_IRQS	70u

void start_bootloader()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	void (*boot_jump)(void);

	boot_jump = (void (*)(void))(*((uint32_t *)(0x1FFF0000 + 4)));
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <start_bootloader+0x48>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	607b      	str	r3, [r7, #4]

	HAL_RCC_DeInit();
 80019d8:	f003 ffa8 	bl	800592c <HAL_RCC_DeInit>
	SysTick->CTRL = 0;
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <start_bootloader+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <start_bootloader+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <start_bootloader+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ee:	b672      	cpsid	i
}
 80019f0:	bf00      	nop
	__disable_irq();
	SYSCFG->MEMRMP = 0x01;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <start_bootloader+0x50>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

	__set_MSP(*(uint32_t *)0x1FFF0000);
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <start_bootloader+0x54>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f383 8808 	msr	MSP, r3
}
 8001a04:	bf00      	nop

	boot_jump();
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4798      	blx	r3
	*((unsigned long *)0x2004FFF0) = 0xDEADBEEF; // 320KB STM32F7xx
	__DSB();

	boot_jump();
	*/
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	1fff0004 	.word	0x1fff0004
 8001a18:	e000e010 	.word	0xe000e010
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	1fff0000 	.word	0x1fff0000

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2a:	f001 f952 	bl	8002cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2e:	f000 f921 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a32:	f000 fc47 	bl	80022c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001a36:	f00d f9cb 	bl	800edd0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001a3a:	f000 f985 	bl	8001d48 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a3e:	f000 f9d5 	bl	8001dec <MX_ADC2_Init>
  MX_I2C1_Init();
 8001a42:	f000 fa25 	bl	8001e90 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a46:	f000 fa63 	bl	8001f10 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001a4a:	f000 fbab 	bl	80021a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001a4e:	f000 fbd9 	bl	8002204 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001a52:	f000 fc07 	bl	8002264 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001a56:	f000 fa99 	bl	8001f8c <MX_SPI2_Init>
  MX_UART4_Init();
 8001a5a:	f000 fb13 	bl	8002084 <MX_UART4_Init>
  MX_UART5_Init();
 8001a5e:	f000 fb41 	bl	80020e4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001a62:	f000 fb6f 	bl	8002144 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001a66:	f000 facf 	bl	8002008 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001a6a:	f008 f891 	bl	8009b90 <MX_FATFS_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a6e:	b662      	cpsie	i
}
 8001a70:	bf00      	nop
  /* USER CODE BEGIN 2 */

  __enable_irq();


  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	4871      	ldr	r0, [pc, #452]	; (8001c3c <main+0x218>)
 8001a76:	f001 ff08 	bl	800388a <HAL_GPIO_TogglePin>



  // CS pin should be default high
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4870      	ldr	r0, [pc, #448]	; (8001c40 <main+0x21c>)
 8001a80:	f001 feea 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a8a:	486c      	ldr	r0, [pc, #432]	; (8001c3c <main+0x218>)
 8001a8c:	f001 fee4 	bl	8003858 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	4869      	ldr	r0, [pc, #420]	; (8001c3c <main+0x218>)
 8001a96:	f001 fedf 	bl	8003858 <HAL_GPIO_WritePin>


  // Print something (probably will be too fast to connect and see?)
  usb_printf("STM32F7 main()\r\n");
 8001a9a:	486a      	ldr	r0, [pc, #424]	; (8001c44 <main+0x220>)
 8001a9c:	f7ff fc54 	bl	8001348 <usb_printf>


//  SPI1_bmi270_read_id_register();

  test_bmp280();
 8001aa0:	f7ff fd8e 	bl	80015c0 <test_bmp280>

  SPI1_bmp280_read_id_register();
 8001aa4:	f7ff fc72 	bl	800138c <SPI1_bmp280_read_id_register>

  SPI1_bmi270_read_id_register();
 8001aa8:	f7ff fd44 	bl	8001534 <SPI1_bmi270_read_id_register>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  if (test_enable)
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <main+0x224>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80b3 	beq.w	8001c1c <main+0x1f8>





		  if (test_enable == '`')
 8001ab6:	4b64      	ldr	r3, [pc, #400]	; (8001c48 <main+0x224>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b60      	cmp	r3, #96	; 0x60
 8001abc:	d101      	bne.n	8001ac2 <main+0x9e>
		  {
			  start_bootloader();
 8001abe:	f7ff ff85 	bl	80019cc <start_bootloader>
		  }

		  if (test_enable == '1')
 8001ac2:	4b61      	ldr	r3, [pc, #388]	; (8001c48 <main+0x224>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b31      	cmp	r3, #49	; 0x31
 8001ac8:	d101      	bne.n	8001ace <main+0xaa>
		  {
			  test_sdcard();
 8001aca:	f7ff fe75 	bl	80017b8 <test_sdcard>
		  }

		  if (test_enable == '2')
 8001ace:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <main+0x224>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b32      	cmp	r3, #50	; 0x32
 8001ad4:	d101      	bne.n	8001ada <main+0xb6>
		  {
			  SPI1_bmp280_read_id_register();
 8001ad6:	f7ff fc59 	bl	800138c <SPI1_bmp280_read_id_register>
		  }

		  if (test_enable == '3')
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <main+0x224>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b33      	cmp	r3, #51	; 0x33
 8001ae0:	d101      	bne.n	8001ae6 <main+0xc2>
		  {
			  SPI1_bmi270_read_id_register();
 8001ae2:	f7ff fd27 	bl	8001534 <SPI1_bmi270_read_id_register>
		  }

		  if (test_enable == '4')
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <main+0x224>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b34      	cmp	r3, #52	; 0x34
 8001aec:	d101      	bne.n	8001af2 <main+0xce>
		  {
			  SPI1_bmi270_read_id_register_xchg();
 8001aee:	f7ff fce7 	bl	80014c0 <SPI1_bmi270_read_id_register_xchg>
		  }

		  if (test_enable == '5')
 8001af2:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <main+0x224>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b35      	cmp	r3, #53	; 0x35
 8001af8:	d101      	bne.n	8001afe <main+0xda>
		  {
			  test_bmp280();
 8001afa:	f7ff fd61 	bl	80015c0 <test_bmp280>
		  }

		  if (test_enable == '6')
 8001afe:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <main+0x224>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b36      	cmp	r3, #54	; 0x36
 8001b04:	d101      	bne.n	8001b0a <main+0xe6>
		  {
			  SPI1_bmp280_read_id_register_xchg();
 8001b06:	f7ff fc9f 	bl	8001448 <SPI1_bmp280_read_id_register_xchg>
		  }

		  if (test_enable == '7')
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <main+0x224>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b37      	cmp	r3, #55	; 0x37
 8001b10:	f040 8081 	bne.w	8001c16 <main+0x1f2>
		  {
			  static int init = 0;

			  if (init == 0)
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <main+0x228>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13b      	bne.n	8001b94 <main+0x170>
			  {

//				  TMP117_Initialization(hi2c1);

				  uint16_t id = -1;
 8001b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b20:	81fb      	strh	r3, [r7, #14]

//				  id = TMP117_get_ID_Register(hi2c1);

			      static uint8_t sbuf[3] = { 0 };
			      static uint8_t rbuf[3] = { 0 };
			      sbuf[0] = 0x0F;
 8001b22:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <main+0x22c>)
 8001b24:	220f      	movs	r2, #15
 8001b26:	701a      	strb	r2, [r3, #0]

			      uint16_t addr = 0x48<<1;
 8001b28:	2390      	movs	r3, #144	; 0x90
 8001b2a:	81bb      	strh	r3, [r7, #12]


			      HAL_I2C_Master_Transmit(&hi2c1, addr, sbuf, 1, HAL_MAX_DELAY);
 8001b2c:	89b9      	ldrh	r1, [r7, #12]
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <main+0x22c>)
 8001b38:	4846      	ldr	r0, [pc, #280]	; (8001c54 <main+0x230>)
 8001b3a:	f001 ff51 	bl	80039e0 <HAL_I2C_Master_Transmit>
			      HAL_Delay(1);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f001 f924 	bl	8002d8c <HAL_Delay>
			      HAL_I2C_Master_Receive(&hi2c1, addr, rbuf, 2, HAL_MAX_DELAY);
 8001b44:	89b9      	ldrh	r1, [r7, #12]
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <main+0x234>)
 8001b50:	4840      	ldr	r0, [pc, #256]	; (8001c54 <main+0x230>)
 8001b52:	f002 f839 	bl	8003bc8 <HAL_I2C_Master_Receive>
			      id = ((rbuf[0]<<8)|rbuf[1]);
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <main+0x234>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <main+0x234>)
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	81fb      	strh	r3, [r7, #14]



				  if (id == 0x0117)
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	f240 1217 	movw	r2, #279	; 0x117
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d106      	bne.n	8001b82 <main+0x15e>
				  {
					  usb_printf("tmp117 init pass\r\n");
 8001b74:	4839      	ldr	r0, [pc, #228]	; (8001c5c <main+0x238>)
 8001b76:	f7ff fbe7 	bl	8001348 <usb_printf>
					  init = 1;
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <main+0x228>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e008      	b.n	8001b94 <main+0x170>

				  }
				  else
				  {
					  usb_printf("tmp117 init fail returned %X [%X, %X]\r\n", (int)id, rbuf[0], rbuf[1]);
 8001b82:	89f9      	ldrh	r1, [r7, #14]
 8001b84:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <main+0x234>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <main+0x234>)
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	4834      	ldr	r0, [pc, #208]	; (8001c60 <main+0x23c>)
 8001b90:	f7ff fbda 	bl	8001348 <usb_printf>

			  }

		      static uint8_t sbuf[3] = {0};
		      static uint8_t rbuf[3] = {0};
		      uint16_t addr = 0x48<<1;
 8001b94:	2390      	movs	r3, #144	; 0x90
 8001b96:	817b      	strh	r3, [r7, #10]

		      sbuf[0] = 0x0;
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <main+0x240>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]

		      HAL_I2C_Master_Transmit(&hi2c1, addr, sbuf, 1, HAL_MAX_DELAY);
 8001b9e:	8979      	ldrh	r1, [r7, #10]
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <main+0x240>)
 8001baa:	482a      	ldr	r0, [pc, #168]	; (8001c54 <main+0x230>)
 8001bac:	f001 ff18 	bl	80039e0 <HAL_I2C_Master_Transmit>
		      HAL_Delay(1);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f001 f8eb 	bl	8002d8c <HAL_Delay>
		      HAL_I2C_Master_Receive(&hi2c1, addr, rbuf, 2, HAL_MAX_DELAY);
 8001bb6:	8979      	ldrh	r1, [r7, #10]
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <main+0x244>)
 8001bc2:	4824      	ldr	r0, [pc, #144]	; (8001c54 <main+0x230>)
 8001bc4:	f002 f800 	bl	8003bc8 <HAL_I2C_Master_Receive>

		      float temp =  ( (rbuf[0] << 8) | rbuf[1] ) * 0.0078125;
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <main+0x244>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <main+0x244>)
 8001bd0:	7852      	ldrb	r2, [r2, #1]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fccd 	bl	8000574 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001be2:	f7fe fd31 	bl	8000648 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe ff3d 	bl	8000a6c <__aeabi_d2f>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	607b      	str	r3, [r7, #4]

		      int top = temp;
 8001bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfe:	ee17 3a90 	vmov	r3, s15
 8001c02:	603b      	str	r3, [r7, #0]

		      usb_printf("Tmp117 Temp %d [%X, %X]\r\n", top, rbuf[0], rbuf[1]);
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <main+0x244>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <main+0x244>)
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	4816      	ldr	r0, [pc, #88]	; (8001c6c <main+0x248>)
 8001c12:	f7ff fb99 	bl	8001348 <usb_printf>
		  }




		  test_enable = 0;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <main+0x224>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
	  }


	  // blink leds
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8001c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c20:	4813      	ldr	r0, [pc, #76]	; (8001c70 <main+0x24c>)
 8001c22:	f001 fe32 	bl	800388a <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8001c26:	2064      	movs	r0, #100	; 0x64
 8001c28:	f001 f8b0 	bl	8002d8c <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001c2c:	2140      	movs	r1, #64	; 0x40
 8001c2e:	4803      	ldr	r0, [pc, #12]	; (8001c3c <main+0x218>)
 8001c30:	f001 fe2b 	bl	800388a <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8001c34:	2064      	movs	r0, #100	; 0x64
 8001c36:	f001 f8a9 	bl	8002d8c <HAL_Delay>
  	  if (test_enable)
 8001c3a:	e737      	b.n	8001aac <main+0x88>
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020000 	.word	0x40020000
 8001c44:	080106ac 	.word	0x080106ac
 8001c48:	200006f4 	.word	0x200006f4
 8001c4c:	200007f8 	.word	0x200007f8
 8001c50:	200007fc 	.word	0x200007fc
 8001c54:	20000224 	.word	0x20000224
 8001c58:	20000800 	.word	0x20000800
 8001c5c:	080106c0 	.word	0x080106c0
 8001c60:	080106d4 	.word	0x080106d4
 8001c64:	20000804 	.word	0x20000804
 8001c68:	20000808 	.word	0x20000808
 8001c6c:	080106fc 	.word	0x080106fc
 8001c70:	40020800 	.word	0x40020800

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b094      	sub	sp, #80	; 0x50
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	2230      	movs	r2, #48	; 0x30
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00d ff56 	bl	800fb34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <SystemClock_Config+0xcc>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <SystemClock_Config+0xcc>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <SystemClock_Config+0xcc>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001cec:	2360      	movs	r3, #96	; 0x60
 8001cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fef5 	bl	8005aec <HAL_RCC_OscConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d08:	f000 fba4 	bl	8002454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f984 	bl	8006034 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d32:	f000 fb8f 	bl	8002454 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3750      	adds	r7, #80	; 0x50
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000

08001d48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <MX_ADC1_Init+0x9c>)
 8001d5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <MX_ADC1_Init+0xa0>)
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d92:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da6:	480e      	ldr	r0, [pc, #56]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001da8:	f001 f814 	bl	8002dd4 <HAL_ADC_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001db2:	f000 fb4f 	bl	8002454 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001db6:	230b      	movs	r3, #11
 8001db8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_ADC1_Init+0x98>)
 8001dc8:	f001 f848 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001dd2:	f000 fb3f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000194 	.word	0x20000194
 8001de4:	40012000 	.word	0x40012000
 8001de8:	0f000001 	.word	0x0f000001

08001dec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <MX_ADC2_Init+0x9c>)
 8001e02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <MX_ADC2_Init+0xa0>)
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e4a:	480e      	ldr	r0, [pc, #56]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e4c:	f000 ffc2 	bl	8002dd4 <HAL_ADC_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001e56:	f000 fafd 	bl	8002454 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e66:	463b      	mov	r3, r7
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_ADC2_Init+0x98>)
 8001e6c:	f000 fff6 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001e76:	f000 faed 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200001dc 	.word	0x200001dc
 8001e88:	40012100 	.word	0x40012100
 8001e8c:	0f000001 	.word	0x0f000001

08001e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <MX_I2C1_Init+0x78>)
 8001e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <MX_I2C1_Init+0x7c>)
 8001e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eca:	480e      	ldr	r0, [pc, #56]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ecc:	f001 fcf8 	bl	80038c0 <HAL_I2C_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ed6:	f000 fabd 	bl	8002454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4809      	ldr	r0, [pc, #36]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ede:	f002 f9d5 	bl	800428c <HAL_I2CEx_ConfigAnalogFilter>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ee8:	f000 fab4 	bl	8002454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_I2C1_Init+0x74>)
 8001ef0:	f002 fa17 	bl	8004322 <HAL_I2CEx_ConfigDigitalFilter>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f000 faab 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000224 	.word	0x20000224
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	00303d5b 	.word	0x00303d5b

08001f10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <MX_SPI1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f5e:	2207      	movs	r2, #7
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_SPI1_Init+0x74>)
 8001f70:	f004 fdd0 	bl	8006b14 <HAL_SPI_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f000 fa6b 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000278 	.word	0x20000278
 8001f88:	40013000 	.word	0x40013000

08001f8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_SPI2_Init+0x74>)
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <MX_SPI2_Init+0x78>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <MX_SPI2_Init+0x74>)
 8001f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fa6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001faa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fda:	2207      	movs	r2, #7
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_SPI2_Init+0x74>)
 8001fec:	f004 fd92 	bl	8006b14 <HAL_SPI_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ff6:	f000 fa2d 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200002dc 	.word	0x200002dc
 8002004:	40003800 	.word	0x40003800

08002008 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_SPI3_Init+0x74>)
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <MX_SPI3_Init+0x78>)
 8002010:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_SPI3_Init+0x74>)
 8002014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002018:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_SPI3_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <MX_SPI3_Init+0x74>)
 8002022:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002026:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_SPI3_Init+0x74>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <MX_SPI3_Init+0x74>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_SPI3_Init+0x74>)
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_SPI3_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_SPI3_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_SPI3_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_SPI3_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_SPI3_Init+0x74>)
 8002056:	2207      	movs	r2, #7
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <MX_SPI3_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_SPI3_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_SPI3_Init+0x74>)
 8002068:	f004 fd54 	bl	8006b14 <HAL_SPI_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002072:	f000 f9ef 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000340 	.word	0x20000340
 8002080:	40003c00 	.word	0x40003c00

08002084 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_UART4_Init+0x58>)
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <MX_UART4_Init+0x5c>)
 800208c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <MX_UART4_Init+0x58>)
 8002090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002094:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_UART4_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_UART4_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_UART4_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_UART4_Init+0x58>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_UART4_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_UART4_Init+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_UART4_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_UART4_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_UART4_Init+0x58>)
 80020c8:	f005 fc84 	bl	80079d4 <HAL_UART_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80020d2:	f000 f9bf 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200003a4 	.word	0x200003a4
 80020e0:	40004c00 	.word	0x40004c00

080020e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_UART5_Init+0x58>)
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <MX_UART5_Init+0x5c>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_UART5_Init+0x58>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_UART5_Init+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_UART5_Init+0x58>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_UART5_Init+0x58>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_UART5_Init+0x58>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_UART5_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_UART5_Init+0x58>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_UART5_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_UART5_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_UART5_Init+0x58>)
 8002128:	f005 fc54 	bl	80079d4 <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002132:	f000 f98f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000042c 	.word	0x2000042c
 8002140:	40005000 	.word	0x40005000

08002144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_USART1_UART_Init+0x58>)
 800214a:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <MX_USART1_UART_Init+0x5c>)
 800214c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <MX_USART1_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <MX_USART1_UART_Init+0x58>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <MX_USART1_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <MX_USART1_UART_Init+0x58>)
 8002188:	f005 fc24 	bl	80079d4 <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002192:	f000 f95f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200004b4 	.word	0x200004b4
 80021a0:	40011000 	.word	0x40011000

080021a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <MX_USART2_UART_Init+0x5c>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_USART2_UART_Init+0x58>)
 80021e8:	f005 fbf4 	bl	80079d4 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021f2:	f000 f92f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000053c 	.word	0x2000053c
 8002200:	40004400 	.word	0x40004400

08002204 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_USART3_UART_Init+0x58>)
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <MX_USART3_UART_Init+0x5c>)
 800220c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_USART3_UART_Init+0x58>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_USART3_UART_Init+0x58>)
 800222a:	220c      	movs	r2, #12
 800222c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_USART3_UART_Init+0x58>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_USART3_UART_Init+0x58>)
 8002248:	f005 fbc4 	bl	80079d4 <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002252:	f000 f8ff 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200005c4 	.word	0x200005c4
 8002260:	40004800 	.word	0x40004800

08002264 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <MX_USART6_UART_Init+0x58>)
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <MX_USART6_UART_Init+0x5c>)
 800226c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <MX_USART6_UART_Init+0x58>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART6_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <MX_USART6_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART6_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART6_UART_Init+0x58>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART6_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART6_UART_Init+0x58>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART6_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART6_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART6_UART_Init+0x58>)
 80022a8:	f005 fb94 	bl	80079d4 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80022b2:	f000 f8cf 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000064c 	.word	0x2000064c
 80022c0:	40011400 	.word	0x40011400

080022c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <MX_GPIO_Init+0x180>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a59      	ldr	r2, [pc, #356]	; (8002444 <MX_GPIO_Init+0x180>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b57      	ldr	r3, [pc, #348]	; (8002444 <MX_GPIO_Init+0x180>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f2:	4b54      	ldr	r3, [pc, #336]	; (8002444 <MX_GPIO_Init+0x180>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a53      	ldr	r2, [pc, #332]	; (8002444 <MX_GPIO_Init+0x180>)
 80022f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <MX_GPIO_Init+0x180>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b4e      	ldr	r3, [pc, #312]	; (8002444 <MX_GPIO_Init+0x180>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a4d      	ldr	r2, [pc, #308]	; (8002444 <MX_GPIO_Init+0x180>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <MX_GPIO_Init+0x180>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002322:	4b48      	ldr	r3, [pc, #288]	; (8002444 <MX_GPIO_Init+0x180>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a47      	ldr	r2, [pc, #284]	; (8002444 <MX_GPIO_Init+0x180>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <MX_GPIO_Init+0x180>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800233a:	4b42      	ldr	r3, [pc, #264]	; (8002444 <MX_GPIO_Init+0x180>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a41      	ldr	r2, [pc, #260]	; (8002444 <MX_GPIO_Init+0x180>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <MX_GPIO_Init+0x180>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 8002352:	2200      	movs	r2, #0
 8002354:	f24a 3101 	movw	r1, #41729	; 0xa301
 8002358:	483b      	ldr	r0, [pc, #236]	; (8002448 <MX_GPIO_Init+0x184>)
 800235a:	f001 fa7d 	bl	8003858 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	2110      	movs	r1, #16
 8002362:	483a      	ldr	r0, [pc, #232]	; (800244c <MX_GPIO_Init+0x188>)
 8002364:	f001 fa78 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002368:	2200      	movs	r2, #0
 800236a:	f648 4143 	movw	r1, #35907	; 0x8c43
 800236e:	4838      	ldr	r0, [pc, #224]	; (8002450 <MX_GPIO_Init+0x18c>)
 8002370:	f001 fa72 	bl	8003858 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI3_CS_Pin, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800237a:	4835      	ldr	r0, [pc, #212]	; (8002450 <MX_GPIO_Init+0x18c>)
 800237c:	f001 fa6c 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002386:	4831      	ldr	r0, [pc, #196]	; (800244c <MX_GPIO_Init+0x188>)
 8002388:	f001 fa66 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED0_Pin PC0 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 800238c:	f24a 3301 	movw	r3, #41729	; 0xa301
 8002390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4828      	ldr	r0, [pc, #160]	; (8002448 <MX_GPIO_Init+0x184>)
 80023a6:	f001 f8bb 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 80023aa:	f244 0310 	movw	r3, #16400	; 0x4010
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4821      	ldr	r0, [pc, #132]	; (8002448 <MX_GPIO_Init+0x184>)
 80023c2:	f001 f8ad 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80023c6:	2310      	movs	r3, #16
 80023c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	481b      	ldr	r0, [pc, #108]	; (800244c <MX_GPIO_Init+0x188>)
 80023de:	f001 f89f 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB15 LED1_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80023e2:	f648 43c3 	movw	r3, #36035	; 0x8cc3
 80023e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|LED1_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4815      	ldr	r0, [pc, #84]	; (8002450 <MX_GPIO_Init+0x18c>)
 80023fc:	f001 f890 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240a:	2301      	movs	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_GPIO_Init+0x18c>)
 800241a:	f001 f881 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800241e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4619      	mov	r1, r3
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_GPIO_Init+0x188>)
 8002438:	f001 f872 	bl	8003520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800243c:	bf00      	nop
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	40020800 	.word	0x40020800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020400 	.word	0x40020400

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	e7fe      	b.n	800245c <Error_Handler+0x8>
	...

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_MspInit+0x44>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_MspInit+0x44>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_MspInit+0x44>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_MspInit+0x44>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_MspInit+0x44>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_MspInit+0x44>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d124      	bne.n	8002514 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a29      	ldr	r2, [pc, #164]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fe:	2303      	movs	r3, #3
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	481a      	ldr	r0, [pc, #104]	; (8002578 <HAL_ADC_MspInit+0xd0>)
 800250e:	f001 f807 	bl	8003520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002512:	e028      	b.n	8002566 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_ADC_MspInit+0xd4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d123      	bne.n	8002566 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	4a14      	ldr	r2, [pc, #80]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 8002524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002528:	6453      	str	r3, [r2, #68]	; 0x44
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800254e:	2304      	movs	r3, #4
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002552:	2303      	movs	r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <HAL_ADC_MspInit+0xd0>)
 8002562:	f000 ffdd 	bl	8003520 <HAL_GPIO_Init>
}
 8002566:	bf00      	nop
 8002568:	3730      	adds	r7, #48	; 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40012000 	.word	0x40012000
 8002574:	40023800 	.word	0x40023800
 8002578:	40020800 	.word	0x40020800
 800257c:	40012100 	.word	0x40012100

08002580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0aa      	sub	sp, #168	; 0xa8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00d fac7 	bl	800fb34 <memset>
  if(hi2c->Instance==I2C1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_I2C_MspInit+0xb4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d13c      	bne.n	800262a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 ff5e 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025ca:	f7ff ff43 	bl	8002454 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_I2C_MspInit+0xb8>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_I2C_MspInit+0xb8>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_I2C_MspInit+0xb8>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ee:	2312      	movs	r3, #18
 80025f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002600:	2304      	movs	r3, #4
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800260a:	4619      	mov	r1, r3
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <HAL_I2C_MspInit+0xbc>)
 800260e:	f000 ff87 	bl	8003520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_I2C_MspInit+0xb8>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_I2C_MspInit+0xb8>)
 8002618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_I2C_MspInit+0xb8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800262a:	bf00      	nop
 800262c:	37a8      	adds	r7, #168	; 0xa8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40005400 	.word	0x40005400
 8002638:	40023800 	.word	0x40023800
 800263c:	40020400 	.word	0x40020400

08002640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08e      	sub	sp, #56	; 0x38
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a53      	ldr	r2, [pc, #332]	; (80027ac <HAL_SPI_MspInit+0x16c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d128      	bne.n	80026b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a4c      	ldr	r2, [pc, #304]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002692:	23e0      	movs	r3, #224	; 0xe0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a2:	2305      	movs	r3, #5
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026aa:	4619      	mov	r1, r3
 80026ac:	4841      	ldr	r0, [pc, #260]	; (80027b4 <HAL_SPI_MspInit+0x174>)
 80026ae:	f000 ff37 	bl	8003520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026b2:	e077      	b.n	80027a4 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3f      	ldr	r2, [pc, #252]	; (80027b8 <HAL_SPI_MspInit+0x178>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d145      	bne.n	800274a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a3b      	ldr	r2, [pc, #236]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a35      	ldr	r2, [pc, #212]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002706:	2308      	movs	r3, #8
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002716:	2305      	movs	r3, #5
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	4826      	ldr	r0, [pc, #152]	; (80027bc <HAL_SPI_MspInit+0x17c>)
 8002722:	f000 fefd 	bl	8003520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002726:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002738:	2305      	movs	r3, #5
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002740:	4619      	mov	r1, r3
 8002742:	481f      	ldr	r0, [pc, #124]	; (80027c0 <HAL_SPI_MspInit+0x180>)
 8002744:	f000 feec 	bl	8003520 <HAL_GPIO_Init>
}
 8002748:	e02c      	b.n	80027a4 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_SPI_MspInit+0x184>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d127      	bne.n	80027a4 <HAL_SPI_MspInit+0x164>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 800275a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275e:	6413      	str	r3, [r2, #64]	; 0x40
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	6313      	str	r3, [r2, #48]	; 0x30
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_SPI_MspInit+0x170>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002784:	2338      	movs	r3, #56	; 0x38
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002794:	2306      	movs	r3, #6
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279c:	4619      	mov	r1, r3
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <HAL_SPI_MspInit+0x180>)
 80027a0:	f000 febe 	bl	8003520 <HAL_GPIO_Init>
}
 80027a4:	bf00      	nop
 80027a6:	3738      	adds	r7, #56	; 0x38
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013000 	.word	0x40013000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40003800 	.word	0x40003800
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40003c00 	.word	0x40003c00

080027c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b4      	sub	sp, #208	; 0xd0
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00d f9a3 	bl	800fb34 <memset>
  if(huart->Instance==UART4)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4ab6      	ldr	r2, [pc, #728]	; (8002acc <HAL_UART_MspInit+0x304>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d13d      	bne.n	8002874 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002804:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fe39 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002814:	f7ff fe1e 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002818:	4bad      	ldr	r3, [pc, #692]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4aac      	ldr	r2, [pc, #688]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 800281e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
 8002824:	4baa      	ldr	r3, [pc, #680]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4ba7      	ldr	r3, [pc, #668]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4aa6      	ldr	r2, [pc, #664]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6313      	str	r3, [r2, #48]	; 0x30
 800283c:	4ba4      	ldr	r3, [pc, #656]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002848:	2303      	movs	r3, #3
 800284a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002860:	2308      	movs	r3, #8
 8002862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800286a:	4619      	mov	r1, r3
 800286c:	4899      	ldr	r0, [pc, #612]	; (8002ad4 <HAL_UART_MspInit+0x30c>)
 800286e:	f000 fe57 	bl	8003520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002872:	e17f      	b.n	8002b74 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==UART5)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a97      	ldr	r2, [pc, #604]	; (8002ad8 <HAL_UART_MspInit+0x310>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d15f      	bne.n	800293e <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800287e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fdf6 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800289a:	f7ff fddb 	bl	8002454 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800289e:	4b8c      	ldr	r3, [pc, #560]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a8b      	ldr	r2, [pc, #556]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b89      	ldr	r3, [pc, #548]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a85      	ldr	r2, [pc, #532]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b83      	ldr	r3, [pc, #524]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ce:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a7f      	ldr	r2, [pc, #508]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b7d      	ldr	r3, [pc, #500]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002900:	2308      	movs	r3, #8
 8002902:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800290a:	4619      	mov	r1, r3
 800290c:	4873      	ldr	r0, [pc, #460]	; (8002adc <HAL_UART_MspInit+0x314>)
 800290e:	f000 fe07 	bl	8003520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002912:	2304      	movs	r3, #4
 8002914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800292a:	2308      	movs	r3, #8
 800292c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002930:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002934:	4619      	mov	r1, r3
 8002936:	486a      	ldr	r0, [pc, #424]	; (8002ae0 <HAL_UART_MspInit+0x318>)
 8002938:	f000 fdf2 	bl	8003520 <HAL_GPIO_Init>
}
 800293c:	e11a      	b.n	8002b74 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a68      	ldr	r2, [pc, #416]	; (8002ae4 <HAL_UART_MspInit+0x31c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d13c      	bne.n	80029c2 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800294c:	2300      	movs	r3, #0
 800294e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002950:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002954:	4618      	mov	r0, r3
 8002956:	f003 fd93 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002960:	f7ff fd78 	bl	8002454 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002964:	4b5a      	ldr	r3, [pc, #360]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 800296a:	f043 0310 	orr.w	r3, r3, #16
 800296e:	6453      	str	r3, [r2, #68]	; 0x44
 8002970:	4b57      	ldr	r3, [pc, #348]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	4b54      	ldr	r3, [pc, #336]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a53      	ldr	r2, [pc, #332]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002994:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029ae:	2307      	movs	r3, #7
 80029b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029b8:	4619      	mov	r1, r3
 80029ba:	4846      	ldr	r0, [pc, #280]	; (8002ad4 <HAL_UART_MspInit+0x30c>)
 80029bc:	f000 fdb0 	bl	8003520 <HAL_GPIO_Init>
}
 80029c0:	e0d8      	b.n	8002b74 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_UART_MspInit+0x320>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d13b      	bne.n	8002a44 <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029d0:	2300      	movs	r3, #0
 80029d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fd51 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_UART_MspInit+0x220>
      Error_Handler();
 80029e4:	f7ff fd36 	bl	8002454 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029e8:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a30:	2307      	movs	r3, #7
 8002a32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4825      	ldr	r0, [pc, #148]	; (8002ad4 <HAL_UART_MspInit+0x30c>)
 8002a3e:	f000 fd6f 	bl	8003520 <HAL_GPIO_Init>
}
 8002a42:	e097      	b.n	8002b74 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART3)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a28      	ldr	r2, [pc, #160]	; (8002aec <HAL_UART_MspInit+0x324>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d150      	bne.n	8002af0 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fd0e 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_UART_MspInit+0x2a6>
      Error_Handler();
 8002a6a:	f7ff fcf3 	bl	8002454 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_UART_MspInit+0x308>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab8:	2307      	movs	r3, #7
 8002aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <HAL_UART_MspInit+0x314>)
 8002ac6:	f000 fd2b 	bl	8003520 <HAL_GPIO_Init>
}
 8002aca:	e053      	b.n	8002b74 <HAL_UART_MspInit+0x3ac>
 8002acc:	40004c00 	.word	0x40004c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40005000 	.word	0x40005000
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <HAL_UART_MspInit+0x3b4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d13c      	bne.n	8002b74 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fcb8 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_UART_MspInit+0x352>
      Error_Handler();
 8002b16:	f7ff fc9d 	bl	8002454 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_UART_MspInit+0x3b8>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_UART_MspInit+0x3b8>)
 8002b20:	f043 0320 	orr.w	r3, r3, #32
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <HAL_UART_MspInit+0x3b8>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_UART_MspInit+0x3b8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_UART_MspInit+0x3b8>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_UART_MspInit+0x3b8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4a:	23c0      	movs	r3, #192	; 0xc0
 8002b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b62:	2308      	movs	r3, #8
 8002b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_UART_MspInit+0x3bc>)
 8002b70:	f000 fcd6 	bl	8003520 <HAL_GPIO_Init>
}
 8002b74:	bf00      	nop
 8002b76:	37d0      	adds	r7, #208	; 0xd0
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40011400 	.word	0x40011400
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020800 	.word	0x40020800

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 f8ba 	bl	8002d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <OTG_FS_IRQHandler+0x10>)
 8002be2:	f001 fd30 	bl	8004646 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20001d3c 	.word	0x20001d3c

08002bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <_sbrk+0x5c>)
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <_sbrk+0x60>)
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <_sbrk+0x64>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <_sbrk+0x68>)
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <_sbrk+0x64>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d207      	bcs.n	8002c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c20:	f00c ffa0 	bl	800fb64 <__errno>
 8002c24:	4603      	mov	r3, r0
 8002c26:	220c      	movs	r2, #12
 8002c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	e009      	b.n	8002c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <_sbrk+0x64>)
 8002c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20040000 	.word	0x20040000
 8002c50:	00000400 	.word	0x00000400
 8002c54:	2000080c 	.word	0x2000080c
 8002c58:	20002390 	.word	0x20002390

08002c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <SystemInit+0x20>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <SystemInit+0x20>)
 8002c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c86:	490e      	ldr	r1, [pc, #56]	; (8002cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c9c:	4c0b      	ldr	r4, [pc, #44]	; (8002ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002caa:	f7ff ffd7 	bl	8002c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cae:	f00c ff5f 	bl	800fb70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb2:	f7fe feb7 	bl	8001a24 <main>
  bx  lr    
 8002cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc0:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002cc4:	08010980 	.word	0x08010980
  ldr r2, =_sbss
 8002cc8:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002ccc:	2000238c 	.word	0x2000238c

08002cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd0:	e7fe      	b.n	8002cd0 <ADC_IRQHandler>

08002cd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	f000 fbe0 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cdc:	200f      	movs	r0, #15
 8002cde:	f000 f805 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce2:	f7ff fbbd 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x54>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fbfb 	bl	8003506 <HAL_SYSTICK_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00e      	b.n	8002d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d80a      	bhi.n	8002d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f000 fbc3 	bl	80034b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d2c:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_InitTick+0x5c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000004 	.word	0x20000004
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	20000008 	.word	0x20000008

08002d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x20>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x24>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_IncTick+0x24>)
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000000c 	.word	0x2000000c
 8002d70:	20000810 	.word	0x20000810

08002d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_GetTick+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000810 	.word	0x20000810

08002d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff ffee 	bl	8002d74 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d005      	beq.n	8002db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_Delay+0x44>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002db2:	bf00      	nop
 8002db4:	f7ff ffde 	bl	8002d74 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f7      	bhi.n	8002db4 <HAL_Delay+0x28>
  {
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e031      	b.n	8002e4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fb58 	bl	80024a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d116      	bne.n	8002e40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_ADC_Init+0x84>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	f043 0202 	orr.w	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f970 	bl	8003108 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e3e:	e001      	b.n	8002e44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	ffffeefd 	.word	0xffffeefd

08002e5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e136      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x28a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d93a      	bls.n	8002efe <HAL_ADC_ConfigChannel+0xa2>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e90:	d035      	beq.n	8002efe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b1e      	subs	r3, #30
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a8d      	ldr	r2, [pc, #564]	; (80030f4 <HAL_ADC_ConfigChannel+0x298>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68d9      	ldr	r1, [r3, #12]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	061a      	lsls	r2, r3, #24
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed6:	e035      	b.n	8002f44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68d9      	ldr	r1, [r3, #12]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4403      	add	r3, r0
 8002ef0:	3b1e      	subs	r3, #30
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efc:	e022      	b.n	8002f44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	2207      	movs	r2, #7
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	400a      	ands	r2, r1
 8002f20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4403      	add	r3, r0
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d824      	bhi.n	8002f96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b05      	subs	r3, #5
 8002f5e:	221f      	movs	r2, #31
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43da      	mvns	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b05      	subs	r3, #5
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34
 8002f94:	e04c      	b.n	8003030 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d824      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b23      	subs	r3, #35	; 0x23
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b23      	subs	r3, #35	; 0x23
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe6:	e023      	b.n	8003030 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b41      	subs	r3, #65	; 0x41
 8002ffa:	221f      	movs	r2, #31
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43da      	mvns	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	400a      	ands	r2, r1
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b41      	subs	r3, #65	; 0x41
 8003024:	fa00 f203 	lsl.w	r2, r0, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <HAL_ADC_ConfigChannel+0x29c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10a      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x1f4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003042:	d105      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 800304a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800304e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_ADC_ConfigChannel+0x29c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10f      	bne.n	800307a <HAL_ADC_ConfigChannel+0x21e>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b12      	cmp	r3, #18
 8003060:	d10b      	bne.n	800307a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 8003068:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800306c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 8003074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003078:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_ADC_ConfigChannel+0x29c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d12b      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x280>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_ADC_ConfigChannel+0x298>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x23a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b11      	cmp	r3, #17
 8003094:	d122      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003096:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 800309c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030a0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <HAL_ADC_ConfigChannel+0x2a0>)
 80030a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <HAL_ADC_ConfigChannel+0x298>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_ADC_ConfigChannel+0x2a4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_ADC_ConfigChannel+0x2a8>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9a      	lsrs	r2, r3, #18
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030ce:	e002      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f9      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	10000012 	.word	0x10000012
 80030f8:	40012000 	.word	0x40012000
 80030fc:	40012300 	.word	0x40012300
 8003100:	20000004 	.word	0x20000004
 8003104:	431bde83 	.word	0x431bde83

08003108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003110:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <ADC_Init+0x1ec>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a77      	ldr	r2, [pc, #476]	; (80032f4 <ADC_Init+0x1ec>)
 8003116:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800311a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800311c:	4b75      	ldr	r3, [pc, #468]	; (80032f4 <ADC_Init+0x1ec>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4973      	ldr	r1, [pc, #460]	; (80032f4 <ADC_Init+0x1ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800315c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <ADC_Init+0x1f0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	e00f      	b.n	8003202 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003200:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0202 	bic.w	r2, r2, #2
 8003210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	005a      	lsls	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800324e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	3b01      	subs	r3, #1
 800325c:	035a      	lsls	r2, r3, #13
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	e007      	b.n	8003278 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	3b01      	subs	r3, #1
 8003294:	051a      	lsls	r2, r3, #20
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ba:	025a      	lsls	r2, r3, #9
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6899      	ldr	r1, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	029a      	lsls	r2, r3, #10
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012300 	.word	0x40012300
 80032f8:	0f000001 	.word	0x0f000001

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <__NVIC_SetPriorityGrouping+0x40>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	4313      	orrs	r3, r2
 8003328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <__NVIC_SetPriorityGrouping+0x40>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60d3      	str	r3, [r2, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	05fa0000 	.word	0x05fa0000

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff3e 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff31 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	e169      	b.n	8003814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003540:	2201      	movs	r2, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	f040 8158 	bne.w	800380e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d005      	beq.n	8003576 <HAL_GPIO_Init+0x56>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d130      	bne.n	80035d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	2203      	movs	r2, #3
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ac:	2201      	movs	r2, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 0201 	and.w	r2, r3, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d017      	beq.n	8003614 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d123      	bne.n	8003668 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	08da      	lsrs	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3208      	adds	r2, #8
 8003628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	69b9      	ldr	r1, [r7, #24]
 8003664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0203 	and.w	r2, r3, #3
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80b2 	beq.w	800380e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036aa:	4b60      	ldr	r3, [pc, #384]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a5f      	ldr	r2, [pc, #380]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b5d      	ldr	r3, [pc, #372]	; (800382c <HAL_GPIO_Init+0x30c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036c2:	4a5b      	ldr	r2, [pc, #364]	; (8003830 <HAL_GPIO_Init+0x310>)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3302      	adds	r3, #2
 80036ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	220f      	movs	r2, #15
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_GPIO_Init+0x314>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02b      	beq.n	8003746 <HAL_GPIO_Init+0x226>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a51      	ldr	r2, [pc, #324]	; (8003838 <HAL_GPIO_Init+0x318>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d025      	beq.n	8003742 <HAL_GPIO_Init+0x222>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a50      	ldr	r2, [pc, #320]	; (800383c <HAL_GPIO_Init+0x31c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01f      	beq.n	800373e <HAL_GPIO_Init+0x21e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4f      	ldr	r2, [pc, #316]	; (8003840 <HAL_GPIO_Init+0x320>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_GPIO_Init+0x21a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4e      	ldr	r2, [pc, #312]	; (8003844 <HAL_GPIO_Init+0x324>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x216>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <HAL_GPIO_Init+0x328>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x212>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_GPIO_Init+0x32c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x20e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_GPIO_Init+0x330>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x20a>
 8003726:	2307      	movs	r3, #7
 8003728:	e00e      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800372a:	2308      	movs	r3, #8
 800372c:	e00c      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800372e:	2306      	movs	r3, #6
 8003730:	e00a      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003732:	2305      	movs	r3, #5
 8003734:	e008      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003736:	2304      	movs	r3, #4
 8003738:	e006      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800373a:	2303      	movs	r3, #3
 800373c:	e004      	b.n	8003748 <HAL_GPIO_Init+0x228>
 800373e:	2302      	movs	r3, #2
 8003740:	e002      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_GPIO_Init+0x228>
 8003746:	2300      	movs	r3, #0
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f002 0203 	and.w	r2, r2, #3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4093      	lsls	r3, r2
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003758:	4935      	ldr	r1, [pc, #212]	; (8003830 <HAL_GPIO_Init+0x310>)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	089b      	lsrs	r3, r3, #2
 800375e:	3302      	adds	r3, #2
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_GPIO_Init+0x334>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800378a:	4a32      	ldr	r2, [pc, #200]	; (8003854 <HAL_GPIO_Init+0x334>)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_GPIO_Init+0x334>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_GPIO_Init+0x334>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_GPIO_Init+0x334>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b0f      	cmp	r3, #15
 8003818:	f67f ae92 	bls.w	8003540 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	40013800 	.word	0x40013800
 8003834:	40020000 	.word	0x40020000
 8003838:	40020400 	.word	0x40020400
 800383c:	40020800 	.word	0x40020800
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000
 8003848:	40021400 	.word	0x40021400
 800384c:	40021800 	.word	0x40021800
 8003850:	40021c00 	.word	0x40021c00
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003874:	e003      	b.n	800387e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	619a      	str	r2, [r3, #24]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800389c:	887a      	ldrh	r2, [r7, #2]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	041a      	lsls	r2, r3, #16
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43d9      	mvns	r1, r3
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	400b      	ands	r3, r1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	619a      	str	r2, [r3, #24]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe fe4a 	bl	8002580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d107      	bne.n	800393a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	e006      	b.n	8003948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d104      	bne.n	800395a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_I2C_Init+0x11c>)
 8003966:	430b      	orrs	r3, r1
 8003968:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003978:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69d9      	ldr	r1, [r3, #28]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	02008000 	.word	0x02008000

080039e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	461a      	mov	r2, r3
 80039ec:	460b      	mov	r3, r1
 80039ee:	817b      	strh	r3, [r7, #10]
 80039f0:	4613      	mov	r3, r2
 80039f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	f040 80da 	bne.w	8003bb6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_I2C_Master_Transmit+0x30>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e0d3      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1d8>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a18:	f7ff f9ac 	bl	8002d74 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2319      	movs	r3, #25
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f9e6 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0be      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2221      	movs	r2, #33	; 0x21
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2210      	movs	r2, #16
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	893a      	ldrh	r2, [r7, #8]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2bff      	cmp	r3, #255	; 0xff
 8003a6a:	d90e      	bls.n	8003a8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	4b51      	ldr	r3, [pc, #324]	; (8003bc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fbd0 	bl	8004228 <I2C_TransferConfig>
 8003a88:	e06c      	b.n	8003b64 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	4b48      	ldr	r3, [pc, #288]	; (8003bc0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fbbf 	bl	8004228 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003aaa:	e05b      	b.n	8003b64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	6a39      	ldr	r1, [r7, #32]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f9e3 	bl	8003e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e07b      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d034      	beq.n	8003b64 <HAL_I2C_Master_Transmit+0x184>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d130      	bne.n	8003b64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f975 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e04d      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2bff      	cmp	r3, #255	; 0xff
 8003b24:	d90e      	bls.n	8003b44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	22ff      	movs	r2, #255	; 0xff
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	8979      	ldrh	r1, [r7, #10]
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fb73 	bl	8004228 <I2C_TransferConfig>
 8003b42:	e00f      	b.n	8003b64 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	8979      	ldrh	r1, [r7, #10]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fb62 	bl	8004228 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d19e      	bne.n	8003aac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	6a39      	ldr	r1, [r7, #32]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f9c2 	bl	8003efc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e01a      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2220      	movs	r2, #32
 8003b88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003b96:	400b      	ands	r3, r1
 8003b98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	80002000 	.word	0x80002000
 8003bc4:	fe00e800 	.word	0xfe00e800

08003bc8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	817b      	strh	r3, [r7, #10]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	f040 80db 	bne.w	8003da0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2C_Master_Receive+0x30>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0d4      	b.n	8003da2 <HAL_I2C_Master_Receive+0x1da>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c00:	f7ff f8b8 	bl	8002d74 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2319      	movs	r3, #25
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8f2 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0bf      	b.n	8003da2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2222      	movs	r2, #34	; 0x22
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	893a      	ldrh	r2, [r7, #8]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2bff      	cmp	r3, #255	; 0xff
 8003c52:	d90e      	bls.n	8003c72 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	22ff      	movs	r2, #255	; 0xff
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	4b52      	ldr	r3, [pc, #328]	; (8003dac <HAL_I2C_Master_Receive+0x1e4>)
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fadc 	bl	8004228 <I2C_TransferConfig>
 8003c70:	e06d      	b.n	8003d4e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_I2C_Master_Receive+0x1e4>)
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 facb 	bl	8004228 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c92:	e05c      	b.n	8003d4e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	6a39      	ldr	r1, [r7, #32]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f96b 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e07c      	b.n	8003da2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d034      	beq.n	8003d4e <HAL_I2C_Master_Receive+0x186>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d130      	bne.n	8003d4e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f880 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e04d      	b.n	8003da2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2bff      	cmp	r3, #255	; 0xff
 8003d0e:	d90e      	bls.n	8003d2e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	22ff      	movs	r2, #255	; 0xff
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fa7e 	bl	8004228 <I2C_TransferConfig>
 8003d2c:	e00f      	b.n	8003d4e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	8979      	ldrh	r1, [r7, #10]
 8003d40:	2300      	movs	r3, #0
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fa6d 	bl	8004228 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d19d      	bne.n	8003c94 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	6a39      	ldr	r1, [r7, #32]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8cd 	bl	8003efc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e01a      	b.n	8003da2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2220      	movs	r2, #32
 8003d72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_I2C_Master_Receive+0x1e8>)
 8003d80:	400b      	ands	r3, r1
 8003d82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	80002400 	.word	0x80002400
 8003db0:	fe00e800 	.word	0xfe00e800

08003db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d103      	bne.n	8003dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d007      	beq.n	8003df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	619a      	str	r2, [r3, #24]
  }
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0c:	e022      	b.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d01e      	beq.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fe ffad 	bl	8002d74 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d113      	bne.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e00f      	b.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d0cd      	beq.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e88:	e02c      	b.n	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f8ea 	bl	8004068 <I2C_IsErrorOccurred>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e02a      	b.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d01e      	beq.n	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fe ff65 	bl	8002d74 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d113      	bne.n	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e007      	b.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d1cb      	bne.n	8003e8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f08:	e028      	b.n	8003f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f8aa 	bl	8004068 <I2C_IsErrorOccurred>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e026      	b.n	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fe ff29 	bl	8002d74 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d113      	bne.n	8003f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e007      	b.n	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d1cf      	bne.n	8003f0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	e064      	b.n	800404c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f86e 	bl	8004068 <I2C_IsErrorOccurred>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e062      	b.n	800405c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d138      	bne.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d105      	bne.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e04e      	b.n	800405c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d107      	bne.n	8003fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8003fda:	e002      	b.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e022      	b.n	800405c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fe fead 	bl	8002d74 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10f      	bne.n	800404c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e007      	b.n	800405c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d193      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	fe00e800 	.word	0xfe00e800

08004068 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d068      	beq.n	8004166 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2210      	movs	r2, #16
 800409a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800409c:	e049      	b.n	8004132 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d045      	beq.n	8004132 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fe fe65 	bl	8002d74 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_IsErrorOccurred+0x54>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d13a      	bne.n	8004132 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040de:	d121      	bne.n	8004124 <I2C_IsErrorOccurred+0xbc>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e6:	d01d      	beq.n	8004124 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d01a      	beq.n	8004124 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040fe:	f7fe fe39 	bl	8002d74 <HAL_GetTick>
 8004102:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004104:	e00e      	b.n	8004124 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004106:	f7fe fe35 	bl	8002d74 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b19      	cmp	r3, #25
 8004112:	d907      	bls.n	8004124 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f043 0320 	orr.w	r3, r3, #32
 800411a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004122:	e006      	b.n	8004132 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b20      	cmp	r3, #32
 8004130:	d1e9      	bne.n	8004106 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b20      	cmp	r3, #32
 800413e:	d003      	beq.n	8004148 <I2C_IsErrorOccurred+0xe0>
 8004140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0aa      	beq.n	800409e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	f043 0302 	orr.w	r3, r3, #2
 80041c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01c      	beq.n	8004216 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff fde9 	bl	8003db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <I2C_IsErrorOccurred+0x1bc>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800421a:	4618      	mov	r0, r3
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	fe00e800 	.word	0xfe00e800

08004228 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	817b      	strh	r3, [r7, #10]
 8004236:	4613      	mov	r3, r2
 8004238:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004240:	7a7b      	ldrb	r3, [r7, #9]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004248:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	4313      	orrs	r3, r2
 8004252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004256:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	0d5b      	lsrs	r3, r3, #21
 8004262:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <I2C_TransferConfig+0x60>)
 8004268:	430b      	orrs	r3, r1
 800426a:	43db      	mvns	r3, r3
 800426c:	ea02 0103 	and.w	r1, r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	03ff63ff 	.word	0x03ff63ff

0800428c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d138      	bne.n	8004314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e032      	b.n	8004316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b20      	cmp	r3, #32
 8004336:	d139      	bne.n	80043ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004342:	2302      	movs	r3, #2
 8004344:	e033      	b.n	80043ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2224      	movs	r2, #36	; 0x24
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004374:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043bc:	b08f      	sub	sp, #60	; 0x3c
 80043be:	af0a      	add	r7, sp, #40	; 0x28
 80043c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e116      	b.n	80045fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f00a ff32 	bl	800f250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f004 f86f 	bl	80084ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	687e      	ldr	r6, [r7, #4]
 8004418:	466d      	mov	r5, sp
 800441a:	f106 0410 	add.w	r4, r6, #16
 800441e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800442a:	e885 0003 	stmia.w	r5, {r0, r1}
 800442e:	1d33      	adds	r3, r6, #4
 8004430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004432:	6838      	ldr	r0, [r7, #0]
 8004434:	f003 ff20 	bl	8008278 <USB_CoreInit>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0d7      	b.n	80045fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2100      	movs	r1, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f004 f85d 	bl	8008510 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	e04a      	b.n	80044f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	333d      	adds	r3, #61	; 0x3d
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	333c      	adds	r3, #60	; 0x3c
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	b298      	uxth	r0, r3
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	3344      	adds	r3, #68	; 0x44
 8004498:	4602      	mov	r2, r0
 800449a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3340      	adds	r3, #64	; 0x40
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3348      	adds	r3, #72	; 0x48
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	334c      	adds	r3, #76	; 0x4c
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	3354      	adds	r3, #84	; 0x54
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	3301      	adds	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3af      	bcc.n	800445c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e044      	b.n	800458c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800452a:	7bfa      	ldrb	r2, [r7, #15]
 800452c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004570:	7bfa      	ldrb	r2, [r7, #15]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3301      	adds	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d3b5      	bcc.n	8004502 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	687e      	ldr	r6, [r7, #4]
 800459e:	466d      	mov	r5, sp
 80045a0:	f106 0410 	add.w	r4, r6, #16
 80045a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80045b4:	1d33      	adds	r3, r6, #4
 80045b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b8:	6838      	ldr	r0, [r7, #0]
 80045ba:	f003 fff5 	bl	80085a8 <USB_DevInit>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e014      	b.n	80045fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d102      	bne.n	80045ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f001 f97b 	bl	80058e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 f953 	bl	800989e <USB_DevDisconnect>

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004602 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_PCD_Start+0x16>
 8004614:	2302      	movs	r3, #2
 8004616:	e012      	b.n	800463e <HAL_PCD_Start+0x3c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f003 ff51 	bl	80084cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f005 f914 	bl	800985c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004646:	b590      	push	{r4, r7, lr}
 8004648:	b08d      	sub	sp, #52	; 0x34
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f005 f9d2 	bl	8009a06 <USB_GetMode>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 84b7 	bne.w	8004fd8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f005 f936 	bl	80098e0 <USB_ReadInterrupts>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 84ad 	beq.w	8004fd6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f005 f923 	bl	80098e0 <USB_ReadInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d107      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f002 0202 	and.w	r2, r2, #2
 80046b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f005 f911 	bl	80098e0 <USB_ReadInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d161      	bne.n	800478c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0210 	bic.w	r2, r2, #16
 80046d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	3304      	adds	r3, #4
 80046f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	0c5b      	lsrs	r3, r3, #17
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	2b02      	cmp	r3, #2
 8004702:	d124      	bne.n	800474e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d035      	beq.n	800477c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800471a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800471e:	b29b      	uxth	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	6a38      	ldr	r0, [r7, #32]
 8004724:	f004 ff48 	bl	80095b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004734:	441a      	add	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004746:	441a      	add	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	621a      	str	r2, [r3, #32]
 800474c:	e016      	b.n	800477c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	0c5b      	lsrs	r3, r3, #17
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	2b06      	cmp	r3, #6
 8004758:	d110      	bne.n	800477c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004760:	2208      	movs	r2, #8
 8004762:	4619      	mov	r1, r3
 8004764:	6a38      	ldr	r0, [r7, #32]
 8004766:	f004 ff27 	bl	80095b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004776:	441a      	add	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0210 	orr.w	r2, r2, #16
 800478a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f005 f8a5 	bl	80098e0 <USB_ReadInterrupts>
 8004796:	4603      	mov	r3, r0
 8004798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800479c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047a0:	f040 80a7 	bne.w	80048f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f005 f8aa 	bl	8009906 <USB_ReadDevAllOutEpInterrupt>
 80047b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80047b4:	e099      	b.n	80048ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 808e 	beq.w	80048de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f005 f8ce 	bl	800996e <USB_ReadDevOutEPInterrupt>
 80047d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	2301      	movs	r3, #1
 80047ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80047f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fef0 	bl	80055d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00c      	beq.n	800481c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	2308      	movs	r3, #8
 8004812:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 ffc6 	bl	80057a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	2310      	movs	r3, #16
 8004836:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d030      	beq.n	80048a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d109      	bne.n	8004862 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004860:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	78db      	ldrb	r3, [r3, #3]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d108      	bne.n	8004892 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	b2db      	uxtb	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f00a fe03 	bl	800f498 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2302      	movs	r3, #2
 80048a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	2320      	movs	r3, #32
 80048be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	3301      	adds	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f47f af62 	bne.w	80047b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 fff2 	bl	80098e0 <USB_ReadInterrupts>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004906:	f040 80db 	bne.w	8004ac0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f005 f813 	bl	800993a <USB_ReadDevAllInEpInterrupt>
 8004914:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800491a:	e0cd      	b.n	8004ab8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80c2 	beq.w	8004aac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f005 f839 	bl	80099aa <USB_ReadDevInEPInterrupt>
 8004938:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d057      	beq.n	80049f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	2201      	movs	r2, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	43db      	mvns	r3, r3
 800495e:	69f9      	ldr	r1, [r7, #28]
 8004960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004964:	4013      	ands	r3, r2
 8004966:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	461a      	mov	r2, r3
 8004976:	2301      	movs	r3, #1
 8004978:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d132      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334c      	adds	r3, #76	; 0x4c
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4403      	add	r3, r0
 80049a2:	3348      	adds	r3, #72	; 0x48
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4419      	add	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4403      	add	r3, r0
 80049b6:	334c      	adds	r3, #76	; 0x4c
 80049b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x3a2>
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c4:	4613      	mov	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	3354      	adds	r3, #84	; 0x54
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049e0:	461a      	mov	r2, r3
 80049e2:	2101      	movs	r1, #1
 80049e4:	f005 f842 	bl	8009a6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f00a fccd 	bl	800f38e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	461a      	mov	r2, r3
 8004a28:	2310      	movs	r3, #16
 8004a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	461a      	mov	r2, r3
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d023      	beq.n	8004a9a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a54:	6a38      	ldr	r0, [r7, #32]
 8004a56:	f003 ff15 	bl	8008884 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	3338      	adds	r3, #56	; 0x38
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	78db      	ldrb	r3, [r3, #3]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d108      	bne.n	8004a88 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f00a fd1a 	bl	800f4bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	461a      	mov	r2, r3
 8004a96:	2302      	movs	r3, #2
 8004a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fd08 	bl	80054bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	3301      	adds	r3, #1
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f47f af2e 	bne.w	800491c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f004 ff0b 	bl	80098e0 <USB_ReadInterrupts>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad4:	d122      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d108      	bne.n	8004b06 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004afc:	2100      	movs	r1, #0
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f00a fe98 	bl	800f834 <HAL_PCDEx_LPM_Callback>
 8004b04:	e002      	b.n	8004b0c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f00a fcb8 	bl	800f47c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f004 fedd 	bl	80098e0 <USB_ReadInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b30:	d112      	bne.n	8004b58 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d102      	bne.n	8004b48 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f00a fc74 	bl	800f430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f004 febf 	bl	80098e0 <USB_ReadInterrupts>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b6c:	d121      	bne.n	8004bb2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004b7c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d111      	bne.n	8004bac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f00a fe45 	bl	800f834 <HAL_PCDEx_LPM_Callback>
 8004baa:	e002      	b.n	8004bb2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f00a fc3f 	bl	800f430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f004 fe92 	bl	80098e0 <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	f040 80b7 	bne.w	8004d38 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2110      	movs	r1, #16
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 fe4d 	bl	8008884 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bee:	e046      	b.n	8004c7e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3b3      	bcc.n	8004bf0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb4:	f043 030b 	orr.w	r3, r3, #11
 8004cb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cca:	f043 030b 	orr.w	r3, r3, #11
 8004cce:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd0:	e015      	b.n	8004cfe <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f242 032b 	movw	r3, #8235	; 0x202b
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf8:	f043 030b 	orr.w	r3, r3, #11
 8004cfc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d22:	461a      	mov	r2, r3
 8004d24:	f004 fea2 	bl	8009a6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 fdcf 	bl	80098e0 <USB_ReadInterrupts>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4c:	d124      	bne.n	8004d98 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 fe66 	bl	8009a24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 fe0e 	bl	800897e <USB_GetDevSpeed>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681c      	ldr	r4, [r3, #0]
 8004d6e:	f001 fb53 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8004d72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f003 fb03 	bl	8008388 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f00a fb2b 	bl	800f3de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f004 fd9f 	bl	80098e0 <USB_ReadInterrupts>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10a      	bne.n	8004dc2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f00a fb08 	bl	800f3c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f002 0208 	and.w	r2, r2, #8
 8004dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f004 fd8a 	bl	80098e0 <USB_ReadInterrupts>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d122      	bne.n	8004e1c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004de2:	2301      	movs	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	e014      	b.n	8004e12 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb27 	bl	800545a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	3301      	adds	r3, #1
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d3e5      	bcc.n	8004de8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f004 fd5d 	bl	80098e0 <USB_ReadInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e30:	d13b      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e32:	2301      	movs	r3, #1
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
 8004e36:	e02b      	b.n	8004e90 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3340      	adds	r3, #64	; 0x40
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d115      	bne.n	8004e8a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da12      	bge.n	8004e8a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	333f      	adds	r3, #63	; 0x3f
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fae8 	bl	800545a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d3ce      	bcc.n	8004e38 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f004 fd16 	bl	80098e0 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ebe:	d155      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	e045      	b.n	8004f52 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d12e      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004eee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da2b      	bge.n	8004f4c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d121      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f48:	6053      	str	r3, [r2, #4]
            break;
 8004f4a:	e007      	b.n	8004f5c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	3301      	adds	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d3b4      	bcc.n	8004ec6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f004 fcb5 	bl	80098e0 <USB_ReadInterrupts>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d10a      	bne.n	8004f98 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f00a faac 	bl	800f4e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f004 fc9f 	bl	80098e0 <USB_ReadInterrupts>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d115      	bne.n	8004fd8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f00a fa9c 	bl	800f4fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	e000      	b.n	8004fd8 <HAL_PCD_IRQHandler+0x992>
      return;
 8004fd6:	bf00      	nop
    }
  }
}
 8004fd8:	3734      	adds	r7, #52	; 0x34
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}

08004fde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_PCD_SetAddress+0x1a>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e013      	b.n	8005020 <HAL_PCD_SetAddress+0x42>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f004 fbfd 	bl	8009810 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4603      	mov	r3, r0
 8005038:	70fb      	strb	r3, [r7, #3]
 800503a:	460b      	mov	r3, r1
 800503c:	803b      	strh	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	da0f      	bge.n	800506e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	3338      	adds	r3, #56	; 0x38
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	3304      	adds	r3, #4
 8005064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	705a      	strb	r2, [r3, #1]
 800506c:	e00f      	b.n	800508e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	3304      	adds	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	b2da      	uxtb	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800509a:	883a      	ldrh	r2, [r7, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	78ba      	ldrb	r2, [r7, #2]
 80050a4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050b8:	78bb      	ldrb	r3, [r7, #2]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d102      	bne.n	80050c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <HAL_PCD_EP_Open+0xaa>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e00e      	b.n	80050f0 <HAL_PCD_EP_Open+0xc8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f003 fc71 	bl	80089c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80050ee:	7afb      	ldrb	r3, [r7, #11]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005108:	2b00      	cmp	r3, #0
 800510a:	da0f      	bge.n	800512c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	f003 020f 	and.w	r2, r3, #15
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	3338      	adds	r3, #56	; 0x38
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	3304      	adds	r3, #4
 8005122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	705a      	strb	r2, [r3, #1]
 800512a:	e00f      	b.n	800514c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	f003 020f 	and.w	r2, r3, #15
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	3304      	adds	r3, #4
 8005144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_PCD_EP_Close+0x6e>
 8005162:	2302      	movs	r3, #2
 8005164:	e00e      	b.n	8005184 <HAL_PCD_EP_Close+0x8c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	4618      	mov	r0, r3
 8005176:	f003 fcaf 	bl	8008ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	460b      	mov	r3, r1
 800519a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800519c:	7afb      	ldrb	r3, [r7, #11]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2200      	movs	r2, #0
 80051c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2200      	movs	r2, #0
 80051cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d102      	bne.n	80051e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051e8:	7afb      	ldrb	r3, [r7, #11]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	6979      	ldr	r1, [r7, #20]
 8005200:	f003 ff96 	bl	8009130 <USB_EP0StartXfer>
 8005204:	e008      	b.n	8005218 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	f003 fd3c 	bl	8008c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	f003 020f 	and.w	r2, r3, #15
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005244:	681b      	ldr	r3, [r3, #0]
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b086      	sub	sp, #24
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	460b      	mov	r3, r1
 8005260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005262:	7afb      	ldrb	r3, [r7, #11]
 8005264:	f003 020f 	and.w	r2, r3, #15
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	3338      	adds	r3, #56	; 0x38
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	3304      	adds	r3, #4
 8005278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2201      	movs	r2, #1
 8005290:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005292:	7afb      	ldrb	r3, [r7, #11]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	b2da      	uxtb	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d102      	bne.n	80052ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052ac:	7afb      	ldrb	r3, [r7, #11]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	f003 ff34 	bl	8009130 <USB_EP0StartXfer>
 80052c8:	e008      	b.n	80052dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	f003 fcda 	bl	8008c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	f003 020f 	and.w	r2, r3, #15
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d901      	bls.n	8005304 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e050      	b.n	80053a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005308:	2b00      	cmp	r3, #0
 800530a:	da0f      	bge.n	800532c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 020f 	and.w	r2, r3, #15
 8005312:	4613      	mov	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	3338      	adds	r3, #56	; 0x38
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	3304      	adds	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	705a      	strb	r2, [r3, #1]
 800532a:	e00d      	b.n	8005348 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	4613      	mov	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	3304      	adds	r3, #4
 8005340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_PCD_EP_SetStall+0x82>
 8005364:	2302      	movs	r3, #2
 8005366:	e01e      	b.n	80053a6 <HAL_PCD_EP_SetStall+0xc0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	4618      	mov	r0, r3
 8005378:	f004 f976 	bl	8009668 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	b2d9      	uxtb	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005396:	461a      	mov	r2, r3
 8005398:	f004 fb68 	bl	8009a6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d901      	bls.n	80053cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e042      	b.n	8005452 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	da0f      	bge.n	80053f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 020f 	and.w	r2, r3, #15
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	3338      	adds	r3, #56	; 0x38
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	705a      	strb	r2, [r3, #1]
 80053f2:	e00f      	b.n	8005414 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_PCD_EP_ClrStall+0x86>
 8005430:	2302      	movs	r3, #2
 8005432:	e00e      	b.n	8005452 <HAL_PCD_EP_ClrStall+0xa4>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	4618      	mov	r0, r3
 8005444:	f004 f97e 	bl	8009744 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800546a:	2b00      	cmp	r3, #0
 800546c:	da0c      	bge.n	8005488 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	3338      	adds	r3, #56	; 0x38
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e00c      	b.n	80054a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 020f 	and.w	r2, r3, #15
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	3304      	adds	r3, #4
 80054a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f003 ff9d 	bl	80093e8 <USB_EPStopXfer>
 80054ae:	4603      	mov	r3, r0
 80054b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80054b2:	7afb      	ldrb	r3, [r7, #11]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	3338      	adds	r3, #56	; 0x38
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4413      	add	r3, r2
 80054e0:	3304      	adds	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d901      	bls.n	80054f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e06c      	b.n	80055ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	429a      	cmp	r2, r3
 8005508:	d902      	bls.n	8005510 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	3303      	adds	r3, #3
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005518:	e02b      	b.n	8005572 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	429a      	cmp	r2, r3
 800552e:	d902      	bls.n	8005536 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3303      	adds	r3, #3
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6919      	ldr	r1, [r3, #16]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800554e:	b2db      	uxtb	r3, r3
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4603      	mov	r3, r0
 8005554:	6978      	ldr	r0, [r7, #20]
 8005556:	f003 fff1 	bl	800953c <USB_WritePacket>

    ep->xfer_buff  += len;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	441a      	add	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	441a      	add	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	429a      	cmp	r2, r3
 8005586:	d809      	bhi.n	800559c <PCD_WriteEmptyTxFifo+0xe0>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005590:	429a      	cmp	r2, r3
 8005592:	d203      	bcs.n	800559c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1be      	bne.n	800551a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d811      	bhi.n	80055cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	2201      	movs	r2, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	6939      	ldr	r1, [r7, #16]
 80055c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c8:	4013      	ands	r3, r2
 80055ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	333c      	adds	r3, #60	; 0x3c
 80055f0:	3304      	adds	r3, #4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d17b      	bne.n	8005706 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d015      	beq.n	8005644 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4a61      	ldr	r2, [pc, #388]	; (80057a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	f240 80b9 	bls.w	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80b3 	beq.w	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	461a      	mov	r2, r3
 800563c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005640:	6093      	str	r3, [r2, #8]
 8005642:	e0a7      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	2320      	movs	r3, #32
 800565e:	6093      	str	r3, [r2, #8]
 8005660:	e098      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	f040 8093 	bne.w	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4a4b      	ldr	r2, [pc, #300]	; (80057a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d90f      	bls.n	8005696 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	461a      	mov	r2, r3
 800568e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005692:	6093      	str	r3, [r2, #8]
 8005694:	e07e      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	3304      	adds	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	0159      	lsls	r1, r3, #5
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	440b      	add	r3, r1
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d114      	bne.n	80056f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056e0:	461a      	mov	r2, r3
 80056e2:	2101      	movs	r1, #1
 80056e4:	f004 f9c2 	bl	8009a6c <USB_EP0_OutStart>
 80056e8:	e006      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f009 fe2a 	bl	800f358 <HAL_PCD_DataOutStageCallback>
 8005704:	e046      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d124      	bne.n	8005758 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	461a      	mov	r2, r3
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	6093      	str	r3, [r2, #8]
 800572c:	e032      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	461a      	mov	r2, r3
 8005746:	2320      	movs	r3, #32
 8005748:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f009 fe01 	bl	800f358 <HAL_PCD_DataOutStageCallback>
 8005756:	e01d      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d114      	bne.n	8005788 <PCD_EP_OutXfrComplete_int+0x1b0>
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d108      	bne.n	8005788 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005780:	461a      	mov	r2, r3
 8005782:	2100      	movs	r1, #0
 8005784:	f004 f972 	bl	8009a6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f009 fde2 	bl	800f358 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	4f54300a 	.word	0x4f54300a
 80057a4:	4f54310a 	.word	0x4f54310a

080057a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	333c      	adds	r3, #60	; 0x3c
 80057c0:	3304      	adds	r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a15      	ldr	r2, [pc, #84]	; (8005830 <PCD_EP_OutSetupPacket_int+0x88>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d90e      	bls.n	80057fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	461a      	mov	r2, r3
 80057f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f009 fd99 	bl	800f334 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <PCD_EP_OutSetupPacket_int+0x88>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d90c      	bls.n	8005824 <PCD_EP_OutSetupPacket_int+0x7c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d108      	bne.n	8005824 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800581c:	461a      	mov	r2, r3
 800581e:	2101      	movs	r1, #1
 8005820:	f004 f924 	bl	8009a6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	4f54300a 	.word	0x4f54300a

08005834 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
 8005840:	4613      	mov	r3, r2
 8005842:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005852:	883b      	ldrh	r3, [r7, #0]
 8005854:	0419      	lsls	r1, r3, #16
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	430a      	orrs	r2, r1
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
 8005860:	e028      	b.n	80058b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e00d      	b.n	8005892 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	3340      	adds	r3, #64	; 0x40
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	0c1b      	lsrs	r3, r3, #16
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	4413      	add	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	3301      	adds	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	3b01      	subs	r3, #1
 8005898:	429a      	cmp	r2, r3
 800589a:	d3ec      	bcc.n	8005876 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800589c:	883b      	ldrh	r3, [r7, #0]
 800589e:	0418      	lsls	r0, r3, #16
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	4302      	orrs	r2, r0
 80058ac:	3340      	adds	r3, #64	; 0x40
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	887a      	ldrh	r2, [r7, #2]
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_PCDEx_ActivateLPM+0x44>)
 8005914:	4313      	orrs	r3, r2
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	10000003 	.word	0x10000003

0800592c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005932:	f7fd fa1f 	bl	8002d74 <HAL_GetTick>
 8005936:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005938:	4b66      	ldr	r3, [pc, #408]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a65      	ldr	r2, [pc, #404]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005946:	f7fd fa15 	bl	8002d74 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e0b8      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005958:	4b5e      	ldr	r3, [pc, #376]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005964:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a5a      	ldr	r2, [pc, #360]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 800596a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005970:	f7fd fa00 	bl	8002d74 <HAL_GetTick>
 8005974:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005976:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005978:	2200      	movs	r2, #0
 800597a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800597e:	f7fd f9f9 	bl	8002d74 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e09a      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005994:	4b4f      	ldr	r3, [pc, #316]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ee      	bne.n	800597e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80059a0:	f7fd f9e8 	bl	8002d74 <HAL_GetTick>
 80059a4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80059a6:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a4a      	ldr	r2, [pc, #296]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 80059ac:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80059b0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b4:	f7fd f9de 	bl	8002d74 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b64      	cmp	r3, #100	; 0x64
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e081      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80059c6:	4b43      	ldr	r3, [pc, #268]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80059d2:	f7fd f9cf 	bl	8002d74 <HAL_GetTick>
 80059d6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80059d8:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3d      	ldr	r2, [pc, #244]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 80059de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fd f9c5 	bl	8002d74 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e068      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80059f8:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005a04:	f7fd f9b6 	bl	8002d74 <HAL_GetTick>
 8005a08:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8005a0a:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a31      	ldr	r2, [pc, #196]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a14:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a18:	f7fd f9ac 	bl	8002d74 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	; 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e04f      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005a2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005a36:	f7fd f99d 	bl	8002d74 <HAL_GetTick>
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8005a3c:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a4a:	f7fd f993 	bl	8002d74 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b64      	cmp	r3, #100	; 0x64
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e036      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8005a68:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a6a:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <HAL_RCC_DeInit+0x1ac>)
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a70:	4a1a      	ldr	r2, [pc, #104]	; (8005adc <HAL_RCC_DeInit+0x1b0>)
 8005a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8005a76:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a78:	4a18      	ldr	r2, [pc, #96]	; (8005adc <HAL_RCC_DeInit+0x1b0>)
 8005a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a88:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	4a11      	ldr	r2, [pc, #68]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a94:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a96:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <HAL_RCC_DeInit+0x1a8>)
 8005aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aac:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <HAL_RCC_DeInit+0x1b4>)
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_RCC_DeInit+0x1b8>)
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <HAL_RCC_DeInit+0x1bc>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fd f917 	bl	8002cec <HAL_InitTick>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	24003010 	.word	0x24003010
 8005adc:	24003000 	.word	0x24003000
 8005ae0:	20000004 	.word	0x20000004
 8005ae4:	00f42400 	.word	0x00f42400
 8005ae8:	20000008 	.word	0x20000008

08005aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005af4:	2300      	movs	r3, #0
 8005af6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e291      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8087 	beq.w	8005c1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b10:	4b96      	ldr	r3, [pc, #600]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d00c      	beq.n	8005b36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b1c:	4b93      	ldr	r3, [pc, #588]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d112      	bne.n	8005b4e <HAL_RCC_OscConfig+0x62>
 8005b28:	4b90      	ldr	r3, [pc, #576]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b34:	d10b      	bne.n	8005b4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b36:	4b8d      	ldr	r3, [pc, #564]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d06c      	beq.n	8005c1c <HAL_RCC_OscConfig+0x130>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d168      	bne.n	8005c1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e26b      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b56:	d106      	bne.n	8005b66 <HAL_RCC_OscConfig+0x7a>
 8005b58:	4b84      	ldr	r3, [pc, #528]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a83      	ldr	r2, [pc, #524]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e02e      	b.n	8005bc4 <HAL_RCC_OscConfig+0xd8>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x9c>
 8005b6e:	4b7f      	ldr	r3, [pc, #508]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7e      	ldr	r2, [pc, #504]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	4b7c      	ldr	r3, [pc, #496]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7b      	ldr	r2, [pc, #492]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e01d      	b.n	8005bc4 <HAL_RCC_OscConfig+0xd8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b90:	d10c      	bne.n	8005bac <HAL_RCC_OscConfig+0xc0>
 8005b92:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a75      	ldr	r2, [pc, #468]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	4b73      	ldr	r3, [pc, #460]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a72      	ldr	r2, [pc, #456]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e00b      	b.n	8005bc4 <HAL_RCC_OscConfig+0xd8>
 8005bac:	4b6f      	ldr	r3, [pc, #444]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6e      	ldr	r2, [pc, #440]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	4b6c      	ldr	r3, [pc, #432]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6b      	ldr	r2, [pc, #428]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d013      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fd f8d2 	bl	8002d74 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fd f8ce 	bl	8002d74 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e21f      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b61      	ldr	r3, [pc, #388]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCC_OscConfig+0xe8>
 8005bf2:	e014      	b.n	8005c1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fd f8be 	bl	8002d74 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bfc:	f7fd f8ba 	bl	8002d74 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e20b      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x110>
 8005c1a:	e000      	b.n	8005c1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d069      	beq.n	8005cfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c2a:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c36:	4b4d      	ldr	r3, [pc, #308]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d11c      	bne.n	8005c7c <HAL_RCC_OscConfig+0x190>
 8005c42:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d116      	bne.n	8005c7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCC_OscConfig+0x17a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d001      	beq.n	8005c66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e1df      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	493d      	ldr	r1, [pc, #244]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7a:	e040      	b.n	8005cfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d023      	beq.n	8005ccc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c84:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a38      	ldr	r2, [pc, #224]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fd f870 	bl	8002d74 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c98:	f7fd f86c 	bl	8002d74 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e1bd      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005caa:	4b30      	ldr	r3, [pc, #192]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4929      	ldr	r1, [pc, #164]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
 8005cca:	e018      	b.n	8005cfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fd f84c 	bl	8002d74 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce0:	f7fd f848 	bl	8002d74 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e199      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d038      	beq.n	8005d7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d019      	beq.n	8005d46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d12:	4b16      	ldr	r3, [pc, #88]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d16:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fd f829 	bl	8002d74 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fd f825 	bl	8002d74 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e176      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0x23a>
 8005d44:	e01a      	b.n	8005d7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <HAL_RCC_OscConfig+0x280>)
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d52:	f7fd f80f 	bl	8002d74 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d5a:	f7fd f80b 	bl	8002d74 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d903      	bls.n	8005d70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e15c      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
 8005d6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d70:	4b91      	ldr	r3, [pc, #580]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1ee      	bne.n	8005d5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80a4 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8a:	4b8b      	ldr	r3, [pc, #556]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d96:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	4a87      	ldr	r2, [pc, #540]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6413      	str	r3, [r2, #64]	; 0x40
 8005da2:	4b85      	ldr	r3, [pc, #532]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db2:	4b82      	ldr	r3, [pc, #520]	; (8005fbc <HAL_RCC_OscConfig+0x4d0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d118      	bne.n	8005df0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005dbe:	4b7f      	ldr	r3, [pc, #508]	; (8005fbc <HAL_RCC_OscConfig+0x4d0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a7e      	ldr	r2, [pc, #504]	; (8005fbc <HAL_RCC_OscConfig+0x4d0>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dca:	f7fc ffd3 	bl	8002d74 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd2:	f7fc ffcf 	bl	8002d74 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b64      	cmp	r3, #100	; 0x64
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e120      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005de4:	4b75      	ldr	r3, [pc, #468]	; (8005fbc <HAL_RCC_OscConfig+0x4d0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x31a>
 8005df8:	4b6f      	ldr	r3, [pc, #444]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	4a6e      	ldr	r2, [pc, #440]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	6713      	str	r3, [r2, #112]	; 0x70
 8005e04:	e02d      	b.n	8005e62 <HAL_RCC_OscConfig+0x376>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x33c>
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a69      	ldr	r2, [pc, #420]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1a:	4b67      	ldr	r3, [pc, #412]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a66      	ldr	r2, [pc, #408]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
 8005e26:	e01c      	b.n	8005e62 <HAL_RCC_OscConfig+0x376>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x35e>
 8005e30:	4b61      	ldr	r3, [pc, #388]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	4a60      	ldr	r2, [pc, #384]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3c:	4b5e      	ldr	r3, [pc, #376]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	4a5d      	ldr	r2, [pc, #372]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	6713      	str	r3, [r2, #112]	; 0x70
 8005e48:	e00b      	b.n	8005e62 <HAL_RCC_OscConfig+0x376>
 8005e4a:	4b5b      	ldr	r3, [pc, #364]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a5a      	ldr	r2, [pc, #360]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
 8005e56:	4b58      	ldr	r3, [pc, #352]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	4a57      	ldr	r2, [pc, #348]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e5c:	f023 0304 	bic.w	r3, r3, #4
 8005e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d015      	beq.n	8005e96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fc ff83 	bl	8002d74 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e70:	e00a      	b.n	8005e88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e72:	f7fc ff7f 	bl	8002d74 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0ce      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e88:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ee      	beq.n	8005e72 <HAL_RCC_OscConfig+0x386>
 8005e94:	e014      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e96:	f7fc ff6d 	bl	8002d74 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e9c:	e00a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fc ff69 	bl	8002d74 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e0b8      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb4:	4b40      	ldr	r3, [pc, #256]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1ee      	bne.n	8005e9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d105      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	4a3b      	ldr	r2, [pc, #236]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80a4 	beq.w	8006024 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005edc:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 030c 	and.w	r3, r3, #12
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d06b      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d149      	bne.n	8005f84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef0:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fc ff3a 	bl	8002d74 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fc ff36 	bl	8002d74 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e087      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	019b      	lsls	r3, r3, #6
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	4313      	orrs	r3, r2
 8005f48:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fc ff0a 	bl	8002d74 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f64:	f7fc ff06 	bl	8002d74 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e057      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f76:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x478>
 8005f82:	e04f      	b.n	8006024 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a0b      	ldr	r2, [pc, #44]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fc fef0 	bl	8002d74 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f98:	f7fc feec 	bl	8002d74 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e03d      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005faa:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_RCC_OscConfig+0x4cc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4ac>
 8005fb6:	e035      	b.n	8006024 <HAL_RCC_OscConfig+0x538>
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_RCC_OscConfig+0x544>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d028      	beq.n	8006020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d121      	bne.n	8006020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d11a      	bne.n	8006020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ff6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d111      	bne.n	8006020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	3b01      	subs	r3, #1
 800600a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d107      	bne.n	8006020 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800

08006034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0d0      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800604c:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d910      	bls.n	800607c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b67      	ldr	r3, [pc, #412]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 020f 	bic.w	r2, r3, #15
 8006062:	4965      	ldr	r1, [pc, #404]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606a:	4b63      	ldr	r3, [pc, #396]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0b8      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d020      	beq.n	80060ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006094:	4b59      	ldr	r3, [pc, #356]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a58      	ldr	r2, [pc, #352]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 800609a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800609e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060ac:	4b53      	ldr	r3, [pc, #332]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4a52      	ldr	r2, [pc, #328]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80060b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060b8:	4b50      	ldr	r3, [pc, #320]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	494d      	ldr	r1, [pc, #308]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d040      	beq.n	8006158 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d107      	bne.n	80060ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060de:	4b47      	ldr	r3, [pc, #284]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d115      	bne.n	8006116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e07f      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d107      	bne.n	8006106 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f6:	4b41      	ldr	r3, [pc, #260]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e073      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006106:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e06b      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006116:	4b39      	ldr	r3, [pc, #228]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f023 0203 	bic.w	r2, r3, #3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4936      	ldr	r1, [pc, #216]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 8006124:	4313      	orrs	r3, r2
 8006126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006128:	f7fc fe24 	bl	8002d74 <HAL_GetTick>
 800612c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612e:	e00a      	b.n	8006146 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006130:	f7fc fe20 	bl	8002d74 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f241 3288 	movw	r2, #5000	; 0x1388
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e053      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006146:	4b2d      	ldr	r3, [pc, #180]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 020c 	and.w	r2, r3, #12
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	429a      	cmp	r2, r3
 8006156:	d1eb      	bne.n	8006130 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006158:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d210      	bcs.n	8006188 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006166:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f023 020f 	bic.w	r2, r3, #15
 800616e:	4922      	ldr	r1, [pc, #136]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d001      	beq.n	8006188 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e032      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006194:	4b19      	ldr	r3, [pc, #100]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4916      	ldr	r1, [pc, #88]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	490e      	ldr	r1, [pc, #56]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061c6:	f000 f821 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <HAL_RCC_ClockConfig+0x1c8>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	490a      	ldr	r1, [pc, #40]	; (8006200 <HAL_RCC_ClockConfig+0x1cc>)
 80061d8:	5ccb      	ldrb	r3, [r1, r3]
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <HAL_RCC_ClockConfig+0x1d0>)
 80061e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <HAL_RCC_ClockConfig+0x1d4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fc fd80 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40023c00 	.word	0x40023c00
 80061fc:	40023800 	.word	0x40023800
 8006200:	080107a4 	.word	0x080107a4
 8006204:	20000004 	.word	0x20000004
 8006208:	20000008 	.word	0x20000008

0800620c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800620c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006210:	b094      	sub	sp, #80	; 0x50
 8006212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	647b      	str	r3, [r7, #68]	; 0x44
 8006218:	2300      	movs	r3, #0
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800621c:	2300      	movs	r3, #0
 800621e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006224:	4b79      	ldr	r3, [pc, #484]	; (800640c <HAL_RCC_GetSysClockFreq+0x200>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 030c 	and.w	r3, r3, #12
 800622c:	2b08      	cmp	r3, #8
 800622e:	d00d      	beq.n	800624c <HAL_RCC_GetSysClockFreq+0x40>
 8006230:	2b08      	cmp	r3, #8
 8006232:	f200 80e1 	bhi.w	80063f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x34>
 800623a:	2b04      	cmp	r3, #4
 800623c:	d003      	beq.n	8006246 <HAL_RCC_GetSysClockFreq+0x3a>
 800623e:	e0db      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006240:	4b73      	ldr	r3, [pc, #460]	; (8006410 <HAL_RCC_GetSysClockFreq+0x204>)
 8006242:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006244:	e0db      	b.n	80063fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006246:	4b73      	ldr	r3, [pc, #460]	; (8006414 <HAL_RCC_GetSysClockFreq+0x208>)
 8006248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800624a:	e0d8      	b.n	80063fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800624c:	4b6f      	ldr	r3, [pc, #444]	; (800640c <HAL_RCC_GetSysClockFreq+0x200>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006254:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006256:	4b6d      	ldr	r3, [pc, #436]	; (800640c <HAL_RCC_GetSysClockFreq+0x200>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d063      	beq.n	800632a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006262:	4b6a      	ldr	r3, [pc, #424]	; (800640c <HAL_RCC_GetSysClockFreq+0x200>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	2200      	movs	r2, #0
 800626a:	63bb      	str	r3, [r7, #56]	; 0x38
 800626c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006274:	633b      	str	r3, [r7, #48]	; 0x30
 8006276:	2300      	movs	r3, #0
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
 800627a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800627e:	4622      	mov	r2, r4
 8006280:	462b      	mov	r3, r5
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	0159      	lsls	r1, r3, #5
 800628c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006290:	0150      	lsls	r0, r2, #5
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4621      	mov	r1, r4
 8006298:	1a51      	subs	r1, r2, r1
 800629a:	6139      	str	r1, [r7, #16]
 800629c:	4629      	mov	r1, r5
 800629e:	eb63 0301 	sbc.w	r3, r3, r1
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062b0:	4659      	mov	r1, fp
 80062b2:	018b      	lsls	r3, r1, #6
 80062b4:	4651      	mov	r1, sl
 80062b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ba:	4651      	mov	r1, sl
 80062bc:	018a      	lsls	r2, r1, #6
 80062be:	4651      	mov	r1, sl
 80062c0:	ebb2 0801 	subs.w	r8, r2, r1
 80062c4:	4659      	mov	r1, fp
 80062c6:	eb63 0901 	sbc.w	r9, r3, r1
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062de:	4690      	mov	r8, r2
 80062e0:	4699      	mov	r9, r3
 80062e2:	4623      	mov	r3, r4
 80062e4:	eb18 0303 	adds.w	r3, r8, r3
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	462b      	mov	r3, r5
 80062ec:	eb49 0303 	adc.w	r3, r9, r3
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062fe:	4629      	mov	r1, r5
 8006300:	024b      	lsls	r3, r1, #9
 8006302:	4621      	mov	r1, r4
 8006304:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006308:	4621      	mov	r1, r4
 800630a:	024a      	lsls	r2, r1, #9
 800630c:	4610      	mov	r0, r2
 800630e:	4619      	mov	r1, r3
 8006310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006312:	2200      	movs	r2, #0
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800631c:	f7fa fbf6 	bl	8000b0c <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4613      	mov	r3, r2
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	e058      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632a:	4b38      	ldr	r3, [pc, #224]	; (800640c <HAL_RCC_GetSysClockFreq+0x200>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	099b      	lsrs	r3, r3, #6
 8006330:	2200      	movs	r2, #0
 8006332:	4618      	mov	r0, r3
 8006334:	4611      	mov	r1, r2
 8006336:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
 8006340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006344:	4642      	mov	r2, r8
 8006346:	464b      	mov	r3, r9
 8006348:	f04f 0000 	mov.w	r0, #0
 800634c:	f04f 0100 	mov.w	r1, #0
 8006350:	0159      	lsls	r1, r3, #5
 8006352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006356:	0150      	lsls	r0, r2, #5
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4641      	mov	r1, r8
 800635e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006362:	4649      	mov	r1, r9
 8006364:	eb63 0b01 	sbc.w	fp, r3, r1
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800637c:	ebb2 040a 	subs.w	r4, r2, sl
 8006380:	eb63 050b 	sbc.w	r5, r3, fp
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	00eb      	lsls	r3, r5, #3
 800638e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006392:	00e2      	lsls	r2, r4, #3
 8006394:	4614      	mov	r4, r2
 8006396:	461d      	mov	r5, r3
 8006398:	4643      	mov	r3, r8
 800639a:	18e3      	adds	r3, r4, r3
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	464b      	mov	r3, r9
 80063a0:	eb45 0303 	adc.w	r3, r5, r3
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063b2:	4629      	mov	r1, r5
 80063b4:	028b      	lsls	r3, r1, #10
 80063b6:	4621      	mov	r1, r4
 80063b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063bc:	4621      	mov	r1, r4
 80063be:	028a      	lsls	r2, r1, #10
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c6:	2200      	movs	r2, #0
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	61fa      	str	r2, [r7, #28]
 80063cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d0:	f7fa fb9c 	bl	8000b0c <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4613      	mov	r3, r2
 80063da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <HAL_RCC_GetSysClockFreq+0x200>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	3301      	adds	r3, #1
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80063ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063f6:	e002      	b.n	80063fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <HAL_RCC_GetSysClockFreq+0x204>)
 80063fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006400:	4618      	mov	r0, r3
 8006402:	3750      	adds	r7, #80	; 0x50
 8006404:	46bd      	mov	sp, r7
 8006406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800640a:	bf00      	nop
 800640c:	40023800 	.word	0x40023800
 8006410:	00f42400 	.word	0x00f42400
 8006414:	007a1200 	.word	0x007a1200

08006418 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <HAL_RCC_GetHCLKFreq+0x14>)
 800641e:	681b      	ldr	r3, [r3, #0]
}
 8006420:	4618      	mov	r0, r3
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000004 	.word	0x20000004

08006430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006434:	f7ff fff0 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8006438:	4602      	mov	r2, r0
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	0a9b      	lsrs	r3, r3, #10
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	4903      	ldr	r1, [pc, #12]	; (8006454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006446:	5ccb      	ldrb	r3, [r1, r3]
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40023800 	.word	0x40023800
 8006454:	080107b4 	.word	0x080107b4

08006458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800645c:	f7ff ffdc 	bl	8006418 <HAL_RCC_GetHCLKFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	0b5b      	lsrs	r3, r3, #13
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	4903      	ldr	r1, [pc, #12]	; (800647c <HAL_RCC_GetPCLK2Freq+0x24>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006474:	4618      	mov	r0, r3
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40023800 	.word	0x40023800
 800647c:	080107b4 	.word	0x080107b4

08006480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d012      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064a4:	4b65      	ldr	r3, [pc, #404]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a64      	ldr	r2, [pc, #400]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064ae:	6093      	str	r3, [r2, #8]
 80064b0:	4b62      	ldr	r3, [pc, #392]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4960      	ldr	r1, [pc, #384]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d017      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064d6:	4b59      	ldr	r3, [pc, #356]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	4955      	ldr	r1, [pc, #340]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f4:	d101      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80064f6:	2301      	movs	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8006502:	2301      	movs	r3, #1
 8006504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d017      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006512:	4b4a      	ldr	r3, [pc, #296]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006518:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	4946      	ldr	r1, [pc, #280]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006530:	d101      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8006532:	2301      	movs	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 808b 	beq.w	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006550:	4b3a      	ldr	r3, [pc, #232]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	4a39      	ldr	r2, [pc, #228]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655a:	6413      	str	r3, [r2, #64]	; 0x40
 800655c:	4b37      	ldr	r3, [pc, #220]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a34      	ldr	r2, [pc, #208]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800656e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006574:	f7fc fbfe 	bl	8002d74 <HAL_GetTick>
 8006578:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800657a:	e008      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657c:	f7fc fbfa 	bl	8002d74 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	; 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e2bc      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800658e:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f0      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800659a:	4b28      	ldr	r3, [pc, #160]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d035      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d02e      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065b8:	4b20      	ldr	r3, [pc, #128]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065c2:	4b1e      	ldr	r3, [pc, #120]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	4a1d      	ldr	r2, [pc, #116]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065ce:	4b1b      	ldr	r3, [pc, #108]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	4a1a      	ldr	r2, [pc, #104]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80065da:	4a18      	ldr	r2, [pc, #96]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065e0:	4b16      	ldr	r3, [pc, #88]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d114      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fc fbc2 	bl	8002d74 <HAL_GetTick>
 80065f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f2:	e00a      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f4:	f7fc fbbe 	bl	8002d74 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e27e      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0ee      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006622:	d111      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006630:	4b04      	ldr	r3, [pc, #16]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006632:	400b      	ands	r3, r1
 8006634:	4901      	ldr	r1, [pc, #4]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006636:	4313      	orrs	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
 800663a:	e00b      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800663c:	40023800 	.word	0x40023800
 8006640:	40007000 	.word	0x40007000
 8006644:	0ffffcff 	.word	0x0ffffcff
 8006648:	4ba4      	ldr	r3, [pc, #656]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4aa3      	ldr	r2, [pc, #652]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800664e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006652:	6093      	str	r3, [r2, #8]
 8006654:	4ba1      	ldr	r3, [pc, #644]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006660:	499e      	ldr	r1, [pc, #632]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006662:	4313      	orrs	r3, r2
 8006664:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	d010      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006672:	4b9a      	ldr	r3, [pc, #616]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006678:	4a98      	ldr	r2, [pc, #608]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800667a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800667e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006682:	4b96      	ldr	r3, [pc, #600]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006684:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	4993      	ldr	r1, [pc, #588]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066a0:	4b8e      	ldr	r3, [pc, #568]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ae:	498b      	ldr	r1, [pc, #556]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066c2:	4b86      	ldr	r3, [pc, #536]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d0:	4982      	ldr	r1, [pc, #520]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066e4:	4b7d      	ldr	r3, [pc, #500]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f2:	497a      	ldr	r1, [pc, #488]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006706:	4b75      	ldr	r3, [pc, #468]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f023 0203 	bic.w	r2, r3, #3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006714:	4971      	ldr	r1, [pc, #452]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006728:	4b6c      	ldr	r3, [pc, #432]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672e:	f023 020c 	bic.w	r2, r3, #12
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	4969      	ldr	r1, [pc, #420]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800674a:	4b64      	ldr	r3, [pc, #400]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800674c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006758:	4960      	ldr	r1, [pc, #384]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800676c:	4b5b      	ldr	r3, [pc, #364]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677a:	4958      	ldr	r1, [pc, #352]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800678e:	4b53      	ldr	r3, [pc, #332]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	494f      	ldr	r1, [pc, #316]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067b0:	4b4a      	ldr	r3, [pc, #296]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	4947      	ldr	r1, [pc, #284]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80067d2:	4b42      	ldr	r3, [pc, #264]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	493e      	ldr	r1, [pc, #248]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80067f4:	4b39      	ldr	r3, [pc, #228]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	4936      	ldr	r1, [pc, #216]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d011      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006816:	4b31      	ldr	r3, [pc, #196]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006824:	492d      	ldr	r1, [pc, #180]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006834:	d101      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8006836:	2301      	movs	r3, #1
 8006838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006846:	4b25      	ldr	r3, [pc, #148]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006854:	4921      	ldr	r1, [pc, #132]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006856:	4313      	orrs	r3, r2
 8006858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006868:	4b1c      	ldr	r3, [pc, #112]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006876:	4919      	ldr	r1, [pc, #100]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006890:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006898:	4910      	ldr	r1, [pc, #64]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d006      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 809d 	beq.w	80069ee <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068b4:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a08      	ldr	r2, [pc, #32]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80068ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c0:	f7fc fa58 	bl	8002d74 <HAL_GetTick>
 80068c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c6:	e00b      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068c8:	f7fc fa54 	bl	8002d74 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	; 0x64
 80068d4:	d904      	bls.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e116      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80068da:	bf00      	nop
 80068dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068e0:	4b8b      	ldr	r3, [pc, #556]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ed      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d113      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006900:	4b83      	ldr	r3, [pc, #524]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006906:	0e1b      	lsrs	r3, r3, #24
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	019a      	lsls	r2, r3, #6
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	071b      	lsls	r3, r3, #28
 8006920:	497b      	ldr	r1, [pc, #492]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693c:	d00a      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006946:	2b00      	cmp	r3, #0
 8006948:	d024      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006952:	d11f      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006954:	4b6e      	ldr	r3, [pc, #440]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695a:	0f1b      	lsrs	r3, r3, #28
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	019a      	lsls	r2, r3, #6
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	431a      	orrs	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	071b      	lsls	r3, r3, #28
 8006974:	4966      	ldr	r1, [pc, #408]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800697c:	4b64      	ldr	r3, [pc, #400]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800697e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006982:	f023 021f 	bic.w	r2, r3, #31
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	3b01      	subs	r3, #1
 800698c:	4960      	ldr	r1, [pc, #384]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	019a      	lsls	r2, r3, #6
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	061b      	lsls	r3, r3, #24
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	071b      	lsls	r3, r3, #28
 80069b4:	4956      	ldr	r1, [pc, #344]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069bc:	4b54      	ldr	r3, [pc, #336]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a53      	ldr	r2, [pc, #332]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c8:	f7fc f9d4 	bl	8002d74 <HAL_GetTick>
 80069cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069d0:	f7fc f9d0 	bl	8002d74 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b64      	cmp	r3, #100	; 0x64
 80069dc:	d901      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e092      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069e2:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 8088 	bne.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069f6:	4b46      	ldr	r3, [pc, #280]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a45      	ldr	r2, [pc, #276]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a02:	f7fc f9b7 	bl	8002d74 <HAL_GetTick>
 8006a06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a08:	e008      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a0a:	f7fc f9b3 	bl	8002d74 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b64      	cmp	r3, #100	; 0x64
 8006a16:	d901      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e075      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a1c:	4b3c      	ldr	r3, [pc, #240]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a28:	d0ef      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d024      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d120      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a52:	4b2f      	ldr	r3, [pc, #188]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	019a      	lsls	r2, r3, #6
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	061b      	lsls	r3, r3, #24
 8006a72:	4927      	ldr	r1, [pc, #156]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a7a:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	4920      	ldr	r1, [pc, #128]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d018      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa8:	d113      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006aaa:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	019a      	lsls	r2, r3, #6
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	4911      	ldr	r1, [pc, #68]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a0e      	ldr	r2, [pc, #56]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ade:	f7fc f949 	bl	8002d74 <HAL_GetTick>
 8006ae2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ae6:	f7fc f945 	bl	8002d74 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b64      	cmp	r3, #100	; 0x64
 8006af2:	d901      	bls.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e007      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b04:	d1ef      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40023800 	.word	0x40023800

08006b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e09d      	b.n	8006c62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d108      	bne.n	8006b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b36:	d009      	beq.n	8006b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	61da      	str	r2, [r3, #28]
 8006b3e:	e005      	b.n	8006b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fd6a 	bl	8002640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b8c:	d902      	bls.n	8006b94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e002      	b.n	8006b9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ba2:	d007      	beq.n	8006bb4 <HAL_SPI_Init+0xa0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bac:	d002      	beq.n	8006bb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	f003 0204 	and.w	r2, r3, #4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c30:	ea42 0103 	orr.w	r1, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b088      	sub	sp, #32
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_SPI_Transmit+0x22>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e158      	b.n	8006f3e <HAL_SPI_Transmit+0x2d4>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c94:	f7fc f86e 	bl	8002d74 <HAL_GetTick>
 8006c98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d002      	beq.n	8006cb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
 8006cac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cae:	e13d      	b.n	8006f2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_SPI_Transmit+0x52>
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc0:	e134      	b.n	8006f2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0c:	d10f      	bne.n	8006d2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d007      	beq.n	8006d4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d54:	d94b      	bls.n	8006dee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_SPI_Transmit+0xfa>
 8006d5e:	8afb      	ldrh	r3, [r7, #22]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d13e      	bne.n	8006de2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	881a      	ldrh	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	1c9a      	adds	r2, r3, #2
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d88:	e02b      	b.n	8006de2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d112      	bne.n	8006dbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	881a      	ldrh	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dbc:	e011      	b.n	8006de2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dbe:	f7fb ffd9 	bl	8002d74 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d803      	bhi.n	8006dd6 <HAL_SPI_Transmit+0x16c>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d102      	bne.n	8006ddc <HAL_SPI_Transmit+0x172>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006de0:	e0a4      	b.n	8006f2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1ce      	bne.n	8006d8a <HAL_SPI_Transmit+0x120>
 8006dec:	e07c      	b.n	8006ee8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Transmit+0x192>
 8006df6:	8afb      	ldrh	r3, [r7, #22]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d170      	bne.n	8006ede <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d912      	bls.n	8006e2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	881a      	ldrh	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	1c9a      	adds	r2, r3, #2
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b02      	subs	r3, #2
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e2a:	e058      	b.n	8006ede <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e52:	e044      	b.n	8006ede <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d12b      	bne.n	8006eba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d912      	bls.n	8006e92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b02      	subs	r3, #2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e90:	e025      	b.n	8006ede <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb8:	e011      	b.n	8006ede <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eba:	f7fb ff5b 	bl	8002d74 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d803      	bhi.n	8006ed2 <HAL_SPI_Transmit+0x268>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d102      	bne.n	8006ed8 <HAL_SPI_Transmit+0x26e>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006edc:	e026      	b.n	8006f2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1b5      	bne.n	8006e54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fd07 	bl	8007900 <SPI_EndRxTxTransaction>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e000      	b.n	8006f2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b088      	sub	sp, #32
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f62:	d112      	bne.n	8006f8a <HAL_SPI_Receive+0x44>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10e      	bne.n	8006f8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f910 	bl	80071a6 <HAL_SPI_TransmitReceive>
 8006f86:	4603      	mov	r3, r0
 8006f88:	e109      	b.n	800719e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_SPI_Receive+0x52>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e102      	b.n	800719e <HAL_SPI_Receive+0x258>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa0:	f7fb fee8 	bl	8002d74 <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fb6:	e0e9      	b.n	800718c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_SPI_Receive+0x7e>
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fc8:	e0e0      	b.n	800718c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	88fa      	ldrh	r2, [r7, #6]
 8006fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007014:	d908      	bls.n	8007028 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e007      	b.n	8007038 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007040:	d10f      	bne.n	8007062 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007060:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	d007      	beq.n	8007080 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800707e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007088:	d867      	bhi.n	800715a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800708a:	e030      	b.n	80070ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d117      	bne.n	80070ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f103 020c 	add.w	r2, r3, #12
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070c8:	e011      	b.n	80070ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ca:	f7fb fe53 	bl	8002d74 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d803      	bhi.n	80070e2 <HAL_SPI_Receive+0x19c>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e0:	d102      	bne.n	80070e8 <HAL_SPI_Receive+0x1a2>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070ec:	e04e      	b.n	800718c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1c8      	bne.n	800708c <HAL_SPI_Receive+0x146>
 80070fa:	e034      	b.n	8007166 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d115      	bne.n	8007136 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	b292      	uxth	r2, r2
 8007116:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007134:	e011      	b.n	800715a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007136:	f7fb fe1d 	bl	8002d74 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d803      	bhi.n	800714e <HAL_SPI_Receive+0x208>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d102      	bne.n	8007154 <HAL_SPI_Receive+0x20e>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007158:	e018      	b.n	800718c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1ca      	bne.n	80070fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fb4c 	bl	8007808 <SPI_EndRxTransaction>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
 8007188:	e000      	b.n	800718c <HAL_SPI_Receive+0x246>
  }

error :
 800718a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b08a      	sub	sp, #40	; 0x28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071b4:	2301      	movs	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x26>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e1fb      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x41e>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071d4:	f7fb fdce 	bl	8002d74 <HAL_GetTick>
 80071d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071f0:	7efb      	ldrb	r3, [r7, #27]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d00e      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x6e>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071fc:	d106      	bne.n	800720c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <HAL_SPI_TransmitReceive+0x66>
 8007206:	7efb      	ldrb	r3, [r7, #27]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d003      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800720c:	2302      	movs	r3, #2
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007212:	e1cd      	b.n	80075b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_SPI_TransmitReceive+0x80>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SPI_TransmitReceive+0x80>
 8007220:	887b      	ldrh	r3, [r7, #2]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800722c:	e1c0      	b.n	80075b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b04      	cmp	r3, #4
 8007238:	d003      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2205      	movs	r2, #5
 800723e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	887a      	ldrh	r2, [r7, #2]
 8007252:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	887a      	ldrh	r2, [r7, #2]
 800725a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	887a      	ldrh	r2, [r7, #2]
 8007268:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	887a      	ldrh	r2, [r7, #2]
 800726e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007284:	d802      	bhi.n	800728c <HAL_SPI_TransmitReceive+0xe6>
 8007286:	8a3b      	ldrh	r3, [r7, #16]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d908      	bls.n	800729e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800729a:	605a      	str	r2, [r3, #4]
 800729c:	e007      	b.n	80072ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	d007      	beq.n	80072cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072d4:	d97c      	bls.n	80073d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_SPI_TransmitReceive+0x13e>
 80072de:	8a7b      	ldrh	r3, [r7, #18]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d169      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	881a      	ldrh	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	1c9a      	adds	r2, r3, #2
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007308:	e056      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b02      	cmp	r3, #2
 8007316:	d11b      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x1aa>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x1aa>
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	2b01      	cmp	r3, #1
 8007326:	d113      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	881a      	ldrh	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	1c9a      	adds	r2, r3, #2
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d11c      	bne.n	8007398 <HAL_SPI_TransmitReceive+0x1f2>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	b292      	uxth	r2, r2
 8007376:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	1c9a      	adds	r2, r3, #2
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007394:	2301      	movs	r3, #1
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007398:	f7fb fcec 	bl	8002d74 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d807      	bhi.n	80073b8 <HAL_SPI_TransmitReceive+0x212>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d003      	beq.n	80073b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073b6:	e0fb      	b.n	80075b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1a3      	bne.n	800730a <HAL_SPI_TransmitReceive+0x164>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d19d      	bne.n	800730a <HAL_SPI_TransmitReceive+0x164>
 80073ce:	e0df      	b.n	8007590 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x23a>
 80073d8:	8a7b      	ldrh	r3, [r7, #18]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	f040 80cb 	bne.w	8007576 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d912      	bls.n	8007410 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	881a      	ldrh	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	1c9a      	adds	r2, r3, #2
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b02      	subs	r3, #2
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800740e:	e0b2      	b.n	8007576 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	330c      	adds	r3, #12
 800741a:	7812      	ldrb	r2, [r2, #0]
 800741c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007436:	e09e      	b.n	8007576 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b02      	cmp	r3, #2
 8007444:	d134      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x30a>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d02f      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x30a>
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	2b01      	cmp	r3, #1
 8007454:	d12c      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d912      	bls.n	8007486 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b02      	subs	r3, #2
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007484:	e012      	b.n	80074ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d148      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x3aa>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d042      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d923      	bls.n	800751e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	b292      	uxth	r2, r2
 80074e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b02      	subs	r3, #2
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d81f      	bhi.n	800754c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	e016      	b.n	800754c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f103 020c 	add.w	r2, r3, #12
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800754c:	2301      	movs	r3, #1
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007550:	f7fb fc10 	bl	8002d74 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755c:	429a      	cmp	r2, r3
 800755e:	d803      	bhi.n	8007568 <HAL_SPI_TransmitReceive+0x3c2>
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d102      	bne.n	800756e <HAL_SPI_TransmitReceive+0x3c8>
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007574:	e01c      	b.n	80075b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	f47f af5b 	bne.w	8007438 <HAL_SPI_TransmitReceive+0x292>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	f47f af54 	bne.w	8007438 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f9b3 	bl	8007900 <SPI_EndRxTxTransaction>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	661a      	str	r2, [r3, #96]	; 0x60
 80075ac:	e000      	b.n	80075b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80075ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3728      	adds	r7, #40	; 0x28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075dc:	f7fb fbca 	bl	8002d74 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4413      	add	r3, r2
 80075ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075ec:	f7fb fbc2 	bl	8002d74 <HAL_GetTick>
 80075f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075f2:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	015b      	lsls	r3, r3, #5
 80075f8:	0d1b      	lsrs	r3, r3, #20
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	e054      	b.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d050      	beq.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800760c:	f7fb fbb2 	bl	8002d74 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	429a      	cmp	r2, r3
 800761a:	d902      	bls.n	8007622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d13d      	bne.n	800769e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763a:	d111      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007644:	d004      	beq.n	8007650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764e:	d107      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007668:	d10f      	bne.n	800768a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e017      	b.n	80076ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d19b      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000004 	.word	0x20000004

080076dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076ee:	f7fb fb41 	bl	8002d74 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	1a9b      	subs	r3, r3, r2
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	4413      	add	r3, r2
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80076fe:	f7fb fb39 	bl	8002d74 <HAL_GetTick>
 8007702:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800770c:	4b3d      	ldr	r3, [pc, #244]	; (8007804 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	00da      	lsls	r2, r3, #3
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	0d1b      	lsrs	r3, r3, #20
 800771c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800771e:	fb02 f303 	mul.w	r3, r2, r3
 8007722:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007724:	e060      	b.n	80077e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800772c:	d107      	bne.n	800773e <SPI_WaitFifoStateUntilTimeout+0x62>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800773c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d050      	beq.n	80077e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007746:	f7fb fb15 	bl	8002d74 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	429a      	cmp	r2, r3
 8007754:	d902      	bls.n	800775c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d13d      	bne.n	80077d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800776a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007774:	d111      	bne.n	800779a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777e:	d004      	beq.n	800778a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d107      	bne.n	800779a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007798:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d10f      	bne.n	80077c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e010      	b.n	80077fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4013      	ands	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d196      	bne.n	8007726 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3728      	adds	r7, #40	; 0x28
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000004 	.word	0x20000004

08007808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af02      	add	r7, sp, #8
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781c:	d111      	bne.n	8007842 <SPI_EndRxTransaction+0x3a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007826:	d004      	beq.n	8007832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007830:	d107      	bne.n	8007842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007840:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800784a:	d112      	bne.n	8007872 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff feb8 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d021      	beq.n	80078a6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e03d      	b.n	80078ee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007872:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <SPI_EndRxTransaction+0xf0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a21      	ldr	r2, [pc, #132]	; (80078fc <SPI_EndRxTransaction+0xf4>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	0d5b      	lsrs	r3, r3, #21
 800787e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	3b01      	subs	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789e:	2b80      	cmp	r3, #128	; 0x80
 80078a0:	d0f2      	beq.n	8007888 <SPI_EndRxTransaction+0x80>
 80078a2:	e000      	b.n	80078a6 <SPI_EndRxTransaction+0x9e>
        break;
 80078a4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ae:	d11d      	bne.n	80078ec <SPI_EndRxTransaction+0xe4>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b8:	d004      	beq.n	80078c4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c2:	d113      	bne.n	80078ec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff ff03 	bl	80076dc <SPI_WaitFifoStateUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e000      	b.n	80078ee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000004 	.word	0x20000004
 80078fc:	165e9f81 	.word	0x165e9f81

08007900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fedf 	bl	80076dc <SPI_WaitFifoStateUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007928:	f043 0220 	orr.w	r2, r3, #32
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e046      	b.n	80079c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007934:	4b25      	ldr	r3, [pc, #148]	; (80079cc <SPI_EndRxTxTransaction+0xcc>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a25      	ldr	r2, [pc, #148]	; (80079d0 <SPI_EndRxTxTransaction+0xd0>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	0d5b      	lsrs	r3, r3, #21
 8007940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007944:	fb02 f303 	mul.w	r3, r2, r3
 8007948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007952:	d112      	bne.n	800797a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	2180      	movs	r1, #128	; 0x80
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fe34 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d016      	beq.n	8007998 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796e:	f043 0220 	orr.w	r2, r3, #32
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e023      	b.n	80079c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3b01      	subs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d0f2      	beq.n	800797a <SPI_EndRxTxTransaction+0x7a>
 8007994:	e000      	b.n	8007998 <SPI_EndRxTxTransaction+0x98>
        break;
 8007996:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2200      	movs	r2, #0
 80079a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff fe99 	bl	80076dc <SPI_WaitFifoStateUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b4:	f043 0220 	orr.w	r2, r3, #32
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e000      	b.n	80079c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000004 	.word	0x20000004
 80079d0:	165e9f81 	.word	0x165e9f81

080079d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e040      	b.n	8007a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fa fee6 	bl	80027c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2224      	movs	r2, #36	; 0x24
 8007a00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f82c 	bl	8007a70 <UART_SetConfig>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e022      	b.n	8007a68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa84 	bl	8007f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fb0b 	bl	800807c <UART_CheckIdleState>
 8007a66:	4603      	mov	r3, r0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	4ba6      	ldr	r3, [pc, #664]	; (8007d34 <UART_SetConfig+0x2c4>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	6979      	ldr	r1, [r7, #20]
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a94      	ldr	r2, [pc, #592]	; (8007d38 <UART_SetConfig+0x2c8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d120      	bne.n	8007b2e <UART_SetConfig+0xbe>
 8007aec:	4b93      	ldr	r3, [pc, #588]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d816      	bhi.n	8007b28 <UART_SetConfig+0xb8>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <UART_SetConfig+0x90>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b1d 	.word	0x08007b1d
 8007b08:	08007b17 	.word	0x08007b17
 8007b0c:	08007b23 	.word	0x08007b23
 8007b10:	2301      	movs	r3, #1
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e150      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b16:	2302      	movs	r3, #2
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e14d      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e14a      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b22:	2308      	movs	r3, #8
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e147      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e144      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a83      	ldr	r2, [pc, #524]	; (8007d40 <UART_SetConfig+0x2d0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d132      	bne.n	8007b9e <UART_SetConfig+0x12e>
 8007b38:	4b80      	ldr	r3, [pc, #512]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3e:	f003 030c 	and.w	r3, r3, #12
 8007b42:	2b0c      	cmp	r3, #12
 8007b44:	d828      	bhi.n	8007b98 <UART_SetConfig+0x128>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <UART_SetConfig+0xdc>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b81 	.word	0x08007b81
 8007b50:	08007b99 	.word	0x08007b99
 8007b54:	08007b99 	.word	0x08007b99
 8007b58:	08007b99 	.word	0x08007b99
 8007b5c:	08007b8d 	.word	0x08007b8d
 8007b60:	08007b99 	.word	0x08007b99
 8007b64:	08007b99 	.word	0x08007b99
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007b87 	.word	0x08007b87
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007b99 	.word	0x08007b99
 8007b78:	08007b99 	.word	0x08007b99
 8007b7c:	08007b93 	.word	0x08007b93
 8007b80:	2300      	movs	r3, #0
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e118      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b86:	2302      	movs	r3, #2
 8007b88:	77fb      	strb	r3, [r7, #31]
 8007b8a:	e115      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	77fb      	strb	r3, [r7, #31]
 8007b90:	e112      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b92:	2308      	movs	r3, #8
 8007b94:	77fb      	strb	r3, [r7, #31]
 8007b96:	e10f      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e10c      	b.n	8007db8 <UART_SetConfig+0x348>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a68      	ldr	r2, [pc, #416]	; (8007d44 <UART_SetConfig+0x2d4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d120      	bne.n	8007bea <UART_SetConfig+0x17a>
 8007ba8:	4b64      	ldr	r3, [pc, #400]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bb2:	2b30      	cmp	r3, #48	; 0x30
 8007bb4:	d013      	beq.n	8007bde <UART_SetConfig+0x16e>
 8007bb6:	2b30      	cmp	r3, #48	; 0x30
 8007bb8:	d814      	bhi.n	8007be4 <UART_SetConfig+0x174>
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d009      	beq.n	8007bd2 <UART_SetConfig+0x162>
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d810      	bhi.n	8007be4 <UART_SetConfig+0x174>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <UART_SetConfig+0x15c>
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d006      	beq.n	8007bd8 <UART_SetConfig+0x168>
 8007bca:	e00b      	b.n	8007be4 <UART_SetConfig+0x174>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e0f2      	b.n	8007db8 <UART_SetConfig+0x348>
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	77fb      	strb	r3, [r7, #31]
 8007bd6:	e0ef      	b.n	8007db8 <UART_SetConfig+0x348>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	77fb      	strb	r3, [r7, #31]
 8007bdc:	e0ec      	b.n	8007db8 <UART_SetConfig+0x348>
 8007bde:	2308      	movs	r3, #8
 8007be0:	77fb      	strb	r3, [r7, #31]
 8007be2:	e0e9      	b.n	8007db8 <UART_SetConfig+0x348>
 8007be4:	2310      	movs	r3, #16
 8007be6:	77fb      	strb	r3, [r7, #31]
 8007be8:	e0e6      	b.n	8007db8 <UART_SetConfig+0x348>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a56      	ldr	r2, [pc, #344]	; (8007d48 <UART_SetConfig+0x2d8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d120      	bne.n	8007c36 <UART_SetConfig+0x1c6>
 8007bf4:	4b51      	ldr	r3, [pc, #324]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8007c00:	d013      	beq.n	8007c2a <UART_SetConfig+0x1ba>
 8007c02:	2bc0      	cmp	r3, #192	; 0xc0
 8007c04:	d814      	bhi.n	8007c30 <UART_SetConfig+0x1c0>
 8007c06:	2b80      	cmp	r3, #128	; 0x80
 8007c08:	d009      	beq.n	8007c1e <UART_SetConfig+0x1ae>
 8007c0a:	2b80      	cmp	r3, #128	; 0x80
 8007c0c:	d810      	bhi.n	8007c30 <UART_SetConfig+0x1c0>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <UART_SetConfig+0x1a8>
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d006      	beq.n	8007c24 <UART_SetConfig+0x1b4>
 8007c16:	e00b      	b.n	8007c30 <UART_SetConfig+0x1c0>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e0cc      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e0c9      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c24:	2304      	movs	r3, #4
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e0c6      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	77fb      	strb	r3, [r7, #31]
 8007c2e:	e0c3      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c30:	2310      	movs	r3, #16
 8007c32:	77fb      	strb	r3, [r7, #31]
 8007c34:	e0c0      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a44      	ldr	r2, [pc, #272]	; (8007d4c <UART_SetConfig+0x2dc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d125      	bne.n	8007c8c <UART_SetConfig+0x21c>
 8007c40:	4b3e      	ldr	r3, [pc, #248]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4e:	d017      	beq.n	8007c80 <UART_SetConfig+0x210>
 8007c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c54:	d817      	bhi.n	8007c86 <UART_SetConfig+0x216>
 8007c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5a:	d00b      	beq.n	8007c74 <UART_SetConfig+0x204>
 8007c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c60:	d811      	bhi.n	8007c86 <UART_SetConfig+0x216>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <UART_SetConfig+0x1fe>
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d006      	beq.n	8007c7a <UART_SetConfig+0x20a>
 8007c6c:	e00b      	b.n	8007c86 <UART_SetConfig+0x216>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	77fb      	strb	r3, [r7, #31]
 8007c72:	e0a1      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c74:	2302      	movs	r3, #2
 8007c76:	77fb      	strb	r3, [r7, #31]
 8007c78:	e09e      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c7a:	2304      	movs	r3, #4
 8007c7c:	77fb      	strb	r3, [r7, #31]
 8007c7e:	e09b      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c80:	2308      	movs	r3, #8
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e098      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c86:	2310      	movs	r3, #16
 8007c88:	77fb      	strb	r3, [r7, #31]
 8007c8a:	e095      	b.n	8007db8 <UART_SetConfig+0x348>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <UART_SetConfig+0x2e0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d125      	bne.n	8007ce2 <UART_SetConfig+0x272>
 8007c96:	4b29      	ldr	r3, [pc, #164]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ca4:	d017      	beq.n	8007cd6 <UART_SetConfig+0x266>
 8007ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007caa:	d817      	bhi.n	8007cdc <UART_SetConfig+0x26c>
 8007cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb0:	d00b      	beq.n	8007cca <UART_SetConfig+0x25a>
 8007cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb6:	d811      	bhi.n	8007cdc <UART_SetConfig+0x26c>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <UART_SetConfig+0x254>
 8007cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc0:	d006      	beq.n	8007cd0 <UART_SetConfig+0x260>
 8007cc2:	e00b      	b.n	8007cdc <UART_SetConfig+0x26c>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e076      	b.n	8007db8 <UART_SetConfig+0x348>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e073      	b.n	8007db8 <UART_SetConfig+0x348>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e070      	b.n	8007db8 <UART_SetConfig+0x348>
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	77fb      	strb	r3, [r7, #31]
 8007cda:	e06d      	b.n	8007db8 <UART_SetConfig+0x348>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e06a      	b.n	8007db8 <UART_SetConfig+0x348>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1b      	ldr	r2, [pc, #108]	; (8007d54 <UART_SetConfig+0x2e4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d138      	bne.n	8007d5e <UART_SetConfig+0x2ee>
 8007cec:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <UART_SetConfig+0x2cc>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007cf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cfa:	d017      	beq.n	8007d2c <UART_SetConfig+0x2bc>
 8007cfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d00:	d82a      	bhi.n	8007d58 <UART_SetConfig+0x2e8>
 8007d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d06:	d00b      	beq.n	8007d20 <UART_SetConfig+0x2b0>
 8007d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0c:	d824      	bhi.n	8007d58 <UART_SetConfig+0x2e8>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <UART_SetConfig+0x2aa>
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d006      	beq.n	8007d26 <UART_SetConfig+0x2b6>
 8007d18:	e01e      	b.n	8007d58 <UART_SetConfig+0x2e8>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	77fb      	strb	r3, [r7, #31]
 8007d1e:	e04b      	b.n	8007db8 <UART_SetConfig+0x348>
 8007d20:	2302      	movs	r3, #2
 8007d22:	77fb      	strb	r3, [r7, #31]
 8007d24:	e048      	b.n	8007db8 <UART_SetConfig+0x348>
 8007d26:	2304      	movs	r3, #4
 8007d28:	77fb      	strb	r3, [r7, #31]
 8007d2a:	e045      	b.n	8007db8 <UART_SetConfig+0x348>
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	77fb      	strb	r3, [r7, #31]
 8007d30:	e042      	b.n	8007db8 <UART_SetConfig+0x348>
 8007d32:	bf00      	nop
 8007d34:	efff69f3 	.word	0xefff69f3
 8007d38:	40011000 	.word	0x40011000
 8007d3c:	40023800 	.word	0x40023800
 8007d40:	40004400 	.word	0x40004400
 8007d44:	40004800 	.word	0x40004800
 8007d48:	40004c00 	.word	0x40004c00
 8007d4c:	40005000 	.word	0x40005000
 8007d50:	40011400 	.word	0x40011400
 8007d54:	40007800 	.word	0x40007800
 8007d58:	2310      	movs	r3, #16
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e02c      	b.n	8007db8 <UART_SetConfig+0x348>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a72      	ldr	r2, [pc, #456]	; (8007f2c <UART_SetConfig+0x4bc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d125      	bne.n	8007db4 <UART_SetConfig+0x344>
 8007d68:	4b71      	ldr	r3, [pc, #452]	; (8007f30 <UART_SetConfig+0x4c0>)
 8007d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d76:	d017      	beq.n	8007da8 <UART_SetConfig+0x338>
 8007d78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d7c:	d817      	bhi.n	8007dae <UART_SetConfig+0x33e>
 8007d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d82:	d00b      	beq.n	8007d9c <UART_SetConfig+0x32c>
 8007d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d88:	d811      	bhi.n	8007dae <UART_SetConfig+0x33e>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <UART_SetConfig+0x326>
 8007d8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d92:	d006      	beq.n	8007da2 <UART_SetConfig+0x332>
 8007d94:	e00b      	b.n	8007dae <UART_SetConfig+0x33e>
 8007d96:	2300      	movs	r3, #0
 8007d98:	77fb      	strb	r3, [r7, #31]
 8007d9a:	e00d      	b.n	8007db8 <UART_SetConfig+0x348>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e00a      	b.n	8007db8 <UART_SetConfig+0x348>
 8007da2:	2304      	movs	r3, #4
 8007da4:	77fb      	strb	r3, [r7, #31]
 8007da6:	e007      	b.n	8007db8 <UART_SetConfig+0x348>
 8007da8:	2308      	movs	r3, #8
 8007daa:	77fb      	strb	r3, [r7, #31]
 8007dac:	e004      	b.n	8007db8 <UART_SetConfig+0x348>
 8007dae:	2310      	movs	r3, #16
 8007db0:	77fb      	strb	r3, [r7, #31]
 8007db2:	e001      	b.n	8007db8 <UART_SetConfig+0x348>
 8007db4:	2310      	movs	r3, #16
 8007db6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	d15b      	bne.n	8007e7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d828      	bhi.n	8007e1a <UART_SetConfig+0x3aa>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <UART_SetConfig+0x360>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007dfd 	.word	0x08007dfd
 8007dd8:	08007e05 	.word	0x08007e05
 8007ddc:	08007e1b 	.word	0x08007e1b
 8007de0:	08007e0b 	.word	0x08007e0b
 8007de4:	08007e1b 	.word	0x08007e1b
 8007de8:	08007e1b 	.word	0x08007e1b
 8007dec:	08007e1b 	.word	0x08007e1b
 8007df0:	08007e13 	.word	0x08007e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df4:	f7fe fb1c 	bl	8006430 <HAL_RCC_GetPCLK1Freq>
 8007df8:	61b8      	str	r0, [r7, #24]
        break;
 8007dfa:	e013      	b.n	8007e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dfc:	f7fe fb2c 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
 8007e00:	61b8      	str	r0, [r7, #24]
        break;
 8007e02:	e00f      	b.n	8007e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e04:	4b4b      	ldr	r3, [pc, #300]	; (8007f34 <UART_SetConfig+0x4c4>)
 8007e06:	61bb      	str	r3, [r7, #24]
        break;
 8007e08:	e00c      	b.n	8007e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e0a:	f7fe f9ff 	bl	800620c <HAL_RCC_GetSysClockFreq>
 8007e0e:	61b8      	str	r0, [r7, #24]
        break;
 8007e10:	e008      	b.n	8007e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e16:	61bb      	str	r3, [r7, #24]
        break;
 8007e18:	e004      	b.n	8007e24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	77bb      	strb	r3, [r7, #30]
        break;
 8007e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d074      	beq.n	8007f14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	005a      	lsls	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	441a      	add	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	d916      	bls.n	8007e74 <UART_SetConfig+0x404>
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e4c:	d212      	bcs.n	8007e74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f023 030f 	bic.w	r3, r3, #15
 8007e56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	89fa      	ldrh	r2, [r7, #14]
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	e04f      	b.n	8007f14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	77bb      	strb	r3, [r7, #30]
 8007e78:	e04c      	b.n	8007f14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e7a:	7ffb      	ldrb	r3, [r7, #31]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d828      	bhi.n	8007ed2 <UART_SetConfig+0x462>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0x418>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007eb5 	.word	0x08007eb5
 8007e90:	08007ebd 	.word	0x08007ebd
 8007e94:	08007ed3 	.word	0x08007ed3
 8007e98:	08007ec3 	.word	0x08007ec3
 8007e9c:	08007ed3 	.word	0x08007ed3
 8007ea0:	08007ed3 	.word	0x08007ed3
 8007ea4:	08007ed3 	.word	0x08007ed3
 8007ea8:	08007ecb 	.word	0x08007ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fe fac0 	bl	8006430 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	61b8      	str	r0, [r7, #24]
        break;
 8007eb2:	e013      	b.n	8007edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb4:	f7fe fad0 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
 8007eb8:	61b8      	str	r0, [r7, #24]
        break;
 8007eba:	e00f      	b.n	8007edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ebc:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <UART_SetConfig+0x4c4>)
 8007ebe:	61bb      	str	r3, [r7, #24]
        break;
 8007ec0:	e00c      	b.n	8007edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec2:	f7fe f9a3 	bl	800620c <HAL_RCC_GetSysClockFreq>
 8007ec6:	61b8      	str	r0, [r7, #24]
        break;
 8007ec8:	e008      	b.n	8007edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	61bb      	str	r3, [r7, #24]
        break;
 8007ed0:	e004      	b.n	8007edc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8007eda:	bf00      	nop
    }

    if (pclk != 0U)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d018      	beq.n	8007f14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	085a      	lsrs	r2, r3, #1
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	441a      	add	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b0f      	cmp	r3, #15
 8007efa:	d909      	bls.n	8007f10 <UART_SetConfig+0x4a0>
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f02:	d205      	bcs.n	8007f10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60da      	str	r2, [r3, #12]
 8007f0e:	e001      	b.n	8007f14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f20:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40007c00 	.word	0x40007c00
 8007f30:	40023800 	.word	0x40023800
 8007f34:	00f42400 	.word	0x00f42400

08007f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	f003 0310 	and.w	r3, r3, #16
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01a      	beq.n	800804e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008036:	d10a      	bne.n	800804e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af02      	add	r7, sp, #8
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800808c:	f7fa fe72 	bl	8002d74 <HAL_GetTick>
 8008090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b08      	cmp	r3, #8
 800809e:	d10e      	bne.n	80080be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f81b 	bl	80080ea <UART_WaitOnFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e011      	b.n	80080e2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b09c      	sub	sp, #112	; 0x70
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	603b      	str	r3, [r7, #0]
 80080f6:	4613      	mov	r3, r2
 80080f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fa:	e0a7      	b.n	800824c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008102:	f000 80a3 	beq.w	800824c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008106:	f7fa fe35 	bl	8002d74 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008112:	429a      	cmp	r2, r3
 8008114:	d302      	bcc.n	800811c <UART_WaitOnFlagUntilTimeout+0x32>
 8008116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008118:	2b00      	cmp	r3, #0
 800811a:	d13f      	bne.n	800819c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800812a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008130:	667b      	str	r3, [r7, #100]	; 0x64
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800813c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e6      	bne.n	800811c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3308      	adds	r3, #8
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	663b      	str	r3, [r7, #96]	; 0x60
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3308      	adds	r3, #8
 800816c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800816e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800817c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e5      	bne.n	800814e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2220      	movs	r2, #32
 8008186:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e068      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d050      	beq.n	800824c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b8:	d148      	bne.n	800824c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
 80081e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e6      	bne.n	80081c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3308      	adds	r3, #8
 80081fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	613b      	str	r3, [r7, #16]
   return(result);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	66bb      	str	r3, [r7, #104]	; 0x68
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3308      	adds	r3, #8
 8008214:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008216:	623a      	str	r2, [r7, #32]
 8008218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	61bb      	str	r3, [r7, #24]
   return(result);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e5      	bne.n	80081f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2220      	movs	r2, #32
 800822e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2220      	movs	r2, #32
 800823c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e010      	b.n	800826e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69da      	ldr	r2, [r3, #28]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	4013      	ands	r3, r2
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	429a      	cmp	r2, r3
 800825a:	bf0c      	ite	eq
 800825c:	2301      	moveq	r3, #1
 800825e:	2300      	movne	r3, #0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	429a      	cmp	r2, r3
 8008268:	f43f af48 	beq.w	80080fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3770      	adds	r7, #112	; 0x70
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008278:	b084      	sub	sp, #16
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	f107 001c 	add.w	r0, r7, #28
 8008286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	2b01      	cmp	r3, #1
 800828e:	d126      	bne.n	80082de <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	4b38      	ldr	r3, [pc, #224]	; (8008384 <USB_CoreInit+0x10c>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f043 0210 	orr.w	r2, r3, #16
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d105      	bne.n	80082d2 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fc28 	bl	8009b28 <USB_CoreReset>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
 80082dc:	e03a      	b.n	8008354 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d126      	bne.n	8008332 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	4b23      	ldr	r3, [pc, #140]	; (8008384 <USB_CoreInit+0x10c>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f023 0210 	bic.w	r2, r3, #16
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8008314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008316:	2b01      	cmp	r3, #1
 8008318:	d105      	bne.n	8008326 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fbfe 	bl	8009b28 <USB_CoreReset>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	e010      	b.n	8008354 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 fbf2 	bl	8009b28 <USB_CoreReset>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	2b01      	cmp	r3, #1
 8008358:	d10b      	bne.n	8008372 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f043 0206 	orr.w	r2, r3, #6
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f043 0220 	orr.w	r2, r3, #32
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800837e:	b004      	add	sp, #16
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	ffbdffbf 	.word	0xffbdffbf

08008388 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d165      	bne.n	8008468 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4a41      	ldr	r2, [pc, #260]	; (80084a4 <USB_SetTurnaroundTime+0x11c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d906      	bls.n	80083b2 <USB_SetTurnaroundTime+0x2a>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4a40      	ldr	r2, [pc, #256]	; (80084a8 <USB_SetTurnaroundTime+0x120>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d202      	bcs.n	80083b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80083ac:	230f      	movs	r3, #15
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	e062      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4a3c      	ldr	r2, [pc, #240]	; (80084a8 <USB_SetTurnaroundTime+0x120>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d306      	bcc.n	80083c8 <USB_SetTurnaroundTime+0x40>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <USB_SetTurnaroundTime+0x124>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d202      	bcs.n	80083c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80083c2:	230e      	movs	r3, #14
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	e057      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4a38      	ldr	r2, [pc, #224]	; (80084ac <USB_SetTurnaroundTime+0x124>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d306      	bcc.n	80083de <USB_SetTurnaroundTime+0x56>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4a37      	ldr	r2, [pc, #220]	; (80084b0 <USB_SetTurnaroundTime+0x128>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d202      	bcs.n	80083de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083d8:	230d      	movs	r3, #13
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e04c      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4a33      	ldr	r2, [pc, #204]	; (80084b0 <USB_SetTurnaroundTime+0x128>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d306      	bcc.n	80083f4 <USB_SetTurnaroundTime+0x6c>
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	4a32      	ldr	r2, [pc, #200]	; (80084b4 <USB_SetTurnaroundTime+0x12c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d802      	bhi.n	80083f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083ee:	230c      	movs	r3, #12
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	e041      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4a2f      	ldr	r2, [pc, #188]	; (80084b4 <USB_SetTurnaroundTime+0x12c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d906      	bls.n	800840a <USB_SetTurnaroundTime+0x82>
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <USB_SetTurnaroundTime+0x130>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d802      	bhi.n	800840a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008404:	230b      	movs	r3, #11
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	e036      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4a2a      	ldr	r2, [pc, #168]	; (80084b8 <USB_SetTurnaroundTime+0x130>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d906      	bls.n	8008420 <USB_SetTurnaroundTime+0x98>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4a29      	ldr	r2, [pc, #164]	; (80084bc <USB_SetTurnaroundTime+0x134>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d802      	bhi.n	8008420 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800841a:	230a      	movs	r3, #10
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e02b      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a26      	ldr	r2, [pc, #152]	; (80084bc <USB_SetTurnaroundTime+0x134>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d906      	bls.n	8008436 <USB_SetTurnaroundTime+0xae>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4a25      	ldr	r2, [pc, #148]	; (80084c0 <USB_SetTurnaroundTime+0x138>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d202      	bcs.n	8008436 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008430:	2309      	movs	r3, #9
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	e020      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	4a21      	ldr	r2, [pc, #132]	; (80084c0 <USB_SetTurnaroundTime+0x138>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d306      	bcc.n	800844c <USB_SetTurnaroundTime+0xc4>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4a20      	ldr	r2, [pc, #128]	; (80084c4 <USB_SetTurnaroundTime+0x13c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d802      	bhi.n	800844c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008446:	2308      	movs	r3, #8
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e015      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <USB_SetTurnaroundTime+0x13c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d906      	bls.n	8008462 <USB_SetTurnaroundTime+0xda>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <USB_SetTurnaroundTime+0x140>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d202      	bcs.n	8008462 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800845c:	2307      	movs	r3, #7
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e00a      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008462:	2306      	movs	r3, #6
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e007      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d102      	bne.n	8008474 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800846e:	2309      	movs	r3, #9
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e001      	b.n	8008478 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008474:	2309      	movs	r3, #9
 8008476:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	029b      	lsls	r3, r3, #10
 800848c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008490:	431a      	orrs	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	00d8acbf 	.word	0x00d8acbf
 80084a8:	00e4e1c0 	.word	0x00e4e1c0
 80084ac:	00f42400 	.word	0x00f42400
 80084b0:	01067380 	.word	0x01067380
 80084b4:	011a499f 	.word	0x011a499f
 80084b8:	01312cff 	.word	0x01312cff
 80084bc:	014ca43f 	.word	0x014ca43f
 80084c0:	016e3600 	.word	0x016e3600
 80084c4:	01a6ab1f 	.word	0x01a6ab1f
 80084c8:	01e84800 	.word	0x01e84800

080084cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f043 0201 	orr.w	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f023 0201 	bic.w	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d115      	bne.n	800855e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800853e:	2001      	movs	r0, #1
 8008540:	f7fa fc24 	bl	8002d8c <HAL_Delay>
      ms++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fa5b 	bl	8009a06 <USB_GetMode>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d01e      	beq.n	8008594 <USB_SetCurrentMode+0x84>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b31      	cmp	r3, #49	; 0x31
 800855a:	d9f0      	bls.n	800853e <USB_SetCurrentMode+0x2e>
 800855c:	e01a      	b.n	8008594 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d115      	bne.n	8008590 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008570:	2001      	movs	r0, #1
 8008572:	f7fa fc0b 	bl	8002d8c <HAL_Delay>
      ms++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 fa42 	bl	8009a06 <USB_GetMode>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <USB_SetCurrentMode+0x84>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b31      	cmp	r3, #49	; 0x31
 800858c:	d9f0      	bls.n	8008570 <USB_SetCurrentMode+0x60>
 800858e:	e001      	b.n	8008594 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e005      	b.n	80085a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b32      	cmp	r3, #50	; 0x32
 8008598:	d101      	bne.n	800859e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085a8:	b084      	sub	sp, #16
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b086      	sub	sp, #24
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085c2:	2300      	movs	r3, #0
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	e009      	b.n	80085dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3340      	adds	r3, #64	; 0x40
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3301      	adds	r3, #1
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b0e      	cmp	r3, #14
 80085e0:	d9f2      	bls.n	80085c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11c      	bne.n	8008622 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f6:	f043 0302 	orr.w	r3, r3, #2
 80085fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	e005      	b.n	800862e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008634:	461a      	mov	r2, r3
 8008636:	2300      	movs	r3, #0
 8008638:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008640:	4619      	mov	r1, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008648:	461a      	mov	r2, r3
 800864a:	680b      	ldr	r3, [r1, #0]
 800864c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	2b01      	cmp	r3, #1
 8008652:	d10c      	bne.n	800866e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d104      	bne.n	8008664 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f975 	bl	800894c <USB_SetDevSpeed>
 8008662:	e018      	b.n	8008696 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008664:	2101      	movs	r1, #1
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f970 	bl	800894c <USB_SetDevSpeed>
 800866c:	e013      	b.n	8008696 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	2b03      	cmp	r3, #3
 8008672:	d10c      	bne.n	800868e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800867a:	2100      	movs	r1, #0
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f965 	bl	800894c <USB_SetDevSpeed>
 8008682:	e008      	b.n	8008696 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008684:	2101      	movs	r1, #1
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f960 	bl	800894c <USB_SetDevSpeed>
 800868c:	e003      	b.n	8008696 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800868e:	2103      	movs	r1, #3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f95b 	bl	800894c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008696:	2110      	movs	r1, #16
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8f3 	bl	8008884 <USB_FlushTxFifo>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f91f 	bl	80088ec <USB_FlushRxFifo>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086be:	461a      	mov	r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	461a      	mov	r2, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	461a      	mov	r2, r3
 80086d8:	2300      	movs	r3, #0
 80086da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	e043      	b.n	800876a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f8:	d118      	bne.n	800872c <USB_DevInit+0x184>
    {
      if (i == 0U)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	461a      	mov	r2, r3
 800870e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	e013      	b.n	800873e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008722:	461a      	mov	r2, r3
 8008724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	e008      	b.n	800873e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	461a      	mov	r2, r3
 800873a:	2300      	movs	r3, #0
 800873c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874a:	461a      	mov	r2, r3
 800874c:	2300      	movs	r3, #0
 800874e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	461a      	mov	r2, r3
 800875e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	3301      	adds	r3, #1
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	429a      	cmp	r2, r3
 8008770:	d3b7      	bcc.n	80086e2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	e043      	b.n	8008800 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800878a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800878e:	d118      	bne.n	80087c2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a2:	461a      	mov	r2, r3
 80087a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	e013      	b.n	80087d4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b8:	461a      	mov	r2, r3
 80087ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e008      	b.n	80087d4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ce:	461a      	mov	r2, r3
 80087d0:	2300      	movs	r3, #0
 80087d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e0:	461a      	mov	r2, r3
 80087e2:	2300      	movs	r3, #0
 80087e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3301      	adds	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	429a      	cmp	r2, r3
 8008806:	d3b7      	bcc.n	8008778 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800881a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f043 0210 	orr.w	r2, r3, #16
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	4b0e      	ldr	r3, [pc, #56]	; (800887c <USB_DevInit+0x2d4>)
 8008842:	4313      	orrs	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f043 0208 	orr.w	r2, r3, #8
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800885a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d105      	bne.n	800886c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699a      	ldr	r2, [r3, #24]
 8008864:	4b06      	ldr	r3, [pc, #24]	; (8008880 <USB_DevInit+0x2d8>)
 8008866:	4313      	orrs	r3, r2
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800886c:	7dfb      	ldrb	r3, [r7, #23]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008878:	b004      	add	sp, #16
 800887a:	4770      	bx	lr
 800887c:	803c3800 	.word	0x803c3800
 8008880:	40000004 	.word	0x40000004

08008884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <USB_FlushTxFifo+0x64>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d901      	bls.n	80088a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e01b      	b.n	80088dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	daf2      	bge.n	8008892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	019b      	lsls	r3, r3, #6
 80088b4:	f043 0220 	orr.w	r2, r3, #32
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <USB_FlushTxFifo+0x64>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d901      	bls.n	80088ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e006      	b.n	80088dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d0f0      	beq.n	80088bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	00030d40 	.word	0x00030d40

080088ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a11      	ldr	r2, [pc, #68]	; (8008948 <USB_FlushRxFifo+0x5c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e018      	b.n	800893c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	daf2      	bge.n	80088f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2210      	movs	r2, #16
 800891a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4a08      	ldr	r2, [pc, #32]	; (8008948 <USB_FlushRxFifo+0x5c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d901      	bls.n	800892e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e006      	b.n	800893c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b10      	cmp	r3, #16
 8008938:	d0f0      	beq.n	800891c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	00030d40 	.word	0x00030d40

0800894c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800896c:	4313      	orrs	r3, r2
 800896e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 0306 	and.w	r3, r3, #6
 8008996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	e00a      	b.n	80089ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d002      	beq.n	80089b0 <USB_GetDevSpeed+0x32>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b06      	cmp	r3, #6
 80089ae:	d102      	bne.n	80089b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80089b0:	2302      	movs	r3, #2
 80089b2:	75fb      	strb	r3, [r7, #23]
 80089b4:	e001      	b.n	80089ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80089b6:	230f      	movs	r3, #15
 80089b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d139      	bne.n	8008a58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	f003 030f 	and.w	r3, r3, #15
 80089f4:	2101      	movs	r1, #1
 80089f6:	fa01 f303 	lsl.w	r3, r1, r3
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	68f9      	ldr	r1, [r7, #12]
 80089fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a02:	4313      	orrs	r3, r2
 8008a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d153      	bne.n	8008ac4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	791b      	ldrb	r3, [r3, #4]
 8008a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	059b      	lsls	r3, r3, #22
 8008a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a40:	431a      	orrs	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	0159      	lsls	r1, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	440b      	add	r3, r1
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4b20      	ldr	r3, [pc, #128]	; (8008ad4 <USB_ActivateEndpoint+0x10c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	600b      	str	r3, [r1, #0]
 8008a56:	e035      	b.n	8008ac4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	2101      	movs	r1, #1
 8008a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a6e:	041b      	lsls	r3, r3, #16
 8008a70:	68f9      	ldr	r1, [r7, #12]
 8008a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a76:	4313      	orrs	r3, r2
 8008a78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d119      	bne.n	8008ac4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	791b      	ldrb	r3, [r3, #4]
 8008aaa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008aac:	430b      	orrs	r3, r1
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	0159      	lsls	r1, r3, #5
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	440b      	add	r3, r1
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abc:	4619      	mov	r1, r3
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <USB_ActivateEndpoint+0x10c>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	10008000 	.word	0x10008000

08008ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d161      	bne.n	8008bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b0a:	d11f      	bne.n	8008b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	43db      	mvns	r3, r3
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	2101      	movs	r1, #1
 8008b82:	fa01 f303 	lsl.w	r3, r1, r3
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	43db      	mvns	r3, r3
 8008b8a:	68f9      	ldr	r1, [r7, #12]
 8008b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b90:	4013      	ands	r3, r2
 8008b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	0159      	lsls	r1, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	440b      	add	r3, r1
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <USB_DeactivateEndpoint+0x1b0>)
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	600b      	str	r3, [r1, #0]
 8008bb6:	e060      	b.n	8008c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bce:	d11f      	bne.n	8008c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	2101      	movs	r1, #1
 8008c22:	fa01 f303 	lsl.w	r3, r1, r3
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c30:	4013      	ands	r3, r2
 8008c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	69da      	ldr	r2, [r3, #28]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	2101      	movs	r1, #1
 8008c46:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	68f9      	ldr	r1, [r7, #12]
 8008c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c54:	4013      	ands	r3, r2
 8008c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	0159      	lsls	r1, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c72:	4619      	mov	r1, r3
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <USB_DeactivateEndpoint+0x1b4>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	ec337800 	.word	0xec337800
 8008c8c:	eff37800 	.word	0xeff37800

08008c90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f040 8163 	bne.w	8008f78 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d132      	bne.n	8008d20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	0159      	lsls	r1, r3, #5
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	440b      	add	r3, r1
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4ba5      	ldr	r3, [pc, #660]	; (8008f6c <USB_EPStartXfer+0x2dc>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	0159      	lsls	r1, r3, #5
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	440b      	add	r3, r1
 8008d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d16:	4619      	mov	r1, r3
 8008d18:	4b95      	ldr	r3, [pc, #596]	; (8008f70 <USB_EPStartXfer+0x2e0>)
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	610b      	str	r3, [r1, #16]
 8008d1e:	e074      	b.n	8008e0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	0159      	lsls	r1, r3, #5
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	440b      	add	r3, r1
 8008d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4b8c      	ldr	r3, [pc, #560]	; (8008f70 <USB_EPStartXfer+0x2e0>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	015a      	lsls	r2, r3, #5
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	0159      	lsls	r1, r3, #5
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	440b      	add	r3, r1
 8008d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4b83      	ldr	r3, [pc, #524]	; (8008f6c <USB_EPStartXfer+0x2dc>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6999      	ldr	r1, [r3, #24]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	440b      	add	r3, r1
 8008d7c:	1e59      	subs	r1, r3, #1
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d88:	4b7a      	ldr	r3, [pc, #488]	; (8008f74 <USB_EPStartXfer+0x2e4>)
 8008d8a:	400b      	ands	r3, r1
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	0148      	lsls	r0, r1, #5
 8008d90:	69f9      	ldr	r1, [r7, #28]
 8008d92:	4401      	add	r1, r0
 8008d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db2:	69b9      	ldr	r1, [r7, #24]
 8008db4:	0148      	lsls	r0, r1, #5
 8008db6:	69f9      	ldr	r1, [r7, #28]
 8008db8:	4401      	add	r1, r0
 8008dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	791b      	ldrb	r3, [r3, #4]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d11f      	bne.n	8008e0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	0151      	lsls	r1, r2, #5
 8008ddc:	69fa      	ldr	r2, [r7, #28]
 8008dde:	440a      	add	r2, r1
 8008de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	0151      	lsls	r1, r2, #5
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d14b      	bne.n	8008ea8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d009      	beq.n	8008e2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	461a      	mov	r2, r3
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	791b      	ldrb	r3, [r3, #4]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d128      	bne.n	8008e86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d110      	bne.n	8008e66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e00f      	b.n	8008e86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	69fa      	ldr	r2, [r7, #28]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	e137      	b.n	8009118 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ec6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d015      	beq.n	8008efc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 811f 	beq.w	8009118 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	2101      	movs	r1, #1
 8008eec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef0:	69f9      	ldr	r1, [r7, #28]
 8008ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	634b      	str	r3, [r1, #52]	; 0x34
 8008efa:	e10d      	b.n	8009118 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d110      	bne.n	8008f2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e00f      	b.n	8008f4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6919      	ldr	r1, [r3, #16]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	b298      	uxth	r0, r3
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4603      	mov	r3, r0
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 faea 	bl	800953c <USB_WritePacket>
 8008f68:	e0d6      	b.n	8009118 <USB_EPStartXfer+0x488>
 8008f6a:	bf00      	nop
 8008f6c:	e007ffff 	.word	0xe007ffff
 8008f70:	fff80000 	.word	0xfff80000
 8008f74:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	0159      	lsls	r1, r3, #5
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	440b      	add	r3, r1
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f92:	4619      	mov	r1, r3
 8008f94:	4b63      	ldr	r3, [pc, #396]	; (8009124 <USB_EPStartXfer+0x494>)
 8008f96:	4013      	ands	r3, r2
 8008f98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	0159      	lsls	r1, r3, #5
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	440b      	add	r3, r1
 8008fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4b5c      	ldr	r3, [pc, #368]	; (8009128 <USB_EPStartXfer+0x498>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d123      	bne.n	800900c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fda:	69b9      	ldr	r1, [r7, #24]
 8008fdc:	0148      	lsls	r0, r1, #5
 8008fde:	69f9      	ldr	r1, [r7, #28]
 8008fe0:	4401      	add	r1, r0
 8008fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009008:	6113      	str	r3, [r2, #16]
 800900a:	e037      	b.n	800907c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	699a      	ldr	r2, [r3, #24]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	4413      	add	r3, r2
 8009016:	1e5a      	subs	r2, r3, #1
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009020:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	8afa      	ldrh	r2, [r7, #22]
 8009028:	fb03 f202 	mul.w	r2, r3, r2
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	8afb      	ldrh	r3, [r7, #22]
 8009040:	04d9      	lsls	r1, r3, #19
 8009042:	4b3a      	ldr	r3, [pc, #232]	; (800912c <USB_EPStartXfer+0x49c>)
 8009044:	400b      	ands	r3, r1
 8009046:	69b9      	ldr	r1, [r7, #24]
 8009048:	0148      	lsls	r0, r1, #5
 800904a:	69f9      	ldr	r1, [r7, #28]
 800904c:	4401      	add	r1, r0
 800904e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009052:	4313      	orrs	r3, r2
 8009054:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800906c:	69b9      	ldr	r1, [r7, #24]
 800906e:	0148      	lsls	r0, r1, #5
 8009070:	69f9      	ldr	r1, [r7, #28]
 8009072:	4401      	add	r1, r0
 8009074:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009078:	4313      	orrs	r3, r2
 800907a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10d      	bne.n	800909e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d009      	beq.n	800909e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6919      	ldr	r1, [r3, #16]
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909a:	460a      	mov	r2, r1
 800909c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d128      	bne.n	80090f8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d110      	bne.n	80090d8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	e00f      	b.n	80090f8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	0151      	lsls	r1, r2, #5
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	440a      	add	r2, r1
 80090ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	0151      	lsls	r1, r2, #5
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	440a      	add	r2, r1
 800910e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3720      	adds	r7, #32
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	fff80000 	.word	0xfff80000
 8009128:	e007ffff 	.word	0xe007ffff
 800912c:	1ff80000 	.word	0x1ff80000

08009130 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	2b01      	cmp	r3, #1
 800914e:	f040 80ce 	bne.w	80092ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d132      	bne.n	80091c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	0159      	lsls	r1, r3, #5
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	440b      	add	r3, r1
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	4619      	mov	r1, r3
 8009176:	4b9a      	ldr	r3, [pc, #616]	; (80093e0 <USB_EP0StartXfer+0x2b0>)
 8009178:	4013      	ands	r3, r2
 800917a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800919a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	691a      	ldr	r2, [r3, #16]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	0159      	lsls	r1, r3, #5
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	440b      	add	r3, r1
 80091b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b6:	4619      	mov	r1, r3
 80091b8:	4b8a      	ldr	r3, [pc, #552]	; (80093e4 <USB_EP0StartXfer+0x2b4>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	610b      	str	r3, [r1, #16]
 80091be:	e04e      	b.n	800925e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	0159      	lsls	r1, r3, #5
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	440b      	add	r3, r1
 80091d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091da:	4619      	mov	r1, r3
 80091dc:	4b81      	ldr	r3, [pc, #516]	; (80093e4 <USB_EP0StartXfer+0x2b4>)
 80091de:	4013      	ands	r3, r2
 80091e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	691a      	ldr	r2, [r3, #16]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	0159      	lsls	r1, r3, #5
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	440b      	add	r3, r1
 80091f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fc:	4619      	mov	r1, r3
 80091fe:	4b78      	ldr	r3, [pc, #480]	; (80093e0 <USB_EP0StartXfer+0x2b0>)
 8009200:	4013      	ands	r3, r2
 8009202:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	429a      	cmp	r2, r3
 800920e:	d903      	bls.n	8009218 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	68da      	ldr	r2, [r3, #12]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	440a      	add	r2, r1
 800922e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	691a      	ldr	r2, [r3, #16]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800924e:	6939      	ldr	r1, [r7, #16]
 8009250:	0148      	lsls	r0, r1, #5
 8009252:	6979      	ldr	r1, [r7, #20]
 8009254:	4401      	add	r1, r0
 8009256:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800925a:	4313      	orrs	r3, r2
 800925c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d11e      	bne.n	80092a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	461a      	mov	r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	440a      	add	r2, r1
 8009296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	e097      	b.n	80093d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8083 	beq.w	80093d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	2101      	movs	r1, #1
 80092de:	fa01 f303 	lsl.w	r3, r1, r3
 80092e2:	6979      	ldr	r1, [r7, #20]
 80092e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e8:	4313      	orrs	r3, r2
 80092ea:	634b      	str	r3, [r1, #52]	; 0x34
 80092ec:	e071      	b.n	80093d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	0159      	lsls	r1, r3, #5
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	440b      	add	r3, r1
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	4619      	mov	r1, r3
 800930a:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <USB_EP0StartXfer+0x2b4>)
 800930c:	4013      	ands	r3, r2
 800930e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931c:	691a      	ldr	r2, [r3, #16]
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	0159      	lsls	r1, r3, #5
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	440b      	add	r3, r1
 8009326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932a:	4619      	mov	r1, r3
 800932c:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <USB_EP0StartXfer+0x2b0>)
 800932e:	4013      	ands	r3, r2
 8009330:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009380:	6939      	ldr	r1, [r7, #16]
 8009382:	0148      	lsls	r0, r1, #5
 8009384:	6979      	ldr	r1, [r7, #20]
 8009386:	4401      	add	r1, r0
 8009388:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800938c:	4313      	orrs	r3, r2
 800938e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d10d      	bne.n	80093b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6919      	ldr	r1, [r3, #16]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ae:	460a      	mov	r2, r1
 80093b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	371c      	adds	r7, #28
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	e007ffff 	.word	0xe007ffff
 80093e4:	fff80000 	.word	0xfff80000

080093e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	785b      	ldrb	r3, [r3, #1]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d14a      	bne.n	800949c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800941a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800941e:	f040 8086 	bne.w	800952e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	7812      	ldrb	r2, [r2, #0]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009444:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	7812      	ldrb	r2, [r2, #0]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009464:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009468:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f242 7210 	movw	r2, #10000	; 0x2710
 8009476:	4293      	cmp	r3, r2
 8009478:	d902      	bls.n	8009480 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	75fb      	strb	r3, [r7, #23]
          break;
 800947e:	e056      	b.n	800952e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009498:	d0e7      	beq.n	800946a <USB_EPStopXfer+0x82>
 800949a:	e048      	b.n	800952e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b4:	d13b      	bne.n	800952e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	7812      	ldrb	r2, [r2, #0]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	7812      	ldrb	r2, [r2, #0]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f242 7210 	movw	r2, #10000	; 0x2710
 800950a:	4293      	cmp	r3, r2
 800950c:	d902      	bls.n	8009514 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
          break;
 8009512:	e00c      	b.n	800952e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800952c:	d0e7      	beq.n	80094fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800953c:	b480      	push	{r7}
 800953e:	b089      	sub	sp, #36	; 0x24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4611      	mov	r1, r2
 8009548:	461a      	mov	r2, r3
 800954a:	460b      	mov	r3, r1
 800954c:	71fb      	strb	r3, [r7, #7]
 800954e:	4613      	mov	r3, r2
 8009550:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800955a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	d123      	bne.n	80095aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009562:	88bb      	ldrh	r3, [r7, #4]
 8009564:	3303      	adds	r3, #3
 8009566:	089b      	lsrs	r3, r3, #2
 8009568:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	e018      	b.n	80095a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	031a      	lsls	r2, r3, #12
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4413      	add	r3, r2
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	461a      	mov	r2, r3
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3301      	adds	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	3301      	adds	r3, #1
 800958e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	3301      	adds	r3, #1
 8009594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	3301      	adds	r3, #1
 800959a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	3301      	adds	r3, #1
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d3e2      	bcc.n	8009570 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3724      	adds	r7, #36	; 0x24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b08b      	sub	sp, #44	; 0x2c
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	089b      	lsrs	r3, r3, #2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095d6:	88fb      	ldrh	r3, [r7, #6]
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095de:	2300      	movs	r3, #0
 80095e0:	623b      	str	r3, [r7, #32]
 80095e2:	e014      	b.n	800960e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	3301      	adds	r3, #1
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	3301      	adds	r3, #1
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	3301      	adds	r3, #1
 8009600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	3301      	adds	r3, #1
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	3301      	adds	r3, #1
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	6a3a      	ldr	r2, [r7, #32]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	429a      	cmp	r2, r3
 8009614:	d3e6      	bcc.n	80095e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009616:	8bfb      	ldrh	r3, [r7, #30]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01e      	beq.n	800965a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009626:	461a      	mov	r2, r3
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	fa22 f303 	lsr.w	r3, r2, r3
 800963c:	b2da      	uxtb	r2, r3
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	701a      	strb	r2, [r3, #0]
      i++;
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	3301      	adds	r3, #1
 8009646:	623b      	str	r3, [r7, #32]
      pDest++;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	3301      	adds	r3, #1
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800964e:	8bfb      	ldrh	r3, [r7, #30]
 8009650:	3b01      	subs	r3, #1
 8009652:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009654:	8bfb      	ldrh	r3, [r7, #30]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1ea      	bne.n	8009630 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800965c:	4618      	mov	r0, r3
 800965e:	372c      	adds	r7, #44	; 0x2c
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d12c      	bne.n	80096de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	db12      	blt.n	80096bc <USB_EPSetStall+0x54>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00f      	beq.n	80096bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	0151      	lsls	r1, r2, #5
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	440a      	add	r2, r1
 80096b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	e02b      	b.n	8009736 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db12      	blt.n	8009716 <USB_EPSetStall+0xae>
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00f      	beq.n	8009716 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009714:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009734:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d128      	bne.n	80097b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800977a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800977e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	791b      	ldrb	r3, [r3, #4]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d003      	beq.n	8009790 <USB_EPClearStall+0x4c>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	791b      	ldrb	r3, [r3, #4]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d138      	bne.n	8009802 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e027      	b.n	8009802 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	791b      	ldrb	r3, [r3, #4]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d003      	beq.n	80097e2 <USB_EPClearStall+0x9e>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	791b      	ldrb	r3, [r3, #4]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d10f      	bne.n	8009802 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009800:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800982e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009832:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009844:	68f9      	ldr	r1, [r7, #12]
 8009846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800984a:	4313      	orrs	r3, r2
 800984c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800988a:	f023 0302 	bic.w	r3, r3, #2
 800988e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800989e:	b480      	push	{r7}
 80098a0:	b085      	sub	sp, #20
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098b8:	f023 0303 	bic.w	r3, r3, #3
 80098bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098cc:	f043 0302 	orr.w	r3, r3, #2
 80098d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4013      	ands	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098f8:	68fb      	ldr	r3, [r7, #12]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	4013      	ands	r3, r2
 8009928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	0c1b      	lsrs	r3, r3, #16
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	4013      	ands	r3, r2
 800995c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	b29b      	uxth	r3, r3
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	4013      	ands	r3, r2
 800999a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800999c:	68bb      	ldr	r3, [r7, #8]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b087      	sub	sp, #28
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	fa22 f303 	lsr.w	r3, r2, r3
 80099da:	01db      	lsls	r3, r3, #7
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	4013      	ands	r3, r2
 80099f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099f8:	68bb      	ldr	r3, [r7, #8]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	f003 0301 	and.w	r3, r3, #1
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <USB_ActivateSetup+0x44>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	fffff800 	.word	0xfffff800

08009a6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	460b      	mov	r3, r1
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	333c      	adds	r3, #60	; 0x3c
 8009a82:	3304      	adds	r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	4a26      	ldr	r2, [pc, #152]	; (8009b24 <USB_EP0_OutStart+0xb8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d90a      	bls.n	8009aa6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aa0:	d101      	bne.n	8009aa6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e037      	b.n	8009b16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aac:	461a      	mov	r2, r3
 8009aae:	2300      	movs	r3, #0
 8009ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad4:	f043 0318 	orr.w	r3, r3, #24
 8009ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009aec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d10f      	bne.n	8009b14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009b12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	371c      	adds	r7, #28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	4f54300a 	.word	0x4f54300a

08009b28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <USB_CoreReset+0x64>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d901      	bls.n	8009b46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e01b      	b.n	8009b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	daf2      	bge.n	8009b34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f043 0201 	orr.w	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4a09      	ldr	r2, [pc, #36]	; (8009b8c <USB_CoreReset+0x64>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d901      	bls.n	8009b70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e006      	b.n	8009b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d0f0      	beq.n	8009b5e <USB_CoreReset+0x36>

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	00030d40 	.word	0x00030d40

08009b90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009b94:	4904      	ldr	r1, [pc, #16]	; (8009ba8 <MX_FATFS_Init+0x18>)
 8009b96:	4805      	ldr	r0, [pc, #20]	; (8009bac <MX_FATFS_Init+0x1c>)
 8009b98:	f005 f90a 	bl	800edb0 <FATFS_LinkDriver>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <MX_FATFS_Init+0x20>)
 8009ba2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ba4:	bf00      	nop
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000818 	.word	0x20000818
 8009bac:	20000010 	.word	0x20000010
 8009bb0:	20000814 	.word	0x20000814

08009bb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009bb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f9d3 	bl	8009f7c <USER_SPI_initialize>
 8009bd6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fab1 	bl	800a154 <USER_SPI_status>
 8009bf2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8009c0c:	7bf8      	ldrb	r0, [r7, #15]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	f000 fab4 	bl	800a180 <USER_SPI_read>
 8009c18:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	603b      	str	r3, [r7, #0]
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8009c32:	7bf8      	ldrb	r0, [r7, #15]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	f000 fb07 	bl	800a24c <USER_SPI_write>
 8009c3e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	603a      	str	r2, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
 8009c54:	460b      	mov	r3, r1
 8009c56:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8009c58:	79b9      	ldrb	r1, [r7, #6]
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 fb70 	bl	800a344 <USER_SPI_ioctl>
 8009c64:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009c78:	f7f9 f87c 	bl	8002d74 <HAL_GetTick>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4a04      	ldr	r2, [pc, #16]	; (8009c90 <SPI_Timer_On+0x20>)
 8009c80:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009c82:	4a04      	ldr	r2, [pc, #16]	; (8009c94 <SPI_Timer_On+0x24>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6013      	str	r3, [r2, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	20000820 	.word	0x20000820
 8009c94:	20000824 	.word	0x20000824

08009c98 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009c9c:	f7f9 f86a 	bl	8002d74 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <SPI_Timer_Status+0x24>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	1ad2      	subs	r2, r2, r3
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <SPI_Timer_Status+0x28>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	bf34      	ite	cc
 8009cb0:	2301      	movcc	r3, #1
 8009cb2:	2300      	movcs	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	20000820 	.word	0x20000820
 8009cc0:	20000824 	.word	0x20000824

08009cc4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009cce:	f107 020f 	add.w	r2, r7, #15
 8009cd2:	1df9      	adds	r1, r7, #7
 8009cd4:	2332      	movs	r3, #50	; 0x32
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4804      	ldr	r0, [pc, #16]	; (8009cec <xchg_spi+0x28>)
 8009cdc:	f7fd fa63 	bl	80071a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000340 	.word	0x20000340

08009cf0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009cf0:	b590      	push	{r4, r7, lr}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e00a      	b.n	8009d16 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	18d4      	adds	r4, r2, r3
 8009d06:	20ff      	movs	r0, #255	; 0xff
 8009d08:	f7ff ffdc 	bl	8009cc4 <xchg_spi>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3301      	adds	r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d3f0      	bcc.n	8009d00 <rcvr_spi_multi+0x10>
	}
}
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd90      	pop	{r4, r7, pc}

08009d28 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4803      	ldr	r0, [pc, #12]	; (8009d4c <xmit_spi_multi+0x24>)
 8009d3e:	f7fc ff94 	bl	8006c6a <HAL_SPI_Transmit>
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000340 	.word	0x20000340

08009d50 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009d58:	f7f9 f80c 	bl	8002d74 <HAL_GetTick>
 8009d5c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009d62:	20ff      	movs	r0, #255	; 0xff
 8009d64:	f7ff ffae 	bl	8009cc4 <xchg_spi>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d007      	beq.n	8009d82 <wait_ready+0x32>
 8009d72:	f7f8 ffff 	bl	8002d74 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d8ef      	bhi.n	8009d62 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2bff      	cmp	r3, #255	; 0xff
 8009d86:	bf0c      	ite	eq
 8009d88:	2301      	moveq	r3, #1
 8009d8a:	2300      	movne	r3, #0
 8009d8c:	b2db      	uxtb	r3, r3
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	2180      	movs	r1, #128	; 0x80
 8009da0:	4803      	ldr	r0, [pc, #12]	; (8009db0 <despiselect+0x18>)
 8009da2:	f7f9 fd59 	bl	8003858 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009da6:	20ff      	movs	r0, #255	; 0xff
 8009da8:	f7ff ff8c 	bl	8009cc4 <xchg_spi>

}
 8009dac:	bf00      	nop
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	40020400 	.word	0x40020400

08009db4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009db8:	2200      	movs	r2, #0
 8009dba:	2180      	movs	r1, #128	; 0x80
 8009dbc:	4809      	ldr	r0, [pc, #36]	; (8009de4 <spiselect+0x30>)
 8009dbe:	f7f9 fd4b 	bl	8003858 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009dc2:	20ff      	movs	r0, #255	; 0xff
 8009dc4:	f7ff ff7e 	bl	8009cc4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009dcc:	f7ff ffc0 	bl	8009d50 <wait_ready>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <spiselect+0x26>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e002      	b.n	8009de0 <spiselect+0x2c>

	despiselect();
 8009dda:	f7ff ffdd 	bl	8009d98 <despiselect>
	return 0;	/* Timeout */
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	40020400 	.word	0x40020400

08009de8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009df2:	20c8      	movs	r0, #200	; 0xc8
 8009df4:	f7ff ff3c 	bl	8009c70 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009df8:	20ff      	movs	r0, #255	; 0xff
 8009dfa:	f7ff ff63 	bl	8009cc4 <xchg_spi>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	2bff      	cmp	r3, #255	; 0xff
 8009e06:	d104      	bne.n	8009e12 <rcvr_datablock+0x2a>
 8009e08:	f7ff ff46 	bl	8009c98 <SPI_Timer_Status>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f2      	bne.n	8009df8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	2bfe      	cmp	r3, #254	; 0xfe
 8009e16:	d001      	beq.n	8009e1c <rcvr_datablock+0x34>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e00a      	b.n	8009e32 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff ff66 	bl	8009cf0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009e24:	20ff      	movs	r0, #255	; 0xff
 8009e26:	f7ff ff4d 	bl	8009cc4 <xchg_spi>
 8009e2a:	20ff      	movs	r0, #255	; 0xff
 8009e2c:	f7ff ff4a 	bl	8009cc4 <xchg_spi>

	return 1;						/* Function succeeded */
 8009e30:	2301      	movs	r3, #1
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e4a:	f7ff ff81 	bl	8009d50 <wait_ready>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <xmit_datablock+0x1e>
 8009e54:	2300      	movs	r3, #0
 8009e56:	e01e      	b.n	8009e96 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7ff ff32 	bl	8009cc4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	2bfd      	cmp	r3, #253	; 0xfd
 8009e64:	d016      	beq.n	8009e94 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff ff5c 	bl	8009d28 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009e70:	20ff      	movs	r0, #255	; 0xff
 8009e72:	f7ff ff27 	bl	8009cc4 <xchg_spi>
 8009e76:	20ff      	movs	r0, #255	; 0xff
 8009e78:	f7ff ff24 	bl	8009cc4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009e7c:	20ff      	movs	r0, #255	; 0xff
 8009e7e:	f7ff ff21 	bl	8009cc4 <xchg_spi>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	f003 031f 	and.w	r3, r3, #31
 8009e8c:	2b05      	cmp	r3, #5
 8009e8e:	d001      	beq.n	8009e94 <xmit_datablock+0x5a>
 8009e90:	2300      	movs	r3, #0
 8009e92:	e000      	b.n	8009e96 <xmit_datablock+0x5c>
	}
	return 1;
 8009e94:	2301      	movs	r3, #1
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	6039      	str	r1, [r7, #0]
 8009ea8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da0e      	bge.n	8009ed0 <send_cmd+0x32>
		cmd &= 0x7F;
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009eba:	2100      	movs	r1, #0
 8009ebc:	2037      	movs	r0, #55	; 0x37
 8009ebe:	f7ff ffee 	bl	8009e9e <send_cmd>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d901      	bls.n	8009ed0 <send_cmd+0x32>
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	e051      	b.n	8009f74 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009ed0:	79fb      	ldrb	r3, [r7, #7]
 8009ed2:	2b0c      	cmp	r3, #12
 8009ed4:	d008      	beq.n	8009ee8 <send_cmd+0x4a>
		despiselect();
 8009ed6:	f7ff ff5f 	bl	8009d98 <despiselect>
		if (!spiselect()) return 0xFF;
 8009eda:	f7ff ff6b 	bl	8009db4 <spiselect>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <send_cmd+0x4a>
 8009ee4:	23ff      	movs	r3, #255	; 0xff
 8009ee6:	e045      	b.n	8009f74 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff fee7 	bl	8009cc4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	0e1b      	lsrs	r3, r3, #24
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff fee1 	bl	8009cc4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	0c1b      	lsrs	r3, r3, #16
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff fedb 	bl	8009cc4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff fed5 	bl	8009cc4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fed0 	bl	8009cc4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <send_cmd+0x94>
 8009f2e:	2395      	movs	r3, #149	; 0x95
 8009f30:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d101      	bne.n	8009f3c <send_cmd+0x9e>
 8009f38:	2387      	movs	r3, #135	; 0x87
 8009f3a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff fec0 	bl	8009cc4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	2b0c      	cmp	r3, #12
 8009f48:	d102      	bne.n	8009f50 <send_cmd+0xb2>
 8009f4a:	20ff      	movs	r0, #255	; 0xff
 8009f4c:	f7ff feba 	bl	8009cc4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009f50:	230a      	movs	r3, #10
 8009f52:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009f54:	20ff      	movs	r0, #255	; 0xff
 8009f56:	f7ff feb5 	bl	8009cc4 <xchg_spi>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da05      	bge.n	8009f72 <send_cmd+0xd4>
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	73fb      	strb	r3, [r7, #15]
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f0      	bne.n	8009f54 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009f7c:	b590      	push	{r4, r7, lr}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <USER_SPI_initialize+0x14>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e0d6      	b.n	800a13e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009f90:	4b6d      	ldr	r3, [pc, #436]	; (800a148 <USER_SPI_initialize+0x1cc>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	f003 0302 	and.w	r3, r3, #2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <USER_SPI_initialize+0x2a>
 8009f9e:	4b6a      	ldr	r3, [pc, #424]	; (800a148 <USER_SPI_initialize+0x1cc>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	e0cb      	b.n	800a13e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009fa6:	4b69      	ldr	r3, [pc, #420]	; (800a14c <USER_SPI_initialize+0x1d0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009fb0:	4b66      	ldr	r3, [pc, #408]	; (800a14c <USER_SPI_initialize+0x1d0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009fb8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009fba:	230a      	movs	r3, #10
 8009fbc:	73fb      	strb	r3, [r7, #15]
 8009fbe:	e005      	b.n	8009fcc <USER_SPI_initialize+0x50>
 8009fc0:	20ff      	movs	r0, #255	; 0xff
 8009fc2:	f7ff fe7f 	bl	8009cc4 <xchg_spi>
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f6      	bne.n	8009fc0 <USER_SPI_initialize+0x44>

	ty = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f7ff ff60 	bl	8009e9e <send_cmd>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	f040 808b 	bne.w	800a0fc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fea:	f7ff fe41 	bl	8009c70 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009fee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ff2:	2008      	movs	r0, #8
 8009ff4:	f7ff ff53 	bl	8009e9e <send_cmd>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d151      	bne.n	800a0a2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
 800a002:	e00d      	b.n	800a020 <USER_SPI_initialize+0xa4>
 800a004:	7bfc      	ldrb	r4, [r7, #15]
 800a006:	20ff      	movs	r0, #255	; 0xff
 800a008:	f7ff fe5c 	bl	8009cc4 <xchg_spi>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	f104 0310 	add.w	r3, r4, #16
 800a014:	443b      	add	r3, r7
 800a016:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	3301      	adds	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	2b03      	cmp	r3, #3
 800a024:	d9ee      	bls.n	800a004 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a026:	7abb      	ldrb	r3, [r7, #10]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d167      	bne.n	800a0fc <USER_SPI_initialize+0x180>
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	2baa      	cmp	r3, #170	; 0xaa
 800a030:	d164      	bne.n	800a0fc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a032:	bf00      	nop
 800a034:	f7ff fe30 	bl	8009c98 <SPI_Timer_Status>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d007      	beq.n	800a04e <USER_SPI_initialize+0xd2>
 800a03e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a042:	20a9      	movs	r0, #169	; 0xa9
 800a044:	f7ff ff2b 	bl	8009e9e <send_cmd>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f2      	bne.n	800a034 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a04e:	f7ff fe23 	bl	8009c98 <SPI_Timer_Status>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d051      	beq.n	800a0fc <USER_SPI_initialize+0x180>
 800a058:	2100      	movs	r1, #0
 800a05a:	203a      	movs	r0, #58	; 0x3a
 800a05c:	f7ff ff1f 	bl	8009e9e <send_cmd>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d14a      	bne.n	800a0fc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]
 800a06a:	e00d      	b.n	800a088 <USER_SPI_initialize+0x10c>
 800a06c:	7bfc      	ldrb	r4, [r7, #15]
 800a06e:	20ff      	movs	r0, #255	; 0xff
 800a070:	f7ff fe28 	bl	8009cc4 <xchg_spi>
 800a074:	4603      	mov	r3, r0
 800a076:	461a      	mov	r2, r3
 800a078:	f104 0310 	add.w	r3, r4, #16
 800a07c:	443b      	add	r3, r7
 800a07e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	3301      	adds	r3, #1
 800a086:	73fb      	strb	r3, [r7, #15]
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d9ee      	bls.n	800a06c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a08e:	7a3b      	ldrb	r3, [r7, #8]
 800a090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <USER_SPI_initialize+0x120>
 800a098:	230c      	movs	r3, #12
 800a09a:	e000      	b.n	800a09e <USER_SPI_initialize+0x122>
 800a09c:	2304      	movs	r3, #4
 800a09e:	737b      	strb	r3, [r7, #13]
 800a0a0:	e02c      	b.n	800a0fc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	20a9      	movs	r0, #169	; 0xa9
 800a0a6:	f7ff fefa 	bl	8009e9e <send_cmd>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d804      	bhi.n	800a0ba <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	737b      	strb	r3, [r7, #13]
 800a0b4:	23a9      	movs	r3, #169	; 0xa9
 800a0b6:	73bb      	strb	r3, [r7, #14]
 800a0b8:	e003      	b.n	800a0c2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	737b      	strb	r3, [r7, #13]
 800a0be:	2301      	movs	r3, #1
 800a0c0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a0c2:	bf00      	nop
 800a0c4:	f7ff fde8 	bl	8009c98 <SPI_Timer_Status>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d007      	beq.n	800a0de <USER_SPI_initialize+0x162>
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fee3 	bl	8009e9e <send_cmd>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1f2      	bne.n	800a0c4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a0de:	f7ff fddb 	bl	8009c98 <SPI_Timer_Status>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d007      	beq.n	800a0f8 <USER_SPI_initialize+0x17c>
 800a0e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0ec:	2010      	movs	r0, #16
 800a0ee:	f7ff fed6 	bl	8009e9e <send_cmd>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <USER_SPI_initialize+0x180>
				ty = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a0fc:	4a14      	ldr	r2, [pc, #80]	; (800a150 <USER_SPI_initialize+0x1d4>)
 800a0fe:	7b7b      	ldrb	r3, [r7, #13]
 800a100:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a102:	f7ff fe49 	bl	8009d98 <despiselect>

	if (ty) {			/* OK */
 800a106:	7b7b      	ldrb	r3, [r7, #13]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d012      	beq.n	800a132 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <USER_SPI_initialize+0x1d0>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <USER_SPI_initialize+0x1d0>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800a11e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a120:	4b09      	ldr	r3, [pc, #36]	; (800a148 <USER_SPI_initialize+0x1cc>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	b2db      	uxtb	r3, r3
 800a126:	f023 0301 	bic.w	r3, r3, #1
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <USER_SPI_initialize+0x1cc>)
 800a12e:	701a      	strb	r2, [r3, #0]
 800a130:	e002      	b.n	800a138 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <USER_SPI_initialize+0x1cc>)
 800a134:	2201      	movs	r2, #1
 800a136:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a138:	4b03      	ldr	r3, [pc, #12]	; (800a148 <USER_SPI_initialize+0x1cc>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b2db      	uxtb	r3, r3
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	bd90      	pop	{r4, r7, pc}
 800a146:	bf00      	nop
 800a148:	20000024 	.word	0x20000024
 800a14c:	20000340 	.word	0x20000340
 800a150:	2000081c 	.word	0x2000081c

0800a154 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <USER_SPI_status+0x14>
 800a164:	2301      	movs	r3, #1
 800a166:	e002      	b.n	800a16e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a168:	4b04      	ldr	r3, [pc, #16]	; (800a17c <USER_SPI_status+0x28>)
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	b2db      	uxtb	r3, r3
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	20000024 	.word	0x20000024

0800a180 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
 800a18a:	603b      	str	r3, [r7, #0]
 800a18c:	4603      	mov	r3, r0
 800a18e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <USER_SPI_read+0x1c>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <USER_SPI_read+0x20>
 800a19c:	2304      	movs	r3, #4
 800a19e:	e04d      	b.n	800a23c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a1a0:	4b28      	ldr	r3, [pc, #160]	; (800a244 <USER_SPI_read+0xc4>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <USER_SPI_read+0x32>
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e044      	b.n	800a23c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a1b2:	4b25      	ldr	r3, [pc, #148]	; (800a248 <USER_SPI_read+0xc8>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d102      	bne.n	800a1c4 <USER_SPI_read+0x44>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	025b      	lsls	r3, r3, #9
 800a1c2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d111      	bne.n	800a1ee <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	2011      	movs	r0, #17
 800a1ce:	f7ff fe66 	bl	8009e9e <send_cmd>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d129      	bne.n	800a22c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a1d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1dc:	68b8      	ldr	r0, [r7, #8]
 800a1de:	f7ff fe03 	bl	8009de8 <rcvr_datablock>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d021      	beq.n	800a22c <USER_SPI_read+0xac>
			count = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	e01e      	b.n	800a22c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	2012      	movs	r0, #18
 800a1f2:	f7ff fe54 	bl	8009e9e <send_cmd>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d117      	bne.n	800a22c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a1fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a200:	68b8      	ldr	r0, [r7, #8]
 800a202:	f7ff fdf1 	bl	8009de8 <rcvr_datablock>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <USER_SPI_read+0xa2>
				buff += 512;
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a212:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3b01      	subs	r3, #1
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1ed      	bne.n	800a1fc <USER_SPI_read+0x7c>
 800a220:	e000      	b.n	800a224 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a222:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a224:	2100      	movs	r1, #0
 800a226:	200c      	movs	r0, #12
 800a228:	f7ff fe39 	bl	8009e9e <send_cmd>
		}
	}
	despiselect();
 800a22c:	f7ff fdb4 	bl	8009d98 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	bf14      	ite	ne
 800a236:	2301      	movne	r3, #1
 800a238:	2300      	moveq	r3, #0
 800a23a:	b2db      	uxtb	r3, r3
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000024 	.word	0x20000024
 800a248:	2000081c 	.word	0x2000081c

0800a24c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	603b      	str	r3, [r7, #0]
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <USER_SPI_write+0x1c>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <USER_SPI_write+0x20>
 800a268:	2304      	movs	r3, #4
 800a26a:	e063      	b.n	800a334 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a26c:	4b33      	ldr	r3, [pc, #204]	; (800a33c <USER_SPI_write+0xf0>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <USER_SPI_write+0x32>
 800a27a:	2303      	movs	r3, #3
 800a27c:	e05a      	b.n	800a334 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a27e:	4b2f      	ldr	r3, [pc, #188]	; (800a33c <USER_SPI_write+0xf0>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <USER_SPI_write+0x44>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e051      	b.n	800a334 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a290:	4b2b      	ldr	r3, [pc, #172]	; (800a340 <USER_SPI_write+0xf4>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <USER_SPI_write+0x56>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	025b      	lsls	r3, r3, #9
 800a2a0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d110      	bne.n	800a2ca <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a2a8:	6879      	ldr	r1, [r7, #4]
 800a2aa:	2018      	movs	r0, #24
 800a2ac:	f7ff fdf7 	bl	8009e9e <send_cmd>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d136      	bne.n	800a324 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a2b6:	21fe      	movs	r1, #254	; 0xfe
 800a2b8:	68b8      	ldr	r0, [r7, #8]
 800a2ba:	f7ff fdbe 	bl	8009e3a <xmit_datablock>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d02f      	beq.n	800a324 <USER_SPI_write+0xd8>
			count = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	e02c      	b.n	800a324 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a2ca:	4b1d      	ldr	r3, [pc, #116]	; (800a340 <USER_SPI_write+0xf4>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	f003 0306 	and.w	r3, r3, #6
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <USER_SPI_write+0x92>
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	2097      	movs	r0, #151	; 0x97
 800a2da:	f7ff fde0 	bl	8009e9e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	2019      	movs	r0, #25
 800a2e2:	f7ff fddc 	bl	8009e9e <send_cmd>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d11b      	bne.n	800a324 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a2ec:	21fc      	movs	r1, #252	; 0xfc
 800a2ee:	68b8      	ldr	r0, [r7, #8]
 800a2f0:	f7ff fda3 	bl	8009e3a <xmit_datablock>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <USER_SPI_write+0xc4>
				buff += 512;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a300:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	3b01      	subs	r3, #1
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1ee      	bne.n	800a2ec <USER_SPI_write+0xa0>
 800a30e:	e000      	b.n	800a312 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a310:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a312:	21fd      	movs	r1, #253	; 0xfd
 800a314:	2000      	movs	r0, #0
 800a316:	f7ff fd90 	bl	8009e3a <xmit_datablock>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USER_SPI_write+0xd8>
 800a320:	2301      	movs	r3, #1
 800a322:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a324:	f7ff fd38 	bl	8009d98 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	bf14      	ite	ne
 800a32e:	2301      	movne	r3, #1
 800a330:	2300      	moveq	r3, #0
 800a332:	b2db      	uxtb	r3, r3
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20000024 	.word	0x20000024
 800a340:	2000081c 	.word	0x2000081c

0800a344 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	; 0x30
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	603a      	str	r2, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	460b      	mov	r3, r1
 800a352:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <USER_SPI_ioctl+0x1a>
 800a35a:	2304      	movs	r3, #4
 800a35c:	e15a      	b.n	800a614 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a35e:	4baf      	ldr	r3, [pc, #700]	; (800a61c <USER_SPI_ioctl+0x2d8>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <USER_SPI_ioctl+0x2c>
 800a36c:	2303      	movs	r3, #3
 800a36e:	e151      	b.n	800a614 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a376:	79bb      	ldrb	r3, [r7, #6]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	f200 8136 	bhi.w	800a5ea <USER_SPI_ioctl+0x2a6>
 800a37e:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <USER_SPI_ioctl+0x40>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a399 	.word	0x0800a399
 800a388:	0800a3ad 	.word	0x0800a3ad
 800a38c:	0800a5eb 	.word	0x0800a5eb
 800a390:	0800a459 	.word	0x0800a459
 800a394:	0800a54f 	.word	0x0800a54f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a398:	f7ff fd0c 	bl	8009db4 <spiselect>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 8127 	beq.w	800a5f2 <USER_SPI_ioctl+0x2ae>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a3aa:	e122      	b.n	800a5f2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	2009      	movs	r0, #9
 800a3b0:	f7ff fd75 	bl	8009e9e <send_cmd>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f040 811d 	bne.w	800a5f6 <USER_SPI_ioctl+0x2b2>
 800a3bc:	f107 030c 	add.w	r3, r7, #12
 800a3c0:	2110      	movs	r1, #16
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fd10 	bl	8009de8 <rcvr_datablock>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 8113 	beq.w	800a5f6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a3d0:	7b3b      	ldrb	r3, [r7, #12]
 800a3d2:	099b      	lsrs	r3, r3, #6
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d111      	bne.n	800a3fe <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a3da:	7d7b      	ldrb	r3, [r7, #21]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	7d3b      	ldrb	r3, [r7, #20]
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	4413      	add	r3, r2
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	7cfb      	ldrb	r3, [r7, #19]
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a3ee:	4413      	add	r3, r2
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	029a      	lsls	r2, r3, #10
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	e028      	b.n	800a450 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a3fe:	7c7b      	ldrb	r3, [r7, #17]
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	b2da      	uxtb	r2, r3
 800a406:	7dbb      	ldrb	r3, [r7, #22]
 800a408:	09db      	lsrs	r3, r3, #7
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	7d7b      	ldrb	r3, [r7, #21]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 0306 	and.w	r3, r3, #6
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	4413      	add	r3, r2
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	3302      	adds	r3, #2
 800a422:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a426:	7d3b      	ldrb	r3, [r7, #20]
 800a428:	099b      	lsrs	r3, r3, #6
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	7cfb      	ldrb	r3, [r7, #19]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	441a      	add	r2, r3
 800a434:	7cbb      	ldrb	r3, [r7, #18]
 800a436:	029b      	lsls	r3, r3, #10
 800a438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a43c:	4413      	add	r3, r2
 800a43e:	3301      	adds	r3, #1
 800a440:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a442:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a446:	3b09      	subs	r3, #9
 800a448:	69fa      	ldr	r2, [r7, #28]
 800a44a:	409a      	lsls	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a456:	e0ce      	b.n	800a5f6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a458:	4b71      	ldr	r3, [pc, #452]	; (800a620 <USER_SPI_ioctl+0x2dc>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d031      	beq.n	800a4c8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a464:	2100      	movs	r1, #0
 800a466:	208d      	movs	r0, #141	; 0x8d
 800a468:	f7ff fd19 	bl	8009e9e <send_cmd>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 80c3 	bne.w	800a5fa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a474:	20ff      	movs	r0, #255	; 0xff
 800a476:	f7ff fc25 	bl	8009cc4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a47a:	f107 030c 	add.w	r3, r7, #12
 800a47e:	2110      	movs	r1, #16
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fcb1 	bl	8009de8 <rcvr_datablock>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 80b6 	beq.w	800a5fa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a48e:	2330      	movs	r3, #48	; 0x30
 800a490:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a494:	e007      	b.n	800a4a6 <USER_SPI_ioctl+0x162>
 800a496:	20ff      	movs	r0, #255	; 0xff
 800a498:	f7ff fc14 	bl	8009cc4 <xchg_spi>
 800a49c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a4a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1f3      	bne.n	800a496 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a4ae:	7dbb      	ldrb	r3, [r7, #22]
 800a4b0:	091b      	lsrs	r3, r3, #4
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	fa03 f202 	lsl.w	r2, r3, r2
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a4c6:	e098      	b.n	800a5fa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	2009      	movs	r0, #9
 800a4cc:	f7ff fce7 	bl	8009e9e <send_cmd>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f040 8091 	bne.w	800a5fa <USER_SPI_ioctl+0x2b6>
 800a4d8:	f107 030c 	add.w	r3, r7, #12
 800a4dc:	2110      	movs	r1, #16
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fc82 	bl	8009de8 <rcvr_datablock>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 8087 	beq.w	800a5fa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a4ec:	4b4c      	ldr	r3, [pc, #304]	; (800a620 <USER_SPI_ioctl+0x2dc>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d012      	beq.n	800a51e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a4f8:	7dbb      	ldrb	r3, [r7, #22]
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a500:	7dfa      	ldrb	r2, [r7, #23]
 800a502:	09d2      	lsrs	r2, r2, #7
 800a504:	b2d2      	uxtb	r2, r2
 800a506:	4413      	add	r3, r2
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	7e7b      	ldrb	r3, [r7, #25]
 800a50c:	099b      	lsrs	r3, r3, #6
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	fa02 f303 	lsl.w	r3, r2, r3
 800a516:	461a      	mov	r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	e013      	b.n	800a546 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a51e:	7dbb      	ldrb	r3, [r7, #22]
 800a520:	109b      	asrs	r3, r3, #2
 800a522:	b29b      	uxth	r3, r3
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	3301      	adds	r3, #1
 800a52a:	7dfa      	ldrb	r2, [r7, #23]
 800a52c:	00d2      	lsls	r2, r2, #3
 800a52e:	f002 0218 	and.w	r2, r2, #24
 800a532:	7df9      	ldrb	r1, [r7, #23]
 800a534:	0949      	lsrs	r1, r1, #5
 800a536:	b2c9      	uxtb	r1, r1
 800a538:	440a      	add	r2, r1
 800a53a:	3201      	adds	r2, #1
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	461a      	mov	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a54c:	e055      	b.n	800a5fa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a54e:	4b34      	ldr	r3, [pc, #208]	; (800a620 <USER_SPI_ioctl+0x2dc>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	f003 0306 	and.w	r3, r3, #6
 800a556:	2b00      	cmp	r3, #0
 800a558:	d051      	beq.n	800a5fe <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a55a:	f107 020c 	add.w	r2, r7, #12
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	210b      	movs	r1, #11
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff feee 	bl	800a344 <USER_SPI_ioctl>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d149      	bne.n	800a602 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a56e:	7b3b      	ldrb	r3, [r7, #12]
 800a570:	099b      	lsrs	r3, r3, #6
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <USER_SPI_ioctl+0x23e>
 800a578:	7dbb      	ldrb	r3, [r7, #22]
 800a57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d041      	beq.n	800a606 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	623b      	str	r3, [r7, #32]
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a592:	4b23      	ldr	r3, [pc, #140]	; (800a620 <USER_SPI_ioctl+0x2dc>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d105      	bne.n	800a5aa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	025b      	lsls	r3, r3, #9
 800a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	025b      	lsls	r3, r3, #9
 800a5a8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a5aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ac:	2020      	movs	r0, #32
 800a5ae:	f7ff fc76 	bl	8009e9e <send_cmd>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d128      	bne.n	800a60a <USER_SPI_ioctl+0x2c6>
 800a5b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5ba:	2021      	movs	r0, #33	; 0x21
 800a5bc:	f7ff fc6f 	bl	8009e9e <send_cmd>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d121      	bne.n	800a60a <USER_SPI_ioctl+0x2c6>
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	2026      	movs	r0, #38	; 0x26
 800a5ca:	f7ff fc68 	bl	8009e9e <send_cmd>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d11a      	bne.n	800a60a <USER_SPI_ioctl+0x2c6>
 800a5d4:	f247 5030 	movw	r0, #30000	; 0x7530
 800a5d8:	f7ff fbba 	bl	8009d50 <wait_ready>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d013      	beq.n	800a60a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a5e8:	e00f      	b.n	800a60a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a5ea:	2304      	movs	r3, #4
 800a5ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a5f0:	e00c      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		break;
 800a5f2:	bf00      	nop
 800a5f4:	e00a      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		break;
 800a5f6:	bf00      	nop
 800a5f8:	e008      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		break;
 800a5fa:	bf00      	nop
 800a5fc:	e006      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a5fe:	bf00      	nop
 800a600:	e004      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a602:	bf00      	nop
 800a604:	e002      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a606:	bf00      	nop
 800a608:	e000      	b.n	800a60c <USER_SPI_ioctl+0x2c8>
		break;
 800a60a:	bf00      	nop
	}

	despiselect();
 800a60c:	f7ff fbc4 	bl	8009d98 <despiselect>

	return res;
 800a610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a614:	4618      	mov	r0, r3
 800a616:	3730      	adds	r7, #48	; 0x30
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20000024 	.word	0x20000024
 800a620:	2000081c 	.word	0x2000081c

0800a624 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a630:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a634:	f005 f97e 	bl	800f934 <malloc>
 800a638:	4603      	mov	r3, r0
 800a63a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	32b0      	adds	r2, #176	; 0xb0
 800a64c:	2100      	movs	r1, #0
 800a64e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a652:	2302      	movs	r3, #2
 800a654:	e0d4      	b.n	800a800 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a656:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a65a:	2100      	movs	r1, #0
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f005 fa69 	bl	800fb34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	32b0      	adds	r2, #176	; 0xb0
 800a66c:	68f9      	ldr	r1, [r7, #12]
 800a66e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	32b0      	adds	r2, #176	; 0xb0
 800a67c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	7c1b      	ldrb	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d138      	bne.n	800a700 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a68e:	4b5e      	ldr	r3, [pc, #376]	; (800a808 <USBD_CDC_Init+0x1e4>)
 800a690:	7819      	ldrb	r1, [r3, #0]
 800a692:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a696:	2202      	movs	r2, #2
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f004 ffa8 	bl	800f5ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a69e:	4b5a      	ldr	r3, [pc, #360]	; (800a808 <USBD_CDC_Init+0x1e4>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	f003 020f 	and.w	r2, r3, #15
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	3324      	adds	r3, #36	; 0x24
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6b8:	4b54      	ldr	r3, [pc, #336]	; (800a80c <USBD_CDC_Init+0x1e8>)
 800a6ba:	7819      	ldrb	r1, [r3, #0]
 800a6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f004 ff93 	bl	800f5ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6c8:	4b50      	ldr	r3, [pc, #320]	; (800a80c <USBD_CDC_Init+0x1e8>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 020f 	and.w	r2, r3, #15
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6e4:	4b4a      	ldr	r3, [pc, #296]	; (800a810 <USBD_CDC_Init+0x1ec>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 020f 	and.w	r2, r3, #15
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	440b      	add	r3, r1
 800a6f8:	3326      	adds	r3, #38	; 0x26
 800a6fa:	2210      	movs	r2, #16
 800a6fc:	801a      	strh	r2, [r3, #0]
 800a6fe:	e035      	b.n	800a76c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a700:	4b41      	ldr	r3, [pc, #260]	; (800a808 <USBD_CDC_Init+0x1e4>)
 800a702:	7819      	ldrb	r1, [r3, #0]
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	2202      	movs	r2, #2
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f004 ff70 	bl	800f5ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a70e:	4b3e      	ldr	r3, [pc, #248]	; (800a808 <USBD_CDC_Init+0x1e4>)
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	f003 020f 	and.w	r2, r3, #15
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4613      	mov	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	440b      	add	r3, r1
 800a722:	3324      	adds	r3, #36	; 0x24
 800a724:	2201      	movs	r2, #1
 800a726:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a728:	4b38      	ldr	r3, [pc, #224]	; (800a80c <USBD_CDC_Init+0x1e8>)
 800a72a:	7819      	ldrb	r1, [r3, #0]
 800a72c:	2340      	movs	r3, #64	; 0x40
 800a72e:	2202      	movs	r2, #2
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f004 ff5c 	bl	800f5ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a736:	4b35      	ldr	r3, [pc, #212]	; (800a80c <USBD_CDC_Init+0x1e8>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	f003 020f 	and.w	r2, r3, #15
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	440b      	add	r3, r1
 800a74a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a74e:	2201      	movs	r2, #1
 800a750:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a752:	4b2f      	ldr	r3, [pc, #188]	; (800a810 <USBD_CDC_Init+0x1ec>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	f003 020f 	and.w	r2, r3, #15
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	440b      	add	r3, r1
 800a766:	3326      	adds	r3, #38	; 0x26
 800a768:	2210      	movs	r2, #16
 800a76a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a76c:	4b28      	ldr	r3, [pc, #160]	; (800a810 <USBD_CDC_Init+0x1ec>)
 800a76e:	7819      	ldrb	r1, [r3, #0]
 800a770:	2308      	movs	r3, #8
 800a772:	2203      	movs	r2, #3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f004 ff3a 	bl	800f5ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a77a:	4b25      	ldr	r3, [pc, #148]	; (800a810 <USBD_CDC_Init+0x1ec>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	f003 020f 	and.w	r2, r3, #15
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	2201      	movs	r2, #1
 800a792:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	33b0      	adds	r3, #176	; 0xb0
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e018      	b.n	800a800 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	7c1b      	ldrb	r3, [r3, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	; (800a80c <USBD_CDC_Init+0x1e8>)
 800a7d8:	7819      	ldrb	r1, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f004 fff1 	bl	800f7cc <USBD_LL_PrepareReceive>
 800a7ea:	e008      	b.n	800a7fe <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7ec:	4b07      	ldr	r3, [pc, #28]	; (800a80c <USBD_CDC_Init+0x1e8>)
 800a7ee:	7819      	ldrb	r1, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7f6:	2340      	movs	r3, #64	; 0x40
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f004 ffe7 	bl	800f7cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	200000af 	.word	0x200000af
 800a80c:	200000b0 	.word	0x200000b0
 800a810:	200000b1 	.word	0x200000b1

0800a814 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a820:	4b3a      	ldr	r3, [pc, #232]	; (800a90c <USBD_CDC_DeInit+0xf8>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f004 ff07 	bl	800f63a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a82c:	4b37      	ldr	r3, [pc, #220]	; (800a90c <USBD_CDC_DeInit+0xf8>)
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	3324      	adds	r3, #36	; 0x24
 800a842:	2200      	movs	r2, #0
 800a844:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a846:	4b32      	ldr	r3, [pc, #200]	; (800a910 <USBD_CDC_DeInit+0xfc>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f004 fef4 	bl	800f63a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a852:	4b2f      	ldr	r3, [pc, #188]	; (800a910 <USBD_CDC_DeInit+0xfc>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	f003 020f 	and.w	r2, r3, #15
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	440b      	add	r3, r1
 800a866:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a86a:	2200      	movs	r2, #0
 800a86c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a86e:	4b29      	ldr	r3, [pc, #164]	; (800a914 <USBD_CDC_DeInit+0x100>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f004 fee0 	bl	800f63a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a87a:	4b26      	ldr	r3, [pc, #152]	; (800a914 <USBD_CDC_DeInit+0x100>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 020f 	and.w	r2, r3, #15
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	2200      	movs	r2, #0
 800a892:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a894:	4b1f      	ldr	r3, [pc, #124]	; (800a914 <USBD_CDC_DeInit+0x100>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f003 020f 	and.w	r2, r3, #15
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3326      	adds	r3, #38	; 0x26
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	32b0      	adds	r2, #176	; 0xb0
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d01f      	beq.n	800a900 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	33b0      	adds	r3, #176	; 0xb0
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	32b0      	adds	r2, #176	; 0xb0
 800a8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f005 f82e 	bl	800f944 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	32b0      	adds	r2, #176	; 0xb0
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	200000af 	.word	0x200000af
 800a910:	200000b0 	.word	0x200000b0
 800a914:	200000b1 	.word	0x200000b1

0800a918 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	32b0      	adds	r2, #176	; 0xb0
 800a92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a930:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a932:	2300      	movs	r3, #0
 800a934:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a944:	2303      	movs	r3, #3
 800a946:	e0bf      	b.n	800aac8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a950:	2b00      	cmp	r3, #0
 800a952:	d050      	beq.n	800a9f6 <USBD_CDC_Setup+0xde>
 800a954:	2b20      	cmp	r3, #32
 800a956:	f040 80af 	bne.w	800aab8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	88db      	ldrh	r3, [r3, #6]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d03a      	beq.n	800a9d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	b25b      	sxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	da1b      	bge.n	800a9a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	33b0      	adds	r3, #176	; 0xb0
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a982:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	88d2      	ldrh	r2, [r2, #6]
 800a988:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88db      	ldrh	r3, [r3, #6]
 800a98e:	2b07      	cmp	r3, #7
 800a990:	bf28      	it	cs
 800a992:	2307      	movcs	r3, #7
 800a994:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	89fa      	ldrh	r2, [r7, #14]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 fdad 	bl	800c4fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a9a2:	e090      	b.n	800aac6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	785a      	ldrb	r2, [r3, #1]
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	88db      	ldrh	r3, [r3, #6]
 800a9b2:	2b3f      	cmp	r3, #63	; 0x3f
 800a9b4:	d803      	bhi.n	800a9be <USBD_CDC_Setup+0xa6>
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	88db      	ldrh	r3, [r3, #6]
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	e000      	b.n	800a9c0 <USBD_CDC_Setup+0xa8>
 800a9be:	2240      	movs	r2, #64	; 0x40
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9c6:	6939      	ldr	r1, [r7, #16]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f001 fdbf 	bl	800c554 <USBD_CtlPrepareRx>
      break;
 800a9d6:	e076      	b.n	800aac6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	33b0      	adds	r3, #176	; 0xb0
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	7850      	ldrb	r0, [r2, #1]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	4798      	blx	r3
      break;
 800a9f4:	e067      	b.n	800aac6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	785b      	ldrb	r3, [r3, #1]
 800a9fa:	2b0b      	cmp	r3, #11
 800a9fc:	d851      	bhi.n	800aaa2 <USBD_CDC_Setup+0x18a>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <USBD_CDC_Setup+0xec>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa35 	.word	0x0800aa35
 800aa08:	0800aab1 	.word	0x0800aab1
 800aa0c:	0800aaa3 	.word	0x0800aaa3
 800aa10:	0800aaa3 	.word	0x0800aaa3
 800aa14:	0800aaa3 	.word	0x0800aaa3
 800aa18:	0800aaa3 	.word	0x0800aaa3
 800aa1c:	0800aaa3 	.word	0x0800aaa3
 800aa20:	0800aaa3 	.word	0x0800aaa3
 800aa24:	0800aaa3 	.word	0x0800aaa3
 800aa28:	0800aaa3 	.word	0x0800aaa3
 800aa2c:	0800aa5f 	.word	0x0800aa5f
 800aa30:	0800aa89 	.word	0x0800aa89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d107      	bne.n	800aa50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa40:	f107 030a 	add.w	r3, r7, #10
 800aa44:	2202      	movs	r2, #2
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 fd57 	bl	800c4fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa4e:	e032      	b.n	800aab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fce1 	bl	800c41a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	75fb      	strb	r3, [r7, #23]
          break;
 800aa5c:	e02b      	b.n	800aab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d107      	bne.n	800aa7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa6a:	f107 030d 	add.w	r3, r7, #13
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 fd42 	bl	800c4fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa78:	e01d      	b.n	800aab6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 fccc 	bl	800c41a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa82:	2303      	movs	r3, #3
 800aa84:	75fb      	strb	r3, [r7, #23]
          break;
 800aa86:	e016      	b.n	800aab6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b03      	cmp	r3, #3
 800aa92:	d00f      	beq.n	800aab4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 fcbf 	bl	800c41a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aaa0:	e008      	b.n	800aab4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 fcb8 	bl	800c41a <USBD_CtlError>
          ret = USBD_FAIL;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	75fb      	strb	r3, [r7, #23]
          break;
 800aaae:	e002      	b.n	800aab6 <USBD_CDC_Setup+0x19e>
          break;
 800aab0:	bf00      	nop
 800aab2:	e008      	b.n	800aac6 <USBD_CDC_Setup+0x1ae>
          break;
 800aab4:	bf00      	nop
      }
      break;
 800aab6:	e006      	b.n	800aac6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 fcad 	bl	800c41a <USBD_CtlError>
      ret = USBD_FAIL;
 800aac0:	2303      	movs	r3, #3
 800aac2:	75fb      	strb	r3, [r7, #23]
      break;
 800aac4:	bf00      	nop
  }

  return (uint8_t)ret;
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32b0      	adds	r2, #176	; 0xb0
 800aaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e065      	b.n	800abc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	32b0      	adds	r2, #176	; 0xb0
 800ab04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab0a:	78fb      	ldrb	r3, [r7, #3]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3318      	adds	r3, #24
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d02f      	beq.n	800ab84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab24:	78fb      	ldrb	r3, [r7, #3]
 800ab26:	f003 020f 	and.w	r2, r3, #15
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	440b      	add	r3, r1
 800ab36:	3318      	adds	r3, #24
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	78fb      	ldrb	r3, [r7, #3]
 800ab3c:	f003 010f 	and.w	r1, r3, #15
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	460b      	mov	r3, r1
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	440b      	add	r3, r1
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4403      	add	r3, r0
 800ab4c:	3348      	adds	r3, #72	; 0x48
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab54:	fb01 f303 	mul.w	r3, r1, r3
 800ab58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d112      	bne.n	800ab84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	f003 020f 	and.w	r2, r3, #15
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	440b      	add	r3, r1
 800ab70:	3318      	adds	r3, #24
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab76:	78f9      	ldrb	r1, [r7, #3]
 800ab78:	2300      	movs	r3, #0
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f004 fe04 	bl	800f78a <USBD_LL_Transmit>
 800ab82:	e01f      	b.n	800abc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	33b0      	adds	r3, #176	; 0xb0
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d010      	beq.n	800abc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	33b0      	adds	r3, #176	; 0xb0
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800abc0:	78fa      	ldrb	r2, [r7, #3]
 800abc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	32b0      	adds	r2, #176	; 0xb0
 800abe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	32b0      	adds	r2, #176	; 0xb0
 800abf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e01a      	b.n	800ac36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f004 fe02 	bl	800f80e <USBD_LL_GetRxDataSize>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	33b0      	adds	r3, #176	; 0xb0
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac30:	4611      	mov	r1, r2
 800ac32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	32b0      	adds	r2, #176	; 0xb0
 800ac50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e025      	b.n	800acac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	33b0      	adds	r3, #176	; 0xb0
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01a      	beq.n	800acaa <USBD_CDC_EP0_RxReady+0x6c>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac7a:	2bff      	cmp	r3, #255	; 0xff
 800ac7c:	d015      	beq.n	800acaa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	33b0      	adds	r3, #176	; 0xb0
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac9e:	b292      	uxth	r2, r2
 800aca0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	22ff      	movs	r2, #255	; 0xff
 800aca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acbc:	2182      	movs	r1, #130	; 0x82
 800acbe:	4818      	ldr	r0, [pc, #96]	; (800ad20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acc0:	f000 fd49 	bl	800b756 <USBD_GetEpDesc>
 800acc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acc6:	2101      	movs	r1, #1
 800acc8:	4815      	ldr	r0, [pc, #84]	; (800ad20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acca:	f000 fd44 	bl	800b756 <USBD_GetEpDesc>
 800acce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acd0:	2181      	movs	r1, #129	; 0x81
 800acd2:	4813      	ldr	r0, [pc, #76]	; (800ad20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acd4:	f000 fd3f 	bl	800b756 <USBD_GetEpDesc>
 800acd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2210      	movs	r2, #16
 800ace4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2200      	movs	r2, #0
 800acf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acf4:	711a      	strb	r2, [r3, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad08:	711a      	strb	r2, [r3, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2243      	movs	r2, #67	; 0x43
 800ad12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad14:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	2000006c 	.word	0x2000006c

0800ad24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad2c:	2182      	movs	r1, #130	; 0x82
 800ad2e:	4818      	ldr	r0, [pc, #96]	; (800ad90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad30:	f000 fd11 	bl	800b756 <USBD_GetEpDesc>
 800ad34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad36:	2101      	movs	r1, #1
 800ad38:	4815      	ldr	r0, [pc, #84]	; (800ad90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad3a:	f000 fd0c 	bl	800b756 <USBD_GetEpDesc>
 800ad3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad40:	2181      	movs	r1, #129	; 0x81
 800ad42:	4813      	ldr	r0, [pc, #76]	; (800ad90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad44:	f000 fd07 	bl	800b756 <USBD_GetEpDesc>
 800ad48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2210      	movs	r2, #16
 800ad54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d006      	beq.n	800ad6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	711a      	strb	r2, [r3, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f042 0202 	orr.w	r2, r2, #2
 800ad68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d006      	beq.n	800ad7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	711a      	strb	r2, [r3, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f042 0202 	orr.w	r2, r2, #2
 800ad7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2243      	movs	r2, #67	; 0x43
 800ad82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad84:	4b02      	ldr	r3, [pc, #8]	; (800ad90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	2000006c 	.word	0x2000006c

0800ad94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad9c:	2182      	movs	r1, #130	; 0x82
 800ad9e:	4818      	ldr	r0, [pc, #96]	; (800ae00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ada0:	f000 fcd9 	bl	800b756 <USBD_GetEpDesc>
 800ada4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ada6:	2101      	movs	r1, #1
 800ada8:	4815      	ldr	r0, [pc, #84]	; (800ae00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adaa:	f000 fcd4 	bl	800b756 <USBD_GetEpDesc>
 800adae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adb0:	2181      	movs	r1, #129	; 0x81
 800adb2:	4813      	ldr	r0, [pc, #76]	; (800ae00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adb4:	f000 fccf 	bl	800b756 <USBD_GetEpDesc>
 800adb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2210      	movs	r2, #16
 800adc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	2200      	movs	r2, #0
 800add0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800add4:	711a      	strb	r2, [r3, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d006      	beq.n	800adee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ade8:	711a      	strb	r2, [r3, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2243      	movs	r2, #67	; 0x43
 800adf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adf4:	4b02      	ldr	r3, [pc, #8]	; (800ae00 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3718      	adds	r7, #24
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	2000006c 	.word	0x2000006c

0800ae04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	220a      	movs	r2, #10
 800ae10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae12:	4b03      	ldr	r3, [pc, #12]	; (800ae20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	20000028 	.word	0x20000028

0800ae24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e009      	b.n	800ae4c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	33b0      	adds	r3, #176	; 0xb0
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	32b0      	adds	r2, #176	; 0xb0
 800ae6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d101      	bne.n	800ae7e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e008      	b.n	800ae90 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	371c      	adds	r7, #28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	32b0      	adds	r2, #176	; 0xb0
 800aeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	e004      	b.n	800aeca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	32b0      	adds	r2, #176	; 0xb0
 800aeea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e025      	b.n	800af4a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af04:	2b00      	cmp	r3, #0
 800af06:	d11f      	bne.n	800af48 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800af10:	4b10      	ldr	r3, [pc, #64]	; (800af54 <USBD_CDC_TransmitPacket+0x7c>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 020f 	and.w	r2, r3, #15
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4403      	add	r3, r0
 800af2a:	3318      	adds	r3, #24
 800af2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af2e:	4b09      	ldr	r3, [pc, #36]	; (800af54 <USBD_CDC_TransmitPacket+0x7c>)
 800af30:	7819      	ldrb	r1, [r3, #0]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f004 fc23 	bl	800f78a <USBD_LL_Transmit>

    ret = USBD_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af48:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	200000af 	.word	0x200000af

0800af58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	32b0      	adds	r2, #176	; 0xb0
 800af6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32b0      	adds	r2, #176	; 0xb0
 800af7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af82:	2303      	movs	r3, #3
 800af84:	e018      	b.n	800afb8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	7c1b      	ldrb	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <USBD_CDC_ReceivePacket+0x68>)
 800af90:	7819      	ldrb	r1, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f004 fc15 	bl	800f7cc <USBD_LL_PrepareReceive>
 800afa2:	e008      	b.n	800afb6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <USBD_CDC_ReceivePacket+0x68>)
 800afa6:	7819      	ldrb	r1, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afae:	2340      	movs	r3, #64	; 0x40
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f004 fc0b 	bl	800f7cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200000b0 	.word	0x200000b0

0800afc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afd8:	2303      	movs	r3, #3
 800afda:	e01f      	b.n	800b01c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	79fa      	ldrb	r2, [r7, #7]
 800b00e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f004 fa81 	bl	800f518 <USBD_LL_Init>
 800b016:	4603      	mov	r3, r0
 800b018:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	e025      	b.n	800b088 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	32ae      	adds	r2, #174	; 0xae
 800b04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00f      	beq.n	800b078 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	32ae      	adds	r2, #174	; 0xae
 800b062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b068:	f107 020e 	add.w	r2, r7, #14
 800b06c:	4610      	mov	r0, r2
 800b06e:	4798      	blx	r3
 800b070:	4602      	mov	r2, r0
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f004 fa8d 	bl	800f5b8 <USBD_LL_Start>
 800b09e:	4603      	mov	r3, r0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr

0800b0be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d009      	beq.n	800b0ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	78fa      	ldrb	r2, [r7, #3]
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	4798      	blx	r3
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	78fa      	ldrb	r2, [r7, #3]
 800b110:	4611      	mov	r1, r2
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b11c:	2303      	movs	r3, #3
 800b11e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 f932 	bl	800c3a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b150:	461a      	mov	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b15e:	f003 031f 	and.w	r3, r3, #31
 800b162:	2b02      	cmp	r3, #2
 800b164:	d01a      	beq.n	800b19c <USBD_LL_SetupStage+0x72>
 800b166:	2b02      	cmp	r3, #2
 800b168:	d822      	bhi.n	800b1b0 <USBD_LL_SetupStage+0x86>
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <USBD_LL_SetupStage+0x4a>
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d00a      	beq.n	800b188 <USBD_LL_SetupStage+0x5e>
 800b172:	e01d      	b.n	800b1b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fb5f 	bl	800b840 <USBD_StdDevReq>
 800b182:	4603      	mov	r3, r0
 800b184:	73fb      	strb	r3, [r7, #15]
      break;
 800b186:	e020      	b.n	800b1ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fbc7 	bl	800b924 <USBD_StdItfReq>
 800b196:	4603      	mov	r3, r0
 800b198:	73fb      	strb	r3, [r7, #15]
      break;
 800b19a:	e016      	b.n	800b1ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fc29 	bl	800b9fc <USBD_StdEPReq>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ae:	e00c      	b.n	800b1ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f004 fa5a 	bl	800f678 <USBD_LL_StallEP>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c8:	bf00      	nop
  }

  return ret;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d16e      	bne.n	800b2ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b1f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	f040 8098 	bne.w	800b330 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	689a      	ldr	r2, [r3, #8]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d913      	bls.n	800b234 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	1ad2      	subs	r2, r2, r3
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	4293      	cmp	r3, r2
 800b224:	bf28      	it	cs
 800b226:	4613      	movcs	r3, r2
 800b228:	461a      	mov	r2, r3
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f001 f9ae 	bl	800c58e <USBD_CtlContinueRx>
 800b232:	e07d      	b.n	800b330 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b23a:	f003 031f 	and.w	r3, r3, #31
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d014      	beq.n	800b26c <USBD_LL_DataOutStage+0x98>
 800b242:	2b02      	cmp	r3, #2
 800b244:	d81d      	bhi.n	800b282 <USBD_LL_DataOutStage+0xae>
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <USBD_LL_DataOutStage+0x7c>
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d003      	beq.n	800b256 <USBD_LL_DataOutStage+0x82>
 800b24e:	e018      	b.n	800b282 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	75bb      	strb	r3, [r7, #22]
            break;
 800b254:	e018      	b.n	800b288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	4619      	mov	r1, r3
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 fa5e 	bl	800b722 <USBD_CoreFindIF>
 800b266:	4603      	mov	r3, r0
 800b268:	75bb      	strb	r3, [r7, #22]
            break;
 800b26a:	e00d      	b.n	800b288 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b272:	b2db      	uxtb	r3, r3
 800b274:	4619      	mov	r1, r3
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 fa60 	bl	800b73c <USBD_CoreFindEP>
 800b27c:	4603      	mov	r3, r0
 800b27e:	75bb      	strb	r3, [r7, #22]
            break;
 800b280:	e002      	b.n	800b288 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	75bb      	strb	r3, [r7, #22]
            break;
 800b286:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b288:	7dbb      	ldrb	r3, [r7, #22]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d119      	bne.n	800b2c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b03      	cmp	r3, #3
 800b298:	d113      	bne.n	800b2c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b29a:	7dba      	ldrb	r2, [r7, #22]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	32ae      	adds	r2, #174	; 0xae
 800b2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2aa:	7dba      	ldrb	r2, [r7, #22]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2b2:	7dba      	ldrb	r2, [r7, #22]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	32ae      	adds	r2, #174	; 0xae
 800b2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f001 f974 	bl	800c5b0 <USBD_CtlSendStatus>
 800b2c8:	e032      	b.n	800b330 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fa31 	bl	800b73c <USBD_CoreFindEP>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2de:	7dbb      	ldrb	r3, [r7, #22]
 800b2e0:	2bff      	cmp	r3, #255	; 0xff
 800b2e2:	d025      	beq.n	800b330 <USBD_LL_DataOutStage+0x15c>
 800b2e4:	7dbb      	ldrb	r3, [r7, #22]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d122      	bne.n	800b330 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d117      	bne.n	800b326 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2f6:	7dba      	ldrb	r2, [r7, #22]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	32ae      	adds	r2, #174	; 0xae
 800b2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00f      	beq.n	800b326 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b306:	7dba      	ldrb	r2, [r7, #22]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b30e:	7dba      	ldrb	r2, [r7, #22]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	32ae      	adds	r2, #174	; 0xae
 800b314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	7afa      	ldrb	r2, [r7, #11]
 800b31c:	4611      	mov	r1, r2
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	4798      	blx	r3
 800b322:	4603      	mov	r3, r0
 800b324:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b32c:	7dfb      	ldrb	r3, [r7, #23]
 800b32e:	e000      	b.n	800b332 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	460b      	mov	r3, r1
 800b344:	607a      	str	r2, [r7, #4]
 800b346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d16f      	bne.n	800b42e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3314      	adds	r3, #20
 800b352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d15a      	bne.n	800b414 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	689a      	ldr	r2, [r3, #8]
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	429a      	cmp	r2, r3
 800b368:	d914      	bls.n	800b394 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	1ad2      	subs	r2, r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	461a      	mov	r2, r3
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f001 f8d6 	bl	800c532 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b386:	2300      	movs	r3, #0
 800b388:	2200      	movs	r2, #0
 800b38a:	2100      	movs	r1, #0
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f004 fa1d 	bl	800f7cc <USBD_LL_PrepareReceive>
 800b392:	e03f      	b.n	800b414 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	68da      	ldr	r2, [r3, #12]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d11c      	bne.n	800b3da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d316      	bcc.n	800b3da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d20f      	bcs.n	800b3da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f001 f8b7 	bl	800c532 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f004 f9fa 	bl	800f7cc <USBD_LL_PrepareReceive>
 800b3d8:	e01c      	b.n	800b414 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d10f      	bne.n	800b406 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d009      	beq.n	800b406 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b406:	2180      	movs	r1, #128	; 0x80
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f004 f935 	bl	800f678 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f001 f8e1 	bl	800c5d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d03a      	beq.n	800b494 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff fe42 	bl	800b0a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b42c:	e032      	b.n	800b494 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b42e:	7afb      	ldrb	r3, [r7, #11]
 800b430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b434:	b2db      	uxtb	r3, r3
 800b436:	4619      	mov	r1, r3
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 f97f 	bl	800b73c <USBD_CoreFindEP>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	2bff      	cmp	r3, #255	; 0xff
 800b446:	d025      	beq.n	800b494 <USBD_LL_DataInStage+0x15a>
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d122      	bne.n	800b494 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b03      	cmp	r3, #3
 800b458:	d11c      	bne.n	800b494 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b45a:	7dfa      	ldrb	r2, [r7, #23]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	32ae      	adds	r2, #174	; 0xae
 800b460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d014      	beq.n	800b494 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b46a:	7dfa      	ldrb	r2, [r7, #23]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b472:	7dfa      	ldrb	r2, [r7, #23]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	32ae      	adds	r2, #174	; 0xae
 800b478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	7afa      	ldrb	r2, [r7, #11]
 800b480:	4611      	mov	r1, r2
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	4798      	blx	r3
 800b486:	4603      	mov	r3, r0
 800b488:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b48a:	7dbb      	ldrb	r3, [r7, #22]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b490:	7dbb      	ldrb	r3, [r7, #22]
 800b492:	e000      	b.n	800b496 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d014      	beq.n	800b504 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00e      	beq.n	800b504 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	6852      	ldr	r2, [r2, #4]
 800b4f2:	b2d2      	uxtb	r2, r2
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	4798      	blx	r3
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b500:	2303      	movs	r3, #3
 800b502:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b504:	2340      	movs	r3, #64	; 0x40
 800b506:	2200      	movs	r2, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f004 f86f 	bl	800f5ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2240      	movs	r2, #64	; 0x40
 800b51c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b520:	2340      	movs	r3, #64	; 0x40
 800b522:	2200      	movs	r2, #0
 800b524:	2180      	movs	r1, #128	; 0x80
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f004 f861 	bl	800f5ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2240      	movs	r2, #64	; 0x40
 800b536:	621a      	str	r2, [r3, #32]

  return ret;
 800b538:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b570:	b2da      	uxtb	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2204      	movs	r2, #4
 800b57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d106      	bne.n	800b5b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d110      	bne.n	800b5f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00b      	beq.n	800b5f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ee:	69db      	ldr	r3, [r3, #28]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	32ae      	adds	r2, #174	; 0xae
 800b614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e01c      	b.n	800b65a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d115      	bne.n	800b658 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	32ae      	adds	r2, #174	; 0xae
 800b636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	32ae      	adds	r2, #174	; 0xae
 800b64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64e:	6a1b      	ldr	r3, [r3, #32]
 800b650:	78fa      	ldrb	r2, [r7, #3]
 800b652:	4611      	mov	r1, r2
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	32ae      	adds	r2, #174	; 0xae
 800b678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b680:	2303      	movs	r3, #3
 800b682:	e01c      	b.n	800b6be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d115      	bne.n	800b6bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	32ae      	adds	r2, #174	; 0xae
 800b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00b      	beq.n	800b6bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	32ae      	adds	r2, #174	; 0xae
 800b6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	78fa      	ldrb	r2, [r7, #3]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00e      	beq.n	800b718 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	6852      	ldr	r2, [r2, #4]
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	4611      	mov	r1, r2
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b722:	b480      	push	{r7}
 800b724:	b083      	sub	sp, #12
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b72e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b730:	4618      	mov	r0, r3
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b748:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b086      	sub	sp, #24
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	b29a      	uxth	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d920      	bls.n	800b7c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b786:	e013      	b.n	800b7b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b788:	f107 030a 	add.w	r3, r7, #10
 800b78c:	4619      	mov	r1, r3
 800b78e:	6978      	ldr	r0, [r7, #20]
 800b790:	f000 f81b 	bl	800b7ca <USBD_GetNextDesc>
 800b794:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	d108      	bne.n	800b7b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	789b      	ldrb	r3, [r3, #2]
 800b7a6:	78fa      	ldrb	r2, [r7, #3]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d008      	beq.n	800b7be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	885b      	ldrh	r3, [r3, #2]
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	897b      	ldrh	r3, [r7, #10]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d8e5      	bhi.n	800b788 <USBD_GetEpDesc+0x32>
 800b7bc:	e000      	b.n	800b7c0 <USBD_GetEpDesc+0x6a>
          break;
 800b7be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7c0:	693b      	ldr	r3, [r7, #16]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	881a      	ldrh	r2, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	4413      	add	r3, r2
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b804:	b480      	push	{r7}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	3301      	adds	r3, #1
 800b81a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b822:	8a3b      	ldrh	r3, [r7, #16]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	b21a      	sxth	r2, r3
 800b828:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	b21b      	sxth	r3, r3
 800b830:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b832:	89fb      	ldrh	r3, [r7, #14]
}
 800b834:	4618      	mov	r0, r3
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b856:	2b40      	cmp	r3, #64	; 0x40
 800b858:	d005      	beq.n	800b866 <USBD_StdDevReq+0x26>
 800b85a:	2b40      	cmp	r3, #64	; 0x40
 800b85c:	d857      	bhi.n	800b90e <USBD_StdDevReq+0xce>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00f      	beq.n	800b882 <USBD_StdDevReq+0x42>
 800b862:	2b20      	cmp	r3, #32
 800b864:	d153      	bne.n	800b90e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	32ae      	adds	r2, #174	; 0xae
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	4798      	blx	r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	73fb      	strb	r3, [r7, #15]
      break;
 800b880:	e04a      	b.n	800b918 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	785b      	ldrb	r3, [r3, #1]
 800b886:	2b09      	cmp	r3, #9
 800b888:	d83b      	bhi.n	800b902 <USBD_StdDevReq+0xc2>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <USBD_StdDevReq+0x50>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8e5 	.word	0x0800b8e5
 800b894:	0800b8f9 	.word	0x0800b8f9
 800b898:	0800b903 	.word	0x0800b903
 800b89c:	0800b8ef 	.word	0x0800b8ef
 800b8a0:	0800b903 	.word	0x0800b903
 800b8a4:	0800b8c3 	.word	0x0800b8c3
 800b8a8:	0800b8b9 	.word	0x0800b8b9
 800b8ac:	0800b903 	.word	0x0800b903
 800b8b0:	0800b8db 	.word	0x0800b8db
 800b8b4:	0800b8cd 	.word	0x0800b8cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fa3c 	bl	800bd38 <USBD_GetDescriptor>
          break;
 800b8c0:	e024      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fbcb 	bl	800c060 <USBD_SetAddress>
          break;
 800b8ca:	e01f      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fc0a 	bl	800c0e8 <USBD_SetConfig>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]
          break;
 800b8d8:	e018      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fcad 	bl	800c23c <USBD_GetConfig>
          break;
 800b8e2:	e013      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fcde 	bl	800c2a8 <USBD_GetStatus>
          break;
 800b8ec:	e00e      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fd0d 	bl	800c310 <USBD_SetFeature>
          break;
 800b8f6:	e009      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fd31 	bl	800c362 <USBD_ClrFeature>
          break;
 800b900:	e004      	b.n	800b90c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fd88 	bl	800c41a <USBD_CtlError>
          break;
 800b90a:	bf00      	nop
      }
      break;
 800b90c:	e004      	b.n	800b918 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fd82 	bl	800c41a <USBD_CtlError>
      break;
 800b916:	bf00      	nop
  }

  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop

0800b924 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b93a:	2b40      	cmp	r3, #64	; 0x40
 800b93c:	d005      	beq.n	800b94a <USBD_StdItfReq+0x26>
 800b93e:	2b40      	cmp	r3, #64	; 0x40
 800b940:	d852      	bhi.n	800b9e8 <USBD_StdItfReq+0xc4>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <USBD_StdItfReq+0x26>
 800b946:	2b20      	cmp	r3, #32
 800b948:	d14e      	bne.n	800b9e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b950:	b2db      	uxtb	r3, r3
 800b952:	3b01      	subs	r3, #1
 800b954:	2b02      	cmp	r3, #2
 800b956:	d840      	bhi.n	800b9da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	889b      	ldrh	r3, [r3, #4]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d836      	bhi.n	800b9d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	889b      	ldrh	r3, [r3, #4]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fed9 	bl	800b722 <USBD_CoreFindIF>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	2bff      	cmp	r3, #255	; 0xff
 800b978:	d01d      	beq.n	800b9b6 <USBD_StdItfReq+0x92>
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d11a      	bne.n	800b9b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b980:	7bba      	ldrb	r2, [r7, #14]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	32ae      	adds	r2, #174	; 0xae
 800b986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00f      	beq.n	800b9b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b990:	7bba      	ldrb	r2, [r7, #14]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b998:	7bba      	ldrb	r2, [r7, #14]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	32ae      	adds	r2, #174	; 0xae
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	4798      	blx	r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9ae:	e004      	b.n	800b9ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9b4:	e001      	b.n	800b9ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	88db      	ldrh	r3, [r3, #6]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d110      	bne.n	800b9e4 <USBD_StdItfReq+0xc0>
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10d      	bne.n	800b9e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fdf1 	bl	800c5b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9ce:	e009      	b.n	800b9e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fd21 	bl	800c41a <USBD_CtlError>
          break;
 800b9d8:	e004      	b.n	800b9e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fd1c 	bl	800c41a <USBD_CtlError>
          break;
 800b9e2:	e000      	b.n	800b9e6 <USBD_StdItfReq+0xc2>
          break;
 800b9e4:	bf00      	nop
      }
      break;
 800b9e6:	e004      	b.n	800b9f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fd15 	bl	800c41a <USBD_CtlError>
      break;
 800b9f0:	bf00      	nop
  }

  return ret;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	889b      	ldrh	r3, [r3, #4]
 800ba0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba18:	2b40      	cmp	r3, #64	; 0x40
 800ba1a:	d007      	beq.n	800ba2c <USBD_StdEPReq+0x30>
 800ba1c:	2b40      	cmp	r3, #64	; 0x40
 800ba1e:	f200 817f 	bhi.w	800bd20 <USBD_StdEPReq+0x324>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d02a      	beq.n	800ba7c <USBD_StdEPReq+0x80>
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	f040 817a 	bne.w	800bd20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff fe83 	bl	800b73c <USBD_CoreFindEP>
 800ba36:	4603      	mov	r3, r0
 800ba38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba3a:	7b7b      	ldrb	r3, [r7, #13]
 800ba3c:	2bff      	cmp	r3, #255	; 0xff
 800ba3e:	f000 8174 	beq.w	800bd2a <USBD_StdEPReq+0x32e>
 800ba42:	7b7b      	ldrb	r3, [r7, #13]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f040 8170 	bne.w	800bd2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba4a:	7b7a      	ldrb	r2, [r7, #13]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba52:	7b7a      	ldrb	r2, [r7, #13]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	32ae      	adds	r2, #174	; 0xae
 800ba58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 8163 	beq.w	800bd2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba64:	7b7a      	ldrb	r2, [r7, #13]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	32ae      	adds	r2, #174	; 0xae
 800ba6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
 800ba76:	4603      	mov	r3, r0
 800ba78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba7a:	e156      	b.n	800bd2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	785b      	ldrb	r3, [r3, #1]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d008      	beq.n	800ba96 <USBD_StdEPReq+0x9a>
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	f300 8145 	bgt.w	800bd14 <USBD_StdEPReq+0x318>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 809b 	beq.w	800bbc6 <USBD_StdEPReq+0x1ca>
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d03c      	beq.n	800bb0e <USBD_StdEPReq+0x112>
 800ba94:	e13e      	b.n	800bd14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d002      	beq.n	800baa8 <USBD_StdEPReq+0xac>
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d016      	beq.n	800bad4 <USBD_StdEPReq+0xd8>
 800baa6:	e02c      	b.n	800bb02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00d      	beq.n	800baca <USBD_StdEPReq+0xce>
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	2b80      	cmp	r3, #128	; 0x80
 800bab2:	d00a      	beq.n	800baca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f003 fddd 	bl	800f678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800babe:	2180      	movs	r1, #128	; 0x80
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f003 fdd9 	bl	800f678 <USBD_LL_StallEP>
 800bac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bac8:	e020      	b.n	800bb0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fca4 	bl	800c41a <USBD_CtlError>
              break;
 800bad2:	e01b      	b.n	800bb0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	885b      	ldrh	r3, [r3, #2]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10e      	bne.n	800bafa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <USBD_StdEPReq+0xfe>
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b80      	cmp	r3, #128	; 0x80
 800bae6:	d008      	beq.n	800bafa <USBD_StdEPReq+0xfe>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d104      	bne.n	800bafa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f003 fdbf 	bl	800f678 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fd58 	bl	800c5b0 <USBD_CtlSendStatus>

              break;
 800bb00:	e004      	b.n	800bb0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fc88 	bl	800c41a <USBD_CtlError>
              break;
 800bb0a:	bf00      	nop
          }
          break;
 800bb0c:	e107      	b.n	800bd1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d002      	beq.n	800bb20 <USBD_StdEPReq+0x124>
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d016      	beq.n	800bb4c <USBD_StdEPReq+0x150>
 800bb1e:	e04b      	b.n	800bbb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00d      	beq.n	800bb42 <USBD_StdEPReq+0x146>
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b80      	cmp	r3, #128	; 0x80
 800bb2a:	d00a      	beq.n	800bb42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f003 fda1 	bl	800f678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb36:	2180      	movs	r1, #128	; 0x80
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f003 fd9d 	bl	800f678 <USBD_LL_StallEP>
 800bb3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb40:	e040      	b.n	800bbc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fc68 	bl	800c41a <USBD_CtlError>
              break;
 800bb4a:	e03b      	b.n	800bbc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	885b      	ldrh	r3, [r3, #2]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d136      	bne.n	800bbc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
 800bb60:	4619      	mov	r1, r3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f003 fda7 	bl	800f6b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fd21 	bl	800c5b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff fde2 	bl	800b73c <USBD_CoreFindEP>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb7c:	7b7b      	ldrb	r3, [r7, #13]
 800bb7e:	2bff      	cmp	r3, #255	; 0xff
 800bb80:	d01f      	beq.n	800bbc2 <USBD_StdEPReq+0x1c6>
 800bb82:	7b7b      	ldrb	r3, [r7, #13]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11c      	bne.n	800bbc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb88:	7b7a      	ldrb	r2, [r7, #13]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb90:	7b7a      	ldrb	r2, [r7, #13]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	32ae      	adds	r2, #174	; 0xae
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d010      	beq.n	800bbc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bba0:	7b7a      	ldrb	r2, [r7, #13]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	32ae      	adds	r2, #174	; 0xae
 800bba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	4798      	blx	r3
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbb6:	e004      	b.n	800bbc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fc2d 	bl	800c41a <USBD_CtlError>
              break;
 800bbc0:	e000      	b.n	800bbc4 <USBD_StdEPReq+0x1c8>
              break;
 800bbc2:	bf00      	nop
          }
          break;
 800bbc4:	e0ab      	b.n	800bd1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d002      	beq.n	800bbd8 <USBD_StdEPReq+0x1dc>
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	d032      	beq.n	800bc3c <USBD_StdEPReq+0x240>
 800bbd6:	e097      	b.n	800bd08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <USBD_StdEPReq+0x1f2>
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
 800bbe0:	2b80      	cmp	r3, #128	; 0x80
 800bbe2:	d004      	beq.n	800bbee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fc17 	bl	800c41a <USBD_CtlError>
                break;
 800bbec:	e091      	b.n	800bd12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	da0b      	bge.n	800bc0e <USBD_StdEPReq+0x212>
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	3310      	adds	r3, #16
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	4413      	add	r3, r2
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	e00b      	b.n	800bc26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	4413      	add	r3, r2
 800bc24:	3304      	adds	r3, #4
 800bc26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2202      	movs	r2, #2
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fc61 	bl	800c4fc <USBD_CtlSendData>
              break;
 800bc3a:	e06a      	b.n	800bd12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	da11      	bge.n	800bc68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	3324      	adds	r3, #36	; 0x24
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d117      	bne.n	800bc8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fbda 	bl	800c41a <USBD_CtlError>
                  break;
 800bc66:	e054      	b.n	800bd12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	f003 020f 	and.w	r2, r3, #15
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	440b      	add	r3, r1
 800bc7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fbc7 	bl	800c41a <USBD_CtlError>
                  break;
 800bc8c:	e041      	b.n	800bd12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da0b      	bge.n	800bcae <USBD_StdEPReq+0x2b2>
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	3310      	adds	r3, #16
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	3304      	adds	r3, #4
 800bcac:	e00b      	b.n	800bcc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <USBD_StdEPReq+0x2d8>
 800bcce:	7bbb      	ldrb	r3, [r7, #14]
 800bcd0:	2b80      	cmp	r3, #128	; 0x80
 800bcd2:	d103      	bne.n	800bcdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	e00e      	b.n	800bcfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f003 fd07 	bl	800f6f4 <USBD_LL_IsStallEP>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d003      	beq.n	800bcf4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e002      	b.n	800bcfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fbfb 	bl	800c4fc <USBD_CtlSendData>
              break;
 800bd06:	e004      	b.n	800bd12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd08:	6839      	ldr	r1, [r7, #0]
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fb85 	bl	800c41a <USBD_CtlError>
              break;
 800bd10:	bf00      	nop
          }
          break;
 800bd12:	e004      	b.n	800bd1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb7f 	bl	800c41a <USBD_CtlError>
          break;
 800bd1c:	bf00      	nop
      }
      break;
 800bd1e:	e005      	b.n	800bd2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fb79 	bl	800c41a <USBD_CtlError>
      break;
 800bd28:	e000      	b.n	800bd2c <USBD_StdEPReq+0x330>
      break;
 800bd2a:	bf00      	nop
  }

  return ret;
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	885b      	ldrh	r3, [r3, #2]
 800bd52:	0a1b      	lsrs	r3, r3, #8
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b0e      	cmp	r3, #14
 800bd5a:	f200 8152 	bhi.w	800c002 <USBD_GetDescriptor+0x2ca>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <USBD_GetDescriptor+0x2c>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bdd5 	.word	0x0800bdd5
 800bd68:	0800bded 	.word	0x0800bded
 800bd6c:	0800be2d 	.word	0x0800be2d
 800bd70:	0800c003 	.word	0x0800c003
 800bd74:	0800c003 	.word	0x0800c003
 800bd78:	0800bfa3 	.word	0x0800bfa3
 800bd7c:	0800bfcf 	.word	0x0800bfcf
 800bd80:	0800c003 	.word	0x0800c003
 800bd84:	0800c003 	.word	0x0800c003
 800bd88:	0800c003 	.word	0x0800c003
 800bd8c:	0800c003 	.word	0x0800c003
 800bd90:	0800c003 	.word	0x0800c003
 800bd94:	0800c003 	.word	0x0800c003
 800bd98:	0800c003 	.word	0x0800c003
 800bd9c:	0800bda1 	.word	0x0800bda1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	7c12      	ldrb	r2, [r2, #16]
 800bdb8:	f107 0108 	add.w	r1, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdc2:	e126      	b.n	800c012 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fb27 	bl	800c41a <USBD_CtlError>
        err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd2:	e11e      	b.n	800c012 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	7c12      	ldrb	r2, [r2, #16]
 800bde0:	f107 0108 	add.w	r1, r7, #8
 800bde4:	4610      	mov	r0, r2
 800bde6:	4798      	blx	r3
 800bde8:	60f8      	str	r0, [r7, #12]
      break;
 800bdea:	e112      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7c1b      	ldrb	r3, [r3, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10d      	bne.n	800be10 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfc:	f107 0208 	add.w	r2, r7, #8
 800be00:	4610      	mov	r0, r2
 800be02:	4798      	blx	r3
 800be04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	2202      	movs	r2, #2
 800be0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be0e:	e100      	b.n	800c012 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be18:	f107 0208 	add.w	r2, r7, #8
 800be1c:	4610      	mov	r0, r2
 800be1e:	4798      	blx	r3
 800be20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3301      	adds	r3, #1
 800be26:	2202      	movs	r2, #2
 800be28:	701a      	strb	r2, [r3, #0]
      break;
 800be2a:	e0f2      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	885b      	ldrh	r3, [r3, #2]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b05      	cmp	r3, #5
 800be34:	f200 80ac 	bhi.w	800bf90 <USBD_GetDescriptor+0x258>
 800be38:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <USBD_GetDescriptor+0x108>)
 800be3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3e:	bf00      	nop
 800be40:	0800be59 	.word	0x0800be59
 800be44:	0800be8d 	.word	0x0800be8d
 800be48:	0800bec1 	.word	0x0800bec1
 800be4c:	0800bef5 	.word	0x0800bef5
 800be50:	0800bf29 	.word	0x0800bf29
 800be54:	0800bf5d 	.word	0x0800bf5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00b      	beq.n	800be7c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	7c12      	ldrb	r2, [r2, #16]
 800be70:	f107 0108 	add.w	r1, r7, #8
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be7a:	e091      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 facb 	bl	800c41a <USBD_CtlError>
            err++;
 800be84:	7afb      	ldrb	r3, [r7, #11]
 800be86:	3301      	adds	r3, #1
 800be88:	72fb      	strb	r3, [r7, #11]
          break;
 800be8a:	e089      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	7c12      	ldrb	r2, [r2, #16]
 800bea4:	f107 0108 	add.w	r1, r7, #8
 800bea8:	4610      	mov	r0, r2
 800beaa:	4798      	blx	r3
 800beac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beae:	e077      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fab1 	bl	800c41a <USBD_CtlError>
            err++;
 800beb8:	7afb      	ldrb	r3, [r7, #11]
 800beba:	3301      	adds	r3, #1
 800bebc:	72fb      	strb	r3, [r7, #11]
          break;
 800bebe:	e06f      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	7c12      	ldrb	r2, [r2, #16]
 800bed8:	f107 0108 	add.w	r1, r7, #8
 800bedc:	4610      	mov	r0, r2
 800bede:	4798      	blx	r3
 800bee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bee2:	e05d      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fa97 	bl	800c41a <USBD_CtlError>
            err++;
 800beec:	7afb      	ldrb	r3, [r7, #11]
 800beee:	3301      	adds	r3, #1
 800bef0:	72fb      	strb	r3, [r7, #11]
          break;
 800bef2:	e055      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00b      	beq.n	800bf18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	7c12      	ldrb	r2, [r2, #16]
 800bf0c:	f107 0108 	add.w	r1, r7, #8
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
 800bf14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf16:	e043      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa7d 	bl	800c41a <USBD_CtlError>
            err++;
 800bf20:	7afb      	ldrb	r3, [r7, #11]
 800bf22:	3301      	adds	r3, #1
 800bf24:	72fb      	strb	r3, [r7, #11]
          break;
 800bf26:	e03b      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00b      	beq.n	800bf4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	7c12      	ldrb	r2, [r2, #16]
 800bf40:	f107 0108 	add.w	r1, r7, #8
 800bf44:	4610      	mov	r0, r2
 800bf46:	4798      	blx	r3
 800bf48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf4a:	e029      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa63 	bl	800c41a <USBD_CtlError>
            err++;
 800bf54:	7afb      	ldrb	r3, [r7, #11]
 800bf56:	3301      	adds	r3, #1
 800bf58:	72fb      	strb	r3, [r7, #11]
          break;
 800bf5a:	e021      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	7c12      	ldrb	r2, [r2, #16]
 800bf74:	f107 0108 	add.w	r1, r7, #8
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4798      	blx	r3
 800bf7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf7e:	e00f      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa49 	bl	800c41a <USBD_CtlError>
            err++;
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf8e:	e007      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fa41 	bl	800c41a <USBD_CtlError>
          err++;
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf9e:	bf00      	nop
      }
      break;
 800bfa0:	e037      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7c1b      	ldrb	r3, [r3, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d109      	bne.n	800bfbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb2:	f107 0208 	add.w	r2, r7, #8
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	4798      	blx	r3
 800bfba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfbc:	e029      	b.n	800c012 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fa2a 	bl	800c41a <USBD_CtlError>
        err++;
 800bfc6:	7afb      	ldrb	r3, [r7, #11]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	72fb      	strb	r3, [r7, #11]
      break;
 800bfcc:	e021      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7c1b      	ldrb	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10d      	bne.n	800bff2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	f107 0208 	add.w	r2, r7, #8
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4798      	blx	r3
 800bfe6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	2207      	movs	r2, #7
 800bfee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bff0:	e00f      	b.n	800c012 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa10 	bl	800c41a <USBD_CtlError>
        err++;
 800bffa:	7afb      	ldrb	r3, [r7, #11]
 800bffc:	3301      	adds	r3, #1
 800bffe:	72fb      	strb	r3, [r7, #11]
      break;
 800c000:	e007      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa08 	bl	800c41a <USBD_CtlError>
      err++;
 800c00a:	7afb      	ldrb	r3, [r7, #11]
 800c00c:	3301      	adds	r3, #1
 800c00e:	72fb      	strb	r3, [r7, #11]
      break;
 800c010:	bf00      	nop
  }

  if (err != 0U)
 800c012:	7afb      	ldrb	r3, [r7, #11]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11e      	bne.n	800c056 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	88db      	ldrh	r3, [r3, #6]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d016      	beq.n	800c04e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c020:	893b      	ldrh	r3, [r7, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	88da      	ldrh	r2, [r3, #6]
 800c02a:	893b      	ldrh	r3, [r7, #8]
 800c02c:	4293      	cmp	r3, r2
 800c02e:	bf28      	it	cs
 800c030:	4613      	movcs	r3, r2
 800c032:	b29b      	uxth	r3, r3
 800c034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c036:	893b      	ldrh	r3, [r7, #8]
 800c038:	461a      	mov	r2, r3
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fa5d 	bl	800c4fc <USBD_CtlSendData>
 800c042:	e009      	b.n	800c058 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f9e7 	bl	800c41a <USBD_CtlError>
 800c04c:	e004      	b.n	800c058 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 faae 	bl	800c5b0 <USBD_CtlSendStatus>
 800c054:	e000      	b.n	800c058 <USBD_GetDescriptor+0x320>
    return;
 800c056:	bf00      	nop
  }
}
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop

0800c060 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	889b      	ldrh	r3, [r3, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d131      	bne.n	800c0d6 <USBD_SetAddress+0x76>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	88db      	ldrh	r3, [r3, #6]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d12d      	bne.n	800c0d6 <USBD_SetAddress+0x76>
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	885b      	ldrh	r3, [r3, #2]
 800c07e:	2b7f      	cmp	r3, #127	; 0x7f
 800c080:	d829      	bhi.n	800c0d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	885b      	ldrh	r3, [r3, #2]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c08c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b03      	cmp	r3, #3
 800c098:	d104      	bne.n	800c0a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f9bc 	bl	800c41a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a2:	e01d      	b.n	800c0e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7bfa      	ldrb	r2, [r7, #15]
 800c0a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f003 fb4b 	bl	800f74c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa7a 	bl	800c5b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ca:	e009      	b.n	800c0e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d4:	e004      	b.n	800c0e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f99e 	bl	800c41a <USBD_CtlError>
  }
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	4b4e      	ldr	r3, [pc, #312]	; (800c238 <USBD_SetConfig+0x150>)
 800c0fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c100:	4b4d      	ldr	r3, [pc, #308]	; (800c238 <USBD_SetConfig+0x150>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d905      	bls.n	800c114 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f985 	bl	800c41a <USBD_CtlError>
    return USBD_FAIL;
 800c110:	2303      	movs	r3, #3
 800c112:	e08c      	b.n	800c22e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d002      	beq.n	800c126 <USBD_SetConfig+0x3e>
 800c120:	2b03      	cmp	r3, #3
 800c122:	d029      	beq.n	800c178 <USBD_SetConfig+0x90>
 800c124:	e075      	b.n	800c212 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c126:	4b44      	ldr	r3, [pc, #272]	; (800c238 <USBD_SetConfig+0x150>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d020      	beq.n	800c170 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c12e:	4b42      	ldr	r3, [pc, #264]	; (800c238 <USBD_SetConfig+0x150>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c138:	4b3f      	ldr	r3, [pc, #252]	; (800c238 <USBD_SetConfig+0x150>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7fe ffbd 	bl	800b0be <USBD_SetClassConfig>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d008      	beq.n	800c160 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f962 	bl	800c41a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c15e:	e065      	b.n	800c22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fa25 	bl	800c5b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2203      	movs	r2, #3
 800c16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c16e:	e05d      	b.n	800c22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fa1d 	bl	800c5b0 <USBD_CtlSendStatus>
      break;
 800c176:	e059      	b.n	800c22c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c178:	4b2f      	ldr	r3, [pc, #188]	; (800c238 <USBD_SetConfig+0x150>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d112      	bne.n	800c1a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c188:	4b2b      	ldr	r3, [pc, #172]	; (800c238 <USBD_SetConfig+0x150>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	461a      	mov	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c192:	4b29      	ldr	r3, [pc, #164]	; (800c238 <USBD_SetConfig+0x150>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7fe ffac 	bl	800b0f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa06 	bl	800c5b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1a4:	e042      	b.n	800c22c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c1a6:	4b24      	ldr	r3, [pc, #144]	; (800c238 <USBD_SetConfig+0x150>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d02a      	beq.n	800c20a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7fe ff9a 	bl	800b0f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1c2:	4b1d      	ldr	r3, [pc, #116]	; (800c238 <USBD_SetConfig+0x150>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1cc:	4b1a      	ldr	r3, [pc, #104]	; (800c238 <USBD_SetConfig+0x150>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7fe ff73 	bl	800b0be <USBD_SetClassConfig>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00f      	beq.n	800c202 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f918 	bl	800c41a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7fe ff7f 	bl	800b0f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c200:	e014      	b.n	800c22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f9d4 	bl	800c5b0 <USBD_CtlSendStatus>
      break;
 800c208:	e010      	b.n	800c22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f9d0 	bl	800c5b0 <USBD_CtlSendStatus>
      break;
 800c210:	e00c      	b.n	800c22c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f900 	bl	800c41a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c21a:	4b07      	ldr	r3, [pc, #28]	; (800c238 <USBD_SetConfig+0x150>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7fe ff68 	bl	800b0f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c226:	2303      	movs	r3, #3
 800c228:	73fb      	strb	r3, [r7, #15]
      break;
 800c22a:	bf00      	nop
  }

  return ret;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20000828 	.word	0x20000828

0800c23c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	88db      	ldrh	r3, [r3, #6]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d004      	beq.n	800c258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f8e2 	bl	800c41a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c256:	e023      	b.n	800c2a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b02      	cmp	r3, #2
 800c262:	dc02      	bgt.n	800c26a <USBD_GetConfig+0x2e>
 800c264:	2b00      	cmp	r3, #0
 800c266:	dc03      	bgt.n	800c270 <USBD_GetConfig+0x34>
 800c268:	e015      	b.n	800c296 <USBD_GetConfig+0x5a>
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d00b      	beq.n	800c286 <USBD_GetConfig+0x4a>
 800c26e:	e012      	b.n	800c296 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3308      	adds	r3, #8
 800c27a:	2201      	movs	r2, #1
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f93c 	bl	800c4fc <USBD_CtlSendData>
        break;
 800c284:	e00c      	b.n	800c2a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3304      	adds	r3, #4
 800c28a:	2201      	movs	r2, #1
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f934 	bl	800c4fc <USBD_CtlSendData>
        break;
 800c294:	e004      	b.n	800c2a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f8be 	bl	800c41a <USBD_CtlError>
        break;
 800c29e:	bf00      	nop
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d81e      	bhi.n	800c2fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	88db      	ldrh	r3, [r3, #6]
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d004      	beq.n	800c2d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f8a5 	bl	800c41a <USBD_CtlError>
        break;
 800c2d0:	e01a      	b.n	800c308 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d005      	beq.n	800c2ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f043 0202 	orr.w	r2, r3, #2
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	330c      	adds	r3, #12
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f900 	bl	800c4fc <USBD_CtlSendData>
      break;
 800c2fc:	e004      	b.n	800c308 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f88a 	bl	800c41a <USBD_CtlError>
      break;
 800c306:	bf00      	nop
  }
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	885b      	ldrh	r3, [r3, #2]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d107      	bne.n	800c332 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f940 	bl	800c5b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c330:	e013      	b.n	800c35a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	2b02      	cmp	r3, #2
 800c338:	d10b      	bne.n	800c352 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	889b      	ldrh	r3, [r3, #4]
 800c33e:	0a1b      	lsrs	r3, r3, #8
 800c340:	b29b      	uxth	r3, r3
 800c342:	b2da      	uxtb	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f930 	bl	800c5b0 <USBD_CtlSendStatus>
}
 800c350:	e003      	b.n	800c35a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f860 	bl	800c41a <USBD_CtlError>
}
 800c35a:	bf00      	nop
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c372:	b2db      	uxtb	r3, r3
 800c374:	3b01      	subs	r3, #1
 800c376:	2b02      	cmp	r3, #2
 800c378:	d80b      	bhi.n	800c392 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	885b      	ldrh	r3, [r3, #2]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d10c      	bne.n	800c39c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f910 	bl	800c5b0 <USBD_CtlSendStatus>
      }
      break;
 800c390:	e004      	b.n	800c39c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f840 	bl	800c41a <USBD_CtlError>
      break;
 800c39a:	e000      	b.n	800c39e <USBD_ClrFeature+0x3c>
      break;
 800c39c:	bf00      	nop
  }
}
 800c39e:	bf00      	nop
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7ff fa17 	bl	800b804 <SWAPBYTE>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff fa0a 	bl	800b804 <SWAPBYTE>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f7ff f9fd 	bl	800b804 <SWAPBYTE>
 800c40a:	4603      	mov	r3, r0
 800c40c:	461a      	mov	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	80da      	strh	r2, [r3, #6]
}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c424:	2180      	movs	r1, #128	; 0x80
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f003 f926 	bl	800f678 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c42c:	2100      	movs	r1, #0
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f003 f922 	bl	800f678 <USBD_LL_StallEP>
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d036      	beq.n	800c4c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f000 f836 	bl	800c4c8 <USBD_GetLen>
 800c45c:	4603      	mov	r3, r0
 800c45e:	3301      	adds	r3, #1
 800c460:	b29b      	uxth	r3, r3
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	b29a      	uxth	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	4413      	add	r3, r2
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7812      	ldrb	r2, [r2, #0]
 800c474:	701a      	strb	r2, [r3, #0]
  idx++;
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	3301      	adds	r3, #1
 800c47a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	4413      	add	r3, r2
 800c482:	2203      	movs	r2, #3
 800c484:	701a      	strb	r2, [r3, #0]
  idx++;
 800c486:	7dfb      	ldrb	r3, [r7, #23]
 800c488:	3301      	adds	r3, #1
 800c48a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c48c:	e013      	b.n	800c4b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	4413      	add	r3, r2
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	7812      	ldrb	r2, [r2, #0]
 800c498:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	3301      	adds	r3, #1
 800c49e:	613b      	str	r3, [r7, #16]
    idx++;
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1e7      	bne.n	800c48e <USBD_GetString+0x52>
 800c4be:	e000      	b.n	800c4c2 <USBD_GetString+0x86>
    return;
 800c4c0:	bf00      	nop
  }
}
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4d8:	e005      	b.n	800c4e6 <USBD_GetLen+0x1e>
  {
    len++;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1f5      	bne.n	800c4da <USBD_GetLen+0x12>
  }

  return len;
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2202      	movs	r2, #2
 800c50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	2100      	movs	r1, #0
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f003 f931 	bl	800f78a <USBD_LL_Transmit>

  return USBD_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	2100      	movs	r1, #0
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f003 f920 	bl	800f78a <USBD_LL_Transmit>

  return USBD_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2203      	movs	r2, #3
 800c564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	2100      	movs	r1, #0
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f003 f924 	bl	800f7cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	2100      	movs	r1, #0
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f003 f913 	bl	800f7cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f003 f8df 	bl	800f78a <USBD_LL_Transmit>

  return USBD_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b082      	sub	sp, #8
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2205      	movs	r2, #5
 800c5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f003 f8ed 	bl	800f7cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c606:	79fb      	ldrb	r3, [r7, #7]
 800c608:	4a08      	ldr	r2, [pc, #32]	; (800c62c <disk_status+0x30>)
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	79fa      	ldrb	r2, [r7, #7]
 800c614:	4905      	ldr	r1, [pc, #20]	; (800c62c <disk_status+0x30>)
 800c616:	440a      	add	r2, r1
 800c618:	7a12      	ldrb	r2, [r2, #8]
 800c61a:	4610      	mov	r0, r2
 800c61c:	4798      	blx	r3
 800c61e:	4603      	mov	r3, r0
 800c620:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c622:	7bfb      	ldrb	r3, [r7, #15]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3710      	adds	r7, #16
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	20000854 	.word	0x20000854

0800c630 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	4603      	mov	r3, r0
 800c638:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	4a0d      	ldr	r2, [pc, #52]	; (800c678 <disk_initialize+0x48>)
 800c642:	5cd3      	ldrb	r3, [r2, r3]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d111      	bne.n	800c66c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	4a0b      	ldr	r2, [pc, #44]	; (800c678 <disk_initialize+0x48>)
 800c64c:	2101      	movs	r1, #1
 800c64e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	4a09      	ldr	r2, [pc, #36]	; (800c678 <disk_initialize+0x48>)
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	79fa      	ldrb	r2, [r7, #7]
 800c65e:	4906      	ldr	r1, [pc, #24]	; (800c678 <disk_initialize+0x48>)
 800c660:	440a      	add	r2, r1
 800c662:	7a12      	ldrb	r2, [r2, #8]
 800c664:	4610      	mov	r0, r2
 800c666:	4798      	blx	r3
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000854 	.word	0x20000854

0800c67c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
 800c68e:	4a0a      	ldr	r2, [pc, #40]	; (800c6b8 <disk_read+0x3c>)
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	689c      	ldr	r4, [r3, #8]
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	4a07      	ldr	r2, [pc, #28]	; (800c6b8 <disk_read+0x3c>)
 800c69c:	4413      	add	r3, r2
 800c69e:	7a18      	ldrb	r0, [r3, #8]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	68b9      	ldr	r1, [r7, #8]
 800c6a6:	47a0      	blx	r4
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd90      	pop	{r4, r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20000854 	.word	0x20000854

0800c6bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c6bc:	b590      	push	{r4, r7, lr}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	607a      	str	r2, [r7, #4]
 800c6c6:	603b      	str	r3, [r7, #0]
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	4a0a      	ldr	r2, [pc, #40]	; (800c6f8 <disk_write+0x3c>)
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	68dc      	ldr	r4, [r3, #12]
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	4a07      	ldr	r2, [pc, #28]	; (800c6f8 <disk_write+0x3c>)
 800c6dc:	4413      	add	r3, r2
 800c6de:	7a18      	ldrb	r0, [r3, #8]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	68b9      	ldr	r1, [r7, #8]
 800c6e6:	47a0      	blx	r4
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd90      	pop	{r4, r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20000854 	.word	0x20000854

0800c6fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	603a      	str	r2, [r7, #0]
 800c706:	71fb      	strb	r3, [r7, #7]
 800c708:	460b      	mov	r3, r1
 800c70a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	4a09      	ldr	r2, [pc, #36]	; (800c734 <disk_ioctl+0x38>)
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	79fa      	ldrb	r2, [r7, #7]
 800c71a:	4906      	ldr	r1, [pc, #24]	; (800c734 <disk_ioctl+0x38>)
 800c71c:	440a      	add	r2, r1
 800c71e:	7a10      	ldrb	r0, [r2, #8]
 800c720:	79b9      	ldrb	r1, [r7, #6]
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	4798      	blx	r3
 800c726:	4603      	mov	r3, r0
 800c728:	73fb      	strb	r3, [r7, #15]
  return res;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20000854 	.word	0x20000854

0800c738 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3301      	adds	r3, #1
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c748:	89fb      	ldrh	r3, [r7, #14]
 800c74a:	021b      	lsls	r3, r3, #8
 800c74c:	b21a      	sxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	b21b      	sxth	r3, r3
 800c754:	4313      	orrs	r3, r2
 800c756:	b21b      	sxth	r3, r3
 800c758:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c75a:	89fb      	ldrh	r3, [r7, #14]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3714      	adds	r7, #20
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3303      	adds	r3, #3
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	021b      	lsls	r3, r3, #8
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	3202      	adds	r2, #2
 800c780:	7812      	ldrb	r2, [r2, #0]
 800c782:	4313      	orrs	r3, r2
 800c784:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	021b      	lsls	r3, r3, #8
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	3201      	adds	r2, #1
 800c78e:	7812      	ldrb	r2, [r2, #0]
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7812      	ldrb	r2, [r2, #0]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b083      	sub	sp, #12
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	887a      	ldrh	r2, [r7, #2]
 800c7c2:	b2d2      	uxtb	r2, r2
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	887b      	ldrh	r3, [r7, #2]
 800c7c8:	0a1b      	lsrs	r3, r3, #8
 800c7ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	607a      	str	r2, [r7, #4]
 800c7d2:	887a      	ldrh	r2, [r7, #2]
 800c7d4:	b2d2      	uxtb	r2, r2
 800c7d6:	701a      	strb	r2, [r3, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	b2d2      	uxtb	r2, r2
 800c7f8:	701a      	strb	r2, [r3, #0]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	0a1b      	lsrs	r3, r3, #8
 800c7fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	607a      	str	r2, [r7, #4]
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	b2d2      	uxtb	r2, r2
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	0a1b      	lsrs	r3, r3, #8
 800c810:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	1c5a      	adds	r2, r3, #1
 800c816:	607a      	str	r2, [r7, #4]
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	b2d2      	uxtb	r2, r2
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	0a1b      	lsrs	r3, r3, #8
 800c822:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	607a      	str	r2, [r7, #4]
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	b2d2      	uxtb	r2, r2
 800c82e:	701a      	strb	r2, [r3, #0]
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00d      	beq.n	800c872 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	1c53      	adds	r3, r2, #1
 800c85a:	613b      	str	r3, [r7, #16]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	1c59      	adds	r1, r3, #1
 800c860:	6179      	str	r1, [r7, #20]
 800c862:	7812      	ldrb	r2, [r2, #0]
 800c864:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3b01      	subs	r3, #1
 800c86a:	607b      	str	r3, [r7, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1f1      	bne.n	800c856 <mem_cpy+0x1a>
	}
}
 800c872:	bf00      	nop
 800c874:	371c      	adds	r7, #28
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c87e:	b480      	push	{r7}
 800c880:	b087      	sub	sp, #28
 800c882:	af00      	add	r7, sp, #0
 800c884:	60f8      	str	r0, [r7, #12]
 800c886:	60b9      	str	r1, [r7, #8]
 800c888:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	617a      	str	r2, [r7, #20]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	b2d2      	uxtb	r2, r2
 800c898:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	607b      	str	r3, [r7, #4]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1f3      	bne.n	800c88e <mem_set+0x10>
}
 800c8a6:	bf00      	nop
 800c8a8:	bf00      	nop
 800c8aa:	371c      	adds	r7, #28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c8b4:	b480      	push	{r7}
 800c8b6:	b089      	sub	sp, #36	; 0x24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	61fb      	str	r3, [r7, #28]
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	61fa      	str	r2, [r7, #28]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	61ba      	str	r2, [r7, #24]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	1acb      	subs	r3, r1, r3
 800c8e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	607b      	str	r3, [r7, #4]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d002      	beq.n	800c8f4 <mem_cmp+0x40>
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d0eb      	beq.n	800c8cc <mem_cmp+0x18>

	return r;
 800c8f4:	697b      	ldr	r3, [r7, #20]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3724      	adds	r7, #36	; 0x24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c902:	b480      	push	{r7}
 800c904:	b083      	sub	sp, #12
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c90c:	e002      	b.n	800c914 <chk_chr+0x12>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3301      	adds	r3, #1
 800c912:	607b      	str	r3, [r7, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d005      	beq.n	800c928 <chk_chr+0x26>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	461a      	mov	r2, r3
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	4293      	cmp	r3, r2
 800c926:	d1f2      	bne.n	800c90e <chk_chr+0xc>
	return *str;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	781b      	ldrb	r3, [r3, #0]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c942:	2300      	movs	r3, #0
 800c944:	60bb      	str	r3, [r7, #8]
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e029      	b.n	800c9a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c94c:	4a27      	ldr	r2, [pc, #156]	; (800c9ec <chk_lock+0xb4>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	011b      	lsls	r3, r3, #4
 800c952:	4413      	add	r3, r2
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d01d      	beq.n	800c996 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c95a:	4a24      	ldr	r2, [pc, #144]	; (800c9ec <chk_lock+0xb4>)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	4413      	add	r3, r2
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d116      	bne.n	800c99a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c96c:	4a1f      	ldr	r2, [pc, #124]	; (800c9ec <chk_lock+0xb4>)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	011b      	lsls	r3, r3, #4
 800c972:	4413      	add	r3, r2
 800c974:	3304      	adds	r3, #4
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d10c      	bne.n	800c99a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c980:	4a1a      	ldr	r2, [pc, #104]	; (800c9ec <chk_lock+0xb4>)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	011b      	lsls	r3, r3, #4
 800c986:	4413      	add	r3, r2
 800c988:	3308      	adds	r3, #8
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c990:	429a      	cmp	r2, r3
 800c992:	d102      	bne.n	800c99a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c994:	e007      	b.n	800c9a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c996:	2301      	movs	r3, #1
 800c998:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d9d2      	bls.n	800c94c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d109      	bne.n	800c9c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d102      	bne.n	800c9b8 <chk_lock+0x80>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d101      	bne.n	800c9bc <chk_lock+0x84>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	e010      	b.n	800c9de <chk_lock+0xa6>
 800c9bc:	2312      	movs	r3, #18
 800c9be:	e00e      	b.n	800c9de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d108      	bne.n	800c9d8 <chk_lock+0xa0>
 800c9c6:	4a09      	ldr	r2, [pc, #36]	; (800c9ec <chk_lock+0xb4>)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	4413      	add	r3, r2
 800c9ce:	330c      	adds	r3, #12
 800c9d0:	881b      	ldrh	r3, [r3, #0]
 800c9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d6:	d101      	bne.n	800c9dc <chk_lock+0xa4>
 800c9d8:	2310      	movs	r3, #16
 800c9da:	e000      	b.n	800c9de <chk_lock+0xa6>
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	20000834 	.word	0x20000834

0800c9f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	607b      	str	r3, [r7, #4]
 800c9fa:	e002      	b.n	800ca02 <enq_lock+0x12>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	607b      	str	r3, [r7, #4]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d806      	bhi.n	800ca16 <enq_lock+0x26>
 800ca08:	4a09      	ldr	r2, [pc, #36]	; (800ca30 <enq_lock+0x40>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	4413      	add	r3, r2
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1f2      	bne.n	800c9fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	bf14      	ite	ne
 800ca1c:	2301      	movne	r3, #1
 800ca1e:	2300      	moveq	r3, #0
 800ca20:	b2db      	uxtb	r3, r3
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	20000834 	.word	0x20000834

0800ca34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
 800ca42:	e01f      	b.n	800ca84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ca44:	4a41      	ldr	r2, [pc, #260]	; (800cb4c <inc_lock+0x118>)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	4413      	add	r3, r2
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d113      	bne.n	800ca7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ca56:	4a3d      	ldr	r2, [pc, #244]	; (800cb4c <inc_lock+0x118>)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	011b      	lsls	r3, r3, #4
 800ca5c:	4413      	add	r3, r2
 800ca5e:	3304      	adds	r3, #4
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d109      	bne.n	800ca7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ca6a:	4a38      	ldr	r2, [pc, #224]	; (800cb4c <inc_lock+0x118>)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	011b      	lsls	r3, r3, #4
 800ca70:	4413      	add	r3, r2
 800ca72:	3308      	adds	r3, #8
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d006      	beq.n	800ca8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d9dc      	bls.n	800ca44 <inc_lock+0x10>
 800ca8a:	e000      	b.n	800ca8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ca8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d132      	bne.n	800cafa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	e002      	b.n	800caa0 <inc_lock+0x6c>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d806      	bhi.n	800cab4 <inc_lock+0x80>
 800caa6:	4a29      	ldr	r2, [pc, #164]	; (800cb4c <inc_lock+0x118>)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	011b      	lsls	r3, r3, #4
 800caac:	4413      	add	r3, r2
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1f2      	bne.n	800ca9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d101      	bne.n	800cabe <inc_lock+0x8a>
 800caba:	2300      	movs	r3, #0
 800cabc:	e040      	b.n	800cb40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	4922      	ldr	r1, [pc, #136]	; (800cb4c <inc_lock+0x118>)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	440b      	add	r3, r1
 800caca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	689a      	ldr	r2, [r3, #8]
 800cad0:	491e      	ldr	r1, [pc, #120]	; (800cb4c <inc_lock+0x118>)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	011b      	lsls	r3, r3, #4
 800cad6:	440b      	add	r3, r1
 800cad8:	3304      	adds	r3, #4
 800cada:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	695a      	ldr	r2, [r3, #20]
 800cae0:	491a      	ldr	r1, [pc, #104]	; (800cb4c <inc_lock+0x118>)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	011b      	lsls	r3, r3, #4
 800cae6:	440b      	add	r3, r1
 800cae8:	3308      	adds	r3, #8
 800caea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800caec:	4a17      	ldr	r2, [pc, #92]	; (800cb4c <inc_lock+0x118>)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	011b      	lsls	r3, r3, #4
 800caf2:	4413      	add	r3, r2
 800caf4:	330c      	adds	r3, #12
 800caf6:	2200      	movs	r2, #0
 800caf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d009      	beq.n	800cb14 <inc_lock+0xe0>
 800cb00:	4a12      	ldr	r2, [pc, #72]	; (800cb4c <inc_lock+0x118>)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	011b      	lsls	r3, r3, #4
 800cb06:	4413      	add	r3, r2
 800cb08:	330c      	adds	r3, #12
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d001      	beq.n	800cb14 <inc_lock+0xe0>
 800cb10:	2300      	movs	r3, #0
 800cb12:	e015      	b.n	800cb40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d108      	bne.n	800cb2c <inc_lock+0xf8>
 800cb1a:	4a0c      	ldr	r2, [pc, #48]	; (800cb4c <inc_lock+0x118>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	011b      	lsls	r3, r3, #4
 800cb20:	4413      	add	r3, r2
 800cb22:	330c      	adds	r3, #12
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	3301      	adds	r3, #1
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	e001      	b.n	800cb30 <inc_lock+0xfc>
 800cb2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb30:	4906      	ldr	r1, [pc, #24]	; (800cb4c <inc_lock+0x118>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	011b      	lsls	r3, r3, #4
 800cb36:	440b      	add	r3, r1
 800cb38:	330c      	adds	r3, #12
 800cb3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3301      	adds	r3, #1
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	20000834 	.word	0x20000834

0800cb50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	607b      	str	r3, [r7, #4]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d825      	bhi.n	800cbb0 <dec_lock+0x60>
		n = Files[i].ctr;
 800cb64:	4a17      	ldr	r2, [pc, #92]	; (800cbc4 <dec_lock+0x74>)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	011b      	lsls	r3, r3, #4
 800cb6a:	4413      	add	r3, r2
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cb72:	89fb      	ldrh	r3, [r7, #14]
 800cb74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb78:	d101      	bne.n	800cb7e <dec_lock+0x2e>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cb7e:	89fb      	ldrh	r3, [r7, #14]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <dec_lock+0x3a>
 800cb84:	89fb      	ldrh	r3, [r7, #14]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cb8a:	4a0e      	ldr	r2, [pc, #56]	; (800cbc4 <dec_lock+0x74>)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	4413      	add	r3, r2
 800cb92:	330c      	adds	r3, #12
 800cb94:	89fa      	ldrh	r2, [r7, #14]
 800cb96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cb98:	89fb      	ldrh	r3, [r7, #14]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d105      	bne.n	800cbaa <dec_lock+0x5a>
 800cb9e:	4a09      	ldr	r2, [pc, #36]	; (800cbc4 <dec_lock+0x74>)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	011b      	lsls	r3, r3, #4
 800cba4:	4413      	add	r3, r2
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	737b      	strb	r3, [r7, #13]
 800cbae:	e001      	b.n	800cbb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cbb4:	7b7b      	ldrb	r3, [r7, #13]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	20000834 	.word	0x20000834

0800cbc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	e010      	b.n	800cbf8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cbd6:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <clear_lock+0x44>)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	011b      	lsls	r3, r3, #4
 800cbdc:	4413      	add	r3, r2
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d105      	bne.n	800cbf2 <clear_lock+0x2a>
 800cbe6:	4a09      	ldr	r2, [pc, #36]	; (800cc0c <clear_lock+0x44>)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	4413      	add	r3, r2
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d9eb      	bls.n	800cbd6 <clear_lock+0xe>
	}
}
 800cbfe:	bf00      	nop
 800cc00:	bf00      	nop
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	20000834 	.word	0x20000834

0800cc10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	78db      	ldrb	r3, [r3, #3]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d034      	beq.n	800cc8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	7858      	ldrb	r0, [r3, #1]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc34:	2301      	movs	r3, #1
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	f7ff fd40 	bl	800c6bc <disk_write>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	73fb      	strb	r3, [r7, #15]
 800cc46:	e022      	b.n	800cc8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	1ad2      	subs	r2, r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d217      	bcs.n	800cc8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	789b      	ldrb	r3, [r3, #2]
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	e010      	b.n	800cc88 <sync_window+0x78>
					wsect += fs->fsize;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7858      	ldrb	r0, [r3, #1]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	697a      	ldr	r2, [r7, #20]
 800cc7e:	f7ff fd1d 	bl	800c6bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	613b      	str	r3, [r7, #16]
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d8eb      	bhi.n	800cc66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d01b      	beq.n	800cce8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff ffad 	bl	800cc10 <sync_window>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d113      	bne.n	800cce8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7858      	ldrb	r0, [r3, #1]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccca:	2301      	movs	r3, #1
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	f7ff fcd5 	bl	800c67c <disk_read>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d004      	beq.n	800cce2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
	...

0800ccf4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff ff87 	bl	800cc10 <sync_window>
 800cd02:	4603      	mov	r3, r0
 800cd04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d158      	bne.n	800cdbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b03      	cmp	r3, #3
 800cd12:	d148      	bne.n	800cda6 <sync_fs+0xb2>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	791b      	ldrb	r3, [r3, #4]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d144      	bne.n	800cda6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3330      	adds	r3, #48	; 0x30
 800cd20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd24:	2100      	movs	r1, #0
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fda9 	bl	800c87e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3330      	adds	r3, #48	; 0x30
 800cd30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7ff fd38 	bl	800c7ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3330      	adds	r3, #48	; 0x30
 800cd42:	4921      	ldr	r1, [pc, #132]	; (800cdc8 <sync_fs+0xd4>)
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7ff fd4d 	bl	800c7e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3330      	adds	r3, #48	; 0x30
 800cd4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cd52:	491e      	ldr	r1, [pc, #120]	; (800cdcc <sync_fs+0xd8>)
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff fd45 	bl	800c7e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	3330      	adds	r3, #48	; 0x30
 800cd5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	4619      	mov	r1, r3
 800cd68:	4610      	mov	r0, r2
 800cd6a:	f7ff fd3b 	bl	800c7e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3330      	adds	r3, #48	; 0x30
 800cd72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	f7ff fd31 	bl	800c7e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	69db      	ldr	r3, [r3, #28]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	7858      	ldrb	r0, [r3, #1]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	f7ff fc8e 	bl	800c6bc <disk_write>
			fs->fsi_flag = 0;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	785b      	ldrb	r3, [r3, #1]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	2100      	movs	r1, #0
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff fca4 	bl	800c6fc <disk_ioctl>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <sync_fs+0xca>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	41615252 	.word	0x41615252
 800cdcc:	61417272 	.word	0x61417272

0800cdd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	3b02      	subs	r3, #2
 800cdde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	3b02      	subs	r3, #2
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d301      	bcc.n	800cdf0 <clust2sect+0x20>
 800cdec:	2300      	movs	r3, #0
 800cdee:	e008      	b.n	800ce02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	895b      	ldrh	r3, [r3, #10]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	fb03 f202 	mul.w	r2, r3, r2
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce00:	4413      	add	r3, r2
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b086      	sub	sp, #24
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d904      	bls.n	800ce2e <get_fat+0x20>
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d302      	bcc.n	800ce34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ce2e:	2301      	movs	r3, #1
 800ce30:	617b      	str	r3, [r7, #20]
 800ce32:	e08f      	b.n	800cf54 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ce34:	f04f 33ff 	mov.w	r3, #4294967295
 800ce38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d062      	beq.n	800cf08 <get_fat+0xfa>
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	dc7c      	bgt.n	800cf40 <get_fat+0x132>
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d002      	beq.n	800ce50 <get_fat+0x42>
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d042      	beq.n	800ced4 <get_fat+0xc6>
 800ce4e:	e077      	b.n	800cf40 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	085b      	lsrs	r3, r3, #1
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	6a1a      	ldr	r2, [r3, #32]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	0a5b      	lsrs	r3, r3, #9
 800ce66:	4413      	add	r3, r2
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6938      	ldr	r0, [r7, #16]
 800ce6c:	f7ff ff14 	bl	800cc98 <move_window>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d167      	bne.n	800cf46 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	60fa      	str	r2, [r7, #12]
 800ce7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	4413      	add	r3, r2
 800ce84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	6a1a      	ldr	r2, [r3, #32]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	0a5b      	lsrs	r3, r3, #9
 800ce92:	4413      	add	r3, r2
 800ce94:	4619      	mov	r1, r3
 800ce96:	6938      	ldr	r0, [r7, #16]
 800ce98:	f7ff fefe 	bl	800cc98 <move_window>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d153      	bne.n	800cf4a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea8:	693a      	ldr	r2, [r7, #16]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceb0:	021b      	lsls	r3, r3, #8
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <get_fat+0xbc>
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	091b      	lsrs	r3, r3, #4
 800cec8:	e002      	b.n	800ced0 <get_fat+0xc2>
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ced0:	617b      	str	r3, [r7, #20]
			break;
 800ced2:	e03f      	b.n	800cf54 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	6a1a      	ldr	r2, [r3, #32]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	0a1b      	lsrs	r3, r3, #8
 800cedc:	4413      	add	r3, r2
 800cede:	4619      	mov	r1, r3
 800cee0:	6938      	ldr	r0, [r7, #16]
 800cee2:	f7ff fed9 	bl	800cc98 <move_window>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d130      	bne.n	800cf4e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cefa:	4413      	add	r3, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7ff fc1b 	bl	800c738 <ld_word>
 800cf02:	4603      	mov	r3, r0
 800cf04:	617b      	str	r3, [r7, #20]
			break;
 800cf06:	e025      	b.n	800cf54 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	6a1a      	ldr	r2, [r3, #32]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	09db      	lsrs	r3, r3, #7
 800cf10:	4413      	add	r3, r2
 800cf12:	4619      	mov	r1, r3
 800cf14:	6938      	ldr	r0, [r7, #16]
 800cf16:	f7ff febf 	bl	800cc98 <move_window>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d118      	bne.n	800cf52 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf2e:	4413      	add	r3, r2
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fc19 	bl	800c768 <ld_dword>
 800cf36:	4603      	mov	r3, r0
 800cf38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cf3c:	617b      	str	r3, [r7, #20]
			break;
 800cf3e:	e009      	b.n	800cf54 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cf40:	2301      	movs	r3, #1
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	e006      	b.n	800cf54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf46:	bf00      	nop
 800cf48:	e004      	b.n	800cf54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf4a:	bf00      	nop
 800cf4c:	e002      	b.n	800cf54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf4e:	bf00      	nop
 800cf50:	e000      	b.n	800cf54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf52:	bf00      	nop
		}
	}

	return val;
 800cf54:	697b      	ldr	r3, [r7, #20]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cf5e:	b590      	push	{r4, r7, lr}
 800cf60:	b089      	sub	sp, #36	; 0x24
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	60b9      	str	r1, [r7, #8]
 800cf68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	f240 80d9 	bls.w	800d128 <put_fat+0x1ca>
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	f080 80d3 	bcs.w	800d128 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	f000 8096 	beq.w	800d0b8 <put_fat+0x15a>
 800cf8c:	2b03      	cmp	r3, #3
 800cf8e:	f300 80cb 	bgt.w	800d128 <put_fat+0x1ca>
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d002      	beq.n	800cf9c <put_fat+0x3e>
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d06e      	beq.n	800d078 <put_fat+0x11a>
 800cf9a:	e0c5      	b.n	800d128 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	61bb      	str	r3, [r7, #24]
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	085b      	lsrs	r3, r3, #1
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6a1a      	ldr	r2, [r3, #32]
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	0a5b      	lsrs	r3, r3, #9
 800cfb2:	4413      	add	r3, r2
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7ff fe6e 	bl	800cc98 <move_window>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfc0:	7ffb      	ldrb	r3, [r7, #31]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f040 80a9 	bne.w	800d11a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	1c59      	adds	r1, r3, #1
 800cfd2:	61b9      	str	r1, [r7, #24]
 800cfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd8:	4413      	add	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	f003 0301 	and.w	r3, r3, #1
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00d      	beq.n	800d002 <put_fat+0xa4>
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	b25b      	sxtb	r3, r3
 800cfec:	f003 030f 	and.w	r3, r3, #15
 800cff0:	b25a      	sxtb	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	011b      	lsls	r3, r3, #4
 800cff8:	b25b      	sxtb	r3, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b25b      	sxtb	r3, r3
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	e001      	b.n	800d006 <put_fat+0xa8>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	b2db      	uxtb	r3, r3
 800d006:	697a      	ldr	r2, [r7, #20]
 800d008:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2201      	movs	r2, #1
 800d00e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6a1a      	ldr	r2, [r3, #32]
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	0a5b      	lsrs	r3, r3, #9
 800d018:	4413      	add	r3, r2
 800d01a:	4619      	mov	r1, r3
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff fe3b 	bl	800cc98 <move_window>
 800d022:	4603      	mov	r3, r0
 800d024:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d026:	7ffb      	ldrb	r3, [r7, #31]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d178      	bne.n	800d11e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d038:	4413      	add	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <put_fat+0xf0>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	091b      	lsrs	r3, r3, #4
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	e00e      	b.n	800d06c <put_fat+0x10e>
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	b25b      	sxtb	r3, r3
 800d054:	f023 030f 	bic.w	r3, r3, #15
 800d058:	b25a      	sxtb	r2, r3
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	b25b      	sxtb	r3, r3
 800d060:	f003 030f 	and.w	r3, r3, #15
 800d064:	b25b      	sxtb	r3, r3
 800d066:	4313      	orrs	r3, r2
 800d068:	b25b      	sxtb	r3, r3
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2201      	movs	r2, #1
 800d074:	70da      	strb	r2, [r3, #3]
			break;
 800d076:	e057      	b.n	800d128 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6a1a      	ldr	r2, [r3, #32]
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	0a1b      	lsrs	r3, r3, #8
 800d080:	4413      	add	r3, r2
 800d082:	4619      	mov	r1, r3
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f7ff fe07 	bl	800cc98 <move_window>
 800d08a:	4603      	mov	r3, r0
 800d08c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d08e:	7ffb      	ldrb	r3, [r7, #31]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d146      	bne.n	800d122 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d0a2:	4413      	add	r3, r2
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	b292      	uxth	r2, r2
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fb7f 	bl	800c7ae <st_word>
			fs->wflag = 1;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	70da      	strb	r2, [r3, #3]
			break;
 800d0b6:	e037      	b.n	800d128 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6a1a      	ldr	r2, [r3, #32]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	09db      	lsrs	r3, r3, #7
 800d0c0:	4413      	add	r3, r2
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f7ff fde7 	bl	800cc98 <move_window>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0ce:	7ffb      	ldrb	r3, [r7, #31]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d128      	bne.n	800d126 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d0e8:	4413      	add	r3, r2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff fb3c 	bl	800c768 <ld_dword>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d0f6:	4323      	orrs	r3, r4
 800d0f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d108:	4413      	add	r3, r2
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff fb69 	bl	800c7e4 <st_dword>
			fs->wflag = 1;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2201      	movs	r2, #1
 800d116:	70da      	strb	r2, [r3, #3]
			break;
 800d118:	e006      	b.n	800d128 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d11a:	bf00      	nop
 800d11c:	e004      	b.n	800d128 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d11e:	bf00      	nop
 800d120:	e002      	b.n	800d128 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d122:	bf00      	nop
 800d124:	e000      	b.n	800d128 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d126:	bf00      	nop
		}
	}
	return res;
 800d128:	7ffb      	ldrb	r3, [r7, #31]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3724      	adds	r7, #36	; 0x24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd90      	pop	{r4, r7, pc}

0800d132 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b088      	sub	sp, #32
 800d136:	af00      	add	r7, sp, #0
 800d138:	60f8      	str	r0, [r7, #12]
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d904      	bls.n	800d158 <remove_chain+0x26>
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	429a      	cmp	r2, r3
 800d156:	d301      	bcc.n	800d15c <remove_chain+0x2a>
 800d158:	2302      	movs	r3, #2
 800d15a:	e04b      	b.n	800d1f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00c      	beq.n	800d17c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d162:	f04f 32ff 	mov.w	r2, #4294967295
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	69b8      	ldr	r0, [r7, #24]
 800d16a:	f7ff fef8 	bl	800cf5e <put_fat>
 800d16e:	4603      	mov	r3, r0
 800d170:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d172:	7ffb      	ldrb	r3, [r7, #31]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <remove_chain+0x4a>
 800d178:	7ffb      	ldrb	r3, [r7, #31]
 800d17a:	e03b      	b.n	800d1f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d17c:	68b9      	ldr	r1, [r7, #8]
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f7ff fe45 	bl	800ce0e <get_fat>
 800d184:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d031      	beq.n	800d1f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d101      	bne.n	800d196 <remove_chain+0x64>
 800d192:	2302      	movs	r3, #2
 800d194:	e02e      	b.n	800d1f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19c:	d101      	bne.n	800d1a2 <remove_chain+0x70>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e028      	b.n	800d1f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	68b9      	ldr	r1, [r7, #8]
 800d1a6:	69b8      	ldr	r0, [r7, #24]
 800d1a8:	f7ff fed9 	bl	800cf5e <put_fat>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d1b0:	7ffb      	ldrb	r3, [r7, #31]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <remove_chain+0x88>
 800d1b6:	7ffb      	ldrb	r3, [r7, #31]
 800d1b8:	e01c      	b.n	800d1f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	691a      	ldr	r2, [r3, #16]
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	3b02      	subs	r3, #2
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d20b      	bcs.n	800d1e0 <remove_chain+0xae>
			fs->free_clst++;
 800d1c8:	69bb      	ldr	r3, [r7, #24]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	791b      	ldrb	r3, [r3, #4]
 800d1d6:	f043 0301 	orr.w	r3, r3, #1
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d3c6      	bcc.n	800d17c <remove_chain+0x4a>
 800d1ee:	e000      	b.n	800d1f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d1f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3720      	adds	r7, #32
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10d      	bne.n	800d22e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d004      	beq.n	800d228 <create_chain+0x2c>
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	69ba      	ldr	r2, [r7, #24]
 800d224:	429a      	cmp	r2, r3
 800d226:	d31b      	bcc.n	800d260 <create_chain+0x64>
 800d228:	2301      	movs	r3, #1
 800d22a:	61bb      	str	r3, [r7, #24]
 800d22c:	e018      	b.n	800d260 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff fdec 	bl	800ce0e <get_fat>
 800d236:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d801      	bhi.n	800d242 <create_chain+0x46>
 800d23e:	2301      	movs	r3, #1
 800d240:	e070      	b.n	800d324 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d248:	d101      	bne.n	800d24e <create_chain+0x52>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	e06a      	b.n	800d324 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	68fa      	ldr	r2, [r7, #12]
 800d254:	429a      	cmp	r2, r3
 800d256:	d201      	bcs.n	800d25c <create_chain+0x60>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	e063      	b.n	800d324 <create_chain+0x128>
		scl = clst;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	3301      	adds	r3, #1
 800d268:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	429a      	cmp	r2, r3
 800d272:	d307      	bcc.n	800d284 <create_chain+0x88>
				ncl = 2;
 800d274:	2302      	movs	r3, #2
 800d276:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d278:	69fa      	ldr	r2, [r7, #28]
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d901      	bls.n	800d284 <create_chain+0x88>
 800d280:	2300      	movs	r3, #0
 800d282:	e04f      	b.n	800d324 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d284:	69f9      	ldr	r1, [r7, #28]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff fdc1 	bl	800ce0e <get_fat>
 800d28c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00e      	beq.n	800d2b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d003      	beq.n	800d2a2 <create_chain+0xa6>
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a0:	d101      	bne.n	800d2a6 <create_chain+0xaa>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	e03e      	b.n	800d324 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d2a6:	69fa      	ldr	r2, [r7, #28]
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d1da      	bne.n	800d264 <create_chain+0x68>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e038      	b.n	800d324 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d2b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b8:	69f9      	ldr	r1, [r7, #28]
 800d2ba:	6938      	ldr	r0, [r7, #16]
 800d2bc:	f7ff fe4f 	bl	800cf5e <put_fat>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <create_chain+0xe2>
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d006      	beq.n	800d2de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d2d0:	69fa      	ldr	r2, [r7, #28]
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6938      	ldr	r0, [r7, #16]
 800d2d6:	f7ff fe42 	bl	800cf5e <put_fat>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d116      	bne.n	800d312 <create_chain+0x116>
		fs->last_clst = ncl;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	69fa      	ldr	r2, [r7, #28]
 800d2e8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	3b02      	subs	r3, #2
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d804      	bhi.n	800d302 <create_chain+0x106>
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	1e5a      	subs	r2, r3, #1
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	791b      	ldrb	r3, [r3, #4]
 800d306:	f043 0301 	orr.w	r3, r3, #1
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	711a      	strb	r2, [r3, #4]
 800d310:	e007      	b.n	800d322 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d102      	bne.n	800d31e <create_chain+0x122>
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	e000      	b.n	800d320 <create_chain+0x124>
 800d31e:	2301      	movs	r3, #1
 800d320:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d322:	69fb      	ldr	r3, [r7, #28]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3720      	adds	r7, #32
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d340:	3304      	adds	r3, #4
 800d342:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	0a5b      	lsrs	r3, r3, #9
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	8952      	ldrh	r2, [r2, #10]
 800d34c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d350:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	1d1a      	adds	r2, r3, #4
 800d356:	613a      	str	r2, [r7, #16]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <clmt_clust+0x3a>
 800d362:	2300      	movs	r3, #0
 800d364:	e010      	b.n	800d388 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d307      	bcc.n	800d37e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	3304      	adds	r3, #4
 800d37a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d37c:	e7e9      	b.n	800d352 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d37e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	4413      	add	r3, r2
}
 800d388:	4618      	mov	r0, r3
 800d38a:	371c      	adds	r7, #28
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3aa:	d204      	bcs.n	800d3b6 <dir_sdi+0x22>
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	f003 031f 	and.w	r3, r3, #31
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <dir_sdi+0x26>
		return FR_INT_ERR;
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	e063      	b.n	800d482 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	683a      	ldr	r2, [r7, #0]
 800d3be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <dir_sdi+0x46>
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d902      	bls.n	800d3da <dir_sdi+0x46>
		clst = fs->dirbase;
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10c      	bne.n	800d3fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	095b      	lsrs	r3, r3, #5
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	8912      	ldrh	r2, [r2, #8]
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d301      	bcc.n	800d3f0 <dir_sdi+0x5c>
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	e048      	b.n	800d482 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	61da      	str	r2, [r3, #28]
 800d3f8:	e029      	b.n	800d44e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	895b      	ldrh	r3, [r3, #10]
 800d3fe:	025b      	lsls	r3, r3, #9
 800d400:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d402:	e019      	b.n	800d438 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6979      	ldr	r1, [r7, #20]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fd00 	bl	800ce0e <get_fat>
 800d40e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d416:	d101      	bne.n	800d41c <dir_sdi+0x88>
 800d418:	2301      	movs	r3, #1
 800d41a:	e032      	b.n	800d482 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d904      	bls.n	800d42c <dir_sdi+0x98>
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	695b      	ldr	r3, [r3, #20]
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d301      	bcc.n	800d430 <dir_sdi+0x9c>
 800d42c:	2302      	movs	r3, #2
 800d42e:	e028      	b.n	800d482 <dir_sdi+0xee>
			ofs -= csz;
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d2e1      	bcs.n	800d404 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d440:	6979      	ldr	r1, [r7, #20]
 800d442:	6938      	ldr	r0, [r7, #16]
 800d444:	f7ff fcc4 	bl	800cdd0 <clust2sect>
 800d448:	4602      	mov	r2, r0
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	69db      	ldr	r3, [r3, #28]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <dir_sdi+0xcc>
 800d45c:	2302      	movs	r3, #2
 800d45e:	e010      	b.n	800d482 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	69da      	ldr	r2, [r3, #28]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	0a5b      	lsrs	r3, r3, #9
 800d468:	441a      	add	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47a:	441a      	add	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d480:	2300      	movs	r3, #0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b086      	sub	sp, #24
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	3320      	adds	r3, #32
 800d4a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <dir_next+0x28>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4b0:	d301      	bcc.n	800d4b6 <dir_next+0x2c>
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	e0aa      	b.n	800d60c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 8098 	bne.w	800d5f2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10b      	bne.n	800d4ec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	095b      	lsrs	r3, r3, #5
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	8912      	ldrh	r2, [r2, #8]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	f0c0 8088 	bcc.w	800d5f2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	61da      	str	r2, [r3, #28]
 800d4e8:	2304      	movs	r3, #4
 800d4ea:	e08f      	b.n	800d60c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	0a5b      	lsrs	r3, r3, #9
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	8952      	ldrh	r2, [r2, #10]
 800d4f4:	3a01      	subs	r2, #1
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d17a      	bne.n	800d5f2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	4619      	mov	r1, r3
 800d504:	4610      	mov	r0, r2
 800d506:	f7ff fc82 	bl	800ce0e <get_fat>
 800d50a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d801      	bhi.n	800d516 <dir_next+0x8c>
 800d512:	2302      	movs	r3, #2
 800d514:	e07a      	b.n	800d60c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51c:	d101      	bne.n	800d522 <dir_next+0x98>
 800d51e:	2301      	movs	r3, #1
 800d520:	e074      	b.n	800d60c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d358      	bcc.n	800d5de <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d104      	bne.n	800d53c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	61da      	str	r2, [r3, #28]
 800d538:	2304      	movs	r3, #4
 800d53a:	e067      	b.n	800d60c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	4619      	mov	r1, r3
 800d544:	4610      	mov	r0, r2
 800d546:	f7ff fe59 	bl	800d1fc <create_chain>
 800d54a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <dir_next+0xcc>
 800d552:	2307      	movs	r3, #7
 800d554:	e05a      	b.n	800d60c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d101      	bne.n	800d560 <dir_next+0xd6>
 800d55c:	2302      	movs	r3, #2
 800d55e:	e055      	b.n	800d60c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d566:	d101      	bne.n	800d56c <dir_next+0xe2>
 800d568:	2301      	movs	r3, #1
 800d56a:	e04f      	b.n	800d60c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7ff fb4f 	bl	800cc10 <sync_window>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <dir_next+0xf2>
 800d578:	2301      	movs	r3, #1
 800d57a:	e047      	b.n	800d60c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	3330      	adds	r3, #48	; 0x30
 800d580:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d584:	2100      	movs	r1, #0
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff f979 	bl	800c87e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d58c:	2300      	movs	r3, #0
 800d58e:	613b      	str	r3, [r7, #16]
 800d590:	6979      	ldr	r1, [r7, #20]
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7ff fc1c 	bl	800cdd0 <clust2sect>
 800d598:	4602      	mov	r2, r0
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	62da      	str	r2, [r3, #44]	; 0x2c
 800d59e:	e012      	b.n	800d5c6 <dir_next+0x13c>
						fs->wflag = 1;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff fb32 	bl	800cc10 <sync_window>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <dir_next+0x12c>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e02a      	b.n	800d60c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	613b      	str	r3, [r7, #16]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	895b      	ldrh	r3, [r3, #10]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d3e6      	bcc.n	800d5a0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	1ad2      	subs	r2, r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	697a      	ldr	r2, [r7, #20]
 800d5e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d5e4:	6979      	ldr	r1, [r7, #20]
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f7ff fbf2 	bl	800cdd0 <clust2sect>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d604:	441a      	add	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d624:	2100      	movs	r1, #0
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7ff feb4 	bl	800d394 <dir_sdi>
 800d62c:	4603      	mov	r3, r0
 800d62e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d630:	7dfb      	ldrb	r3, [r7, #23]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d12b      	bne.n	800d68e <dir_alloc+0x7a>
		n = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	4619      	mov	r1, r3
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fb29 	bl	800cc98 <move_window>
 800d646:	4603      	mov	r3, r0
 800d648:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d11d      	bne.n	800d68c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2be5      	cmp	r3, #229	; 0xe5
 800d658:	d004      	beq.n	800d664 <dir_alloc+0x50>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d107      	bne.n	800d674 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	3301      	adds	r3, #1
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	693a      	ldr	r2, [r7, #16]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d102      	bne.n	800d678 <dir_alloc+0x64>
 800d672:	e00c      	b.n	800d68e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d674:	2300      	movs	r3, #0
 800d676:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d678:	2101      	movs	r1, #1
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff ff05 	bl	800d48a <dir_next>
 800d680:	4603      	mov	r3, r0
 800d682:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d684:	7dfb      	ldrb	r3, [r7, #23]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0d7      	beq.n	800d63a <dir_alloc+0x26>
 800d68a:	e000      	b.n	800d68e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d68c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d68e:	7dfb      	ldrb	r3, [r7, #23]
 800d690:	2b04      	cmp	r3, #4
 800d692:	d101      	bne.n	800d698 <dir_alloc+0x84>
 800d694:	2307      	movs	r3, #7
 800d696:	75fb      	strb	r3, [r7, #23]
	return res;
 800d698:	7dfb      	ldrb	r3, [r7, #23]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	331a      	adds	r3, #26
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff f841 	bl	800c738 <ld_word>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d109      	bne.n	800d6d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	3314      	adds	r3, #20
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff f836 	bl	800c738 <ld_word>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	041b      	lsls	r3, r3, #16
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	331a      	adds	r3, #26
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	b292      	uxth	r2, r2
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff f859 	bl	800c7ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b03      	cmp	r3, #3
 800d702:	d109      	bne.n	800d718 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f103 0214 	add.w	r2, r3, #20
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	0c1b      	lsrs	r3, r3, #16
 800d70e:	b29b      	uxth	r3, r3
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f7ff f84b 	bl	800c7ae <st_word>
	}
}
 800d718:	bf00      	nop
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d72e:	2100      	movs	r1, #0
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7ff fe2f 	bl	800d394 <dir_sdi>
 800d736:	4603      	mov	r3, r0
 800d738:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <dir_find+0x24>
 800d740:	7dfb      	ldrb	r3, [r7, #23]
 800d742:	e03e      	b.n	800d7c2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	4619      	mov	r1, r3
 800d74a:	6938      	ldr	r0, [r7, #16]
 800d74c:	f7ff faa4 	bl	800cc98 <move_window>
 800d750:	4603      	mov	r3, r0
 800d752:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d754:	7dfb      	ldrb	r3, [r7, #23]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d12f      	bne.n	800d7ba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d762:	7bfb      	ldrb	r3, [r7, #15]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d102      	bne.n	800d76e <dir_find+0x4e>
 800d768:	2304      	movs	r3, #4
 800d76a:	75fb      	strb	r3, [r7, #23]
 800d76c:	e028      	b.n	800d7c0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	330b      	adds	r3, #11
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a1b      	ldr	r3, [r3, #32]
 800d784:	330b      	adds	r3, #11
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	f003 0308 	and.w	r3, r3, #8
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10a      	bne.n	800d7a6 <dir_find+0x86>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a18      	ldr	r0, [r3, #32]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3324      	adds	r3, #36	; 0x24
 800d798:	220b      	movs	r2, #11
 800d79a:	4619      	mov	r1, r3
 800d79c:	f7ff f88a 	bl	800c8b4 <mem_cmp>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00b      	beq.n	800d7be <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff fe6e 	bl	800d48a <dir_next>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d7b2:	7dfb      	ldrb	r3, [r7, #23]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0c5      	beq.n	800d744 <dir_find+0x24>
 800d7b8:	e002      	b.n	800d7c0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d7ba:	bf00      	nop
 800d7bc:	e000      	b.n	800d7c0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d7be:	bf00      	nop

	return res;
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b084      	sub	sp, #16
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d7d8:	2101      	movs	r1, #1
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff ff1a 	bl	800d614 <dir_alloc>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d11c      	bne.n	800d824 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	68b8      	ldr	r0, [r7, #8]
 800d7f2:	f7ff fa51 	bl	800cc98 <move_window>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d111      	bne.n	800d824 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	2220      	movs	r2, #32
 800d806:	2100      	movs	r1, #0
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff f838 	bl	800c87e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a18      	ldr	r0, [r3, #32]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	3324      	adds	r3, #36	; 0x24
 800d816:	220b      	movs	r2, #11
 800d818:	4619      	mov	r1, r3
 800d81a:	f7ff f80f 	bl	800c83c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2201      	movs	r2, #1
 800d822:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d824:	7bfb      	ldrb	r3, [r7, #15]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	3324      	adds	r3, #36	; 0x24
 800d844:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d846:	220b      	movs	r2, #11
 800d848:	2120      	movs	r1, #32
 800d84a:	68b8      	ldr	r0, [r7, #8]
 800d84c:	f7ff f817 	bl	800c87e <mem_set>
	si = i = 0; ni = 8;
 800d850:	2300      	movs	r3, #0
 800d852:	613b      	str	r3, [r7, #16]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	61fb      	str	r3, [r7, #28]
 800d858:	2308      	movs	r3, #8
 800d85a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	1c5a      	adds	r2, r3, #1
 800d860:	61fa      	str	r2, [r7, #28]
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	4413      	add	r3, r2
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d86a:	7efb      	ldrb	r3, [r7, #27]
 800d86c:	2b20      	cmp	r3, #32
 800d86e:	d94e      	bls.n	800d90e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d870:	7efb      	ldrb	r3, [r7, #27]
 800d872:	2b2f      	cmp	r3, #47	; 0x2f
 800d874:	d006      	beq.n	800d884 <create_name+0x54>
 800d876:	7efb      	ldrb	r3, [r7, #27]
 800d878:	2b5c      	cmp	r3, #92	; 0x5c
 800d87a:	d110      	bne.n	800d89e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d87c:	e002      	b.n	800d884 <create_name+0x54>
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	3301      	adds	r3, #1
 800d882:	61fb      	str	r3, [r7, #28]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	4413      	add	r3, r2
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b2f      	cmp	r3, #47	; 0x2f
 800d88e:	d0f6      	beq.n	800d87e <create_name+0x4e>
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	4413      	add	r3, r2
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b5c      	cmp	r3, #92	; 0x5c
 800d89a:	d0f0      	beq.n	800d87e <create_name+0x4e>
			break;
 800d89c:	e038      	b.n	800d910 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d89e:	7efb      	ldrb	r3, [r7, #27]
 800d8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800d8a2:	d003      	beq.n	800d8ac <create_name+0x7c>
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d30c      	bcc.n	800d8c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2b0b      	cmp	r3, #11
 800d8b0:	d002      	beq.n	800d8b8 <create_name+0x88>
 800d8b2:	7efb      	ldrb	r3, [r7, #27]
 800d8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d8b6:	d001      	beq.n	800d8bc <create_name+0x8c>
 800d8b8:	2306      	movs	r3, #6
 800d8ba:	e044      	b.n	800d946 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d8bc:	2308      	movs	r3, #8
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	230b      	movs	r3, #11
 800d8c2:	617b      	str	r3, [r7, #20]
			continue;
 800d8c4:	e022      	b.n	800d90c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d8c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	da04      	bge.n	800d8d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d8ce:	7efb      	ldrb	r3, [r7, #27]
 800d8d0:	3b80      	subs	r3, #128	; 0x80
 800d8d2:	4a1f      	ldr	r2, [pc, #124]	; (800d950 <create_name+0x120>)
 800d8d4:	5cd3      	ldrb	r3, [r2, r3]
 800d8d6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d8d8:	7efb      	ldrb	r3, [r7, #27]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	481d      	ldr	r0, [pc, #116]	; (800d954 <create_name+0x124>)
 800d8de:	f7ff f810 	bl	800c902 <chk_chr>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <create_name+0xbc>
 800d8e8:	2306      	movs	r3, #6
 800d8ea:	e02c      	b.n	800d946 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d8ec:	7efb      	ldrb	r3, [r7, #27]
 800d8ee:	2b60      	cmp	r3, #96	; 0x60
 800d8f0:	d905      	bls.n	800d8fe <create_name+0xce>
 800d8f2:	7efb      	ldrb	r3, [r7, #27]
 800d8f4:	2b7a      	cmp	r3, #122	; 0x7a
 800d8f6:	d802      	bhi.n	800d8fe <create_name+0xce>
 800d8f8:	7efb      	ldrb	r3, [r7, #27]
 800d8fa:	3b20      	subs	r3, #32
 800d8fc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	613a      	str	r2, [r7, #16]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	4413      	add	r3, r2
 800d908:	7efa      	ldrb	r2, [r7, #27]
 800d90a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d90c:	e7a6      	b.n	800d85c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d90e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	441a      	add	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <create_name+0xf4>
 800d920:	2306      	movs	r3, #6
 800d922:	e010      	b.n	800d946 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2be5      	cmp	r3, #229	; 0xe5
 800d92a:	d102      	bne.n	800d932 <create_name+0x102>
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2205      	movs	r2, #5
 800d930:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d932:	7efb      	ldrb	r3, [r7, #27]
 800d934:	2b20      	cmp	r3, #32
 800d936:	d801      	bhi.n	800d93c <create_name+0x10c>
 800d938:	2204      	movs	r2, #4
 800d93a:	e000      	b.n	800d93e <create_name+0x10e>
 800d93c:	2200      	movs	r2, #0
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	330b      	adds	r3, #11
 800d942:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d944:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d946:	4618      	mov	r0, r3
 800d948:	3720      	adds	r7, #32
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	080107bc 	.word	0x080107bc
 800d954:	08010718 	.word	0x08010718

0800d958 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d96c:	e002      	b.n	800d974 <follow_path+0x1c>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	3301      	adds	r3, #1
 800d972:	603b      	str	r3, [r7, #0]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b2f      	cmp	r3, #47	; 0x2f
 800d97a:	d0f8      	beq.n	800d96e <follow_path+0x16>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b5c      	cmp	r3, #92	; 0x5c
 800d982:	d0f4      	beq.n	800d96e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2200      	movs	r2, #0
 800d988:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b1f      	cmp	r3, #31
 800d990:	d80a      	bhi.n	800d9a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2280      	movs	r2, #128	; 0x80
 800d996:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d99a:	2100      	movs	r1, #0
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fcf9 	bl	800d394 <dir_sdi>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	75fb      	strb	r3, [r7, #23]
 800d9a6:	e043      	b.n	800da30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9a8:	463b      	mov	r3, r7
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f7ff ff3f 	bl	800d830 <create_name>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9b6:	7dfb      	ldrb	r3, [r7, #23]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d134      	bne.n	800da26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff feaf 	bl	800d720 <dir_find>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d9cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00a      	beq.n	800d9ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d127      	bne.n	800da2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d9da:	7afb      	ldrb	r3, [r7, #11]
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d122      	bne.n	800da2a <follow_path+0xd2>
 800d9e4:	2305      	movs	r3, #5
 800d9e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d9e8:	e01f      	b.n	800da2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	f003 0304 	and.w	r3, r3, #4
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d11c      	bne.n	800da2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	799b      	ldrb	r3, [r3, #6]
 800d9f8:	f003 0310 	and.w	r3, r3, #16
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800da00:	2305      	movs	r3, #5
 800da02:	75fb      	strb	r3, [r7, #23]
 800da04:	e014      	b.n	800da30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da14:	4413      	add	r3, r2
 800da16:	4619      	mov	r1, r3
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff fe42 	bl	800d6a2 <ld_clust>
 800da1e:	4602      	mov	r2, r0
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da24:	e7c0      	b.n	800d9a8 <follow_path+0x50>
			if (res != FR_OK) break;
 800da26:	bf00      	nop
 800da28:	e002      	b.n	800da30 <follow_path+0xd8>
				break;
 800da2a:	bf00      	nop
 800da2c:	e000      	b.n	800da30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da2e:	bf00      	nop
			}
		}
	}

	return res;
 800da30:	7dfb      	ldrb	r3, [r7, #23]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b087      	sub	sp, #28
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da42:	f04f 33ff 	mov.w	r3, #4294967295
 800da46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d031      	beq.n	800dab4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	617b      	str	r3, [r7, #20]
 800da56:	e002      	b.n	800da5e <get_ldnumber+0x24>
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	3301      	adds	r3, #1
 800da5c:	617b      	str	r3, [r7, #20]
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b20      	cmp	r3, #32
 800da64:	d903      	bls.n	800da6e <get_ldnumber+0x34>
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	2b3a      	cmp	r3, #58	; 0x3a
 800da6c:	d1f4      	bne.n	800da58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b3a      	cmp	r3, #58	; 0x3a
 800da74:	d11c      	bne.n	800dab0 <get_ldnumber+0x76>
			tp = *path;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	60fa      	str	r2, [r7, #12]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	3b30      	subs	r3, #48	; 0x30
 800da86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b09      	cmp	r3, #9
 800da8c:	d80e      	bhi.n	800daac <get_ldnumber+0x72>
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	429a      	cmp	r2, r3
 800da94:	d10a      	bne.n	800daac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d107      	bne.n	800daac <get_ldnumber+0x72>
					vol = (int)i;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	3301      	adds	r3, #1
 800daa4:	617b      	str	r3, [r7, #20]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	e002      	b.n	800dab6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dab0:	2300      	movs	r3, #0
 800dab2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dab4:	693b      	ldr	r3, [r7, #16]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	371c      	adds	r7, #28
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
	...

0800dac4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	70da      	strb	r2, [r3, #3]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff f8da 	bl	800cc98 <move_window>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <check_fs+0x2a>
 800daea:	2304      	movs	r3, #4
 800daec:	e038      	b.n	800db60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	3330      	adds	r3, #48	; 0x30
 800daf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe fe1e 	bl	800c738 <ld_word>
 800dafc:	4603      	mov	r3, r0
 800dafe:	461a      	mov	r2, r3
 800db00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800db04:	429a      	cmp	r2, r3
 800db06:	d001      	beq.n	800db0c <check_fs+0x48>
 800db08:	2303      	movs	r3, #3
 800db0a:	e029      	b.n	800db60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db12:	2be9      	cmp	r3, #233	; 0xe9
 800db14:	d009      	beq.n	800db2a <check_fs+0x66>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db1c:	2beb      	cmp	r3, #235	; 0xeb
 800db1e:	d11e      	bne.n	800db5e <check_fs+0x9a>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800db26:	2b90      	cmp	r3, #144	; 0x90
 800db28:	d119      	bne.n	800db5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	3330      	adds	r3, #48	; 0x30
 800db2e:	3336      	adds	r3, #54	; 0x36
 800db30:	4618      	mov	r0, r3
 800db32:	f7fe fe19 	bl	800c768 <ld_dword>
 800db36:	4603      	mov	r3, r0
 800db38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800db3c:	4a0a      	ldr	r2, [pc, #40]	; (800db68 <check_fs+0xa4>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d101      	bne.n	800db46 <check_fs+0x82>
 800db42:	2300      	movs	r3, #0
 800db44:	e00c      	b.n	800db60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	3330      	adds	r3, #48	; 0x30
 800db4a:	3352      	adds	r3, #82	; 0x52
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fe0b 	bl	800c768 <ld_dword>
 800db52:	4603      	mov	r3, r0
 800db54:	4a05      	ldr	r2, [pc, #20]	; (800db6c <check_fs+0xa8>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d101      	bne.n	800db5e <check_fs+0x9a>
 800db5a:	2300      	movs	r3, #0
 800db5c:	e000      	b.n	800db60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db5e:	2302      	movs	r3, #2
}
 800db60:	4618      	mov	r0, r3
 800db62:	3708      	adds	r7, #8
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	00544146 	.word	0x00544146
 800db6c:	33544146 	.word	0x33544146

0800db70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b096      	sub	sp, #88	; 0x58
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	4613      	mov	r3, r2
 800db7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f7ff ff58 	bl	800da3a <get_ldnumber>
 800db8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	da01      	bge.n	800db96 <find_volume+0x26>
 800db92:	230b      	movs	r3, #11
 800db94:	e22d      	b.n	800dff2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db96:	4aa1      	ldr	r2, [pc, #644]	; (800de1c <find_volume+0x2ac>)
 800db98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <find_volume+0x3a>
 800dba6:	230c      	movs	r3, #12
 800dba8:	e223      	b.n	800dff2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	f023 0301 	bic.w	r3, r3, #1
 800dbb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d01a      	beq.n	800dbf6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fd19 	bl	800c5fc <disk_status>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dbd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbd4:	f003 0301 	and.w	r3, r3, #1
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10c      	bne.n	800dbf6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dbdc:	79fb      	ldrb	r3, [r7, #7]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d007      	beq.n	800dbf2 <find_volume+0x82>
 800dbe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dbe6:	f003 0304 	and.w	r3, r3, #4
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dbee:	230a      	movs	r3, #10
 800dbf0:	e1ff      	b.n	800dff2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e1fd      	b.n	800dff2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	785b      	ldrb	r3, [r3, #1]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fd11 	bl	800c630 <disk_initialize>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dc14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dc20:	2303      	movs	r3, #3
 800dc22:	e1e6      	b.n	800dff2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d007      	beq.n	800dc3a <find_volume+0xca>
 800dc2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dc2e:	f003 0304 	and.w	r3, r3, #4
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dc36:	230a      	movs	r3, #10
 800dc38:	e1db      	b.n	800dff2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc42:	f7ff ff3f 	bl	800dac4 <check_fs>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d149      	bne.n	800dce8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc54:	2300      	movs	r3, #0
 800dc56:	643b      	str	r3, [r7, #64]	; 0x40
 800dc58:	e01e      	b.n	800dc98 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc62:	011b      	lsls	r3, r3, #4
 800dc64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dc68:	4413      	add	r3, r2
 800dc6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	3304      	adds	r3, #4
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <find_volume+0x114>
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	3308      	adds	r3, #8
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fd74 	bl	800c768 <ld_dword>
 800dc80:	4602      	mov	r2, r0
 800dc82:	e000      	b.n	800dc86 <find_volume+0x116>
 800dc84:	2200      	movs	r2, #0
 800dc86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	3358      	adds	r3, #88	; 0x58
 800dc8c:	443b      	add	r3, r7
 800dc8e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc94:	3301      	adds	r3, #1
 800dc96:	643b      	str	r3, [r7, #64]	; 0x40
 800dc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d9dd      	bls.n	800dc5a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dc9e:	2300      	movs	r3, #0
 800dca0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <find_volume+0x13e>
 800dca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	3358      	adds	r3, #88	; 0x58
 800dcb4:	443b      	add	r3, r7
 800dcb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dcba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dcbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d005      	beq.n	800dcce <find_volume+0x15e>
 800dcc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dcc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcc6:	f7ff fefd 	bl	800dac4 <check_fs>
 800dcca:	4603      	mov	r3, r0
 800dccc:	e000      	b.n	800dcd0 <find_volume+0x160>
 800dcce:	2303      	movs	r3, #3
 800dcd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dcd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d905      	bls.n	800dce8 <find_volume+0x178>
 800dcdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcde:	3301      	adds	r3, #1
 800dce0:	643b      	str	r3, [r7, #64]	; 0x40
 800dce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d9e2      	bls.n	800dcae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d101      	bne.n	800dcf4 <find_volume+0x184>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e17e      	b.n	800dff2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dcf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d901      	bls.n	800dd00 <find_volume+0x190>
 800dcfc:	230d      	movs	r3, #13
 800dcfe:	e178      	b.n	800dff2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd02:	3330      	adds	r3, #48	; 0x30
 800dd04:	330b      	adds	r3, #11
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe fd16 	bl	800c738 <ld_word>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd12:	d001      	beq.n	800dd18 <find_volume+0x1a8>
 800dd14:	230d      	movs	r3, #13
 800dd16:	e16c      	b.n	800dff2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	3330      	adds	r3, #48	; 0x30
 800dd1c:	3316      	adds	r3, #22
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fd0a 	bl	800c738 <ld_word>
 800dd24:	4603      	mov	r3, r0
 800dd26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <find_volume+0x1cc>
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	3330      	adds	r3, #48	; 0x30
 800dd32:	3324      	adds	r3, #36	; 0x24
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fe fd17 	bl	800c768 <ld_dword>
 800dd3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd40:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4e:	789b      	ldrb	r3, [r3, #2]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d005      	beq.n	800dd60 <find_volume+0x1f0>
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	789b      	ldrb	r3, [r3, #2]
 800dd58:	2b02      	cmp	r3, #2
 800dd5a:	d001      	beq.n	800dd60 <find_volume+0x1f0>
 800dd5c:	230d      	movs	r3, #13
 800dd5e:	e148      	b.n	800dff2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd62:	789b      	ldrb	r3, [r3, #2]
 800dd64:	461a      	mov	r2, r3
 800dd66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd68:	fb02 f303 	mul.w	r3, r2, r3
 800dd6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7c:	895b      	ldrh	r3, [r3, #10]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d008      	beq.n	800dd94 <find_volume+0x224>
 800dd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd84:	895b      	ldrh	r3, [r3, #10]
 800dd86:	461a      	mov	r2, r3
 800dd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8a:	895b      	ldrh	r3, [r3, #10]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	4013      	ands	r3, r2
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d001      	beq.n	800dd98 <find_volume+0x228>
 800dd94:	230d      	movs	r3, #13
 800dd96:	e12c      	b.n	800dff2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9a:	3330      	adds	r3, #48	; 0x30
 800dd9c:	3311      	adds	r3, #17
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fe fcca 	bl	800c738 <ld_word>
 800dda4:	4603      	mov	r3, r0
 800dda6:	461a      	mov	r2, r3
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ddac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddae:	891b      	ldrh	r3, [r3, #8]
 800ddb0:	f003 030f 	and.w	r3, r3, #15
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <find_volume+0x24e>
 800ddba:	230d      	movs	r3, #13
 800ddbc:	e119      	b.n	800dff2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc0:	3330      	adds	r3, #48	; 0x30
 800ddc2:	3313      	adds	r3, #19
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fcb7 	bl	800c738 <ld_word>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ddce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d106      	bne.n	800dde2 <find_volume+0x272>
 800ddd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd6:	3330      	adds	r3, #48	; 0x30
 800ddd8:	3320      	adds	r3, #32
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fcc4 	bl	800c768 <ld_dword>
 800dde0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	3330      	adds	r3, #48	; 0x30
 800dde6:	330e      	adds	r3, #14
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe fca5 	bl	800c738 <ld_word>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ddf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d101      	bne.n	800ddfc <find_volume+0x28c>
 800ddf8:	230d      	movs	r3, #13
 800ddfa:	e0fa      	b.n	800dff2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ddfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ddfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de00:	4413      	add	r3, r2
 800de02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de04:	8912      	ldrh	r2, [r2, #8]
 800de06:	0912      	lsrs	r2, r2, #4
 800de08:	b292      	uxth	r2, r2
 800de0a:	4413      	add	r3, r2
 800de0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800de0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de12:	429a      	cmp	r2, r3
 800de14:	d204      	bcs.n	800de20 <find_volume+0x2b0>
 800de16:	230d      	movs	r3, #13
 800de18:	e0eb      	b.n	800dff2 <find_volume+0x482>
 800de1a:	bf00      	nop
 800de1c:	2000082c 	.word	0x2000082c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800de20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de28:	8952      	ldrh	r2, [r2, #10]
 800de2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <find_volume+0x2ca>
 800de36:	230d      	movs	r3, #13
 800de38:	e0db      	b.n	800dff2 <find_volume+0x482>
		fmt = FS_FAT32;
 800de3a:	2303      	movs	r3, #3
 800de3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800de46:	4293      	cmp	r3, r2
 800de48:	d802      	bhi.n	800de50 <find_volume+0x2e0>
 800de4a:	2302      	movs	r3, #2
 800de4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de52:	f640 72f5 	movw	r2, #4085	; 0xff5
 800de56:	4293      	cmp	r3, r2
 800de58:	d802      	bhi.n	800de60 <find_volume+0x2f0>
 800de5a:	2301      	movs	r3, #1
 800de5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	1c9a      	adds	r2, r3, #2
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800de68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de6c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800de6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de72:	441a      	add	r2, r3
 800de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de76:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800de78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7c:	441a      	add	r2, r3
 800de7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de80:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800de82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de86:	2b03      	cmp	r3, #3
 800de88:	d11e      	bne.n	800dec8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	3330      	adds	r3, #48	; 0x30
 800de8e:	332a      	adds	r3, #42	; 0x2a
 800de90:	4618      	mov	r0, r3
 800de92:	f7fe fc51 	bl	800c738 <ld_word>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <find_volume+0x330>
 800de9c:	230d      	movs	r3, #13
 800de9e:	e0a8      	b.n	800dff2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	891b      	ldrh	r3, [r3, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <find_volume+0x33c>
 800dea8:	230d      	movs	r3, #13
 800deaa:	e0a2      	b.n	800dff2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	3330      	adds	r3, #48	; 0x30
 800deb0:	332c      	adds	r3, #44	; 0x2c
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fc58 	bl	800c768 <ld_dword>
 800deb8:	4602      	mov	r2, r0
 800deba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800debe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	647b      	str	r3, [r7, #68]	; 0x44
 800dec6:	e01f      	b.n	800df08 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deca:	891b      	ldrh	r3, [r3, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d101      	bne.n	800ded4 <find_volume+0x364>
 800ded0:	230d      	movs	r3, #13
 800ded2:	e08e      	b.n	800dff2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	6a1a      	ldr	r2, [r3, #32]
 800ded8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deda:	441a      	add	r2, r3
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d103      	bne.n	800def0 <find_volume+0x380>
 800dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deea:	695b      	ldr	r3, [r3, #20]
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	e00a      	b.n	800df06 <find_volume+0x396>
 800def0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def2:	695a      	ldr	r2, [r3, #20]
 800def4:	4613      	mov	r3, r2
 800def6:	005b      	lsls	r3, r3, #1
 800def8:	4413      	add	r3, r2
 800defa:	085a      	lsrs	r2, r3, #1
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800df06:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800df08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0a:	699a      	ldr	r2, [r3, #24]
 800df0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800df12:	0a5b      	lsrs	r3, r3, #9
 800df14:	429a      	cmp	r2, r3
 800df16:	d201      	bcs.n	800df1c <find_volume+0x3ac>
 800df18:	230d      	movs	r3, #13
 800df1a:	e06a      	b.n	800dff2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	f04f 32ff 	mov.w	r2, #4294967295
 800df22:	611a      	str	r2, [r3, #16]
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	691a      	ldr	r2, [r3, #16]
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	2280      	movs	r2, #128	; 0x80
 800df30:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800df32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df36:	2b03      	cmp	r3, #3
 800df38:	d149      	bne.n	800dfce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3c:	3330      	adds	r3, #48	; 0x30
 800df3e:	3330      	adds	r3, #48	; 0x30
 800df40:	4618      	mov	r0, r3
 800df42:	f7fe fbf9 	bl	800c738 <ld_word>
 800df46:	4603      	mov	r3, r0
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d140      	bne.n	800dfce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4e:	3301      	adds	r3, #1
 800df50:	4619      	mov	r1, r3
 800df52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df54:	f7fe fea0 	bl	800cc98 <move_window>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d137      	bne.n	800dfce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800df5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df60:	2200      	movs	r2, #0
 800df62:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	3330      	adds	r3, #48	; 0x30
 800df68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fe fbe3 	bl	800c738 <ld_word>
 800df72:	4603      	mov	r3, r0
 800df74:	461a      	mov	r2, r3
 800df76:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d127      	bne.n	800dfce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	3330      	adds	r3, #48	; 0x30
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe fbf0 	bl	800c768 <ld_dword>
 800df88:	4603      	mov	r3, r0
 800df8a:	4a1c      	ldr	r2, [pc, #112]	; (800dffc <find_volume+0x48c>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d11e      	bne.n	800dfce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	3330      	adds	r3, #48	; 0x30
 800df94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fe fbe5 	bl	800c768 <ld_dword>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	4a17      	ldr	r2, [pc, #92]	; (800e000 <find_volume+0x490>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d113      	bne.n	800dfce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa8:	3330      	adds	r3, #48	; 0x30
 800dfaa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe fbda 	bl	800c768 <ld_dword>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbc:	3330      	adds	r3, #48	; 0x30
 800dfbe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fbd0 	bl	800c768 <ld_dword>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfcc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dfd4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dfd6:	4b0b      	ldr	r3, [pc, #44]	; (800e004 <find_volume+0x494>)
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	4b09      	ldr	r3, [pc, #36]	; (800e004 <find_volume+0x494>)
 800dfe0:	801a      	strh	r2, [r3, #0]
 800dfe2:	4b08      	ldr	r3, [pc, #32]	; (800e004 <find_volume+0x494>)
 800dfe4:	881a      	ldrh	r2, [r3, #0]
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dfea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dfec:	f7fe fdec 	bl	800cbc8 <clear_lock>
#endif
	return FR_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3758      	adds	r7, #88	; 0x58
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	41615252 	.word	0x41615252
 800e000:	61417272 	.word	0x61417272
 800e004:	20000830 	.word	0x20000830

0800e008 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e012:	2309      	movs	r3, #9
 800e014:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01c      	beq.n	800e056 <validate+0x4e>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d018      	beq.n	800e056 <validate+0x4e>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d013      	beq.n	800e056 <validate+0x4e>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	889a      	ldrh	r2, [r3, #4]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	88db      	ldrh	r3, [r3, #6]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d10c      	bne.n	800e056 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	785b      	ldrb	r3, [r3, #1]
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe fada 	bl	800c5fc <disk_status>
 800e048:	4603      	mov	r3, r0
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <validate+0x4e>
			res = FR_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <validate+0x5a>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	e000      	b.n	800e064 <validate+0x5c>
 800e062:	2300      	movs	r3, #0
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	6013      	str	r3, [r2, #0]
	return res;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	4613      	mov	r3, r2
 800e080:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e086:	f107 0310 	add.w	r3, r7, #16
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff fcd5 	bl	800da3a <get_ldnumber>
 800e090:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	da01      	bge.n	800e09c <f_mount+0x28>
 800e098:	230b      	movs	r3, #11
 800e09a:	e02b      	b.n	800e0f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e09c:	4a17      	ldr	r2, [pc, #92]	; (800e0fc <f_mount+0x88>)
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d005      	beq.n	800e0b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e0ac:	69b8      	ldr	r0, [r7, #24]
 800e0ae:	f7fe fd8b 	bl	800cbc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	490d      	ldr	r1, [pc, #52]	; (800e0fc <f_mount+0x88>)
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <f_mount+0x66>
 800e0d4:	79fb      	ldrb	r3, [r7, #7]
 800e0d6:	2b01      	cmp	r3, #1
 800e0d8:	d001      	beq.n	800e0de <f_mount+0x6a>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e00a      	b.n	800e0f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e0de:	f107 010c 	add.w	r1, r7, #12
 800e0e2:	f107 0308 	add.w	r3, r7, #8
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff fd41 	bl	800db70 <find_volume>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3720      	adds	r7, #32
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	2000082c 	.word	0x2000082c

0800e100 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b098      	sub	sp, #96	; 0x60
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	4613      	mov	r3, r2
 800e10c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <f_open+0x18>
 800e114:	2309      	movs	r3, #9
 800e116:	e1ad      	b.n	800e474 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e118:	79fb      	ldrb	r3, [r7, #7]
 800e11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e11e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e120:	79fa      	ldrb	r2, [r7, #7]
 800e122:	f107 0110 	add.w	r1, r7, #16
 800e126:	f107 0308 	add.w	r3, r7, #8
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fd20 	bl	800db70 <find_volume>
 800e130:	4603      	mov	r3, r0
 800e132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f040 8191 	bne.w	800e462 <f_open+0x362>
		dj.obj.fs = fs;
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	f107 0314 	add.w	r3, r7, #20
 800e14a:	4611      	mov	r1, r2
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff fc03 	bl	800d958 <follow_path>
 800e152:	4603      	mov	r3, r0
 800e154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d11a      	bne.n	800e196 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e160:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e164:	b25b      	sxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	da03      	bge.n	800e172 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e16a:	2306      	movs	r3, #6
 800e16c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e170:	e011      	b.n	800e196 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e172:	79fb      	ldrb	r3, [r7, #7]
 800e174:	f023 0301 	bic.w	r3, r3, #1
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bf14      	ite	ne
 800e17c:	2301      	movne	r3, #1
 800e17e:	2300      	moveq	r3, #0
 800e180:	b2db      	uxtb	r3, r3
 800e182:	461a      	mov	r2, r3
 800e184:	f107 0314 	add.w	r3, r7, #20
 800e188:	4611      	mov	r1, r2
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe fbd4 	bl	800c938 <chk_lock>
 800e190:	4603      	mov	r3, r0
 800e192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e196:	79fb      	ldrb	r3, [r7, #7]
 800e198:	f003 031c 	and.w	r3, r3, #28
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d07f      	beq.n	800e2a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e1a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d017      	beq.n	800e1d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e1a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	d10e      	bne.n	800e1ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e1b0:	f7fe fc1e 	bl	800c9f0 <enq_lock>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d006      	beq.n	800e1c8 <f_open+0xc8>
 800e1ba:	f107 0314 	add.w	r3, r7, #20
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fb03 	bl	800d7ca <dir_register>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	e000      	b.n	800e1ca <f_open+0xca>
 800e1c8:	2312      	movs	r3, #18
 800e1ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e1ce:	79fb      	ldrb	r3, [r7, #7]
 800e1d0:	f043 0308 	orr.w	r3, r3, #8
 800e1d4:	71fb      	strb	r3, [r7, #7]
 800e1d6:	e010      	b.n	800e1fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e1d8:	7ebb      	ldrb	r3, [r7, #26]
 800e1da:	f003 0311 	and.w	r3, r3, #17
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <f_open+0xea>
					res = FR_DENIED;
 800e1e2:	2307      	movs	r3, #7
 800e1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e1e8:	e007      	b.n	800e1fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e1ea:	79fb      	ldrb	r3, [r7, #7]
 800e1ec:	f003 0304 	and.w	r3, r3, #4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <f_open+0xfa>
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d168      	bne.n	800e2d4 <f_open+0x1d4>
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	f003 0308 	and.w	r3, r3, #8
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d063      	beq.n	800e2d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e20c:	f7fb fcd2 	bl	8009bb4 <get_fattime>
 800e210:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e214:	330e      	adds	r3, #14
 800e216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fe fae3 	bl	800c7e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e220:	3316      	adds	r3, #22
 800e222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e224:	4618      	mov	r0, r3
 800e226:	f7fe fadd 	bl	800c7e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22c:	330b      	adds	r3, #11
 800e22e:	2220      	movs	r2, #32
 800e230:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e236:	4611      	mov	r1, r2
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff fa32 	bl	800d6a2 <ld_clust>
 800e23e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e244:	2200      	movs	r2, #0
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff fa4a 	bl	800d6e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24e:	331c      	adds	r3, #28
 800e250:	2100      	movs	r1, #0
 800e252:	4618      	mov	r0, r3
 800e254:	f7fe fac6 	bl	800c7e4 <st_dword>
					fs->wflag = 1;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	2201      	movs	r2, #1
 800e25c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e260:	2b00      	cmp	r3, #0
 800e262:	d037      	beq.n	800e2d4 <f_open+0x1d4>
						dw = fs->winsect;
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e268:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e26a:	f107 0314 	add.w	r3, r7, #20
 800e26e:	2200      	movs	r2, #0
 800e270:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e272:	4618      	mov	r0, r3
 800e274:	f7fe ff5d 	bl	800d132 <remove_chain>
 800e278:	4603      	mov	r3, r0
 800e27a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e27e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e282:	2b00      	cmp	r3, #0
 800e284:	d126      	bne.n	800e2d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fe fd04 	bl	800cc98 <move_window>
 800e290:	4603      	mov	r3, r0
 800e292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e29a:	3a01      	subs	r2, #1
 800e29c:	60da      	str	r2, [r3, #12]
 800e29e:	e019      	b.n	800e2d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e2a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d115      	bne.n	800e2d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e2a8:	7ebb      	ldrb	r3, [r7, #26]
 800e2aa:	f003 0310 	and.w	r3, r3, #16
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d003      	beq.n	800e2ba <f_open+0x1ba>
					res = FR_NO_FILE;
 800e2b2:	2304      	movs	r3, #4
 800e2b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e2b8:	e00c      	b.n	800e2d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	f003 0302 	and.w	r3, r3, #2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d007      	beq.n	800e2d4 <f_open+0x1d4>
 800e2c4:	7ebb      	ldrb	r3, [r7, #26]
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <f_open+0x1d4>
						res = FR_DENIED;
 800e2ce:	2307      	movs	r3, #7
 800e2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e2d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d128      	bne.n	800e32e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	f003 0308 	and.w	r3, r3, #8
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
 800e2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2fc:	79fb      	ldrb	r3, [r7, #7]
 800e2fe:	f023 0301 	bic.w	r3, r3, #1
 800e302:	2b00      	cmp	r3, #0
 800e304:	bf14      	ite	ne
 800e306:	2301      	movne	r3, #1
 800e308:	2300      	moveq	r3, #0
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	461a      	mov	r2, r3
 800e30e:	f107 0314 	add.w	r3, r7, #20
 800e312:	4611      	mov	r1, r2
 800e314:	4618      	mov	r0, r3
 800e316:	f7fe fb8d 	bl	800ca34 <inc_lock>
 800e31a:	4602      	mov	r2, r0
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <f_open+0x22e>
 800e328:	2302      	movs	r3, #2
 800e32a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e32e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e332:	2b00      	cmp	r3, #0
 800e334:	f040 8095 	bne.w	800e462 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e33c:	4611      	mov	r1, r2
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff f9af 	bl	800d6a2 <ld_clust>
 800e344:	4602      	mov	r2, r0
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34c:	331c      	adds	r3, #28
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe fa0a 	bl	800c768 <ld_dword>
 800e354:	4602      	mov	r2, r0
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	88da      	ldrh	r2, [r3, #6]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	79fa      	ldrb	r2, [r7, #7]
 800e372:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2200      	movs	r2, #0
 800e37e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2200      	movs	r2, #0
 800e384:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	3330      	adds	r3, #48	; 0x30
 800e38a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e38e:	2100      	movs	r1, #0
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe fa74 	bl	800c87e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	f003 0320 	and.w	r3, r3, #32
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d060      	beq.n	800e462 <f_open+0x362>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d05c      	beq.n	800e462 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	68da      	ldr	r2, [r3, #12]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	895b      	ldrh	r3, [r3, #10]
 800e3b4:	025b      	lsls	r3, r3, #9
 800e3b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	657b      	str	r3, [r7, #84]	; 0x54
 800e3c4:	e016      	b.n	800e3f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fd1f 	bl	800ce0e <get_fat>
 800e3d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e3d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d802      	bhi.n	800e3de <f_open+0x2de>
 800e3d8:	2302      	movs	r3, #2
 800e3da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e3de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e4:	d102      	bne.n	800e3ec <f_open+0x2ec>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	657b      	str	r3, [r7, #84]	; 0x54
 800e3f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d103      	bne.n	800e404 <f_open+0x304>
 800e3fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e400:	429a      	cmp	r2, r3
 800e402:	d8e0      	bhi.n	800e3c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e408:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e40a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d127      	bne.n	800e462 <f_open+0x362>
 800e412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d022      	beq.n	800e462 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e420:	4618      	mov	r0, r3
 800e422:	f7fe fcd5 	bl	800cdd0 <clust2sect>
 800e426:	6478      	str	r0, [r7, #68]	; 0x44
 800e428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d103      	bne.n	800e436 <f_open+0x336>
						res = FR_INT_ERR;
 800e42e:	2302      	movs	r3, #2
 800e430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e434:	e015      	b.n	800e462 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e438:	0a5a      	lsrs	r2, r3, #9
 800e43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e43c:	441a      	add	r2, r3
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	7858      	ldrb	r0, [r3, #1]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6a1a      	ldr	r2, [r3, #32]
 800e450:	2301      	movs	r3, #1
 800e452:	f7fe f913 	bl	800c67c <disk_read>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <f_open+0x362>
 800e45c:	2301      	movs	r3, #1
 800e45e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e466:	2b00      	cmp	r3, #0
 800e468:	d002      	beq.n	800e470 <f_open+0x370>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2200      	movs	r2, #0
 800e46e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e474:	4618      	mov	r0, r3
 800e476:	3760      	adds	r7, #96	; 0x60
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08e      	sub	sp, #56	; 0x38
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2200      	movs	r2, #0
 800e492:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f107 0214 	add.w	r2, r7, #20
 800e49a:	4611      	mov	r1, r2
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7ff fdb3 	bl	800e008 <validate>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e4a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d107      	bne.n	800e4c0 <f_read+0x44>
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	7d5b      	ldrb	r3, [r3, #21]
 800e4b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e4b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d002      	beq.n	800e4c6 <f_read+0x4a>
 800e4c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4c4:	e115      	b.n	800e6f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ca:	f003 0301 	and.w	r3, r3, #1
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d101      	bne.n	800e4d6 <f_read+0x5a>
 800e4d2:	2307      	movs	r3, #7
 800e4d4:	e10d      	b.n	800e6f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	68da      	ldr	r2, [r3, #12]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	f240 80fe 	bls.w	800e6e8 <f_read+0x26c>
 800e4ec:	6a3b      	ldr	r3, [r7, #32]
 800e4ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e4f0:	e0fa      	b.n	800e6e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f040 80c6 	bne.w	800e68c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	0a5b      	lsrs	r3, r3, #9
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	8952      	ldrh	r2, [r2, #10]
 800e50a:	3a01      	subs	r2, #1
 800e50c:	4013      	ands	r3, r2
 800e50e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d12f      	bne.n	800e576 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d103      	bne.n	800e526 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	633b      	str	r3, [r7, #48]	; 0x30
 800e524:	e013      	b.n	800e54e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d007      	beq.n	800e53e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	4619      	mov	r1, r3
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f7fe fef9 	bl	800d32c <clmt_clust>
 800e53a:	6338      	str	r0, [r7, #48]	; 0x30
 800e53c:	e007      	b.n	800e54e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	4619      	mov	r1, r3
 800e546:	4610      	mov	r0, r2
 800e548:	f7fe fc61 	bl	800ce0e <get_fat>
 800e54c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	2b01      	cmp	r3, #1
 800e552:	d804      	bhi.n	800e55e <f_read+0xe2>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2202      	movs	r2, #2
 800e558:	755a      	strb	r2, [r3, #21]
 800e55a:	2302      	movs	r3, #2
 800e55c:	e0c9      	b.n	800e6f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e564:	d104      	bne.n	800e570 <f_read+0xf4>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	755a      	strb	r2, [r3, #21]
 800e56c:	2301      	movs	r3, #1
 800e56e:	e0c0      	b.n	800e6f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e574:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	69db      	ldr	r3, [r3, #28]
 800e57c:	4619      	mov	r1, r3
 800e57e:	4610      	mov	r0, r2
 800e580:	f7fe fc26 	bl	800cdd0 <clust2sect>
 800e584:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d104      	bne.n	800e596 <f_read+0x11a>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2202      	movs	r2, #2
 800e590:	755a      	strb	r2, [r3, #21]
 800e592:	2302      	movs	r3, #2
 800e594:	e0ad      	b.n	800e6f2 <f_read+0x276>
			sect += csect;
 800e596:	69ba      	ldr	r2, [r7, #24]
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	4413      	add	r3, r2
 800e59c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	0a5b      	lsrs	r3, r3, #9
 800e5a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d039      	beq.n	800e61e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e5aa:	69fa      	ldr	r2, [r7, #28]
 800e5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ae:	4413      	add	r3, r2
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	8952      	ldrh	r2, [r2, #10]
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d905      	bls.n	800e5c4 <f_read+0x148>
					cc = fs->csize - csect;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	895b      	ldrh	r3, [r3, #10]
 800e5bc:	461a      	mov	r2, r3
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	7858      	ldrb	r0, [r3, #1]
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5ce:	f7fe f855 	bl	800c67c <disk_read>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d004      	beq.n	800e5e2 <f_read+0x166>
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	755a      	strb	r2, [r3, #21]
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e087      	b.n	800e6f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	7d1b      	ldrb	r3, [r3, #20]
 800e5e6:	b25b      	sxtb	r3, r3
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	da14      	bge.n	800e616 <f_read+0x19a>
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6a1a      	ldr	r2, [r3, #32]
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d90d      	bls.n	800e616 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6a1a      	ldr	r2, [r3, #32]
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	1ad3      	subs	r3, r2, r3
 800e602:	025b      	lsls	r3, r3, #9
 800e604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e606:	18d0      	adds	r0, r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3330      	adds	r3, #48	; 0x30
 800e60c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e610:	4619      	mov	r1, r3
 800e612:	f7fe f913 	bl	800c83c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	025b      	lsls	r3, r3, #9
 800e61a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e61c:	e050      	b.n	800e6c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	429a      	cmp	r2, r3
 800e626:	d02e      	beq.n	800e686 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	7d1b      	ldrb	r3, [r3, #20]
 800e62c:	b25b      	sxtb	r3, r3
 800e62e:	2b00      	cmp	r3, #0
 800e630:	da18      	bge.n	800e664 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	7858      	ldrb	r0, [r3, #1]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6a1a      	ldr	r2, [r3, #32]
 800e640:	2301      	movs	r3, #1
 800e642:	f7fe f83b 	bl	800c6bc <disk_write>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d004      	beq.n	800e656 <f_read+0x1da>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	755a      	strb	r2, [r3, #21]
 800e652:	2301      	movs	r3, #1
 800e654:	e04d      	b.n	800e6f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	7d1b      	ldrb	r3, [r3, #20]
 800e65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	7858      	ldrb	r0, [r3, #1]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e66e:	2301      	movs	r3, #1
 800e670:	69ba      	ldr	r2, [r7, #24]
 800e672:	f7fe f803 	bl	800c67c <disk_read>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d004      	beq.n	800e686 <f_read+0x20a>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2201      	movs	r2, #1
 800e680:	755a      	strb	r2, [r3, #21]
 800e682:	2301      	movs	r3, #1
 800e684:	e035      	b.n	800e6f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	69ba      	ldr	r2, [r7, #24]
 800e68a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e694:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e698:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e69a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d901      	bls.n	800e6a6 <f_read+0x22a>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	699b      	ldr	r3, [r3, #24]
 800e6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6b4:	4413      	add	r3, r2
 800e6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6bc:	f7fe f8be 	bl	800c83c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c4:	4413      	add	r3, r2
 800e6c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	699a      	ldr	r2, [r3, #24]
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	441a      	add	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	619a      	str	r2, [r3, #24]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	441a      	add	r2, r3
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f47f af01 	bne.w	800e4f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3738      	adds	r7, #56	; 0x38
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b08c      	sub	sp, #48	; 0x30
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	607a      	str	r2, [r7, #4]
 800e706:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f107 0210 	add.w	r2, r7, #16
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff fc74 	bl	800e008 <validate>
 800e720:	4603      	mov	r3, r0
 800e722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d107      	bne.n	800e73e <f_write+0x44>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	7d5b      	ldrb	r3, [r3, #21]
 800e732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <f_write+0x4a>
 800e73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e742:	e14b      	b.n	800e9dc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	7d1b      	ldrb	r3, [r3, #20]
 800e748:	f003 0302 	and.w	r3, r3, #2
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <f_write+0x5a>
 800e750:	2307      	movs	r3, #7
 800e752:	e143      	b.n	800e9dc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	699a      	ldr	r2, [r3, #24]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	441a      	add	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	699b      	ldr	r3, [r3, #24]
 800e760:	429a      	cmp	r2, r3
 800e762:	f080 812d 	bcs.w	800e9c0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	699b      	ldr	r3, [r3, #24]
 800e76a:	43db      	mvns	r3, r3
 800e76c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e76e:	e127      	b.n	800e9c0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f040 80e3 	bne.w	800e944 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	0a5b      	lsrs	r3, r3, #9
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	8952      	ldrh	r2, [r2, #10]
 800e788:	3a01      	subs	r2, #1
 800e78a:	4013      	ands	r3, r2
 800e78c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d143      	bne.n	800e81c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	699b      	ldr	r3, [r3, #24]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10c      	bne.n	800e7b6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d11a      	bne.n	800e7de <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fd25 	bl	800d1fc <create_chain>
 800e7b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7b4:	e013      	b.n	800e7de <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d007      	beq.n	800e7ce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	699b      	ldr	r3, [r3, #24]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f7fe fdb1 	bl	800d32c <clmt_clust>
 800e7ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7cc:	e007      	b.n	800e7de <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	69db      	ldr	r3, [r3, #28]
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	f7fe fd10 	bl	800d1fc <create_chain>
 800e7dc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f000 80f2 	beq.w	800e9ca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d104      	bne.n	800e7f6 <f_write+0xfc>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2202      	movs	r2, #2
 800e7f0:	755a      	strb	r2, [r3, #21]
 800e7f2:	2302      	movs	r3, #2
 800e7f4:	e0f2      	b.n	800e9dc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fc:	d104      	bne.n	800e808 <f_write+0x10e>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2201      	movs	r2, #1
 800e802:	755a      	strb	r2, [r3, #21]
 800e804:	2301      	movs	r3, #1
 800e806:	e0e9      	b.n	800e9dc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e80c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <f_write+0x122>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e81a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	7d1b      	ldrb	r3, [r3, #20]
 800e820:	b25b      	sxtb	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	da18      	bge.n	800e858 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	7858      	ldrb	r0, [r3, #1]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a1a      	ldr	r2, [r3, #32]
 800e834:	2301      	movs	r3, #1
 800e836:	f7fd ff41 	bl	800c6bc <disk_write>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d004      	beq.n	800e84a <f_write+0x150>
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2201      	movs	r2, #1
 800e844:	755a      	strb	r2, [r3, #21]
 800e846:	2301      	movs	r3, #1
 800e848:	e0c8      	b.n	800e9dc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	7d1b      	ldrb	r3, [r3, #20]
 800e84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e852:	b2da      	uxtb	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e858:	693a      	ldr	r2, [r7, #16]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	4619      	mov	r1, r3
 800e860:	4610      	mov	r0, r2
 800e862:	f7fe fab5 	bl	800cdd0 <clust2sect>
 800e866:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d104      	bne.n	800e878 <f_write+0x17e>
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2202      	movs	r2, #2
 800e872:	755a      	strb	r2, [r3, #21]
 800e874:	2302      	movs	r3, #2
 800e876:	e0b1      	b.n	800e9dc <f_write+0x2e2>
			sect += csect;
 800e878:	697a      	ldr	r2, [r7, #20]
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	4413      	add	r3, r2
 800e87e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	0a5b      	lsrs	r3, r3, #9
 800e884:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d03c      	beq.n	800e906 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e88c:	69ba      	ldr	r2, [r7, #24]
 800e88e:	6a3b      	ldr	r3, [r7, #32]
 800e890:	4413      	add	r3, r2
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	8952      	ldrh	r2, [r2, #10]
 800e896:	4293      	cmp	r3, r2
 800e898:	d905      	bls.n	800e8a6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	895b      	ldrh	r3, [r3, #10]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	7858      	ldrb	r0, [r3, #1]
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	697a      	ldr	r2, [r7, #20]
 800e8ae:	69f9      	ldr	r1, [r7, #28]
 800e8b0:	f7fd ff04 	bl	800c6bc <disk_write>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d004      	beq.n	800e8c4 <f_write+0x1ca>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	755a      	strb	r2, [r3, #21]
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e08b      	b.n	800e9dc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6a1a      	ldr	r2, [r3, #32]
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	6a3a      	ldr	r2, [r7, #32]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d915      	bls.n	800e8fe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6a1a      	ldr	r2, [r3, #32]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	025b      	lsls	r3, r3, #9
 800e8e2:	69fa      	ldr	r2, [r7, #28]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	f7fd ffa6 	bl	800c83c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	7d1b      	ldrb	r3, [r3, #20]
 800e8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e8fe:	6a3b      	ldr	r3, [r7, #32]
 800e900:	025b      	lsls	r3, r3, #9
 800e902:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e904:	e03f      	b.n	800e986 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6a1b      	ldr	r3, [r3, #32]
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d016      	beq.n	800e93e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	699a      	ldr	r2, [r3, #24]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e918:	429a      	cmp	r2, r3
 800e91a:	d210      	bcs.n	800e93e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	7858      	ldrb	r0, [r3, #1]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e926:	2301      	movs	r3, #1
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	f7fd fea7 	bl	800c67c <disk_read>
 800e92e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	755a      	strb	r2, [r3, #21]
 800e93a:	2301      	movs	r3, #1
 800e93c:	e04e      	b.n	800e9dc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	697a      	ldr	r2, [r7, #20]
 800e942:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e94c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e950:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d901      	bls.n	800e95e <f_write+0x264>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	699b      	ldr	r3, [r3, #24]
 800e968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e96c:	4413      	add	r3, r2
 800e96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e970:	69f9      	ldr	r1, [r7, #28]
 800e972:	4618      	mov	r0, r3
 800e974:	f7fd ff62 	bl	800c83c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
 800e97c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e980:	b2da      	uxtb	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e986:	69fa      	ldr	r2, [r7, #28]
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	4413      	add	r3, r2
 800e98c:	61fb      	str	r3, [r7, #28]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e994:	441a      	add	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	619a      	str	r2, [r3, #24]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	68da      	ldr	r2, [r3, #12]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	bf38      	it	cc
 800e9a6:	461a      	movcc	r2, r3
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	60da      	str	r2, [r3, #12]
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b2:	441a      	add	r2, r3
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f47f aed4 	bne.w	800e770 <f_write+0x76>
 800e9c8:	e000      	b.n	800e9cc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	7d1b      	ldrb	r3, [r3, #20]
 800e9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9d4:	b2da      	uxtb	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3730      	adds	r7, #48	; 0x30
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f107 0208 	add.w	r2, r7, #8
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7ff fb07 	bl	800e008 <validate>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d168      	bne.n	800ead6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	7d1b      	ldrb	r3, [r3, #20]
 800ea08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d062      	beq.n	800ead6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7d1b      	ldrb	r3, [r3, #20]
 800ea14:	b25b      	sxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	da15      	bge.n	800ea46 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	7858      	ldrb	r0, [r3, #1]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a1a      	ldr	r2, [r3, #32]
 800ea28:	2301      	movs	r3, #1
 800ea2a:	f7fd fe47 	bl	800c6bc <disk_write>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <f_sync+0x54>
 800ea34:	2301      	movs	r3, #1
 800ea36:	e04f      	b.n	800ead8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7d1b      	ldrb	r3, [r3, #20]
 800ea3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea46:	f7fb f8b5 	bl	8009bb4 <get_fattime>
 800ea4a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea52:	4619      	mov	r1, r3
 800ea54:	4610      	mov	r0, r2
 800ea56:	f7fe f91f 	bl	800cc98 <move_window>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ea5e:	7dfb      	ldrb	r3, [r7, #23]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d138      	bne.n	800ead6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea68:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	330b      	adds	r3, #11
 800ea6e:	781a      	ldrb	r2, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	330b      	adds	r3, #11
 800ea74:	f042 0220 	orr.w	r2, r2, #32
 800ea78:	b2d2      	uxtb	r2, r2
 800ea7a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	461a      	mov	r2, r3
 800ea86:	68f9      	ldr	r1, [r7, #12]
 800ea88:	f7fe fe2a 	bl	800d6e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f103 021c 	add.w	r2, r3, #28
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	4619      	mov	r1, r3
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f7fd fea3 	bl	800c7e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	3316      	adds	r3, #22
 800eaa2:	6939      	ldr	r1, [r7, #16]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fd fe9d 	bl	800c7e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	3312      	adds	r3, #18
 800eaae:	2100      	movs	r1, #0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fe7c 	bl	800c7ae <st_word>
					fs->wflag = 1;
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2201      	movs	r2, #1
 800eaba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fe f918 	bl	800ccf4 <sync_fs>
 800eac4:	4603      	mov	r3, r0
 800eac6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7d1b      	ldrb	r3, [r3, #20]
 800eacc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff ff7b 	bl	800e9e4 <f_sync>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d118      	bne.n	800eb2a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f107 0208 	add.w	r2, r7, #8
 800eafe:	4611      	mov	r1, r2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff fa81 	bl	800e008 <validate>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10c      	bne.n	800eb2a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe f81b 	bl	800cb50 <dec_lock>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d102      	bne.n	800eb2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b092      	sub	sp, #72	; 0x48
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800eb40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb44:	f107 030c 	add.w	r3, r7, #12
 800eb48:	2200      	movs	r2, #0
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7ff f810 	bl	800db70 <find_volume>
 800eb50:	4603      	mov	r3, r0
 800eb52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800eb56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f040 8099 	bne.w	800ec92 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800eb60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800eb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb68:	691a      	ldr	r2, [r3, #16]
 800eb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	3b02      	subs	r3, #2
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d804      	bhi.n	800eb7e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800eb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb76:	691a      	ldr	r2, [r3, #16]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	e089      	b.n	800ec92 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d128      	bne.n	800ebdc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800eb92:	f107 0314 	add.w	r3, r7, #20
 800eb96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe f938 	bl	800ce0e <get_fat>
 800eb9e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba6:	d103      	bne.n	800ebb0 <f_getfree+0x7c>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ebae:	e063      	b.n	800ec78 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d103      	bne.n	800ebbe <f_getfree+0x8a>
 800ebb6:	2302      	movs	r3, #2
 800ebb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ebbc:	e05c      	b.n	800ec78 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d102      	bne.n	800ebca <f_getfree+0x96>
 800ebc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ebca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebcc:	3301      	adds	r3, #1
 800ebce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d3db      	bcc.n	800eb92 <f_getfree+0x5e>
 800ebda:	e04d      	b.n	800ec78 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	695b      	ldr	r3, [r3, #20]
 800ebe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	637b      	str	r3, [r7, #52]	; 0x34
 800ebec:	2300      	movs	r3, #0
 800ebee:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ebf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d113      	bne.n	800ec1e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ebf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfa:	1c5a      	adds	r2, r3, #1
 800ebfc:	63ba      	str	r2, [r7, #56]	; 0x38
 800ebfe:	4619      	mov	r1, r3
 800ec00:	f7fe f84a 	bl	800cc98 <move_window>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ec0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d131      	bne.n	800ec76 <f_getfree+0x142>
							p = fs->win;
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	3330      	adds	r3, #48	; 0x30
 800ec16:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ec18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec1c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d10f      	bne.n	800ec46 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ec26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec28:	f7fd fd86 	bl	800c738 <ld_word>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <f_getfree+0x104>
 800ec32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec34:	3301      	adds	r3, #1
 800ec36:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	3302      	adds	r3, #2
 800ec3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ec3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec40:	3b02      	subs	r3, #2
 800ec42:	637b      	str	r3, [r7, #52]	; 0x34
 800ec44:	e010      	b.n	800ec68 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ec46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec48:	f7fd fd8e 	bl	800c768 <ld_dword>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d102      	bne.n	800ec5c <f_getfree+0x128>
 800ec56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec58:	3301      	adds	r3, #1
 800ec5a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	3304      	adds	r3, #4
 800ec60:	633b      	str	r3, [r7, #48]	; 0x30
 800ec62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec64:	3b04      	subs	r3, #4
 800ec66:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ec68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1bd      	bne.n	800ebf0 <f_getfree+0xbc>
 800ec74:	e000      	b.n	800ec78 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ec76:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec7c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ec7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec82:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ec84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec86:	791a      	ldrb	r2, [r3, #4]
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	f042 0201 	orr.w	r2, r2, #1
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ec92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3748      	adds	r7, #72	; 0x48
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b088      	sub	sp, #32
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	60f8      	str	r0, [r7, #12]
 800eca6:	60b9      	str	r1, [r7, #8]
 800eca8:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ecb2:	e01b      	b.n	800ecec <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ecb4:	f107 0310 	add.w	r3, r7, #16
 800ecb8:	f107 0114 	add.w	r1, r7, #20
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff fbdc 	bl	800e47c <f_read>
		if (rc != 1) break;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d116      	bne.n	800ecf8 <f_gets+0x5a>
		c = s[0];
 800ecca:	7d3b      	ldrb	r3, [r7, #20]
 800eccc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
 800ecd0:	2b0d      	cmp	r3, #13
 800ecd2:	d100      	bne.n	800ecd6 <f_gets+0x38>
 800ecd4:	e00a      	b.n	800ecec <f_gets+0x4e>
		*p++ = c;
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	61ba      	str	r2, [r7, #24]
 800ecdc:	7dfa      	ldrb	r2, [r7, #23]
 800ecde:	701a      	strb	r2, [r3, #0]
		n++;
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	3301      	adds	r3, #1
 800ece4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ece6:	7dfb      	ldrb	r3, [r7, #23]
 800ece8:	2b0a      	cmp	r3, #10
 800ecea:	d007      	beq.n	800ecfc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	69fa      	ldr	r2, [r7, #28]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	dbde      	blt.n	800ecb4 <f_gets+0x16>
 800ecf6:	e002      	b.n	800ecfe <f_gets+0x60>
		if (rc != 1) break;
 800ecf8:	bf00      	nop
 800ecfa:	e000      	b.n	800ecfe <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800ecfc:	bf00      	nop
	}
	*p = 0;
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	2200      	movs	r2, #0
 800ed02:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <f_gets+0x70>
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	e000      	b.n	800ed10 <f_gets+0x72>
 800ed0e:	2300      	movs	r3, #0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3720      	adds	r7, #32
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b087      	sub	sp, #28
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	4613      	mov	r3, r2
 800ed24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ed26:	2301      	movs	r3, #1
 800ed28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ed2e:	4b1f      	ldr	r3, [pc, #124]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed30:	7a5b      	ldrb	r3, [r3, #9]
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d131      	bne.n	800ed9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed38:	4b1c      	ldr	r3, [pc, #112]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed3a:	7a5b      	ldrb	r3, [r3, #9]
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	461a      	mov	r2, r3
 800ed40:	4b1a      	ldr	r3, [pc, #104]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed42:	2100      	movs	r1, #0
 800ed44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed46:	4b19      	ldr	r3, [pc, #100]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed48:	7a5b      	ldrb	r3, [r3, #9]
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	4a17      	ldr	r2, [pc, #92]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4413      	add	r3, r2
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed56:	4b15      	ldr	r3, [pc, #84]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed58:	7a5b      	ldrb	r3, [r3, #9]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	4b13      	ldr	r3, [pc, #76]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed60:	4413      	add	r3, r2
 800ed62:	79fa      	ldrb	r2, [r7, #7]
 800ed64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed66:	4b11      	ldr	r3, [pc, #68]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed68:	7a5b      	ldrb	r3, [r3, #9]
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	b2d1      	uxtb	r1, r2
 800ed70:	4a0e      	ldr	r2, [pc, #56]	; (800edac <FATFS_LinkDriverEx+0x94>)
 800ed72:	7251      	strb	r1, [r2, #9]
 800ed74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed76:	7dbb      	ldrb	r3, [r7, #22]
 800ed78:	3330      	adds	r3, #48	; 0x30
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	3301      	adds	r3, #1
 800ed84:	223a      	movs	r2, #58	; 0x3a
 800ed86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	3302      	adds	r3, #2
 800ed8c:	222f      	movs	r2, #47	; 0x2f
 800ed8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	3303      	adds	r3, #3
 800ed94:	2200      	movs	r2, #0
 800ed96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	371c      	adds	r7, #28
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	20000854 	.word	0x20000854

0800edb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800edba:	2200      	movs	r2, #0
 800edbc:	6839      	ldr	r1, [r7, #0]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff ffaa 	bl	800ed18 <FATFS_LinkDriverEx>
 800edc4:	4603      	mov	r3, r0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800edd4:	2200      	movs	r2, #0
 800edd6:	4912      	ldr	r1, [pc, #72]	; (800ee20 <MX_USB_DEVICE_Init+0x50>)
 800edd8:	4812      	ldr	r0, [pc, #72]	; (800ee24 <MX_USB_DEVICE_Init+0x54>)
 800edda:	f7fc f8f3 	bl	800afc4 <USBD_Init>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d001      	beq.n	800ede8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ede4:	f7f3 fb36 	bl	8002454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ede8:	490f      	ldr	r1, [pc, #60]	; (800ee28 <MX_USB_DEVICE_Init+0x58>)
 800edea:	480e      	ldr	r0, [pc, #56]	; (800ee24 <MX_USB_DEVICE_Init+0x54>)
 800edec:	f7fc f91a 	bl	800b024 <USBD_RegisterClass>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d001      	beq.n	800edfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800edf6:	f7f3 fb2d 	bl	8002454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800edfa:	490c      	ldr	r1, [pc, #48]	; (800ee2c <MX_USB_DEVICE_Init+0x5c>)
 800edfc:	4809      	ldr	r0, [pc, #36]	; (800ee24 <MX_USB_DEVICE_Init+0x54>)
 800edfe:	f7fc f811 	bl	800ae24 <USBD_CDC_RegisterInterface>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d001      	beq.n	800ee0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee08:	f7f3 fb24 	bl	8002454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ee0c:	4805      	ldr	r0, [pc, #20]	; (800ee24 <MX_USB_DEVICE_Init+0x54>)
 800ee0e:	f7fc f93f 	bl	800b090 <USBD_Start>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee18:	f7f3 fb1c 	bl	8002454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee1c:	bf00      	nop
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	200000c8 	.word	0x200000c8
 800ee24:	20000860 	.word	0x20000860
 800ee28:	20000034 	.word	0x20000034
 800ee2c:	200000b4 	.word	0x200000b4

0800ee30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ee34:	2200      	movs	r2, #0
 800ee36:	4905      	ldr	r1, [pc, #20]	; (800ee4c <CDC_Init_FS+0x1c>)
 800ee38:	4805      	ldr	r0, [pc, #20]	; (800ee50 <CDC_Init_FS+0x20>)
 800ee3a:	f7fc f80d 	bl	800ae58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ee3e:	4905      	ldr	r1, [pc, #20]	; (800ee54 <CDC_Init_FS+0x24>)
 800ee40:	4803      	ldr	r0, [pc, #12]	; (800ee50 <CDC_Init_FS+0x20>)
 800ee42:	f7fc f82b 	bl	800ae9c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	2000133c 	.word	0x2000133c
 800ee50:	20000860 	.word	0x20000860
 800ee54:	20000b3c 	.word	0x20000b3c

0800ee58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ee5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	6039      	str	r1, [r7, #0]
 800ee72:	71fb      	strb	r3, [r7, #7]
 800ee74:	4613      	mov	r3, r2
 800ee76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ee78:	79fb      	ldrb	r3, [r7, #7]
 800ee7a:	2b23      	cmp	r3, #35	; 0x23
 800ee7c:	d84a      	bhi.n	800ef14 <CDC_Control_FS+0xac>
 800ee7e:	a201      	add	r2, pc, #4	; (adr r2, 800ee84 <CDC_Control_FS+0x1c>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800ef15 	.word	0x0800ef15
 800ee88:	0800ef15 	.word	0x0800ef15
 800ee8c:	0800ef15 	.word	0x0800ef15
 800ee90:	0800ef15 	.word	0x0800ef15
 800ee94:	0800ef15 	.word	0x0800ef15
 800ee98:	0800ef15 	.word	0x0800ef15
 800ee9c:	0800ef15 	.word	0x0800ef15
 800eea0:	0800ef15 	.word	0x0800ef15
 800eea4:	0800ef15 	.word	0x0800ef15
 800eea8:	0800ef15 	.word	0x0800ef15
 800eeac:	0800ef15 	.word	0x0800ef15
 800eeb0:	0800ef15 	.word	0x0800ef15
 800eeb4:	0800ef15 	.word	0x0800ef15
 800eeb8:	0800ef15 	.word	0x0800ef15
 800eebc:	0800ef15 	.word	0x0800ef15
 800eec0:	0800ef15 	.word	0x0800ef15
 800eec4:	0800ef15 	.word	0x0800ef15
 800eec8:	0800ef15 	.word	0x0800ef15
 800eecc:	0800ef15 	.word	0x0800ef15
 800eed0:	0800ef15 	.word	0x0800ef15
 800eed4:	0800ef15 	.word	0x0800ef15
 800eed8:	0800ef15 	.word	0x0800ef15
 800eedc:	0800ef15 	.word	0x0800ef15
 800eee0:	0800ef15 	.word	0x0800ef15
 800eee4:	0800ef15 	.word	0x0800ef15
 800eee8:	0800ef15 	.word	0x0800ef15
 800eeec:	0800ef15 	.word	0x0800ef15
 800eef0:	0800ef15 	.word	0x0800ef15
 800eef4:	0800ef15 	.word	0x0800ef15
 800eef8:	0800ef15 	.word	0x0800ef15
 800eefc:	0800ef15 	.word	0x0800ef15
 800ef00:	0800ef15 	.word	0x0800ef15
 800ef04:	0800ef15 	.word	0x0800ef15
 800ef08:	0800ef15 	.word	0x0800ef15
 800ef0c:	0800ef15 	.word	0x0800ef15
 800ef10:	0800ef15 	.word	0x0800ef15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef14:	bf00      	nop
  }

  return (USBD_OK);
 800ef16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	4818      	ldr	r0, [pc, #96]	; (800ef94 <CDC_Receive_FS+0x70>)
 800ef32:	f7fb ffb3 	bl	800ae9c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef36:	4817      	ldr	r0, [pc, #92]	; (800ef94 <CDC_Receive_FS+0x70>)
 800ef38:	f7fc f80e 	bl	800af58 <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	e016      	b.n	800ef70 <CDC_Receive_FS+0x4c>
  {
	  Buf[i] = toupper(Buf[i]);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	4413      	add	r3, r2
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 fdae 	bl	800faac <toupper>
 800ef50:	4601      	mov	r1, r0
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	4413      	add	r3, r2
 800ef58:	b2ca      	uxtb	r2, r1
 800ef5a:	701a      	strb	r2, [r3, #0]
	  test_enable = Buf[i];
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	4413      	add	r3, r2
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	461a      	mov	r2, r3
 800ef66:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <CDC_Receive_FS+0x74>)
 800ef68:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	60fb      	str	r3, [r7, #12]
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d8e3      	bhi.n	800ef42 <CDC_Receive_FS+0x1e>
  }

  CDC_Transmit_FS(Buf,*Len);
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	4619      	mov	r1, r3
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f80a 	bl	800ef9c <CDC_Transmit_FS>



  return (USBD_OK);
 800ef88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	20000860 	.word	0x20000860
 800ef98:	200006f4 	.word	0x200006f4

0800ef9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800efac:	4b0d      	ldr	r3, [pc, #52]	; (800efe4 <CDC_Transmit_FS+0x48>)
 800efae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d001      	beq.n	800efc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e00b      	b.n	800efda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800efc2:	887b      	ldrh	r3, [r7, #2]
 800efc4:	461a      	mov	r2, r3
 800efc6:	6879      	ldr	r1, [r7, #4]
 800efc8:	4806      	ldr	r0, [pc, #24]	; (800efe4 <CDC_Transmit_FS+0x48>)
 800efca:	f7fb ff45 	bl	800ae58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800efce:	4805      	ldr	r0, [pc, #20]	; (800efe4 <CDC_Transmit_FS+0x48>)
 800efd0:	f7fb ff82 	bl	800aed8 <USBD_CDC_TransmitPacket>
 800efd4:	4603      	mov	r3, r0
 800efd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800efd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20000860 	.word	0x20000860

0800efe8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800efe8:	b480      	push	{r7}
 800efea:	b087      	sub	sp, #28
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4613      	mov	r3, r2
 800eff4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800effa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800effe:	4618      	mov	r0, r3
 800f000:	371c      	adds	r7, #28
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr
	...

0800f00c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	4603      	mov	r3, r0
 800f014:	6039      	str	r1, [r7, #0]
 800f016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	2212      	movs	r2, #18
 800f01c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f01e:	4b03      	ldr	r3, [pc, #12]	; (800f02c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f020:	4618      	mov	r0, r3
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr
 800f02c:	200000e8 	.word	0x200000e8

0800f030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	4603      	mov	r3, r0
 800f038:	6039      	str	r1, [r7, #0]
 800f03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2204      	movs	r2, #4
 800f040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f042:	4b03      	ldr	r3, [pc, #12]	; (800f050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	20000108 	.word	0x20000108

0800f054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	4603      	mov	r3, r0
 800f05c:	6039      	str	r1, [r7, #0]
 800f05e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f060:	79fb      	ldrb	r3, [r7, #7]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d105      	bne.n	800f072 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	4907      	ldr	r1, [pc, #28]	; (800f088 <USBD_FS_ProductStrDescriptor+0x34>)
 800f06a:	4808      	ldr	r0, [pc, #32]	; (800f08c <USBD_FS_ProductStrDescriptor+0x38>)
 800f06c:	f7fd f9e6 	bl	800c43c <USBD_GetString>
 800f070:	e004      	b.n	800f07c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	4904      	ldr	r1, [pc, #16]	; (800f088 <USBD_FS_ProductStrDescriptor+0x34>)
 800f076:	4805      	ldr	r0, [pc, #20]	; (800f08c <USBD_FS_ProductStrDescriptor+0x38>)
 800f078:	f7fd f9e0 	bl	800c43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f07c:	4b02      	ldr	r3, [pc, #8]	; (800f088 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3708      	adds	r7, #8
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	20001b3c 	.word	0x20001b3c
 800f08c:	0801075c 	.word	0x0801075c

0800f090 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	4603      	mov	r3, r0
 800f098:	6039      	str	r1, [r7, #0]
 800f09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f09c:	683a      	ldr	r2, [r7, #0]
 800f09e:	4904      	ldr	r1, [pc, #16]	; (800f0b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f0a0:	4804      	ldr	r0, [pc, #16]	; (800f0b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f0a2:	f7fd f9cb 	bl	800c43c <USBD_GetString>
  return USBD_StrDesc;
 800f0a6:	4b02      	ldr	r3, [pc, #8]	; (800f0b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	20001b3c 	.word	0x20001b3c
 800f0b4:	08010774 	.word	0x08010774

0800f0b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	221a      	movs	r2, #26
 800f0c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f0ca:	f000 f855 	bl	800f178 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f0ce:	4b02      	ldr	r3, [pc, #8]	; (800f0d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	2000010c 	.word	0x2000010c

0800f0dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d105      	bne.n	800f0fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	4907      	ldr	r1, [pc, #28]	; (800f110 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f0f2:	4808      	ldr	r0, [pc, #32]	; (800f114 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f0f4:	f7fd f9a2 	bl	800c43c <USBD_GetString>
 800f0f8:	e004      	b.n	800f104 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f0fa:	683a      	ldr	r2, [r7, #0]
 800f0fc:	4904      	ldr	r1, [pc, #16]	; (800f110 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f0fe:	4805      	ldr	r0, [pc, #20]	; (800f114 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f100:	f7fd f99c 	bl	800c43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f104:	4b02      	ldr	r3, [pc, #8]	; (800f110 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	20001b3c 	.word	0x20001b3c
 800f114:	08010788 	.word	0x08010788

0800f118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	4603      	mov	r3, r0
 800f120:	6039      	str	r1, [r7, #0]
 800f122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f124:	79fb      	ldrb	r3, [r7, #7]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d105      	bne.n	800f136 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	4907      	ldr	r1, [pc, #28]	; (800f14c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f12e:	4808      	ldr	r0, [pc, #32]	; (800f150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f130:	f7fd f984 	bl	800c43c <USBD_GetString>
 800f134:	e004      	b.n	800f140 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	4904      	ldr	r1, [pc, #16]	; (800f14c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f13a:	4805      	ldr	r0, [pc, #20]	; (800f150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f13c:	f7fd f97e 	bl	800c43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f140:	4b02      	ldr	r3, [pc, #8]	; (800f14c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f142:	4618      	mov	r0, r3
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	20001b3c 	.word	0x20001b3c
 800f150:	08010794 	.word	0x08010794

0800f154 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	6039      	str	r1, [r7, #0]
 800f15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	220c      	movs	r2, #12
 800f164:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f166:	4b03      	ldr	r3, [pc, #12]	; (800f174 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f168:	4618      	mov	r0, r3
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr
 800f174:	200000fc 	.word	0x200000fc

0800f178 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f17e:	4b0f      	ldr	r3, [pc, #60]	; (800f1bc <Get_SerialNum+0x44>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f184:	4b0e      	ldr	r3, [pc, #56]	; (800f1c0 <Get_SerialNum+0x48>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f18a:	4b0e      	ldr	r3, [pc, #56]	; (800f1c4 <Get_SerialNum+0x4c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4413      	add	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d009      	beq.n	800f1b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f19e:	2208      	movs	r2, #8
 800f1a0:	4909      	ldr	r1, [pc, #36]	; (800f1c8 <Get_SerialNum+0x50>)
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f000 f814 	bl	800f1d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f1a8:	2204      	movs	r2, #4
 800f1aa:	4908      	ldr	r1, [pc, #32]	; (800f1cc <Get_SerialNum+0x54>)
 800f1ac:	68b8      	ldr	r0, [r7, #8]
 800f1ae:	f000 f80f 	bl	800f1d0 <IntToUnicode>
  }
}
 800f1b2:	bf00      	nop
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	1ff07a10 	.word	0x1ff07a10
 800f1c0:	1ff07a14 	.word	0x1ff07a14
 800f1c4:	1ff07a18 	.word	0x1ff07a18
 800f1c8:	2000010e 	.word	0x2000010e
 800f1cc:	2000011e 	.word	0x2000011e

0800f1d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b087      	sub	sp, #28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	75fb      	strb	r3, [r7, #23]
 800f1e6:	e027      	b.n	800f238 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	0f1b      	lsrs	r3, r3, #28
 800f1ec:	2b09      	cmp	r3, #9
 800f1ee:	d80b      	bhi.n	800f208 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	0f1b      	lsrs	r3, r3, #28
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
 800f1f8:	005b      	lsls	r3, r3, #1
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	440b      	add	r3, r1
 800f200:	3230      	adds	r2, #48	; 0x30
 800f202:	b2d2      	uxtb	r2, r2
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	e00a      	b.n	800f21e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	0f1b      	lsrs	r3, r3, #28
 800f20c:	b2da      	uxtb	r2, r3
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	005b      	lsls	r3, r3, #1
 800f212:	4619      	mov	r1, r3
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	440b      	add	r3, r1
 800f218:	3237      	adds	r2, #55	; 0x37
 800f21a:	b2d2      	uxtb	r2, r2
 800f21c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	011b      	lsls	r3, r3, #4
 800f222:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f224:	7dfb      	ldrb	r3, [r7, #23]
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	3301      	adds	r3, #1
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	4413      	add	r3, r2
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f232:	7dfb      	ldrb	r3, [r7, #23]
 800f234:	3301      	adds	r3, #1
 800f236:	75fb      	strb	r3, [r7, #23]
 800f238:	7dfa      	ldrb	r2, [r7, #23]
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d3d3      	bcc.n	800f1e8 <IntToUnicode+0x18>
  }
}
 800f240:	bf00      	nop
 800f242:	bf00      	nop
 800f244:	371c      	adds	r7, #28
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr
	...

0800f250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b0aa      	sub	sp, #168	; 0xa8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f258:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f25c:	2200      	movs	r2, #0
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	605a      	str	r2, [r3, #4]
 800f262:	609a      	str	r2, [r3, #8]
 800f264:	60da      	str	r2, [r3, #12]
 800f266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f268:	f107 0314 	add.w	r3, r7, #20
 800f26c:	2280      	movs	r2, #128	; 0x80
 800f26e:	2100      	movs	r1, #0
 800f270:	4618      	mov	r0, r3
 800f272:	f000 fc5f 	bl	800fb34 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f27e:	d151      	bne.n	800f324 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f284:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800f286:	2300      	movs	r3, #0
 800f288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f28c:	f107 0314 	add.w	r3, r7, #20
 800f290:	4618      	mov	r0, r3
 800f292:	f7f7 f8f5 	bl	8006480 <HAL_RCCEx_PeriphCLKConfig>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800f29c:	f7f3 f8da 	bl	8002454 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2a0:	4b22      	ldr	r3, [pc, #136]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a4:	4a21      	ldr	r2, [pc, #132]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2a6:	f043 0301 	orr.w	r3, r3, #1
 800f2aa:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ac:	4b1f      	ldr	r3, [pc, #124]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b0:	f003 0301 	and.w	r3, r3, #1
 800f2b4:	613b      	str	r3, [r7, #16]
 800f2b6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f2b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f2bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2cc:	2303      	movs	r3, #3
 800f2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f2d2:	230a      	movs	r3, #10
 800f2d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f2dc:	4619      	mov	r1, r3
 800f2de:	4814      	ldr	r0, [pc, #80]	; (800f330 <HAL_PCD_MspInit+0xe0>)
 800f2e0:	f7f4 f91e 	bl	8003520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f2e4:	4b11      	ldr	r3, [pc, #68]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e8:	4a10      	ldr	r2, [pc, #64]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2ee:	6353      	str	r3, [r2, #52]	; 0x34
 800f2f0:	4b0e      	ldr	r3, [pc, #56]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2f8:	60fb      	str	r3, [r7, #12]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	4b0b      	ldr	r3, [pc, #44]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f300:	4a0a      	ldr	r2, [pc, #40]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f306:	6453      	str	r3, [r2, #68]	; 0x44
 800f308:	4b08      	ldr	r3, [pc, #32]	; (800f32c <HAL_PCD_MspInit+0xdc>)
 800f30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f310:	60bb      	str	r3, [r7, #8]
 800f312:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f314:	2200      	movs	r2, #0
 800f316:	2100      	movs	r1, #0
 800f318:	2043      	movs	r0, #67	; 0x43
 800f31a:	f7f4 f8ca 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f31e:	2043      	movs	r0, #67	; 0x43
 800f320:	f7f4 f8e3 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f324:	bf00      	nop
 800f326:	37a8      	adds	r7, #168	; 0xa8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	40023800 	.word	0x40023800
 800f330:	40020000 	.word	0x40020000

0800f334 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f348:	4619      	mov	r1, r3
 800f34a:	4610      	mov	r0, r2
 800f34c:	f7fb feed 	bl	800b12a <USBD_LL_SetupStage>
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	460b      	mov	r3, r1
 800f362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f36a:	78fa      	ldrb	r2, [r7, #3]
 800f36c:	6879      	ldr	r1, [r7, #4]
 800f36e:	4613      	mov	r3, r2
 800f370:	00db      	lsls	r3, r3, #3
 800f372:	4413      	add	r3, r2
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	440b      	add	r3, r1
 800f378:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	78fb      	ldrb	r3, [r7, #3]
 800f380:	4619      	mov	r1, r3
 800f382:	f7fb ff27 	bl	800b1d4 <USBD_LL_DataOutStage>
}
 800f386:	bf00      	nop
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f38e:	b580      	push	{r7, lr}
 800f390:	b082      	sub	sp, #8
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	460b      	mov	r3, r1
 800f398:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800f3a0:	78fa      	ldrb	r2, [r7, #3]
 800f3a2:	6879      	ldr	r1, [r7, #4]
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	4413      	add	r3, r2
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	440b      	add	r3, r1
 800f3ae:	334c      	adds	r3, #76	; 0x4c
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	78fb      	ldrb	r3, [r7, #3]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	f7fb ffc0 	bl	800b33a <USBD_LL_DataInStage>
}
 800f3ba:	bf00      	nop
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fc f8f4 	bl	800b5be <USBD_LL_SOF>
}
 800f3d6:	bf00      	nop
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b084      	sub	sp, #16
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d102      	bne.n	800f3f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	73fb      	strb	r3, [r7, #15]
 800f3f6:	e008      	b.n	800f40a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	2b02      	cmp	r3, #2
 800f3fe:	d102      	bne.n	800f406 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f400:	2301      	movs	r3, #1
 800f402:	73fb      	strb	r3, [r7, #15]
 800f404:	e001      	b.n	800f40a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f406:	f7f3 f825 	bl	8002454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f410:	7bfa      	ldrb	r2, [r7, #15]
 800f412:	4611      	mov	r1, r2
 800f414:	4618      	mov	r0, r3
 800f416:	f7fc f894 	bl	800b542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f420:	4618      	mov	r0, r3
 800f422:	f7fc f83c 	bl	800b49e <USBD_LL_Reset>
}
 800f426:	bf00      	nop
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
	...

0800f430 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fc f88f 	bl	800b562 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	6812      	ldr	r2, [r2, #0]
 800f452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f456:	f043 0301 	orr.w	r3, r3, #1
 800f45a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a1b      	ldr	r3, [r3, #32]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d005      	beq.n	800f470 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f464:	4b04      	ldr	r3, [pc, #16]	; (800f478 <HAL_PCD_SuspendCallback+0x48>)
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	4a03      	ldr	r2, [pc, #12]	; (800f478 <HAL_PCD_SuspendCallback+0x48>)
 800f46a:	f043 0306 	orr.w	r3, r3, #6
 800f46e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f470:	bf00      	nop
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	e000ed00 	.word	0xe000ed00

0800f47c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fc f87f 	bl	800b58e <USBD_LL_Resume>
}
 800f490:	bf00      	nop
 800f492:	3708      	adds	r7, #8
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4aa:	78fa      	ldrb	r2, [r7, #3]
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fc f8d7 	bl	800b662 <USBD_LL_IsoOUTIncomplete>
}
 800f4b4:	bf00      	nop
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4ce:	78fa      	ldrb	r2, [r7, #3]
 800f4d0:	4611      	mov	r1, r2
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fc f893 	bl	800b5fe <USBD_LL_IsoINIncomplete>
}
 800f4d8:	bf00      	nop
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fc f8e9 	bl	800b6c6 <USBD_LL_DevConnected>
}
 800f4f4:	bf00      	nop
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fc f8e6 	bl	800b6dc <USBD_LL_DevDisconnected>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d13f      	bne.n	800f5a8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f528:	4a22      	ldr	r2, [pc, #136]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a20      	ldr	r2, [pc, #128]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f534:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f538:	4b1e      	ldr	r3, [pc, #120]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f53a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f53e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f540:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f542:	2206      	movs	r2, #6
 800f544:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f546:	4b1b      	ldr	r3, [pc, #108]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f548:	2202      	movs	r2, #2
 800f54a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f54c:	4b19      	ldr	r3, [pc, #100]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f54e:	2200      	movs	r2, #0
 800f550:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f552:	4b18      	ldr	r3, [pc, #96]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f554:	2202      	movs	r2, #2
 800f556:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f558:	4b16      	ldr	r3, [pc, #88]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f55e:	4b15      	ldr	r3, [pc, #84]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f560:	2200      	movs	r2, #0
 800f562:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f564:	4b13      	ldr	r3, [pc, #76]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f566:	2200      	movs	r2, #0
 800f568:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f56a:	4b12      	ldr	r3, [pc, #72]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f56c:	2200      	movs	r2, #0
 800f56e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f570:	4b10      	ldr	r3, [pc, #64]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f572:	2200      	movs	r2, #0
 800f574:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f576:	4b0f      	ldr	r3, [pc, #60]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f578:	2200      	movs	r2, #0
 800f57a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f57c:	480d      	ldr	r0, [pc, #52]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f57e:	f7f4 ff1c 	bl	80043ba <HAL_PCD_Init>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800f588:	f7f2 ff64 	bl	8002454 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f58c:	2180      	movs	r1, #128	; 0x80
 800f58e:	4809      	ldr	r0, [pc, #36]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f590:	f7f6 f997 	bl	80058c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f594:	2240      	movs	r2, #64	; 0x40
 800f596:	2100      	movs	r1, #0
 800f598:	4806      	ldr	r0, [pc, #24]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f59a:	f7f6 f94b 	bl	8005834 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f59e:	2280      	movs	r2, #128	; 0x80
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	4804      	ldr	r0, [pc, #16]	; (800f5b4 <USBD_LL_Init+0x9c>)
 800f5a4:	f7f6 f946 	bl	8005834 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20001d3c 	.word	0x20001d3c

0800f5b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7f5 f817 	bl	8004602 <HAL_PCD_Start>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 f97e 	bl	800f8dc <USBD_Get_USB_Status>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b084      	sub	sp, #16
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	4608      	mov	r0, r1
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	70fb      	strb	r3, [r7, #3]
 800f600:	460b      	mov	r3, r1
 800f602:	70bb      	strb	r3, [r7, #2]
 800f604:	4613      	mov	r3, r2
 800f606:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f608:	2300      	movs	r3, #0
 800f60a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f60c:	2300      	movs	r3, #0
 800f60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f616:	78bb      	ldrb	r3, [r7, #2]
 800f618:	883a      	ldrh	r2, [r7, #0]
 800f61a:	78f9      	ldrb	r1, [r7, #3]
 800f61c:	f7f5 fd04 	bl	8005028 <HAL_PCD_EP_Open>
 800f620:	4603      	mov	r3, r0
 800f622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f624:	7bfb      	ldrb	r3, [r7, #15]
 800f626:	4618      	mov	r0, r3
 800f628:	f000 f958 	bl	800f8dc <USBD_Get_USB_Status>
 800f62c:	4603      	mov	r3, r0
 800f62e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f630:	7bbb      	ldrb	r3, [r7, #14]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b084      	sub	sp, #16
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	460b      	mov	r3, r1
 800f644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f654:	78fa      	ldrb	r2, [r7, #3]
 800f656:	4611      	mov	r1, r2
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f5 fd4d 	bl	80050f8 <HAL_PCD_EP_Close>
 800f65e:	4603      	mov	r3, r0
 800f660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f662:	7bfb      	ldrb	r3, [r7, #15]
 800f664:	4618      	mov	r0, r3
 800f666:	f000 f939 	bl	800f8dc <USBD_Get_USB_Status>
 800f66a:	4603      	mov	r3, r0
 800f66c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f66e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	460b      	mov	r3, r1
 800f682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f688:	2300      	movs	r3, #0
 800f68a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f692:	78fa      	ldrb	r2, [r7, #3]
 800f694:	4611      	mov	r1, r2
 800f696:	4618      	mov	r0, r3
 800f698:	f7f5 fe25 	bl	80052e6 <HAL_PCD_EP_SetStall>
 800f69c:	4603      	mov	r3, r0
 800f69e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6a0:	7bfb      	ldrb	r3, [r7, #15]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 f91a 	bl	800f8dc <USBD_Get_USB_Status>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	460b      	mov	r3, r1
 800f6c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6d0:	78fa      	ldrb	r2, [r7, #3]
 800f6d2:	4611      	mov	r1, r2
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7f5 fe6a 	bl	80053ae <HAL_PCD_EP_ClrStall>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 f8fb 	bl	800f8dc <USBD_Get_USB_Status>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f706:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	da0b      	bge.n	800f728 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f710:	78fb      	ldrb	r3, [r7, #3]
 800f712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f716:	68f9      	ldr	r1, [r7, #12]
 800f718:	4613      	mov	r3, r2
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	4413      	add	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	440b      	add	r3, r1
 800f722:	333e      	adds	r3, #62	; 0x3e
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	e00b      	b.n	800f740 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f728:	78fb      	ldrb	r3, [r7, #3]
 800f72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f72e:	68f9      	ldr	r1, [r7, #12]
 800f730:	4613      	mov	r3, r2
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	440b      	add	r3, r1
 800f73a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f73e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f740:	4618      	mov	r0, r3
 800f742:	3714      	adds	r7, #20
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f758:	2300      	movs	r3, #0
 800f75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f75c:	2300      	movs	r3, #0
 800f75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f766:	78fa      	ldrb	r2, [r7, #3]
 800f768:	4611      	mov	r1, r2
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f5 fc37 	bl	8004fde <HAL_PCD_SetAddress>
 800f770:	4603      	mov	r3, r0
 800f772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f774:	7bfb      	ldrb	r3, [r7, #15]
 800f776:	4618      	mov	r0, r3
 800f778:	f000 f8b0 	bl	800f8dc <USBD_Get_USB_Status>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f780:	7bbb      	ldrb	r3, [r7, #14]
}
 800f782:	4618      	mov	r0, r3
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b086      	sub	sp, #24
 800f78e:	af00      	add	r7, sp, #0
 800f790:	60f8      	str	r0, [r7, #12]
 800f792:	607a      	str	r2, [r7, #4]
 800f794:	603b      	str	r3, [r7, #0]
 800f796:	460b      	mov	r3, r1
 800f798:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7a8:	7af9      	ldrb	r1, [r7, #11]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	f7f5 fd50 	bl	8005252 <HAL_PCD_EP_Transmit>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 f88f 	bl	800f8dc <USBD_Get_USB_Status>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3718      	adds	r7, #24
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b086      	sub	sp, #24
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	607a      	str	r2, [r7, #4]
 800f7d6:	603b      	str	r3, [r7, #0]
 800f7d8:	460b      	mov	r3, r1
 800f7da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7ea:	7af9      	ldrb	r1, [r7, #11]
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	f7f5 fccc 	bl	800518c <HAL_PCD_EP_Receive>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 f86e 	bl	800f8dc <USBD_Get_USB_Status>
 800f800:	4603      	mov	r3, r0
 800f802:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f804:	7dbb      	ldrb	r3, [r7, #22]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	460b      	mov	r3, r1
 800f818:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f820:	78fa      	ldrb	r2, [r7, #3]
 800f822:	4611      	mov	r1, r2
 800f824:	4618      	mov	r0, r3
 800f826:	f7f5 fcfc 	bl	8005222 <HAL_PCD_EP_GetRxCount>
 800f82a:	4603      	mov	r3, r0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f840:	78fb      	ldrb	r3, [r7, #3]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d002      	beq.n	800f84c <HAL_PCDEx_LPM_Callback+0x18>
 800f846:	2b01      	cmp	r3, #1
 800f848:	d01f      	beq.n	800f88a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f84a:	e03b      	b.n	800f8c4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a1b      	ldr	r3, [r3, #32]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d007      	beq.n	800f864 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f854:	f000 f83c 	bl	800f8d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f858:	4b1c      	ldr	r3, [pc, #112]	; (800f8cc <HAL_PCDEx_LPM_Callback+0x98>)
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	4a1b      	ldr	r2, [pc, #108]	; (800f8cc <HAL_PCDEx_LPM_Callback+0x98>)
 800f85e:	f023 0306 	bic.w	r3, r3, #6
 800f862:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	6812      	ldr	r2, [r2, #0]
 800f872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f876:	f023 0301 	bic.w	r3, r3, #1
 800f87a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f882:	4618      	mov	r0, r3
 800f884:	f7fb fe83 	bl	800b58e <USBD_LL_Resume>
    break;
 800f888:	e01c      	b.n	800f8c4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	6812      	ldr	r2, [r2, #0]
 800f898:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f89c:	f043 0301 	orr.w	r3, r3, #1
 800f8a0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fb fe5a 	bl	800b562 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d005      	beq.n	800f8c2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8b6:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <HAL_PCDEx_LPM_Callback+0x98>)
 800f8b8:	691b      	ldr	r3, [r3, #16]
 800f8ba:	4a04      	ldr	r2, [pc, #16]	; (800f8cc <HAL_PCDEx_LPM_Callback+0x98>)
 800f8bc:	f043 0306 	orr.w	r3, r3, #6
 800f8c0:	6113      	str	r3, [r2, #16]
    break;
 800f8c2:	bf00      	nop
}
 800f8c4:	bf00      	nop
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	e000ed00 	.word	0xe000ed00

0800f8d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f8d4:	f7f2 f9ce 	bl	8001c74 <SystemClock_Config>
}
 800f8d8:	bf00      	nop
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b085      	sub	sp, #20
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f8ea:	79fb      	ldrb	r3, [r7, #7]
 800f8ec:	2b03      	cmp	r3, #3
 800f8ee:	d817      	bhi.n	800f920 <USBD_Get_USB_Status+0x44>
 800f8f0:	a201      	add	r2, pc, #4	; (adr r2, 800f8f8 <USBD_Get_USB_Status+0x1c>)
 800f8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f6:	bf00      	nop
 800f8f8:	0800f909 	.word	0x0800f909
 800f8fc:	0800f90f 	.word	0x0800f90f
 800f900:	0800f915 	.word	0x0800f915
 800f904:	0800f91b 	.word	0x0800f91b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f908:	2300      	movs	r3, #0
 800f90a:	73fb      	strb	r3, [r7, #15]
    break;
 800f90c:	e00b      	b.n	800f926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f90e:	2303      	movs	r3, #3
 800f910:	73fb      	strb	r3, [r7, #15]
    break;
 800f912:	e008      	b.n	800f926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f914:	2301      	movs	r3, #1
 800f916:	73fb      	strb	r3, [r7, #15]
    break;
 800f918:	e005      	b.n	800f926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f91a:	2303      	movs	r3, #3
 800f91c:	73fb      	strb	r3, [r7, #15]
    break;
 800f91e:	e002      	b.n	800f926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f920:	2303      	movs	r3, #3
 800f922:	73fb      	strb	r3, [r7, #15]
    break;
 800f924:	bf00      	nop
  }
  return usb_status;
 800f926:	7bfb      	ldrb	r3, [r7, #15]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3714      	adds	r7, #20
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <malloc>:
 800f934:	4b02      	ldr	r3, [pc, #8]	; (800f940 <malloc+0xc>)
 800f936:	4601      	mov	r1, r0
 800f938:	6818      	ldr	r0, [r3, #0]
 800f93a:	f000 b82b 	b.w	800f994 <_malloc_r>
 800f93e:	bf00      	nop
 800f940:	20000174 	.word	0x20000174

0800f944 <free>:
 800f944:	4b02      	ldr	r3, [pc, #8]	; (800f950 <free+0xc>)
 800f946:	4601      	mov	r1, r0
 800f948:	6818      	ldr	r0, [r3, #0]
 800f94a:	f000 b937 	b.w	800fbbc <_free_r>
 800f94e:	bf00      	nop
 800f950:	20000174 	.word	0x20000174

0800f954 <sbrk_aligned>:
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	4e0e      	ldr	r6, [pc, #56]	; (800f990 <sbrk_aligned+0x3c>)
 800f958:	460c      	mov	r4, r1
 800f95a:	6831      	ldr	r1, [r6, #0]
 800f95c:	4605      	mov	r5, r0
 800f95e:	b911      	cbnz	r1, 800f966 <sbrk_aligned+0x12>
 800f960:	f000 f8f0 	bl	800fb44 <_sbrk_r>
 800f964:	6030      	str	r0, [r6, #0]
 800f966:	4621      	mov	r1, r4
 800f968:	4628      	mov	r0, r5
 800f96a:	f000 f8eb 	bl	800fb44 <_sbrk_r>
 800f96e:	1c43      	adds	r3, r0, #1
 800f970:	d00a      	beq.n	800f988 <sbrk_aligned+0x34>
 800f972:	1cc4      	adds	r4, r0, #3
 800f974:	f024 0403 	bic.w	r4, r4, #3
 800f978:	42a0      	cmp	r0, r4
 800f97a:	d007      	beq.n	800f98c <sbrk_aligned+0x38>
 800f97c:	1a21      	subs	r1, r4, r0
 800f97e:	4628      	mov	r0, r5
 800f980:	f000 f8e0 	bl	800fb44 <_sbrk_r>
 800f984:	3001      	adds	r0, #1
 800f986:	d101      	bne.n	800f98c <sbrk_aligned+0x38>
 800f988:	f04f 34ff 	mov.w	r4, #4294967295
 800f98c:	4620      	mov	r0, r4
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	20002248 	.word	0x20002248

0800f994 <_malloc_r>:
 800f994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f998:	1ccd      	adds	r5, r1, #3
 800f99a:	f025 0503 	bic.w	r5, r5, #3
 800f99e:	3508      	adds	r5, #8
 800f9a0:	2d0c      	cmp	r5, #12
 800f9a2:	bf38      	it	cc
 800f9a4:	250c      	movcc	r5, #12
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	db01      	blt.n	800f9b0 <_malloc_r+0x1c>
 800f9ac:	42a9      	cmp	r1, r5
 800f9ae:	d905      	bls.n	800f9bc <_malloc_r+0x28>
 800f9b0:	230c      	movs	r3, #12
 800f9b2:	603b      	str	r3, [r7, #0]
 800f9b4:	2600      	movs	r6, #0
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fa90 <_malloc_r+0xfc>
 800f9c0:	f000 f868 	bl	800fa94 <__malloc_lock>
 800f9c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f9c8:	461c      	mov	r4, r3
 800f9ca:	bb5c      	cbnz	r4, 800fa24 <_malloc_r+0x90>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	f7ff ffc0 	bl	800f954 <sbrk_aligned>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	d155      	bne.n	800fa86 <_malloc_r+0xf2>
 800f9da:	f8d8 4000 	ldr.w	r4, [r8]
 800f9de:	4626      	mov	r6, r4
 800f9e0:	2e00      	cmp	r6, #0
 800f9e2:	d145      	bne.n	800fa70 <_malloc_r+0xdc>
 800f9e4:	2c00      	cmp	r4, #0
 800f9e6:	d048      	beq.n	800fa7a <_malloc_r+0xe6>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	4638      	mov	r0, r7
 800f9ee:	eb04 0903 	add.w	r9, r4, r3
 800f9f2:	f000 f8a7 	bl	800fb44 <_sbrk_r>
 800f9f6:	4581      	cmp	r9, r0
 800f9f8:	d13f      	bne.n	800fa7a <_malloc_r+0xe6>
 800f9fa:	6821      	ldr	r1, [r4, #0]
 800f9fc:	1a6d      	subs	r5, r5, r1
 800f9fe:	4629      	mov	r1, r5
 800fa00:	4638      	mov	r0, r7
 800fa02:	f7ff ffa7 	bl	800f954 <sbrk_aligned>
 800fa06:	3001      	adds	r0, #1
 800fa08:	d037      	beq.n	800fa7a <_malloc_r+0xe6>
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	442b      	add	r3, r5
 800fa0e:	6023      	str	r3, [r4, #0]
 800fa10:	f8d8 3000 	ldr.w	r3, [r8]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d038      	beq.n	800fa8a <_malloc_r+0xf6>
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	42a2      	cmp	r2, r4
 800fa1c:	d12b      	bne.n	800fa76 <_malloc_r+0xe2>
 800fa1e:	2200      	movs	r2, #0
 800fa20:	605a      	str	r2, [r3, #4]
 800fa22:	e00f      	b.n	800fa44 <_malloc_r+0xb0>
 800fa24:	6822      	ldr	r2, [r4, #0]
 800fa26:	1b52      	subs	r2, r2, r5
 800fa28:	d41f      	bmi.n	800fa6a <_malloc_r+0xd6>
 800fa2a:	2a0b      	cmp	r2, #11
 800fa2c:	d917      	bls.n	800fa5e <_malloc_r+0xca>
 800fa2e:	1961      	adds	r1, r4, r5
 800fa30:	42a3      	cmp	r3, r4
 800fa32:	6025      	str	r5, [r4, #0]
 800fa34:	bf18      	it	ne
 800fa36:	6059      	strne	r1, [r3, #4]
 800fa38:	6863      	ldr	r3, [r4, #4]
 800fa3a:	bf08      	it	eq
 800fa3c:	f8c8 1000 	streq.w	r1, [r8]
 800fa40:	5162      	str	r2, [r4, r5]
 800fa42:	604b      	str	r3, [r1, #4]
 800fa44:	4638      	mov	r0, r7
 800fa46:	f104 060b 	add.w	r6, r4, #11
 800fa4a:	f000 f829 	bl	800faa0 <__malloc_unlock>
 800fa4e:	f026 0607 	bic.w	r6, r6, #7
 800fa52:	1d23      	adds	r3, r4, #4
 800fa54:	1af2      	subs	r2, r6, r3
 800fa56:	d0ae      	beq.n	800f9b6 <_malloc_r+0x22>
 800fa58:	1b9b      	subs	r3, r3, r6
 800fa5a:	50a3      	str	r3, [r4, r2]
 800fa5c:	e7ab      	b.n	800f9b6 <_malloc_r+0x22>
 800fa5e:	42a3      	cmp	r3, r4
 800fa60:	6862      	ldr	r2, [r4, #4]
 800fa62:	d1dd      	bne.n	800fa20 <_malloc_r+0x8c>
 800fa64:	f8c8 2000 	str.w	r2, [r8]
 800fa68:	e7ec      	b.n	800fa44 <_malloc_r+0xb0>
 800fa6a:	4623      	mov	r3, r4
 800fa6c:	6864      	ldr	r4, [r4, #4]
 800fa6e:	e7ac      	b.n	800f9ca <_malloc_r+0x36>
 800fa70:	4634      	mov	r4, r6
 800fa72:	6876      	ldr	r6, [r6, #4]
 800fa74:	e7b4      	b.n	800f9e0 <_malloc_r+0x4c>
 800fa76:	4613      	mov	r3, r2
 800fa78:	e7cc      	b.n	800fa14 <_malloc_r+0x80>
 800fa7a:	230c      	movs	r3, #12
 800fa7c:	603b      	str	r3, [r7, #0]
 800fa7e:	4638      	mov	r0, r7
 800fa80:	f000 f80e 	bl	800faa0 <__malloc_unlock>
 800fa84:	e797      	b.n	800f9b6 <_malloc_r+0x22>
 800fa86:	6025      	str	r5, [r4, #0]
 800fa88:	e7dc      	b.n	800fa44 <_malloc_r+0xb0>
 800fa8a:	605b      	str	r3, [r3, #4]
 800fa8c:	deff      	udf	#255	; 0xff
 800fa8e:	bf00      	nop
 800fa90:	20002244 	.word	0x20002244

0800fa94 <__malloc_lock>:
 800fa94:	4801      	ldr	r0, [pc, #4]	; (800fa9c <__malloc_lock+0x8>)
 800fa96:	f000 b88f 	b.w	800fbb8 <__retarget_lock_acquire_recursive>
 800fa9a:	bf00      	nop
 800fa9c:	20002388 	.word	0x20002388

0800faa0 <__malloc_unlock>:
 800faa0:	4801      	ldr	r0, [pc, #4]	; (800faa8 <__malloc_unlock+0x8>)
 800faa2:	f000 b88a 	b.w	800fbba <__retarget_lock_release_recursive>
 800faa6:	bf00      	nop
 800faa8:	20002388 	.word	0x20002388

0800faac <toupper>:
 800faac:	4b03      	ldr	r3, [pc, #12]	; (800fabc <toupper+0x10>)
 800faae:	5c1b      	ldrb	r3, [r3, r0]
 800fab0:	f003 0303 	and.w	r3, r3, #3
 800fab4:	2b02      	cmp	r3, #2
 800fab6:	bf08      	it	eq
 800fab8:	3820      	subeq	r0, #32
 800faba:	4770      	bx	lr
 800fabc:	0801083d 	.word	0x0801083d

0800fac0 <_vsniprintf_r>:
 800fac0:	b530      	push	{r4, r5, lr}
 800fac2:	4614      	mov	r4, r2
 800fac4:	2c00      	cmp	r4, #0
 800fac6:	b09b      	sub	sp, #108	; 0x6c
 800fac8:	4605      	mov	r5, r0
 800faca:	461a      	mov	r2, r3
 800facc:	da05      	bge.n	800fada <_vsniprintf_r+0x1a>
 800face:	238b      	movs	r3, #139	; 0x8b
 800fad0:	6003      	str	r3, [r0, #0]
 800fad2:	f04f 30ff 	mov.w	r0, #4294967295
 800fad6:	b01b      	add	sp, #108	; 0x6c
 800fad8:	bd30      	pop	{r4, r5, pc}
 800fada:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fade:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fae2:	bf14      	ite	ne
 800fae4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fae8:	4623      	moveq	r3, r4
 800faea:	9302      	str	r3, [sp, #8]
 800faec:	9305      	str	r3, [sp, #20]
 800faee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800faf2:	9100      	str	r1, [sp, #0]
 800faf4:	9104      	str	r1, [sp, #16]
 800faf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fafa:	4669      	mov	r1, sp
 800fafc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fafe:	f000 f903 	bl	800fd08 <_svfiprintf_r>
 800fb02:	1c43      	adds	r3, r0, #1
 800fb04:	bfbc      	itt	lt
 800fb06:	238b      	movlt	r3, #139	; 0x8b
 800fb08:	602b      	strlt	r3, [r5, #0]
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	d0e3      	beq.n	800fad6 <_vsniprintf_r+0x16>
 800fb0e:	9b00      	ldr	r3, [sp, #0]
 800fb10:	2200      	movs	r2, #0
 800fb12:	701a      	strb	r2, [r3, #0]
 800fb14:	e7df      	b.n	800fad6 <_vsniprintf_r+0x16>
	...

0800fb18 <vsniprintf>:
 800fb18:	b507      	push	{r0, r1, r2, lr}
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	460a      	mov	r2, r1
 800fb20:	4601      	mov	r1, r0
 800fb22:	4803      	ldr	r0, [pc, #12]	; (800fb30 <vsniprintf+0x18>)
 800fb24:	6800      	ldr	r0, [r0, #0]
 800fb26:	f7ff ffcb 	bl	800fac0 <_vsniprintf_r>
 800fb2a:	b003      	add	sp, #12
 800fb2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb30:	20000174 	.word	0x20000174

0800fb34 <memset>:
 800fb34:	4402      	add	r2, r0
 800fb36:	4603      	mov	r3, r0
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d100      	bne.n	800fb3e <memset+0xa>
 800fb3c:	4770      	bx	lr
 800fb3e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb42:	e7f9      	b.n	800fb38 <memset+0x4>

0800fb44 <_sbrk_r>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	4d06      	ldr	r5, [pc, #24]	; (800fb60 <_sbrk_r+0x1c>)
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	4608      	mov	r0, r1
 800fb4e:	602b      	str	r3, [r5, #0]
 800fb50:	f7f3 f84e 	bl	8002bf0 <_sbrk>
 800fb54:	1c43      	adds	r3, r0, #1
 800fb56:	d102      	bne.n	800fb5e <_sbrk_r+0x1a>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	b103      	cbz	r3, 800fb5e <_sbrk_r+0x1a>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	20002384 	.word	0x20002384

0800fb64 <__errno>:
 800fb64:	4b01      	ldr	r3, [pc, #4]	; (800fb6c <__errno+0x8>)
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	20000174 	.word	0x20000174

0800fb70 <__libc_init_array>:
 800fb70:	b570      	push	{r4, r5, r6, lr}
 800fb72:	4d0d      	ldr	r5, [pc, #52]	; (800fba8 <__libc_init_array+0x38>)
 800fb74:	4c0d      	ldr	r4, [pc, #52]	; (800fbac <__libc_init_array+0x3c>)
 800fb76:	1b64      	subs	r4, r4, r5
 800fb78:	10a4      	asrs	r4, r4, #2
 800fb7a:	2600      	movs	r6, #0
 800fb7c:	42a6      	cmp	r6, r4
 800fb7e:	d109      	bne.n	800fb94 <__libc_init_array+0x24>
 800fb80:	4d0b      	ldr	r5, [pc, #44]	; (800fbb0 <__libc_init_array+0x40>)
 800fb82:	4c0c      	ldr	r4, [pc, #48]	; (800fbb4 <__libc_init_array+0x44>)
 800fb84:	f000 fbae 	bl	80102e4 <_init>
 800fb88:	1b64      	subs	r4, r4, r5
 800fb8a:	10a4      	asrs	r4, r4, #2
 800fb8c:	2600      	movs	r6, #0
 800fb8e:	42a6      	cmp	r6, r4
 800fb90:	d105      	bne.n	800fb9e <__libc_init_array+0x2e>
 800fb92:	bd70      	pop	{r4, r5, r6, pc}
 800fb94:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb98:	4798      	blx	r3
 800fb9a:	3601      	adds	r6, #1
 800fb9c:	e7ee      	b.n	800fb7c <__libc_init_array+0xc>
 800fb9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba2:	4798      	blx	r3
 800fba4:	3601      	adds	r6, #1
 800fba6:	e7f2      	b.n	800fb8e <__libc_init_array+0x1e>
 800fba8:	08010978 	.word	0x08010978
 800fbac:	08010978 	.word	0x08010978
 800fbb0:	08010978 	.word	0x08010978
 800fbb4:	0801097c 	.word	0x0801097c

0800fbb8 <__retarget_lock_acquire_recursive>:
 800fbb8:	4770      	bx	lr

0800fbba <__retarget_lock_release_recursive>:
 800fbba:	4770      	bx	lr

0800fbbc <_free_r>:
 800fbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbbe:	2900      	cmp	r1, #0
 800fbc0:	d044      	beq.n	800fc4c <_free_r+0x90>
 800fbc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc6:	9001      	str	r0, [sp, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f1a1 0404 	sub.w	r4, r1, #4
 800fbce:	bfb8      	it	lt
 800fbd0:	18e4      	addlt	r4, r4, r3
 800fbd2:	f7ff ff5f 	bl	800fa94 <__malloc_lock>
 800fbd6:	4a1e      	ldr	r2, [pc, #120]	; (800fc50 <_free_r+0x94>)
 800fbd8:	9801      	ldr	r0, [sp, #4]
 800fbda:	6813      	ldr	r3, [r2, #0]
 800fbdc:	b933      	cbnz	r3, 800fbec <_free_r+0x30>
 800fbde:	6063      	str	r3, [r4, #4]
 800fbe0:	6014      	str	r4, [r2, #0]
 800fbe2:	b003      	add	sp, #12
 800fbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe8:	f7ff bf5a 	b.w	800faa0 <__malloc_unlock>
 800fbec:	42a3      	cmp	r3, r4
 800fbee:	d908      	bls.n	800fc02 <_free_r+0x46>
 800fbf0:	6825      	ldr	r5, [r4, #0]
 800fbf2:	1961      	adds	r1, r4, r5
 800fbf4:	428b      	cmp	r3, r1
 800fbf6:	bf01      	itttt	eq
 800fbf8:	6819      	ldreq	r1, [r3, #0]
 800fbfa:	685b      	ldreq	r3, [r3, #4]
 800fbfc:	1949      	addeq	r1, r1, r5
 800fbfe:	6021      	streq	r1, [r4, #0]
 800fc00:	e7ed      	b.n	800fbde <_free_r+0x22>
 800fc02:	461a      	mov	r2, r3
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	b10b      	cbz	r3, 800fc0c <_free_r+0x50>
 800fc08:	42a3      	cmp	r3, r4
 800fc0a:	d9fa      	bls.n	800fc02 <_free_r+0x46>
 800fc0c:	6811      	ldr	r1, [r2, #0]
 800fc0e:	1855      	adds	r5, r2, r1
 800fc10:	42a5      	cmp	r5, r4
 800fc12:	d10b      	bne.n	800fc2c <_free_r+0x70>
 800fc14:	6824      	ldr	r4, [r4, #0]
 800fc16:	4421      	add	r1, r4
 800fc18:	1854      	adds	r4, r2, r1
 800fc1a:	42a3      	cmp	r3, r4
 800fc1c:	6011      	str	r1, [r2, #0]
 800fc1e:	d1e0      	bne.n	800fbe2 <_free_r+0x26>
 800fc20:	681c      	ldr	r4, [r3, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	6053      	str	r3, [r2, #4]
 800fc26:	440c      	add	r4, r1
 800fc28:	6014      	str	r4, [r2, #0]
 800fc2a:	e7da      	b.n	800fbe2 <_free_r+0x26>
 800fc2c:	d902      	bls.n	800fc34 <_free_r+0x78>
 800fc2e:	230c      	movs	r3, #12
 800fc30:	6003      	str	r3, [r0, #0]
 800fc32:	e7d6      	b.n	800fbe2 <_free_r+0x26>
 800fc34:	6825      	ldr	r5, [r4, #0]
 800fc36:	1961      	adds	r1, r4, r5
 800fc38:	428b      	cmp	r3, r1
 800fc3a:	bf04      	itt	eq
 800fc3c:	6819      	ldreq	r1, [r3, #0]
 800fc3e:	685b      	ldreq	r3, [r3, #4]
 800fc40:	6063      	str	r3, [r4, #4]
 800fc42:	bf04      	itt	eq
 800fc44:	1949      	addeq	r1, r1, r5
 800fc46:	6021      	streq	r1, [r4, #0]
 800fc48:	6054      	str	r4, [r2, #4]
 800fc4a:	e7ca      	b.n	800fbe2 <_free_r+0x26>
 800fc4c:	b003      	add	sp, #12
 800fc4e:	bd30      	pop	{r4, r5, pc}
 800fc50:	20002244 	.word	0x20002244

0800fc54 <__ssputs_r>:
 800fc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc58:	688e      	ldr	r6, [r1, #8]
 800fc5a:	461f      	mov	r7, r3
 800fc5c:	42be      	cmp	r6, r7
 800fc5e:	680b      	ldr	r3, [r1, #0]
 800fc60:	4682      	mov	sl, r0
 800fc62:	460c      	mov	r4, r1
 800fc64:	4690      	mov	r8, r2
 800fc66:	d82c      	bhi.n	800fcc2 <__ssputs_r+0x6e>
 800fc68:	898a      	ldrh	r2, [r1, #12]
 800fc6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc6e:	d026      	beq.n	800fcbe <__ssputs_r+0x6a>
 800fc70:	6965      	ldr	r5, [r4, #20]
 800fc72:	6909      	ldr	r1, [r1, #16]
 800fc74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc78:	eba3 0901 	sub.w	r9, r3, r1
 800fc7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc80:	1c7b      	adds	r3, r7, #1
 800fc82:	444b      	add	r3, r9
 800fc84:	106d      	asrs	r5, r5, #1
 800fc86:	429d      	cmp	r5, r3
 800fc88:	bf38      	it	cc
 800fc8a:	461d      	movcc	r5, r3
 800fc8c:	0553      	lsls	r3, r2, #21
 800fc8e:	d527      	bpl.n	800fce0 <__ssputs_r+0x8c>
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7ff fe7f 	bl	800f994 <_malloc_r>
 800fc96:	4606      	mov	r6, r0
 800fc98:	b360      	cbz	r0, 800fcf4 <__ssputs_r+0xa0>
 800fc9a:	6921      	ldr	r1, [r4, #16]
 800fc9c:	464a      	mov	r2, r9
 800fc9e:	f000 fadb 	bl	8010258 <memcpy>
 800fca2:	89a3      	ldrh	r3, [r4, #12]
 800fca4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcac:	81a3      	strh	r3, [r4, #12]
 800fcae:	6126      	str	r6, [r4, #16]
 800fcb0:	6165      	str	r5, [r4, #20]
 800fcb2:	444e      	add	r6, r9
 800fcb4:	eba5 0509 	sub.w	r5, r5, r9
 800fcb8:	6026      	str	r6, [r4, #0]
 800fcba:	60a5      	str	r5, [r4, #8]
 800fcbc:	463e      	mov	r6, r7
 800fcbe:	42be      	cmp	r6, r7
 800fcc0:	d900      	bls.n	800fcc4 <__ssputs_r+0x70>
 800fcc2:	463e      	mov	r6, r7
 800fcc4:	6820      	ldr	r0, [r4, #0]
 800fcc6:	4632      	mov	r2, r6
 800fcc8:	4641      	mov	r1, r8
 800fcca:	f000 faab 	bl	8010224 <memmove>
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	1b9b      	subs	r3, r3, r6
 800fcd2:	60a3      	str	r3, [r4, #8]
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	4433      	add	r3, r6
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce0:	462a      	mov	r2, r5
 800fce2:	f000 fac7 	bl	8010274 <_realloc_r>
 800fce6:	4606      	mov	r6, r0
 800fce8:	2800      	cmp	r0, #0
 800fcea:	d1e0      	bne.n	800fcae <__ssputs_r+0x5a>
 800fcec:	6921      	ldr	r1, [r4, #16]
 800fcee:	4650      	mov	r0, sl
 800fcf0:	f7ff ff64 	bl	800fbbc <_free_r>
 800fcf4:	230c      	movs	r3, #12
 800fcf6:	f8ca 3000 	str.w	r3, [sl]
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd00:	81a3      	strh	r3, [r4, #12]
 800fd02:	f04f 30ff 	mov.w	r0, #4294967295
 800fd06:	e7e9      	b.n	800fcdc <__ssputs_r+0x88>

0800fd08 <_svfiprintf_r>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	4698      	mov	r8, r3
 800fd0e:	898b      	ldrh	r3, [r1, #12]
 800fd10:	061b      	lsls	r3, r3, #24
 800fd12:	b09d      	sub	sp, #116	; 0x74
 800fd14:	4607      	mov	r7, r0
 800fd16:	460d      	mov	r5, r1
 800fd18:	4614      	mov	r4, r2
 800fd1a:	d50e      	bpl.n	800fd3a <_svfiprintf_r+0x32>
 800fd1c:	690b      	ldr	r3, [r1, #16]
 800fd1e:	b963      	cbnz	r3, 800fd3a <_svfiprintf_r+0x32>
 800fd20:	2140      	movs	r1, #64	; 0x40
 800fd22:	f7ff fe37 	bl	800f994 <_malloc_r>
 800fd26:	6028      	str	r0, [r5, #0]
 800fd28:	6128      	str	r0, [r5, #16]
 800fd2a:	b920      	cbnz	r0, 800fd36 <_svfiprintf_r+0x2e>
 800fd2c:	230c      	movs	r3, #12
 800fd2e:	603b      	str	r3, [r7, #0]
 800fd30:	f04f 30ff 	mov.w	r0, #4294967295
 800fd34:	e0d0      	b.n	800fed8 <_svfiprintf_r+0x1d0>
 800fd36:	2340      	movs	r3, #64	; 0x40
 800fd38:	616b      	str	r3, [r5, #20]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd3e:	2320      	movs	r3, #32
 800fd40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd48:	2330      	movs	r3, #48	; 0x30
 800fd4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fef0 <_svfiprintf_r+0x1e8>
 800fd4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd52:	f04f 0901 	mov.w	r9, #1
 800fd56:	4623      	mov	r3, r4
 800fd58:	469a      	mov	sl, r3
 800fd5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd5e:	b10a      	cbz	r2, 800fd64 <_svfiprintf_r+0x5c>
 800fd60:	2a25      	cmp	r2, #37	; 0x25
 800fd62:	d1f9      	bne.n	800fd58 <_svfiprintf_r+0x50>
 800fd64:	ebba 0b04 	subs.w	fp, sl, r4
 800fd68:	d00b      	beq.n	800fd82 <_svfiprintf_r+0x7a>
 800fd6a:	465b      	mov	r3, fp
 800fd6c:	4622      	mov	r2, r4
 800fd6e:	4629      	mov	r1, r5
 800fd70:	4638      	mov	r0, r7
 800fd72:	f7ff ff6f 	bl	800fc54 <__ssputs_r>
 800fd76:	3001      	adds	r0, #1
 800fd78:	f000 80a9 	beq.w	800fece <_svfiprintf_r+0x1c6>
 800fd7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd7e:	445a      	add	r2, fp
 800fd80:	9209      	str	r2, [sp, #36]	; 0x24
 800fd82:	f89a 3000 	ldrb.w	r3, [sl]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f000 80a1 	beq.w	800fece <_svfiprintf_r+0x1c6>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd96:	f10a 0a01 	add.w	sl, sl, #1
 800fd9a:	9304      	str	r3, [sp, #16]
 800fd9c:	9307      	str	r3, [sp, #28]
 800fd9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fda2:	931a      	str	r3, [sp, #104]	; 0x68
 800fda4:	4654      	mov	r4, sl
 800fda6:	2205      	movs	r2, #5
 800fda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdac:	4850      	ldr	r0, [pc, #320]	; (800fef0 <_svfiprintf_r+0x1e8>)
 800fdae:	f7f0 fa3f 	bl	8000230 <memchr>
 800fdb2:	9a04      	ldr	r2, [sp, #16]
 800fdb4:	b9d8      	cbnz	r0, 800fdee <_svfiprintf_r+0xe6>
 800fdb6:	06d0      	lsls	r0, r2, #27
 800fdb8:	bf44      	itt	mi
 800fdba:	2320      	movmi	r3, #32
 800fdbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdc0:	0711      	lsls	r1, r2, #28
 800fdc2:	bf44      	itt	mi
 800fdc4:	232b      	movmi	r3, #43	; 0x2b
 800fdc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdca:	f89a 3000 	ldrb.w	r3, [sl]
 800fdce:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd0:	d015      	beq.n	800fdfe <_svfiprintf_r+0xf6>
 800fdd2:	9a07      	ldr	r2, [sp, #28]
 800fdd4:	4654      	mov	r4, sl
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	f04f 0c0a 	mov.w	ip, #10
 800fddc:	4621      	mov	r1, r4
 800fdde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fde2:	3b30      	subs	r3, #48	; 0x30
 800fde4:	2b09      	cmp	r3, #9
 800fde6:	d94d      	bls.n	800fe84 <_svfiprintf_r+0x17c>
 800fde8:	b1b0      	cbz	r0, 800fe18 <_svfiprintf_r+0x110>
 800fdea:	9207      	str	r2, [sp, #28]
 800fdec:	e014      	b.n	800fe18 <_svfiprintf_r+0x110>
 800fdee:	eba0 0308 	sub.w	r3, r0, r8
 800fdf2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	46a2      	mov	sl, r4
 800fdfc:	e7d2      	b.n	800fda4 <_svfiprintf_r+0x9c>
 800fdfe:	9b03      	ldr	r3, [sp, #12]
 800fe00:	1d19      	adds	r1, r3, #4
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	9103      	str	r1, [sp, #12]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	bfbb      	ittet	lt
 800fe0a:	425b      	neglt	r3, r3
 800fe0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe10:	9307      	strge	r3, [sp, #28]
 800fe12:	9307      	strlt	r3, [sp, #28]
 800fe14:	bfb8      	it	lt
 800fe16:	9204      	strlt	r2, [sp, #16]
 800fe18:	7823      	ldrb	r3, [r4, #0]
 800fe1a:	2b2e      	cmp	r3, #46	; 0x2e
 800fe1c:	d10c      	bne.n	800fe38 <_svfiprintf_r+0x130>
 800fe1e:	7863      	ldrb	r3, [r4, #1]
 800fe20:	2b2a      	cmp	r3, #42	; 0x2a
 800fe22:	d134      	bne.n	800fe8e <_svfiprintf_r+0x186>
 800fe24:	9b03      	ldr	r3, [sp, #12]
 800fe26:	1d1a      	adds	r2, r3, #4
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	9203      	str	r2, [sp, #12]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	bfb8      	it	lt
 800fe30:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe34:	3402      	adds	r4, #2
 800fe36:	9305      	str	r3, [sp, #20]
 800fe38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ff00 <_svfiprintf_r+0x1f8>
 800fe3c:	7821      	ldrb	r1, [r4, #0]
 800fe3e:	2203      	movs	r2, #3
 800fe40:	4650      	mov	r0, sl
 800fe42:	f7f0 f9f5 	bl	8000230 <memchr>
 800fe46:	b138      	cbz	r0, 800fe58 <_svfiprintf_r+0x150>
 800fe48:	9b04      	ldr	r3, [sp, #16]
 800fe4a:	eba0 000a 	sub.w	r0, r0, sl
 800fe4e:	2240      	movs	r2, #64	; 0x40
 800fe50:	4082      	lsls	r2, r0
 800fe52:	4313      	orrs	r3, r2
 800fe54:	3401      	adds	r4, #1
 800fe56:	9304      	str	r3, [sp, #16]
 800fe58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5c:	4825      	ldr	r0, [pc, #148]	; (800fef4 <_svfiprintf_r+0x1ec>)
 800fe5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe62:	2206      	movs	r2, #6
 800fe64:	f7f0 f9e4 	bl	8000230 <memchr>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d038      	beq.n	800fede <_svfiprintf_r+0x1d6>
 800fe6c:	4b22      	ldr	r3, [pc, #136]	; (800fef8 <_svfiprintf_r+0x1f0>)
 800fe6e:	bb1b      	cbnz	r3, 800feb8 <_svfiprintf_r+0x1b0>
 800fe70:	9b03      	ldr	r3, [sp, #12]
 800fe72:	3307      	adds	r3, #7
 800fe74:	f023 0307 	bic.w	r3, r3, #7
 800fe78:	3308      	adds	r3, #8
 800fe7a:	9303      	str	r3, [sp, #12]
 800fe7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe7e:	4433      	add	r3, r6
 800fe80:	9309      	str	r3, [sp, #36]	; 0x24
 800fe82:	e768      	b.n	800fd56 <_svfiprintf_r+0x4e>
 800fe84:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe88:	460c      	mov	r4, r1
 800fe8a:	2001      	movs	r0, #1
 800fe8c:	e7a6      	b.n	800fddc <_svfiprintf_r+0xd4>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	3401      	adds	r4, #1
 800fe92:	9305      	str	r3, [sp, #20]
 800fe94:	4619      	mov	r1, r3
 800fe96:	f04f 0c0a 	mov.w	ip, #10
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fea0:	3a30      	subs	r2, #48	; 0x30
 800fea2:	2a09      	cmp	r2, #9
 800fea4:	d903      	bls.n	800feae <_svfiprintf_r+0x1a6>
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d0c6      	beq.n	800fe38 <_svfiprintf_r+0x130>
 800feaa:	9105      	str	r1, [sp, #20]
 800feac:	e7c4      	b.n	800fe38 <_svfiprintf_r+0x130>
 800feae:	fb0c 2101 	mla	r1, ip, r1, r2
 800feb2:	4604      	mov	r4, r0
 800feb4:	2301      	movs	r3, #1
 800feb6:	e7f0      	b.n	800fe9a <_svfiprintf_r+0x192>
 800feb8:	ab03      	add	r3, sp, #12
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	462a      	mov	r2, r5
 800febe:	4b0f      	ldr	r3, [pc, #60]	; (800fefc <_svfiprintf_r+0x1f4>)
 800fec0:	a904      	add	r1, sp, #16
 800fec2:	4638      	mov	r0, r7
 800fec4:	f3af 8000 	nop.w
 800fec8:	1c42      	adds	r2, r0, #1
 800feca:	4606      	mov	r6, r0
 800fecc:	d1d6      	bne.n	800fe7c <_svfiprintf_r+0x174>
 800fece:	89ab      	ldrh	r3, [r5, #12]
 800fed0:	065b      	lsls	r3, r3, #25
 800fed2:	f53f af2d 	bmi.w	800fd30 <_svfiprintf_r+0x28>
 800fed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fed8:	b01d      	add	sp, #116	; 0x74
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fede:	ab03      	add	r3, sp, #12
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	462a      	mov	r2, r5
 800fee4:	4b05      	ldr	r3, [pc, #20]	; (800fefc <_svfiprintf_r+0x1f4>)
 800fee6:	a904      	add	r1, sp, #16
 800fee8:	4638      	mov	r0, r7
 800feea:	f000 f879 	bl	800ffe0 <_printf_i>
 800feee:	e7eb      	b.n	800fec8 <_svfiprintf_r+0x1c0>
 800fef0:	0801093d 	.word	0x0801093d
 800fef4:	08010947 	.word	0x08010947
 800fef8:	00000000 	.word	0x00000000
 800fefc:	0800fc55 	.word	0x0800fc55
 800ff00:	08010943 	.word	0x08010943

0800ff04 <_printf_common>:
 800ff04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	4616      	mov	r6, r2
 800ff0a:	4699      	mov	r9, r3
 800ff0c:	688a      	ldr	r2, [r1, #8]
 800ff0e:	690b      	ldr	r3, [r1, #16]
 800ff10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff14:	4293      	cmp	r3, r2
 800ff16:	bfb8      	it	lt
 800ff18:	4613      	movlt	r3, r2
 800ff1a:	6033      	str	r3, [r6, #0]
 800ff1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff20:	4607      	mov	r7, r0
 800ff22:	460c      	mov	r4, r1
 800ff24:	b10a      	cbz	r2, 800ff2a <_printf_common+0x26>
 800ff26:	3301      	adds	r3, #1
 800ff28:	6033      	str	r3, [r6, #0]
 800ff2a:	6823      	ldr	r3, [r4, #0]
 800ff2c:	0699      	lsls	r1, r3, #26
 800ff2e:	bf42      	ittt	mi
 800ff30:	6833      	ldrmi	r3, [r6, #0]
 800ff32:	3302      	addmi	r3, #2
 800ff34:	6033      	strmi	r3, [r6, #0]
 800ff36:	6825      	ldr	r5, [r4, #0]
 800ff38:	f015 0506 	ands.w	r5, r5, #6
 800ff3c:	d106      	bne.n	800ff4c <_printf_common+0x48>
 800ff3e:	f104 0a19 	add.w	sl, r4, #25
 800ff42:	68e3      	ldr	r3, [r4, #12]
 800ff44:	6832      	ldr	r2, [r6, #0]
 800ff46:	1a9b      	subs	r3, r3, r2
 800ff48:	42ab      	cmp	r3, r5
 800ff4a:	dc26      	bgt.n	800ff9a <_printf_common+0x96>
 800ff4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff50:	1e13      	subs	r3, r2, #0
 800ff52:	6822      	ldr	r2, [r4, #0]
 800ff54:	bf18      	it	ne
 800ff56:	2301      	movne	r3, #1
 800ff58:	0692      	lsls	r2, r2, #26
 800ff5a:	d42b      	bmi.n	800ffb4 <_printf_common+0xb0>
 800ff5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff60:	4649      	mov	r1, r9
 800ff62:	4638      	mov	r0, r7
 800ff64:	47c0      	blx	r8
 800ff66:	3001      	adds	r0, #1
 800ff68:	d01e      	beq.n	800ffa8 <_printf_common+0xa4>
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	6922      	ldr	r2, [r4, #16]
 800ff6e:	f003 0306 	and.w	r3, r3, #6
 800ff72:	2b04      	cmp	r3, #4
 800ff74:	bf02      	ittt	eq
 800ff76:	68e5      	ldreq	r5, [r4, #12]
 800ff78:	6833      	ldreq	r3, [r6, #0]
 800ff7a:	1aed      	subeq	r5, r5, r3
 800ff7c:	68a3      	ldr	r3, [r4, #8]
 800ff7e:	bf0c      	ite	eq
 800ff80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff84:	2500      	movne	r5, #0
 800ff86:	4293      	cmp	r3, r2
 800ff88:	bfc4      	itt	gt
 800ff8a:	1a9b      	subgt	r3, r3, r2
 800ff8c:	18ed      	addgt	r5, r5, r3
 800ff8e:	2600      	movs	r6, #0
 800ff90:	341a      	adds	r4, #26
 800ff92:	42b5      	cmp	r5, r6
 800ff94:	d11a      	bne.n	800ffcc <_printf_common+0xc8>
 800ff96:	2000      	movs	r0, #0
 800ff98:	e008      	b.n	800ffac <_printf_common+0xa8>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	4652      	mov	r2, sl
 800ff9e:	4649      	mov	r1, r9
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	47c0      	blx	r8
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	d103      	bne.n	800ffb0 <_printf_common+0xac>
 800ffa8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb0:	3501      	adds	r5, #1
 800ffb2:	e7c6      	b.n	800ff42 <_printf_common+0x3e>
 800ffb4:	18e1      	adds	r1, r4, r3
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	2030      	movs	r0, #48	; 0x30
 800ffba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffbe:	4422      	add	r2, r4
 800ffc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffc8:	3302      	adds	r3, #2
 800ffca:	e7c7      	b.n	800ff5c <_printf_common+0x58>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	4622      	mov	r2, r4
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	47c0      	blx	r8
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	d0e6      	beq.n	800ffa8 <_printf_common+0xa4>
 800ffda:	3601      	adds	r6, #1
 800ffdc:	e7d9      	b.n	800ff92 <_printf_common+0x8e>
	...

0800ffe0 <_printf_i>:
 800ffe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe4:	7e0f      	ldrb	r7, [r1, #24]
 800ffe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffe8:	2f78      	cmp	r7, #120	; 0x78
 800ffea:	4691      	mov	r9, r2
 800ffec:	4680      	mov	r8, r0
 800ffee:	460c      	mov	r4, r1
 800fff0:	469a      	mov	sl, r3
 800fff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fff6:	d807      	bhi.n	8010008 <_printf_i+0x28>
 800fff8:	2f62      	cmp	r7, #98	; 0x62
 800fffa:	d80a      	bhi.n	8010012 <_printf_i+0x32>
 800fffc:	2f00      	cmp	r7, #0
 800fffe:	f000 80d4 	beq.w	80101aa <_printf_i+0x1ca>
 8010002:	2f58      	cmp	r7, #88	; 0x58
 8010004:	f000 80c0 	beq.w	8010188 <_printf_i+0x1a8>
 8010008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801000c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010010:	e03a      	b.n	8010088 <_printf_i+0xa8>
 8010012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010016:	2b15      	cmp	r3, #21
 8010018:	d8f6      	bhi.n	8010008 <_printf_i+0x28>
 801001a:	a101      	add	r1, pc, #4	; (adr r1, 8010020 <_printf_i+0x40>)
 801001c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010020:	08010079 	.word	0x08010079
 8010024:	0801008d 	.word	0x0801008d
 8010028:	08010009 	.word	0x08010009
 801002c:	08010009 	.word	0x08010009
 8010030:	08010009 	.word	0x08010009
 8010034:	08010009 	.word	0x08010009
 8010038:	0801008d 	.word	0x0801008d
 801003c:	08010009 	.word	0x08010009
 8010040:	08010009 	.word	0x08010009
 8010044:	08010009 	.word	0x08010009
 8010048:	08010009 	.word	0x08010009
 801004c:	08010191 	.word	0x08010191
 8010050:	080100b9 	.word	0x080100b9
 8010054:	0801014b 	.word	0x0801014b
 8010058:	08010009 	.word	0x08010009
 801005c:	08010009 	.word	0x08010009
 8010060:	080101b3 	.word	0x080101b3
 8010064:	08010009 	.word	0x08010009
 8010068:	080100b9 	.word	0x080100b9
 801006c:	08010009 	.word	0x08010009
 8010070:	08010009 	.word	0x08010009
 8010074:	08010153 	.word	0x08010153
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	1d1a      	adds	r2, r3, #4
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	602a      	str	r2, [r5, #0]
 8010080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010088:	2301      	movs	r3, #1
 801008a:	e09f      	b.n	80101cc <_printf_i+0x1ec>
 801008c:	6820      	ldr	r0, [r4, #0]
 801008e:	682b      	ldr	r3, [r5, #0]
 8010090:	0607      	lsls	r7, r0, #24
 8010092:	f103 0104 	add.w	r1, r3, #4
 8010096:	6029      	str	r1, [r5, #0]
 8010098:	d501      	bpl.n	801009e <_printf_i+0xbe>
 801009a:	681e      	ldr	r6, [r3, #0]
 801009c:	e003      	b.n	80100a6 <_printf_i+0xc6>
 801009e:	0646      	lsls	r6, r0, #25
 80100a0:	d5fb      	bpl.n	801009a <_printf_i+0xba>
 80100a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80100a6:	2e00      	cmp	r6, #0
 80100a8:	da03      	bge.n	80100b2 <_printf_i+0xd2>
 80100aa:	232d      	movs	r3, #45	; 0x2d
 80100ac:	4276      	negs	r6, r6
 80100ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100b2:	485a      	ldr	r0, [pc, #360]	; (801021c <_printf_i+0x23c>)
 80100b4:	230a      	movs	r3, #10
 80100b6:	e012      	b.n	80100de <_printf_i+0xfe>
 80100b8:	682b      	ldr	r3, [r5, #0]
 80100ba:	6820      	ldr	r0, [r4, #0]
 80100bc:	1d19      	adds	r1, r3, #4
 80100be:	6029      	str	r1, [r5, #0]
 80100c0:	0605      	lsls	r5, r0, #24
 80100c2:	d501      	bpl.n	80100c8 <_printf_i+0xe8>
 80100c4:	681e      	ldr	r6, [r3, #0]
 80100c6:	e002      	b.n	80100ce <_printf_i+0xee>
 80100c8:	0641      	lsls	r1, r0, #25
 80100ca:	d5fb      	bpl.n	80100c4 <_printf_i+0xe4>
 80100cc:	881e      	ldrh	r6, [r3, #0]
 80100ce:	4853      	ldr	r0, [pc, #332]	; (801021c <_printf_i+0x23c>)
 80100d0:	2f6f      	cmp	r7, #111	; 0x6f
 80100d2:	bf0c      	ite	eq
 80100d4:	2308      	moveq	r3, #8
 80100d6:	230a      	movne	r3, #10
 80100d8:	2100      	movs	r1, #0
 80100da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100de:	6865      	ldr	r5, [r4, #4]
 80100e0:	60a5      	str	r5, [r4, #8]
 80100e2:	2d00      	cmp	r5, #0
 80100e4:	bfa2      	ittt	ge
 80100e6:	6821      	ldrge	r1, [r4, #0]
 80100e8:	f021 0104 	bicge.w	r1, r1, #4
 80100ec:	6021      	strge	r1, [r4, #0]
 80100ee:	b90e      	cbnz	r6, 80100f4 <_printf_i+0x114>
 80100f0:	2d00      	cmp	r5, #0
 80100f2:	d04b      	beq.n	801018c <_printf_i+0x1ac>
 80100f4:	4615      	mov	r5, r2
 80100f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80100fa:	fb03 6711 	mls	r7, r3, r1, r6
 80100fe:	5dc7      	ldrb	r7, [r0, r7]
 8010100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010104:	4637      	mov	r7, r6
 8010106:	42bb      	cmp	r3, r7
 8010108:	460e      	mov	r6, r1
 801010a:	d9f4      	bls.n	80100f6 <_printf_i+0x116>
 801010c:	2b08      	cmp	r3, #8
 801010e:	d10b      	bne.n	8010128 <_printf_i+0x148>
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	07de      	lsls	r6, r3, #31
 8010114:	d508      	bpl.n	8010128 <_printf_i+0x148>
 8010116:	6923      	ldr	r3, [r4, #16]
 8010118:	6861      	ldr	r1, [r4, #4]
 801011a:	4299      	cmp	r1, r3
 801011c:	bfde      	ittt	le
 801011e:	2330      	movle	r3, #48	; 0x30
 8010120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010128:	1b52      	subs	r2, r2, r5
 801012a:	6122      	str	r2, [r4, #16]
 801012c:	f8cd a000 	str.w	sl, [sp]
 8010130:	464b      	mov	r3, r9
 8010132:	aa03      	add	r2, sp, #12
 8010134:	4621      	mov	r1, r4
 8010136:	4640      	mov	r0, r8
 8010138:	f7ff fee4 	bl	800ff04 <_printf_common>
 801013c:	3001      	adds	r0, #1
 801013e:	d14a      	bne.n	80101d6 <_printf_i+0x1f6>
 8010140:	f04f 30ff 	mov.w	r0, #4294967295
 8010144:	b004      	add	sp, #16
 8010146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801014a:	6823      	ldr	r3, [r4, #0]
 801014c:	f043 0320 	orr.w	r3, r3, #32
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	4833      	ldr	r0, [pc, #204]	; (8010220 <_printf_i+0x240>)
 8010154:	2778      	movs	r7, #120	; 0x78
 8010156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	6829      	ldr	r1, [r5, #0]
 801015e:	061f      	lsls	r7, r3, #24
 8010160:	f851 6b04 	ldr.w	r6, [r1], #4
 8010164:	d402      	bmi.n	801016c <_printf_i+0x18c>
 8010166:	065f      	lsls	r7, r3, #25
 8010168:	bf48      	it	mi
 801016a:	b2b6      	uxthmi	r6, r6
 801016c:	07df      	lsls	r7, r3, #31
 801016e:	bf48      	it	mi
 8010170:	f043 0320 	orrmi.w	r3, r3, #32
 8010174:	6029      	str	r1, [r5, #0]
 8010176:	bf48      	it	mi
 8010178:	6023      	strmi	r3, [r4, #0]
 801017a:	b91e      	cbnz	r6, 8010184 <_printf_i+0x1a4>
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	f023 0320 	bic.w	r3, r3, #32
 8010182:	6023      	str	r3, [r4, #0]
 8010184:	2310      	movs	r3, #16
 8010186:	e7a7      	b.n	80100d8 <_printf_i+0xf8>
 8010188:	4824      	ldr	r0, [pc, #144]	; (801021c <_printf_i+0x23c>)
 801018a:	e7e4      	b.n	8010156 <_printf_i+0x176>
 801018c:	4615      	mov	r5, r2
 801018e:	e7bd      	b.n	801010c <_printf_i+0x12c>
 8010190:	682b      	ldr	r3, [r5, #0]
 8010192:	6826      	ldr	r6, [r4, #0]
 8010194:	6961      	ldr	r1, [r4, #20]
 8010196:	1d18      	adds	r0, r3, #4
 8010198:	6028      	str	r0, [r5, #0]
 801019a:	0635      	lsls	r5, r6, #24
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	d501      	bpl.n	80101a4 <_printf_i+0x1c4>
 80101a0:	6019      	str	r1, [r3, #0]
 80101a2:	e002      	b.n	80101aa <_printf_i+0x1ca>
 80101a4:	0670      	lsls	r0, r6, #25
 80101a6:	d5fb      	bpl.n	80101a0 <_printf_i+0x1c0>
 80101a8:	8019      	strh	r1, [r3, #0]
 80101aa:	2300      	movs	r3, #0
 80101ac:	6123      	str	r3, [r4, #16]
 80101ae:	4615      	mov	r5, r2
 80101b0:	e7bc      	b.n	801012c <_printf_i+0x14c>
 80101b2:	682b      	ldr	r3, [r5, #0]
 80101b4:	1d1a      	adds	r2, r3, #4
 80101b6:	602a      	str	r2, [r5, #0]
 80101b8:	681d      	ldr	r5, [r3, #0]
 80101ba:	6862      	ldr	r2, [r4, #4]
 80101bc:	2100      	movs	r1, #0
 80101be:	4628      	mov	r0, r5
 80101c0:	f7f0 f836 	bl	8000230 <memchr>
 80101c4:	b108      	cbz	r0, 80101ca <_printf_i+0x1ea>
 80101c6:	1b40      	subs	r0, r0, r5
 80101c8:	6060      	str	r0, [r4, #4]
 80101ca:	6863      	ldr	r3, [r4, #4]
 80101cc:	6123      	str	r3, [r4, #16]
 80101ce:	2300      	movs	r3, #0
 80101d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101d4:	e7aa      	b.n	801012c <_printf_i+0x14c>
 80101d6:	6923      	ldr	r3, [r4, #16]
 80101d8:	462a      	mov	r2, r5
 80101da:	4649      	mov	r1, r9
 80101dc:	4640      	mov	r0, r8
 80101de:	47d0      	blx	sl
 80101e0:	3001      	adds	r0, #1
 80101e2:	d0ad      	beq.n	8010140 <_printf_i+0x160>
 80101e4:	6823      	ldr	r3, [r4, #0]
 80101e6:	079b      	lsls	r3, r3, #30
 80101e8:	d413      	bmi.n	8010212 <_printf_i+0x232>
 80101ea:	68e0      	ldr	r0, [r4, #12]
 80101ec:	9b03      	ldr	r3, [sp, #12]
 80101ee:	4298      	cmp	r0, r3
 80101f0:	bfb8      	it	lt
 80101f2:	4618      	movlt	r0, r3
 80101f4:	e7a6      	b.n	8010144 <_printf_i+0x164>
 80101f6:	2301      	movs	r3, #1
 80101f8:	4632      	mov	r2, r6
 80101fa:	4649      	mov	r1, r9
 80101fc:	4640      	mov	r0, r8
 80101fe:	47d0      	blx	sl
 8010200:	3001      	adds	r0, #1
 8010202:	d09d      	beq.n	8010140 <_printf_i+0x160>
 8010204:	3501      	adds	r5, #1
 8010206:	68e3      	ldr	r3, [r4, #12]
 8010208:	9903      	ldr	r1, [sp, #12]
 801020a:	1a5b      	subs	r3, r3, r1
 801020c:	42ab      	cmp	r3, r5
 801020e:	dcf2      	bgt.n	80101f6 <_printf_i+0x216>
 8010210:	e7eb      	b.n	80101ea <_printf_i+0x20a>
 8010212:	2500      	movs	r5, #0
 8010214:	f104 0619 	add.w	r6, r4, #25
 8010218:	e7f5      	b.n	8010206 <_printf_i+0x226>
 801021a:	bf00      	nop
 801021c:	0801094e 	.word	0x0801094e
 8010220:	0801095f 	.word	0x0801095f

08010224 <memmove>:
 8010224:	4288      	cmp	r0, r1
 8010226:	b510      	push	{r4, lr}
 8010228:	eb01 0402 	add.w	r4, r1, r2
 801022c:	d902      	bls.n	8010234 <memmove+0x10>
 801022e:	4284      	cmp	r4, r0
 8010230:	4623      	mov	r3, r4
 8010232:	d807      	bhi.n	8010244 <memmove+0x20>
 8010234:	1e43      	subs	r3, r0, #1
 8010236:	42a1      	cmp	r1, r4
 8010238:	d008      	beq.n	801024c <memmove+0x28>
 801023a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801023e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010242:	e7f8      	b.n	8010236 <memmove+0x12>
 8010244:	4402      	add	r2, r0
 8010246:	4601      	mov	r1, r0
 8010248:	428a      	cmp	r2, r1
 801024a:	d100      	bne.n	801024e <memmove+0x2a>
 801024c:	bd10      	pop	{r4, pc}
 801024e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010256:	e7f7      	b.n	8010248 <memmove+0x24>

08010258 <memcpy>:
 8010258:	440a      	add	r2, r1
 801025a:	4291      	cmp	r1, r2
 801025c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010260:	d100      	bne.n	8010264 <memcpy+0xc>
 8010262:	4770      	bx	lr
 8010264:	b510      	push	{r4, lr}
 8010266:	f811 4b01 	ldrb.w	r4, [r1], #1
 801026a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801026e:	4291      	cmp	r1, r2
 8010270:	d1f9      	bne.n	8010266 <memcpy+0xe>
 8010272:	bd10      	pop	{r4, pc}

08010274 <_realloc_r>:
 8010274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010278:	4680      	mov	r8, r0
 801027a:	4614      	mov	r4, r2
 801027c:	460e      	mov	r6, r1
 801027e:	b921      	cbnz	r1, 801028a <_realloc_r+0x16>
 8010280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010284:	4611      	mov	r1, r2
 8010286:	f7ff bb85 	b.w	800f994 <_malloc_r>
 801028a:	b92a      	cbnz	r2, 8010298 <_realloc_r+0x24>
 801028c:	f7ff fc96 	bl	800fbbc <_free_r>
 8010290:	4625      	mov	r5, r4
 8010292:	4628      	mov	r0, r5
 8010294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010298:	f000 f81b 	bl	80102d2 <_malloc_usable_size_r>
 801029c:	4284      	cmp	r4, r0
 801029e:	4607      	mov	r7, r0
 80102a0:	d802      	bhi.n	80102a8 <_realloc_r+0x34>
 80102a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102a6:	d812      	bhi.n	80102ce <_realloc_r+0x5a>
 80102a8:	4621      	mov	r1, r4
 80102aa:	4640      	mov	r0, r8
 80102ac:	f7ff fb72 	bl	800f994 <_malloc_r>
 80102b0:	4605      	mov	r5, r0
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d0ed      	beq.n	8010292 <_realloc_r+0x1e>
 80102b6:	42bc      	cmp	r4, r7
 80102b8:	4622      	mov	r2, r4
 80102ba:	4631      	mov	r1, r6
 80102bc:	bf28      	it	cs
 80102be:	463a      	movcs	r2, r7
 80102c0:	f7ff ffca 	bl	8010258 <memcpy>
 80102c4:	4631      	mov	r1, r6
 80102c6:	4640      	mov	r0, r8
 80102c8:	f7ff fc78 	bl	800fbbc <_free_r>
 80102cc:	e7e1      	b.n	8010292 <_realloc_r+0x1e>
 80102ce:	4635      	mov	r5, r6
 80102d0:	e7df      	b.n	8010292 <_realloc_r+0x1e>

080102d2 <_malloc_usable_size_r>:
 80102d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d6:	1f18      	subs	r0, r3, #4
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bfbc      	itt	lt
 80102dc:	580b      	ldrlt	r3, [r1, r0]
 80102de:	18c0      	addlt	r0, r0, r3
 80102e0:	4770      	bx	lr
	...

080102e4 <_init>:
 80102e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e6:	bf00      	nop
 80102e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ea:	bc08      	pop	{r3}
 80102ec:	469e      	mov	lr, r3
 80102ee:	4770      	bx	lr

080102f0 <_fini>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	bf00      	nop
 80102f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102f6:	bc08      	pop	{r3}
 80102f8:	469e      	mov	lr, r3
 80102fa:	4770      	bx	lr
