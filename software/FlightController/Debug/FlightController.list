
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800f074  0800f074  0001f074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f690  0800f690  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800f690  0800f690  0001f690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f698  0800f698  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f69c  0800f69c  0001f69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800f6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002200  20000178  0800f818  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002378  0800f818  00022378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec9e  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004843  00000000  00000000  0003ee89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  000436d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001342  00000000  00000000  00044fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e70  00000000  00000000  0004631a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000242ea  00000000  00000000  0006e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ed1  00000000  00000000  00092474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d8c  00000000  00000000  00174348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0017b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000178 	.word	0x20000178
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f05c 	.word	0x0800f05c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000017c 	.word	0x2000017c
 800021c:	0800f05c 	.word	0x0800f05c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4603      	mov	r3, r0
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	4613      	mov	r3, r2
 80005dc:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f972 	bl	80008c8 <null_ptr_check>
 80005e4:	4603      	mov	r3, r0
 80005e6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80005e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d11c      	bne.n	800062a <bmp280_get_regs+0x5e>
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d019      	beq.n	800062a <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789b      	ldrb	r3, [r3, #2]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d103      	bne.n	8000606 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000604:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685c      	ldr	r4, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7858      	ldrb	r0, [r3, #1]
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	b29b      	uxth	r3, r3
 8000612:	7bf9      	ldrb	r1, [r7, #15]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	47a0      	blx	r4
 8000618:	4603      	mov	r3, r0
 800061a:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 800061c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d004      	beq.n	800062e <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000624:	23fc      	movs	r3, #252	; 0xfc
 8000626:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000628:	e001      	b.n	800062e <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800062e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000632:	4618      	mov	r0, r3
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd90      	pop	{r4, r7, pc}

0800063a <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b089      	sub	sp, #36	; 0x24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4613      	mov	r3, r2
 8000648:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b04      	cmp	r3, #4
 800064e:	d901      	bls.n	8000654 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000654:	6838      	ldr	r0, [r7, #0]
 8000656:	f000 f937 	bl	80008c8 <null_ptr_check>
 800065a:	4603      	mov	r3, r0
 800065c:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800065e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <bmp280_set_regs+0xc8>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d04a      	beq.n	8000702 <bmp280_set_regs+0xc8>
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d047      	beq.n	8000702 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d041      	beq.n	80006fc <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d114      	bne.n	80006b0 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000686:	2300      	movs	r3, #0
 8000688:	76fb      	strb	r3, [r7, #27]
 800068a:	e00d      	b.n	80006a8 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800068c:	7efb      	ldrb	r3, [r7, #27]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	7efb      	ldrb	r3, [r7, #27]
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	440b      	add	r3, r1
 800069a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80006a2:	7efb      	ldrb	r3, [r7, #27]
 80006a4:	3301      	adds	r3, #1
 80006a6:	76fb      	strb	r3, [r7, #27]
 80006a8:	7efa      	ldrb	r2, [r7, #27]
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d3ed      	bcc.n	800068c <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d90d      	bls.n	80006d2 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f107 0110 	add.w	r1, r7, #16
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f000 f922 	bl	8000908 <interleave_data>
                temp_len = ((len * 2) - 1);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3b01      	subs	r3, #1
 80006ce:	83bb      	strh	r3, [r7, #28]
 80006d0:	e001      	b.n	80006d6 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	689c      	ldr	r4, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	7858      	ldrb	r0, [r3, #1]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	7819      	ldrb	r1, [r3, #0]
 80006e2:	8bbb      	ldrh	r3, [r7, #28]
 80006e4:	f107 0210 	add.w	r2, r7, #16
 80006e8:	47a0      	blx	r4
 80006ea:	4603      	mov	r3, r0
 80006ec:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80006ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d008      	beq.n	8000708 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80006f6:	23fc      	movs	r3, #252	; 0xfc
 80006f8:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006fa:	e005      	b.n	8000708 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80006fc:	23fd      	movs	r3, #253	; 0xfd
 80006fe:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000700:	e002      	b.n	8000708 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000702:	23ff      	movs	r3, #255	; 0xff
 8000704:	77fb      	strb	r3, [r7, #31]
 8000706:	e000      	b.n	800070a <bmp280_set_regs+0xd0>
        if (len != 0)
 8000708:	bf00      	nop
    }

    return rslt;
 800070a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}

08000716 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800071e:	23e0      	movs	r3, #224	; 0xe0
 8000720:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000722:	23b6      	movs	r3, #182	; 0xb6
 8000724:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8ce 	bl	80008c8 <null_ptr_check>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10d      	bne.n	8000754 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000738:	f107 010d 	add.w	r1, r7, #13
 800073c:	f107 000e 	add.w	r0, r7, #14
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	f7ff ff79 	bl	800063a <bmp280_set_regs>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	2002      	movs	r0, #2
 8000752:	4798      	blx	r3
    }

    return rslt;
 8000754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000768:	2305      	movs	r3, #5
 800076a:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f8ab 	bl	80008c8 <null_ptr_check>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d150      	bne.n	8000820 <bmp280_init+0xc0>
    {
        while (try_count)
 800077e:	e02d      	b.n	80007dc <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2201      	movs	r2, #1
 8000786:	20d0      	movs	r0, #208	; 0xd0
 8000788:	f7ff ff20 	bl	80005cc <bmp280_get_regs>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d11a      	bne.n	80007ce <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 800079c:	2b56      	cmp	r3, #86	; 0x56
 800079e:	d007      	beq.n	80007b0 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b57      	cmp	r3, #87	; 0x57
 80007a6:	d003      	beq.n	80007b0 <bmp280_init+0x50>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b58      	cmp	r3, #88	; 0x58
 80007ae:	d10e      	bne.n	80007ce <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ffb0 	bl	8000716 <bmp280_soft_reset>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d110      	bne.n	80007e4 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f8cc 	bl	8000960 <get_calib_param>
 80007c8:	4603      	mov	r3, r0
 80007ca:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007cc:	e00a      	b.n	80007e4 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	200a      	movs	r0, #10
 80007d4:	4798      	blx	r3
            --try_count;
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	3b01      	subs	r3, #1
 80007da:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1ce      	bne.n	8000780 <bmp280_init+0x20>
 80007e2:	e000      	b.n	80007e6 <bmp280_init+0x86>
                break;
 80007e4:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80007ec:	23fe      	movs	r3, #254	; 0xfe
 80007ee:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d113      	bne.n	8000820 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	2300      	movs	r3, #0
 800083c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800083e:	6838      	ldr	r0, [r7, #0]
 8000840:	f000 f842 	bl	80008c8 <null_ptr_check>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8000848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d133      	bne.n	80008b8 <bmp280_get_uncomp_data+0x8c>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d030      	beq.n	80008b8 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8000856:	f107 0108 	add.w	r1, r7, #8
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2206      	movs	r2, #6
 800085e:	20f7      	movs	r0, #247	; 0xf7
 8000860:	f7ff feb4 	bl	80005cc <bmp280_get_regs>
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8000868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d120      	bne.n	80008b2 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 8000870:	7a3b      	ldrb	r3, [r7, #8]
 8000872:	031a      	lsls	r2, r3, #12
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	4313      	orrs	r3, r2
 800087a:	7aba      	ldrb	r2, [r7, #10]
 800087c:	0912      	lsrs	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	031a      	lsls	r2, r3, #12
 800088a:	7b3b      	ldrb	r3, [r7, #12]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	4313      	orrs	r3, r2
 8000890:	7b7a      	ldrb	r2, [r7, #13]
 8000892:	0912      	lsrs	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4610      	mov	r0, r2
 80008a8:	f000 f8f8 	bl	8000a9c <st_check_boundaries>
 80008ac:	4603      	mov	r3, r0
 80008ae:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80008b0:	e004      	b.n	80008bc <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80008b2:	23f3      	movs	r3, #243	; 0xf3
 80008b4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80008b6:	e001      	b.n	80008bc <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80008b8:	23ff      	movs	r3, #255	; 0xff
 80008ba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <null_ptr_check+0x26>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d007      	beq.n	80008ee <null_ptr_check+0x26>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <null_ptr_check+0x26>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 80008ee:	23ff      	movs	r3, #255	; 0xff
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	e001      	b.n	80008f8 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80008f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8000916:	2301      	movs	r3, #1
 8000918:	75fb      	strb	r3, [r7, #23]
 800091a:	e016      	b.n	800094a <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800091c:	7dfb      	ldrb	r3, [r7, #23]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	441a      	add	r2, r3
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	3b01      	subs	r3, #1
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	440b      	add	r3, r1
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	441a      	add	r2, r3
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4619      	mov	r1, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	440b      	add	r3, r1
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	3301      	adds	r3, #1
 8000948:	75fb      	strb	r3, [r7, #23]
 800094a:	7dfa      	ldrb	r2, [r7, #23]
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	429a      	cmp	r2, r3
 8000950:	d3e4      	bcc.n	800091c <interleave_data+0x14>
    }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ffa3 	bl	80008c8 <null_ptr_check>
 8000982:	4603      	mov	r3, r0
 8000984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8000988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800098c:	2b00      	cmp	r3, #0
 800098e:	d17f      	bne.n	8000a90 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2218      	movs	r2, #24
 8000998:	2088      	movs	r0, #136	; 0x88
 800099a:	f7ff fe17 	bl	80005cc <bmp280_get_regs>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80009a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d171      	bne.n	8000a90 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	7b3b      	ldrb	r3, [r7, #12]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80009d2:	7c7b      	ldrb	r3, [r7, #17]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	7c3b      	ldrb	r3, [r7, #16]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	7cbb      	ldrb	r3, [r7, #18]
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 80009f8:	7d7b      	ldrb	r3, [r7, #21]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	7d3b      	ldrb	r3, [r7, #20]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	7dbb      	ldrb	r3, [r7, #22]
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000a1c:	7e7b      	ldrb	r3, [r7, #25]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	7e3b      	ldrb	r3, [r7, #24]
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000a2e:	7efb      	ldrb	r3, [r7, #27]
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	7ebb      	ldrb	r3, [r7, #26]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000a40:	7f7b      	ldrb	r3, [r7, #29]
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	7f3b      	ldrb	r3, [r7, #28]
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7fbb      	ldrb	r3, [r7, #30]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8000a64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8000a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8000a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd03      	ble.n	8000ab8 <st_check_boundaries+0x1c>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <st_check_boundaries+0x6c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	dd09      	ble.n	8000acc <st_check_boundaries+0x30>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dd03      	ble.n	8000ac6 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <st_check_boundaries+0x6c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	dd02      	ble.n	8000acc <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8000ac6:	23f4      	movs	r3, #244	; 0xf4
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e015      	b.n	8000af8 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd03      	ble.n	8000ada <st_check_boundaries+0x3e>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <st_check_boundaries+0x6c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	dd02      	ble.n	8000ae0 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8000ada:	23f6      	movs	r3, #246	; 0xf6
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e00b      	b.n	8000af8 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	dd03      	ble.n	8000aee <st_check_boundaries+0x52>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <st_check_boundaries+0x6c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	dd02      	ble.n	8000af4 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8000aee:	23f5      	movs	r3, #245	; 0xf5
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e001      	b.n	8000af8 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	000fffef 	.word	0x000fffef

08000b0c <usb_printf>:


char spi_buf[32];

void usb_printf(const char *fmt, ...)
{
 8000b0c:	b40f      	push	{r0, r1, r2, r3}
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <usb_printf+0x40>)
 8000b24:	f00d feb4 	bl	800e890 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <usb_printf+0x40>)
 8000b2a:	f7ff fb79 	bl	8000220 <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	607b      	str	r3, [r7, #4]

  CDC_Transmit_FS((uint8_t *)buffer, len);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <usb_printf+0x40>)
 8000b3a:	f00d f8eb 	bl	800dd14 <CDC_Transmit_FS>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr
 8000b4c:	200006f8 	.word	0x200006f8

08000b50 <SPI1_bmp280_read_id_register>:

// BMP280 is SPI1 in the schematic, but CubeIDE has pin33 marked as SPI2
// nope wrong, everything is SPI1, but they use SPI1_CS and SPI2_CS to select between BMP280 and BMI270
void SPI1_bmp280_read_id_register()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af02      	add	r7, sp, #8
	char data[4] = {0};
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]

	data[0] = BMP280_ID_REG;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <SPI1_bmp280_read_id_register+0x7c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	713b      	strb	r3, [r7, #4]
	data[1] = BMP280_ID_REG;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <SPI1_bmp280_read_id_register+0x7c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	717b      	strb	r3, [r7, #5]


  // Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <SPI1_bmp280_read_id_register+0x80>)
 8000b6e:	f002 f985 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f001 fc1c 	bl	80023b0 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data[0], 1, 100);
 8000b78:	1d39      	adds	r1, r7, #4
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <SPI1_bmp280_read_id_register+0x84>)
 8000b80:	f004 ff2f 	bl	80059e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf[0], 1, 100);
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	2201      	movs	r2, #1
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <SPI1_bmp280_read_id_register+0x88>)
 8000b8a:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <SPI1_bmp280_read_id_register+0x84>)
 8000b8c:	f005 f897 	bl	8005cbe <HAL_SPI_Receive>
//	HAL_StatusTypeDef ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&data[0], (uint8_t *)&spi_buf[0], 2, 100);
	//if (ret != HAL_OK)
	//{
	//	usb_printf("HAL_SPI_TransmitReceive failed %d\n", ret);
//	}
	HAL_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f001 fc0d 	bl	80023b0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <SPI1_bmp280_read_id_register+0x80>)
 8000b9e:	f002 f96d 	bl	8002e7c <HAL_GPIO_WritePin>

	// print out status register, should be 0x58
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <SPI1_bmp280_read_id_register+0x88>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000ba6:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <SPI1_bmp280_read_id_register+0x88>)
 8000baa:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000bac:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <SPI1_bmp280_read_id_register+0x88>)
 8000bb0:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000bb2:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SPI1_bmp280_read_id_register+0x88>)
 8000bb6:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <SPI1_bmp280_read_id_register+0x8c>)
 8000bbe:	f7ff ffa5 	bl	8000b0c <usb_printf>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	20000278 	.word	0x20000278
 8000bd8:	200006d4 	.word	0x200006d4
 8000bdc:	0800f074 	.word	0x0800f074

08000be0 <my_xchg_spi>:


static BYTE my_xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 8000bea:	f107 020f 	add.w	r2, r7, #15
 8000bee:	1df9      	adds	r1, r7, #7
 8000bf0:	2332      	movs	r3, #50	; 0x32
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <my_xchg_spi+0x28>)
 8000bf8:	f005 f991 	bl	8005f1e <HAL_SPI_TransmitReceive>
    return rxDat;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000278 	.word	0x20000278

08000c0c <SPI1_bmp280_read_id_register_xchg>:


void SPI1_bmp280_read_id_register_xchg()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c18:	4817      	ldr	r0, [pc, #92]	; (8000c78 <SPI1_bmp280_read_id_register_xchg+0x6c>)
 8000c1a:	f002 f92f 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fbc6 	bl	80023b0 <HAL_Delay>
	spi_buf[0] = my_xchg_spi(0x80 | 0xD0);				/* Start + command index */
 8000c24:	20d0      	movs	r0, #208	; 0xd0
 8000c26:	f7ff ffdb 	bl	8000be0 <my_xchg_spi>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <SPI1_bmp280_read_id_register_xchg+0x70>)
 8000c30:	701a      	strb	r2, [r3, #0]
	spi_buf[0] = my_xchg_spi(0x80 | 0xD0);				/* Start + command index */
 8000c32:	20d0      	movs	r0, #208	; 0xd0
 8000c34:	f7ff ffd4 	bl	8000be0 <my_xchg_spi>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SPI1_bmp280_read_id_register_xchg+0x70>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f001 fbb5 	bl	80023b0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <SPI1_bmp280_read_id_register_xchg+0x6c>)
 8000c4e:	f002 f915 	bl	8002e7c <HAL_GPIO_WritePin>

	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SPI1_bmp280_read_id_register_xchg+0x70>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000c56:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SPI1_bmp280_read_id_register_xchg+0x70>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000c5c:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <SPI1_bmp280_read_id_register_xchg+0x70>)
 8000c60:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000c62:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SPI1_bmp280_read_id_register_xchg+0x70>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMP280 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <SPI1_bmp280_read_id_register_xchg+0x74>)
 8000c6e:	f7ff ff4d 	bl	8000b0c <usb_printf>

}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	200006d4 	.word	0x200006d4
 8000c80:	0800f0a4 	.word	0x0800f0a4

08000c84 <SPI1_bmi270_read_id_register_xchg>:

void SPI1_bmi270_read_id_register_xchg()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4817      	ldr	r0, [pc, #92]	; (8000cec <SPI1_bmi270_read_id_register_xchg+0x68>)
 8000c90:	f002 f8f4 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 fb8b 	bl	80023b0 <HAL_Delay>
	spi_buf[0] = my_xchg_spi(0x80 | 0x0);				/* Start + command index */
 8000c9a:	2080      	movs	r0, #128	; 0x80
 8000c9c:	f7ff ffa0 	bl	8000be0 <my_xchg_spi>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	spi_buf[0] = my_xchg_spi(0x80 | 0x0);				/* Start + command index */
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	f7ff ff99 	bl	8000be0 <my_xchg_spi>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f001 fb7a 	bl	80023b0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <SPI1_bmi270_read_id_register_xchg+0x68>)
 8000cc2:	f002 f8db 	bl	8002e7c <HAL_GPIO_WritePin>

	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000cca:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8000cce:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000cd0:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8000cd4:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000cd6:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SPI1_bmi270_read_id_register_xchg+0x6c>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMI270 xchg Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <SPI1_bmi270_read_id_register_xchg+0x70>)
 8000ce2:	f7ff ff13 	bl	8000b0c <usb_printf>

}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200006d4 	.word	0x200006d4
 8000cf4:	0800f0d4 	.word	0x0800f0d4

08000cf8 <SPI1_bmi270_read_id_register>:



// Note: have to do this twice as the first time it just enables the interface from i2c to spi
void SPI1_bmi270_read_id_register()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af02      	add	r7, sp, #8
	char data[4] = {0};
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]

	data[0] = BMI270_ID_REG; // dummy value
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <SPI1_bmi270_read_id_register+0x78>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	713b      	strb	r3, [r7, #4]
	data[1] = BMI270_ID_REG; // actual used value
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <SPI1_bmi270_read_id_register+0x78>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	717b      	strb	r3, [r7, #5]

// Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2110      	movs	r1, #16
 8000d12:	4818      	ldr	r0, [pc, #96]	; (8000d74 <SPI1_bmi270_read_id_register+0x7c>)
 8000d14:	f002 f8b2 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f001 fb49 	bl	80023b0 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data[0], 1, 100);
 8000d1e:	1d39      	adds	r1, r7, #4
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <SPI1_bmi270_read_id_register+0x80>)
 8000d26:	f004 fe5c 	bl	80059e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf[0], 1, 100);
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4913      	ldr	r1, [pc, #76]	; (8000d7c <SPI1_bmi270_read_id_register+0x84>)
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <SPI1_bmi270_read_id_register+0x80>)
 8000d32:	f004 ffc4 	bl	8005cbe <HAL_SPI_Receive>
//	HAL_StatusTypeDef ret = HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&data[0], (uint8_t *)&spi_buf[0], 2, 100);
//	if (ret != HAL_OK)
//	{
//		usb_printf("HAL_SPI_TransmitReceive failed %d\n", ret);
//	}
	HAL_Delay(1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f001 fb3a 	bl	80023b0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <SPI1_bmi270_read_id_register+0x7c>)
 8000d42:	f002 f89b 	bl	8002e7c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);

	// print out status register, should be 0x24
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <SPI1_bmi270_read_id_register+0x84>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000d4a:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <SPI1_bmi270_read_id_register+0x84>)
 8000d4e:	785b      	ldrb	r3, [r3, #1]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000d50:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[2],
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SPI1_bmi270_read_id_register+0x84>)
 8000d54:	789b      	ldrb	r3, [r3, #2]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000d56:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[3]);
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SPI1_bmi270_read_id_register+0x84>)
 8000d5a:	78db      	ldrb	r3, [r3, #3]
	usb_printf("BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <SPI1_bmi270_read_id_register+0x88>)
 8000d62:	f7ff fed3 	bl	8000b0c <usb_printf>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000001 	.word	0x20000001
 8000d74:	40020000 	.word	0x40020000
 8000d78:	20000278 	.word	0x20000278
 8000d7c:	200006d4 	.word	0x200006d4
 8000d80:	0800f104 	.word	0x0800f104

08000d84 <test_bmp280>:
		  */
}


int test_bmp280(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b090      	sub	sp, #64	; 0x40
 8000d88:	af00      	add	r7, sp, #0
    int8_t rslt;
    struct bmp280_dev bmp;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <test_bmp280+0x5c>)
 8000d8c:	617b      	str	r3, [r7, #20]

    bmp.dev_id = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	727b      	strb	r3, [r7, #9]
    bmp.read = spi_reg_read;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <test_bmp280+0x60>)
 8000d94:	60fb      	str	r3, [r7, #12]
    bmp.write = spi_reg_write;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <test_bmp280+0x64>)
 8000d98:	613b      	str	r3, [r7, #16]
    bmp.intf = BMP280_SPI_INTF;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	72bb      	strb	r3, [r7, #10]
    rslt = bmp280_init(&bmp);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fcdc 	bl	8000760 <bmp280_init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    print_rslt(" bmp280_init status", rslt);
 8000dae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000db2:	4619      	mov	r1, r3
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <test_bmp280+0x68>)
 8000db6:	f000 f885 	bl	8000ec4 <print_rslt>


    struct bmp280_uncomp_data data;

    bmp280_get_uncomp_data(&data, &bmp);
 8000dba:	f107 0208 	add.w	r2, r7, #8
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fd32 	bl	800082c <bmp280_get_uncomp_data>

	usb_printf("BMP280 API : %u temp %u pressureX\r\n",
		  (unsigned int)data.uncomp_temp,
 8000dc8:	683b      	ldr	r3, [r7, #0]
	usb_printf("BMP280 API : %u temp %u pressureX\r\n",
 8000dca:	4619      	mov	r1, r3
		  (unsigned int)data.uncomp_press);
 8000dcc:	687b      	ldr	r3, [r7, #4]
	usb_printf("BMP280 API : %u temp %u pressureX\r\n",
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <test_bmp280+0x6c>)
 8000dd2:	f7ff fe9b 	bl	8000b0c <usb_printf>
    return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3740      	adds	r7, #64	; 0x40
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08000df5 	.word	0x08000df5
 8000de4:	08000e69 	.word	0x08000e69
 8000de8:	08000e0d 	.word	0x08000e0d
 8000dec:	0800f164 	.word	0x0800f164
 8000df0:	0800f178 	.word	0x0800f178

08000df4 <delay_ms>:


void delay_ms(uint32_t period_ms)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	HAL_Delay(period_ms);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f001 fad7 	bl	80023b0 <HAL_Delay>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <spi_reg_write>:


int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	603a      	str	r2, [r7, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	71bb      	strb	r3, [r7, #6]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <spi_reg_write+0x54>)
 8000e2a:	f002 f827 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f001 fabe 	bl	80023b0 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)reg_data, length, 100);
 8000e34:	88ba      	ldrh	r2, [r7, #4]
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	480a      	ldr	r0, [pc, #40]	; (8000e64 <spi_reg_write+0x58>)
 8000e3c:	f004 fdd1 	bl	80059e2 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f001 fab5 	bl	80023b0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <spi_reg_write+0x54>)
 8000e4e:	f002 f815 	bl	8002e7c <HAL_GPIO_WritePin>

    return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020400 	.word	0x40020400
 8000e64:	20000278 	.word	0x20000278

08000e68 <spi_reg_read>:


int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	603a      	str	r2, [r7, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	460b      	mov	r3, r1
 8000e78:	71bb      	strb	r3, [r7, #6]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <spi_reg_read+0x54>)
 8000e86:	f001 fff9 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f001 fa90 	bl	80023b0 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, (uint8_t *)reg_data, length, 100);
 8000e90:	88ba      	ldrh	r2, [r7, #4]
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <spi_reg_read+0x58>)
 8000e98:	f004 ff11 	bl	8005cbe <HAL_SPI_Receive>
	HAL_Delay(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f001 fa87 	bl	80023b0 <HAL_Delay>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <spi_reg_read+0x54>)
 8000eaa:	f001 ffe7 	bl	8002e7c <HAL_GPIO_WritePin>
    return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	20000278 	.word	0x20000278

08000ec4 <print_rslt>:


void print_rslt(const char api_name[], int8_t rslt)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP280_OK)
 8000ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d039      	beq.n	8000f4c <print_rslt+0x88>
    {
    	usb_printf("%s\t", api_name);
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	481e      	ldr	r0, [pc, #120]	; (8000f54 <print_rslt+0x90>)
 8000edc:	f7ff fe16 	bl	8000b0c <usb_printf>
        if (rslt == BMP280_E_NULL_PTR)
 8000ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d106      	bne.n	8000ef8 <print_rslt+0x34>
        {
        	usb_printf("Error [%d] : Null pointer error\r\n", (int)rslt);
 8000eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4819      	ldr	r0, [pc, #100]	; (8000f58 <print_rslt+0x94>)
 8000ef2:	f7ff fe0b 	bl	8000b0c <usb_printf>
        {
            /* For more error codes refer "*_defs.h" */
        	usb_printf("Error [%d] : Unknown error code\r\n", (int)rslt);
        }
    }
}
 8000ef6:	e029      	b.n	8000f4c <print_rslt+0x88>
        else if (rslt == BMP280_E_COMM_FAIL)
 8000ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efc:	f113 0f04 	cmn.w	r3, #4
 8000f00:	d106      	bne.n	8000f10 <print_rslt+0x4c>
        	usb_printf("Error [%d] : Bus communication failed\r\n", (int)rslt);
 8000f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4814      	ldr	r0, [pc, #80]	; (8000f5c <print_rslt+0x98>)
 8000f0a:	f7ff fdff 	bl	8000b0c <usb_printf>
}
 8000f0e:	e01d      	b.n	8000f4c <print_rslt+0x88>
        else if (rslt == BMP280_E_IMPLAUS_TEMP)
 8000f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f14:	f113 0f07 	cmn.w	r3, #7
 8000f18:	d106      	bne.n	8000f28 <print_rslt+0x64>
        	usb_printf("Error [%d] : Invalid Temperature\r\n", (int)rslt);
 8000f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <print_rslt+0x9c>)
 8000f22:	f7ff fdf3 	bl	8000b0c <usb_printf>
}
 8000f26:	e011      	b.n	8000f4c <print_rslt+0x88>
        else if (rslt == BMP280_E_DEV_NOT_FOUND)
 8000f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f2c:	f113 0f02 	cmn.w	r3, #2
 8000f30:	d106      	bne.n	8000f40 <print_rslt+0x7c>
        	usb_printf("Error [%d] : Device not found\r\n", (int)rslt);
 8000f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f36:	4619      	mov	r1, r3
 8000f38:	480a      	ldr	r0, [pc, #40]	; (8000f64 <print_rslt+0xa0>)
 8000f3a:	f7ff fde7 	bl	8000b0c <usb_printf>
}
 8000f3e:	e005      	b.n	8000f4c <print_rslt+0x88>
        	usb_printf("Error [%d] : Unknown error code\r\n", (int)rslt);
 8000f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f44:	4619      	mov	r1, r3
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <print_rslt+0xa4>)
 8000f48:	f7ff fde0 	bl	8000b0c <usb_printf>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0800f19c 	.word	0x0800f19c
 8000f58:	0800f1a0 	.word	0x0800f1a0
 8000f5c:	0800f1c4 	.word	0x0800f1c4
 8000f60:	0800f1ec 	.word	0x0800f1ec
 8000f64:	0800f210 	.word	0x0800f210
 8000f68:	0800f230 	.word	0x0800f230

08000f6c <test_sdcard>:



// https://01001000.xyz/2020-08-09-Tutorial-STM32CubeIDE-SD-card/
void test_sdcard()
{
 8000f6c:	b5b0      	push	{r4, r5, r7, lr}
 8000f6e:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 8000f72:	af00      	add	r7, sp, #0
	  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f001 fa1a 	bl	80023b0 <HAL_Delay>
	  FATFS FatFs; 	//Fatfs handle
	  FIL fil; 		//File handle
	  FRESULT fres; //Result after operations

	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000f7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000f80:	2201      	movs	r2, #1
 8000f82:	4971      	ldr	r1, [pc, #452]	; (8001148 <test_sdcard+0x1dc>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00b ff31 	bl	800cdec <f_mount>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if (fres != FR_OK)
 8000f90:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <test_sdcard+0x3a>
	  {
		  usb_printf("f_mount error (%i)\r\n", fres);
 8000f98:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	486b      	ldr	r0, [pc, #428]	; (800114c <test_sdcard+0x1e0>)
 8000fa0:	f7ff fdb4 	bl	8000b0c <usb_printf>
		  return;
 8000fa4:	e0cb      	b.n	800113e <test_sdcard+0x1d2>
	  //Let's get some statistics from the SD card
	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4865      	ldr	r0, [pc, #404]	; (8001148 <test_sdcard+0x1dc>)
 8000fb2:	f00c fc7b 	bl	800d8ac <f_getfree>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK)
 8000fbc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <test_sdcard+0x66>
	  {
		  usb_printf("f_getfree error (%i)\r\n", fres);
 8000fc4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4861      	ldr	r0, [pc, #388]	; (8001150 <test_sdcard+0x1e4>)
 8000fcc:	f7ff fd9e 	bl	8000b0c <usb_printf>
		  return;
 8000fd0:	e0b5      	b.n	800113e <test_sdcard+0x1d2>
	  }

	  //Formula comes from ChaN's documentation
	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000fd2:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000fd6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000fe4:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	8952      	ldrh	r2, [r2, #10]
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	  free_sectors = free_clusters * getFreeFs->csize;
 8000ff4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000ff8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	895b      	ldrh	r3, [r3, #10]
 8001000:	461a      	mov	r2, r3
 8001002:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001006:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

	  usb_printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001014:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001018:	0859      	lsrs	r1, r3, #1
 800101a:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	461a      	mov	r2, r3
 8001022:	484c      	ldr	r0, [pc, #304]	; (8001154 <test_sdcard+0x1e8>)
 8001024:	f7ff fd72 	bl	8000b0c <usb_printf>

	  //Now let's try to open file "test.txt"
	  fres = f_open(&fil, "test.txt", FA_READ);
 8001028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102c:	2201      	movs	r2, #1
 800102e:	494a      	ldr	r1, [pc, #296]	; (8001158 <test_sdcard+0x1ec>)
 8001030:	4618      	mov	r0, r3
 8001032:	f00b ff21 	bl	800ce78 <f_open>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if (fres != FR_OK)
 800103c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <test_sdcard+0xe0>
	  {
		usb_printf("f_open error (%i)\r\n");
 8001044:	4845      	ldr	r0, [pc, #276]	; (800115c <test_sdcard+0x1f0>)
 8001046:	f7ff fd61 	bl	8000b0c <usb_printf>
		return;
 800104a:	e078      	b.n	800113e <test_sdcard+0x1d2>
	  }

	  usb_printf("I was able to open 'test.txt' for reading!\r\n");
 800104c:	4844      	ldr	r0, [pc, #272]	; (8001160 <test_sdcard+0x1f4>)
 800104e:	f7ff fd5d 	bl	8000b0c <usb_printf>

	  //Read 30 bytes from "test.txt" on the SD card
	  BYTE readBuf[30] = {0};
 8001052:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001056:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	3304      	adds	r3, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	831a      	strh	r2, [r3, #24]

	  //We can either use f_read OR f_gets to get data out of files
	  //f_gets is a wrapper on f_read that does some string formatting for us
	  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8001070:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	211e      	movs	r1, #30
 800107a:	4618      	mov	r0, r3
 800107c:	f00c fccb 	bl	800da16 <f_gets>
 8001080:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490

	  if(rres != 0)
 8001084:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <test_sdcard+0x12e>
	  {
		  usb_printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	4834      	ldr	r0, [pc, #208]	; (8001164 <test_sdcard+0x1f8>)
 8001094:	f7ff fd3a 	bl	8000b0c <usb_printf>
 8001098:	e005      	b.n	80010a6 <test_sdcard+0x13a>
	  }
	  else
	  {
		  usb_printf("f_gets error (%i)\r\n", fres);
 800109a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800109e:	4619      	mov	r1, r3
 80010a0:	4831      	ldr	r0, [pc, #196]	; (8001168 <test_sdcard+0x1fc>)
 80010a2:	f7ff fd33 	bl	8000b0c <usb_printf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00c fbd4 	bl	800d858 <f_close>

	  //Now let's try and write a file "write.txt"
	  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80010b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b4:	221a      	movs	r2, #26
 80010b6:	492d      	ldr	r1, [pc, #180]	; (800116c <test_sdcard+0x200>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00b fedd 	bl	800ce78 <f_open>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if(fres == FR_OK)
 80010c4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <test_sdcard+0x168>
	  {
		  usb_printf("I was able to open 'write.txt' for writing\r\n");
 80010cc:	4828      	ldr	r0, [pc, #160]	; (8001170 <test_sdcard+0x204>)
 80010ce:	f7ff fd1d 	bl	8000b0c <usb_printf>
 80010d2:	e005      	b.n	80010e0 <test_sdcard+0x174>
	  }
	  else
	  {
		  usb_printf("f_open error (%i)\r\n", fres);
 80010d4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80010d8:	4619      	mov	r1, r3
 80010da:	4820      	ldr	r0, [pc, #128]	; (800115c <test_sdcard+0x1f0>)
 80010dc:	f7ff fd16 	bl	8000b0c <usb_printf>
	  }

	  //Copy in a string
	  strncpy((char*)readBuf, "a new file is made!", 20);
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <test_sdcard+0x208>)
 80010e6:	461c      	mov	r4, r3
 80010e8:	4615      	mov	r5, r2
 80010ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	6023      	str	r3, [r4, #0]
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80010fc:	2213      	movs	r2, #19
 80010fe:	f00c f9b8 	bl	800d472 <f_write>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	  if(fres == FR_OK)
 8001108:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <test_sdcard+0x1b8>
	  {
		  usb_printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8001110:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001114:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	4816      	ldr	r0, [pc, #88]	; (8001178 <test_sdcard+0x20c>)
 800111e:	f7ff fcf5 	bl	8000b0c <usb_printf>
 8001122:	e002      	b.n	800112a <test_sdcard+0x1be>
	  }
	  else
	  {
		  usb_printf("f_write error (%i)\r\n");
 8001124:	4815      	ldr	r0, [pc, #84]	; (800117c <test_sdcard+0x210>)
 8001126:	f7ff fcf1 	bl	8000b0c <usb_printf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 800112a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112e:	4618      	mov	r0, r3
 8001130:	f00c fb92 	bl	800d858 <f_close>

	  //We're done, so de-mount the drive
	  f_mount(NULL, "", 0);
 8001134:	2200      	movs	r2, #0
 8001136:	4904      	ldr	r1, [pc, #16]	; (8001148 <test_sdcard+0x1dc>)
 8001138:	2000      	movs	r0, #0
 800113a:	f00b fe57 	bl	800cdec <f_mount>
}
 800113e:	f507 6794 	add.w	r7, r7, #1184	; 0x4a0
 8001142:	46bd      	mov	sp, r7
 8001144:	bdb0      	pop	{r4, r5, r7, pc}
 8001146:	bf00      	nop
 8001148:	0800f28c 	.word	0x0800f28c
 800114c:	0800f290 	.word	0x0800f290
 8001150:	0800f2a8 	.word	0x0800f2a8
 8001154:	0800f2c0 	.word	0x0800f2c0
 8001158:	0800f308 	.word	0x0800f308
 800115c:	0800f314 	.word	0x0800f314
 8001160:	0800f328 	.word	0x0800f328
 8001164:	0800f358 	.word	0x0800f358
 8001168:	0800f384 	.word	0x0800f384
 800116c:	0800f398 	.word	0x0800f398
 8001170:	0800f3a4 	.word	0x0800f3a4
 8001174:	0800f3d4 	.word	0x0800f3d4
 8001178:	0800f3e8 	.word	0x0800f3e8
 800117c:	0800f40c 	.word	0x0800f40c

08001180 <start_bootloader>:


#define	MCU_IRQS	70u

void start_bootloader()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	void (*boot_jump)(void);

	boot_jump = (void (*)(void))(*((uint32_t *)(0x1FFF0000 + 4)));
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <start_bootloader+0x48>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	607b      	str	r3, [r7, #4]

	HAL_RCC_DeInit();
 800118c:	f003 fa8a 	bl	80046a4 <HAL_RCC_DeInit>
	SysTick->CTRL = 0;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <start_bootloader+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <start_bootloader+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <start_bootloader+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a2:	b672      	cpsid	i
}
 80011a4:	bf00      	nop
	__disable_irq();
	SYSCFG->MEMRMP = 0x01;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <start_bootloader+0x50>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

	__set_MSP(*(uint32_t *)0x1FFF0000);
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <start_bootloader+0x54>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f383 8808 	msr	MSP, r3
}
 80011b8:	bf00      	nop

	boot_jump();
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4798      	blx	r3
	*((unsigned long *)0x2004FFF0) = 0xDEADBEEF; // 320KB STM32F7xx
	__DSB();

	boot_jump();
	*/
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	1fff0004 	.word	0x1fff0004
 80011cc:	e000e010 	.word	0xe000e010
 80011d0:	40013800 	.word	0x40013800
 80011d4:	1fff0000 	.word	0x1fff0000

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f001 f88b 	bl	80022f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f882 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e4:	f000 fba8 	bl	8001938 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80011e8:	f00c fcae 	bl	800db48 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80011ec:	f000 f8e6 	bl	80013bc <MX_ADC1_Init>
  MX_ADC2_Init();
 80011f0:	f000 f936 	bl	8001460 <MX_ADC2_Init>
  MX_I2C1_Init();
 80011f4:	f000 f986 	bl	8001504 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011f8:	f000 f9c4 	bl	8001584 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80011fc:	f000 fb0c 	bl	8001818 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001200:	f000 fb3a 	bl	8001878 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001204:	f000 fb68 	bl	80018d8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001208:	f000 f9fa 	bl	8001600 <MX_SPI2_Init>
  MX_UART4_Init();
 800120c:	f000 fa74 	bl	80016f8 <MX_UART4_Init>
  MX_UART5_Init();
 8001210:	f000 faa2 	bl	8001758 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001214:	f000 fad0 	bl	80017b8 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001218:	f000 fa30 	bl	800167c <MX_SPI3_Init>
  MX_FATFS_Init();
 800121c:	f007 fb74 	bl	8008908 <MX_FATFS_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8001220:	b662      	cpsie	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN 2 */

  __enable_irq();


  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <main+0xfc>)
 8001228:	f001 fe41 	bl	8002eae <HAL_GPIO_TogglePin>



  // CS pin should be default high
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2110      	movs	r1, #16
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <main+0x100>)
 8001232:	f001 fe23 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	4825      	ldr	r0, [pc, #148]	; (80012d4 <main+0xfc>)
 800123e:	f001 fe1d 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	4823      	ldr	r0, [pc, #140]	; (80012d4 <main+0xfc>)
 8001248:	f001 fe18 	bl	8002e7c <HAL_GPIO_WritePin>


  // Print something (probably will be too fast to connect and see?)
  usb_printf("STM32F7 main()\r\n");
 800124c:	4823      	ldr	r0, [pc, #140]	; (80012dc <main+0x104>)
 800124e:	f7ff fc5d 	bl	8000b0c <usb_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  if (test_enable)
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <main+0x108>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d02c      	beq.n	80012b4 <main+0xdc>





		  if (test_enable == '`')
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <main+0x108>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b60      	cmp	r3, #96	; 0x60
 8001260:	d101      	bne.n	8001266 <main+0x8e>
		  {
			  start_bootloader();
 8001262:	f7ff ff8d 	bl	8001180 <start_bootloader>
		  }

		  if (test_enable == '1')
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <main+0x108>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b31      	cmp	r3, #49	; 0x31
 800126c:	d101      	bne.n	8001272 <main+0x9a>
		  {
			  test_sdcard();
 800126e:	f7ff fe7d 	bl	8000f6c <test_sdcard>
		  }

		  if (test_enable == '2')
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <main+0x108>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b32      	cmp	r3, #50	; 0x32
 8001278:	d101      	bne.n	800127e <main+0xa6>
		  {
			  SPI1_bmp280_read_id_register();
 800127a:	f7ff fc69 	bl	8000b50 <SPI1_bmp280_read_id_register>
		  }

		  if (test_enable == '3')
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <main+0x108>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b33      	cmp	r3, #51	; 0x33
 8001284:	d101      	bne.n	800128a <main+0xb2>
		  {
			  SPI1_bmi270_read_id_register();
 8001286:	f7ff fd37 	bl	8000cf8 <SPI1_bmi270_read_id_register>
		  }

		  if (test_enable == '4')
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <main+0x108>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b34      	cmp	r3, #52	; 0x34
 8001290:	d101      	bne.n	8001296 <main+0xbe>
		  {
			  SPI1_bmi270_read_id_register_xchg();
 8001292:	f7ff fcf7 	bl	8000c84 <SPI1_bmi270_read_id_register_xchg>
		  }

		  if (test_enable == '5')
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <main+0x108>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b35      	cmp	r3, #53	; 0x35
 800129c:	d101      	bne.n	80012a2 <main+0xca>
		  {
			  test_bmp280();
 800129e:	f7ff fd71 	bl	8000d84 <test_bmp280>
		  }

		  if (test_enable == '6')
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <main+0x108>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b36      	cmp	r3, #54	; 0x36
 80012a8:	d101      	bne.n	80012ae <main+0xd6>
		  {
			  SPI1_bmp280_read_id_register_xchg();
 80012aa:	f7ff fcaf 	bl	8000c0c <SPI1_bmp280_read_id_register_xchg>
		  }



		  test_enable = 0;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <main+0x108>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
	  }


	  // blink leds
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 80012b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <main+0x10c>)
 80012ba:	f001 fdf8 	bl	8002eae <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f001 f876 	bl	80023b0 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80012c4:	2140      	movs	r1, #64	; 0x40
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <main+0xfc>)
 80012c8:	f001 fdf1 	bl	8002eae <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f001 f86f 	bl	80023b0 <HAL_Delay>
  	  if (test_enable)
 80012d2:	e7be      	b.n	8001252 <main+0x7a>
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020000 	.word	0x40020000
 80012dc:	0800f424 	.word	0x0800f424
 80012e0:	200006f4 	.word	0x200006f4
 80012e4:	40020800 	.word	0x40020800

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00d fad8 	bl	800e8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800132c:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <SystemClock_Config+0xd0>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134a:	2301      	movs	r3, #1
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134e:	2310      	movs	r3, #16
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001360:	2360      	movs	r3, #96	; 0x60
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001368:	2304      	movs	r3, #4
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fa77 	bl	8004864 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800137c:	f000 fb7c 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fd06 	bl	8004dac <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013a6:	f000 fb67 	bl	8001a78 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC1_Init+0x98>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <MX_ADC1_Init+0x9c>)
 80013d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_ADC1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_ADC1_Init+0x98>)
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <MX_ADC1_Init+0xa0>)
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_ADC1_Init+0x98>)
 8001408:	2201      	movs	r2, #1
 800140a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_ADC1_Init+0x98>)
 8001416:	2201      	movs	r2, #1
 8001418:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <MX_ADC1_Init+0x98>)
 800141c:	f000 ffec 	bl	80023f8 <HAL_ADC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 fb27 	bl	8001a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800142a:	230b      	movs	r3, #11
 800142c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800142e:	2301      	movs	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC1_Init+0x98>)
 800143c:	f001 f820 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001446:	f000 fb17 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000194 	.word	0x20000194
 8001458:	40012000 	.word	0x40012000
 800145c:	0f000001 	.word	0x0f000001

08001460 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001466:	463b      	mov	r3, r7
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_ADC2_Init+0x98>)
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_ADC2_Init+0x9c>)
 8001476:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC2_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_ADC2_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <MX_ADC2_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_ADC2_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_ADC2_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_ADC2_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <MX_ADC2_Init+0xa0>)
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014c0:	f000 ff9a 	bl	80023f8 <HAL_ADC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 fad5 	bl	8001a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014ce:	230c      	movs	r3, #12
 80014d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC2_Init+0x98>)
 80014e0:	f000 ffce 	bl	8002480 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80014ea:	f000 fac5 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200001dc 	.word	0x200001dc
 80014fc:	40012100 	.word	0x40012100
 8001500:	0f000001 	.word	0x0f000001

08001504 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_I2C1_Init+0x74>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <MX_I2C1_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_I2C1_Init+0x74>)
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <MX_I2C1_Init+0x7c>)
 8001512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_I2C1_Init+0x74>)
 800151c:	2201      	movs	r2, #1
 800151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_I2C1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <MX_I2C1_Init+0x74>)
 8001540:	f001 fcd0 	bl	8002ee4 <HAL_I2C_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154a:	f000 fa95 	bl	8001a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154e:	2100      	movs	r1, #0
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_I2C1_Init+0x74>)
 8001552:	f001 fd57 	bl	8003004 <HAL_I2CEx_ConfigAnalogFilter>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800155c:	f000 fa8c 	bl	8001a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001560:	2100      	movs	r1, #0
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_I2C1_Init+0x74>)
 8001564:	f001 fd99 	bl	800309a <HAL_I2CEx_ConfigDigitalFilter>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800156e:	f000 fa83 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000224 	.word	0x20000224
 800157c:	40005400 	.word	0x40005400
 8001580:	00303d5b 	.word	0x00303d5b

08001584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_SPI1_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <MX_SPI1_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_SPI1_Init+0x74>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_SPI1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_SPI1_Init+0x74>)
 800159e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015ba:	2238      	movs	r2, #56	; 0x38
 80015bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_SPI1_Init+0x74>)
 80015e4:	f004 f952 	bl	800588c <HAL_SPI_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 fa43 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000278 	.word	0x20000278
 80015fc:	40013000 	.word	0x40013000

08001600 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_SPI2_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <MX_SPI2_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_SPI2_Init+0x74>)
 800160c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_SPI2_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_SPI2_Init+0x74>)
 800161a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800161e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_SPI2_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_SPI2_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_SPI2_Init+0x74>)
 800162e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001632:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_SPI2_Init+0x74>)
 8001636:	2238      	movs	r2, #56	; 0x38
 8001638:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_SPI2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_SPI2_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_SPI2_Init+0x74>)
 800164e:	2207      	movs	r2, #7
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_SPI2_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_SPI2_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_SPI2_Init+0x74>)
 8001660:	f004 f914 	bl	800588c <HAL_SPI_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 fa05 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002dc 	.word	0x200002dc
 8001678:	40003800 	.word	0x40003800

0800167c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_SPI3_Init+0x74>)
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <MX_SPI3_Init+0x78>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_SPI3_Init+0x74>)
 8001688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_SPI3_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_SPI3_Init+0x74>)
 8001696:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800169a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_SPI3_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016b2:	2238      	movs	r2, #56	; 0x38
 80016b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016ca:	2207      	movs	r2, #7
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_SPI3_Init+0x74>)
 80016dc:	f004 f8d6 	bl	800588c <HAL_SPI_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80016e6:	f000 f9c7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000340 	.word	0x20000340
 80016f4:	40003c00 	.word	0x40003c00

080016f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_UART4_Init+0x58>)
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <MX_UART4_Init+0x5c>)
 8001700:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_UART4_Init+0x58>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_UART4_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_UART4_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_UART4_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_UART4_Init+0x58>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_UART4_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_UART4_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_UART4_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_UART4_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_UART4_Init+0x58>)
 800173c:	f005 f806 	bl	800674c <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 f997 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200003a4 	.word	0x200003a4
 8001754:	40004c00 	.word	0x40004c00

08001758 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_UART5_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <MX_UART5_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_UART5_Init+0x58>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_UART5_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_UART5_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_UART5_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_UART5_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_UART5_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_UART5_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_UART5_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_UART5_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_UART5_Init+0x58>)
 800179c:	f004 ffd6 	bl	800674c <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f967 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000042c 	.word	0x2000042c
 80017b4:	40005000 	.word	0x40005000

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <MX_USART1_UART_Init+0x5c>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_USART1_UART_Init+0x58>)
 80017fc:	f004 ffa6 	bl	800674c <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001806:	f000 f937 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200004b4 	.word	0x200004b4
 8001814:	40011000 	.word	0x40011000

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <MX_USART2_UART_Init+0x5c>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART2_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USART2_UART_Init+0x58>)
 800185c:	f004 ff76 	bl	800674c <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001866:	f000 f907 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000053c 	.word	0x2000053c
 8001874:	40004400 	.word	0x40004400

08001878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <MX_USART3_UART_Init+0x5c>)
 8001880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018bc:	f004 ff46 	bl	800674c <HAL_UART_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018c6:	f000 f8d7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200005c4 	.word	0x200005c4
 80018d4:	40004800 	.word	0x40004800

080018d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_USART6_UART_Init+0x58>)
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <MX_USART6_UART_Init+0x5c>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_USART6_UART_Init+0x58>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART6_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_USART6_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART6_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART6_UART_Init+0x58>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART6_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART6_UART_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART6_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART6_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART6_UART_Init+0x58>)
 800191c:	f004 ff16 	bl	800674c <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001926:	f000 f8a7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000064c 	.word	0x2000064c
 8001934:	40011400 	.word	0x40011400

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <MX_GPIO_Init+0x130>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a3f      	ldr	r2, [pc, #252]	; (8001a68 <MX_GPIO_Init+0x130>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a39      	ldr	r2, [pc, #228]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <MX_GPIO_Init+0x130>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <MX_GPIO_Init+0x130>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <MX_GPIO_Init+0x130>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <MX_GPIO_Init+0x130>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <MX_GPIO_Init+0x130>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <MX_GPIO_Init+0x130>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <MX_GPIO_Init+0x130>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 80019c6:	2200      	movs	r2, #0
 80019c8:	f24a 3101 	movw	r1, #41729	; 0xa301
 80019cc:	4827      	ldr	r0, [pc, #156]	; (8001a6c <MX_GPIO_Init+0x134>)
 80019ce:	f001 fa55 	bl	8002e7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f248 1110 	movw	r1, #33040	; 0x8110
 80019d8:	4825      	ldr	r0, [pc, #148]	; (8001a70 <MX_GPIO_Init+0x138>)
 80019da:	f001 fa4f 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80019de:	2200      	movs	r2, #0
 80019e0:	f649 41c3 	movw	r1, #40131	; 0x9cc3
 80019e4:	4823      	ldr	r0, [pc, #140]	; (8001a74 <MX_GPIO_Init+0x13c>)
 80019e6:	f001 fa49 	bl	8002e7c <HAL_GPIO_WritePin>
                          |SPI2_CS_Pin|GPIO_PIN_15|LED1_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 LED0_Pin PC0 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 80019ea:	f24a 3301 	movw	r3, #41729	; 0xa301
 80019ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	481a      	ldr	r0, [pc, #104]	; (8001a6c <MX_GPIO_Init+0x134>)
 8001a04:	f001 f89e 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 8001a08:	f244 0310 	movw	r3, #16400	; 0x4010
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_GPIO_Init+0x134>)
 8001a20:	f001 f890 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin PA8 PA15 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_15;
 8001a24:	f248 1310 	movw	r3, #33040	; 0x8110
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_GPIO_Init+0x138>)
 8001a3e:	f001 f881 	bl	8002b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           SPI2_CS_Pin PB15 LED1_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001a42:	f649 43c3 	movw	r3, #40131	; 0x9cc3
 8001a46:	617b      	str	r3, [r7, #20]
                          |SPI2_CS_Pin|GPIO_PIN_15|LED1_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <MX_GPIO_Init+0x13c>)
 8001a5c:	f001 f872 	bl	8002b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_MspInit+0x44>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_MspInit+0x44>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_MspInit+0x44>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_MspInit+0x44>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_ADC_MspInit+0xc8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d124      	bne.n	8001b38 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481a      	ldr	r0, [pc, #104]	; (8001b9c <HAL_ADC_MspInit+0xd0>)
 8001b32:	f001 f807 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b36:	e028      	b.n	8001b8a <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_ADC_MspInit+0xd4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d123      	bne.n	8001b8a <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_ADC_MspInit+0xcc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b72:	2304      	movs	r3, #4
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_ADC_MspInit+0xd0>)
 8001b86:	f000 ffdd 	bl	8002b44 <HAL_GPIO_Init>
}
 8001b8a:	bf00      	nop
 8001b8c:	3730      	adds	r7, #48	; 0x30
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40012000 	.word	0x40012000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40012100 	.word	0x40012100

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0aa      	sub	sp, #168	; 0xa8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00c fe71 	bl	800e8ac <memset>
  if(hi2c->Instance==I2C1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_I2C_MspInit+0xb4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d13c      	bne.n	8001c4e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fb08 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bee:	f7ff ff43 	bl	8001a78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_I2C_MspInit+0xb8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_I2C_MspInit+0xb8>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_I2C_MspInit+0xb8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c12:	2312      	movs	r3, #18
 8001c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c24:	2304      	movs	r3, #4
 8001c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_I2C_MspInit+0xbc>)
 8001c32:	f000 ff87 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_I2C_MspInit+0xb8>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_I2C_MspInit+0xb8>)
 8001c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_I2C_MspInit+0xb8>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	37a8      	adds	r7, #168	; 0xa8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400

08001c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_SPI_MspInit+0x16c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d128      	bne.n	8001cd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c86:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23e0      	movs	r3, #224	; 0xe0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4841      	ldr	r0, [pc, #260]	; (8001dd8 <HAL_SPI_MspInit+0x174>)
 8001cd2:	f000 ff37 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cd6:	e077      	b.n	8001dc8 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3f      	ldr	r2, [pc, #252]	; (8001ddc <HAL_SPI_MspInit+0x178>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d145      	bne.n	8001d6e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	4826      	ldr	r0, [pc, #152]	; (8001de0 <HAL_SPI_MspInit+0x17c>)
 8001d46:	f000 fefd 	bl	8002b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <HAL_SPI_MspInit+0x180>)
 8001d68:	f000 feec 	bl	8002b44 <HAL_GPIO_Init>
}
 8001d6c:	e02c      	b.n	8001dc8 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_SPI_MspInit+0x184>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d127      	bne.n	8001dc8 <HAL_SPI_MspInit+0x164>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_SPI_MspInit+0x170>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001da8:	2338      	movs	r3, #56	; 0x38
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db8:	2306      	movs	r3, #6
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <HAL_SPI_MspInit+0x180>)
 8001dc4:	f000 febe 	bl	8002b44 <HAL_GPIO_Init>
}
 8001dc8:	bf00      	nop
 8001dca:	3738      	adds	r7, #56	; 0x38
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40013000 	.word	0x40013000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40003800 	.word	0x40003800
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40003c00 	.word	0x40003c00

08001dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b4      	sub	sp, #208	; 0xd0
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00c fd4d 	bl	800e8ac <memset>
  if(huart->Instance==UART4)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4ab6      	ldr	r2, [pc, #728]	; (80020f0 <HAL_UART_MspInit+0x304>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d13d      	bne.n	8001e98 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f9e3 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001e38:	f7ff fe1e 	bl	8001a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e3c:	4bad      	ldr	r3, [pc, #692]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4aac      	ldr	r2, [pc, #688]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4baa      	ldr	r3, [pc, #680]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4ba7      	ldr	r3, [pc, #668]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4aa6      	ldr	r2, [pc, #664]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e60:	4ba4      	ldr	r3, [pc, #656]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e84:	2308      	movs	r3, #8
 8001e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4899      	ldr	r0, [pc, #612]	; (80020f8 <HAL_UART_MspInit+0x30c>)
 8001e92:	f000 fe57 	bl	8002b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e96:	e17f      	b.n	8002198 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==UART5)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a97      	ldr	r2, [pc, #604]	; (80020fc <HAL_UART_MspInit+0x310>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d15f      	bne.n	8001f62 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 f9a0 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001ebe:	f7ff fddb 	bl	8001a78 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ec2:	4b8c      	ldr	r3, [pc, #560]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a8b      	ldr	r2, [pc, #556]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b89      	ldr	r3, [pc, #548]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	4b86      	ldr	r3, [pc, #536]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a85      	ldr	r2, [pc, #532]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b83      	ldr	r3, [pc, #524]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f24:	2308      	movs	r3, #8
 8001f26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4873      	ldr	r0, [pc, #460]	; (8002100 <HAL_UART_MspInit+0x314>)
 8001f32:	f000 fe07 	bl	8002b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f36:	2304      	movs	r3, #4
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f58:	4619      	mov	r1, r3
 8001f5a:	486a      	ldr	r0, [pc, #424]	; (8002104 <HAL_UART_MspInit+0x318>)
 8001f5c:	f000 fdf2 	bl	8002b44 <HAL_GPIO_Init>
}
 8001f60:	e11a      	b.n	8002198 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a68      	ldr	r2, [pc, #416]	; (8002108 <HAL_UART_MspInit+0x31c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d13c      	bne.n	8001fe6 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f70:	2300      	movs	r3, #0
 8001f72:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 f93d 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001f84:	f7ff fd78 	bl	8001a78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f88:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	4a59      	ldr	r2, [pc, #356]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6453      	str	r3, [r2, #68]	; 0x44
 8001f94:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a53      	ldr	r2, [pc, #332]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4846      	ldr	r0, [pc, #280]	; (80020f8 <HAL_UART_MspInit+0x30c>)
 8001fe0:	f000 fdb0 	bl	8002b44 <HAL_GPIO_Init>
}
 8001fe4:	e0d8      	b.n	8002198 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a48      	ldr	r2, [pc, #288]	; (800210c <HAL_UART_MspInit+0x320>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d13b      	bne.n	8002068 <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 f8fb 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_MspInit+0x220>
      Error_Handler();
 8002008:	f7ff fd36 	bl	8001a78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_UART_MspInit+0x308>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a38      	ldr	r2, [pc, #224]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8002012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_UART_MspInit+0x308>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_UART_MspInit+0x308>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6313      	str	r3, [r2, #48]	; 0x30
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800203c:	230c      	movs	r3, #12
 800203e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002054:	2307      	movs	r3, #7
 8002056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800205e:	4619      	mov	r1, r3
 8002060:	4825      	ldr	r0, [pc, #148]	; (80020f8 <HAL_UART_MspInit+0x30c>)
 8002062:	f000 fd6f 	bl	8002b44 <HAL_GPIO_Init>
}
 8002066:	e097      	b.n	8002198 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a28      	ldr	r2, [pc, #160]	; (8002110 <HAL_UART_MspInit+0x324>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d150      	bne.n	8002114 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002082:	4618      	mov	r0, r3
 8002084:	f003 f8b8 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_MspInit+0x2a6>
      Error_Handler();
 800208e:	f7ff fcf3 	bl	8001a78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_UART_MspInit+0x308>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_UART_MspInit+0x308>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_UART_MspInit+0x308>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_UART_MspInit+0x308>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_UART_MspInit+0x308>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020dc:	2307      	movs	r3, #7
 80020de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_UART_MspInit+0x314>)
 80020ea:	f000 fd2b 	bl	8002b44 <HAL_GPIO_Init>
}
 80020ee:	e053      	b.n	8002198 <HAL_UART_MspInit+0x3ac>
 80020f0:	40004c00 	.word	0x40004c00
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40005000 	.word	0x40005000
 8002100:	40020800 	.word	0x40020800
 8002104:	40020c00 	.word	0x40020c00
 8002108:	40011000 	.word	0x40011000
 800210c:	40004400 	.word	0x40004400
 8002110:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_UART_MspInit+0x3b4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d13c      	bne.n	8002198 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800211e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f862 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_MspInit+0x352>
      Error_Handler();
 800213a:	f7ff fc9d 	bl	8001a78 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_UART_MspInit+0x3b8>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4a18      	ldr	r2, [pc, #96]	; (80021a4 <HAL_UART_MspInit+0x3b8>)
 8002144:	f043 0320 	orr.w	r3, r3, #32
 8002148:	6453      	str	r3, [r2, #68]	; 0x44
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_UART_MspInit+0x3b8>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_UART_MspInit+0x3b8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <HAL_UART_MspInit+0x3b8>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_UART_MspInit+0x3b8>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002186:	2308      	movs	r3, #8
 8002188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_UART_MspInit+0x3bc>)
 8002194:	f000 fcd6 	bl	8002b44 <HAL_GPIO_Init>
}
 8002198:	bf00      	nop
 800219a:	37d0      	adds	r7, #208	; 0xd0
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40011400 	.word	0x40011400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020800 	.word	0x40020800

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f8ba 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <OTG_FS_IRQHandler+0x10>)
 8002206:	f001 f8da 	bl	80033be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20001d28 	.word	0x20001d28

08002214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <_sbrk+0x5c>)
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <_sbrk+0x60>)
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <_sbrk+0x64>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <_sbrk+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d207      	bcs.n	8002254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002244:	f00c fb4a 	bl	800e8dc <__errno>
 8002248:	4603      	mov	r3, r0
 800224a:	220c      	movs	r2, #12
 800224c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e009      	b.n	8002268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <_sbrk+0x64>)
 8002264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20040000 	.word	0x20040000
 8002274:	00000400 	.word	0x00000400
 8002278:	200007f8 	.word	0x200007f8
 800227c:	20002378 	.word	0x20002378

08002280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <SystemInit+0x20>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <SystemInit+0x20>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022aa:	490e      	ldr	r1, [pc, #56]	; (80022e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c0:	4c0b      	ldr	r4, [pc, #44]	; (80022f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ce:	f7ff ffd7 	bl	8002280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f00c fb09 	bl	800e8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d6:	f7fe ff7f 	bl	80011d8 <main>
  bx  lr    
 80022da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022dc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80022e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e4:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80022e8:	0800f6a0 	.word	0x0800f6a0
  ldr r2, =_sbss
 80022ec:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80022f0:	20002378 	.word	0x20002378

080022f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>

080022f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fbe0 	bl	8002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002300:	200f      	movs	r0, #15
 8002302:	f000 f805 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002306:	f7ff fbbd 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fbfb 	bl	8002b2a <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 fbc3 	bl	8002ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000004 	.word	0x20000004
 8002368:	2000000c 	.word	0x2000000c
 800236c:	20000008 	.word	0x20000008

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000000c 	.word	0x2000000c
 8002394:	200007fc 	.word	0x200007fc

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	200007fc 	.word	0x200007fc

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000000c 	.word	0x2000000c

080023f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e031      	b.n	8002472 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fb58 	bl	8001acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_ADC_Init+0x84>)
 800243c:	4013      	ands	r3, r2
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f970 	bl	800272c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
 8002462:	e001      	b.n	8002468 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	ffffeefd 	.word	0xffffeefd

08002480 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e136      	b.n	800270a <HAL_ADC_ConfigChannel+0x28a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d93a      	bls.n	8002522 <HAL_ADC_ConfigChannel+0xa2>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024b4:	d035      	beq.n	8002522 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68d9      	ldr	r1, [r3, #12]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	3b1e      	subs	r3, #30
 80024cc:	2207      	movs	r2, #7
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	400a      	ands	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a8d      	ldr	r2, [pc, #564]	; (8002718 <HAL_ADC_ConfigChannel+0x298>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10a      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	061a      	lsls	r2, r3, #24
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fa:	e035      	b.n	8002568 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4618      	mov	r0, r3
 800250e:	4603      	mov	r3, r0
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4403      	add	r3, r0
 8002514:	3b1e      	subs	r3, #30
 8002516:	409a      	lsls	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002520:	e022      	b.n	8002568 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6919      	ldr	r1, [r3, #16]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	2207      	movs	r2, #7
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6919      	ldr	r1, [r3, #16]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	4603      	mov	r3, r0
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4403      	add	r3, r0
 800255e:	409a      	lsls	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d824      	bhi.n	80025ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b05      	subs	r3, #5
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
 80025b8:	e04c      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d824      	bhi.n	800260c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	; 0x23
 80025d4:	221f      	movs	r2, #31
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	400a      	ands	r2, r1
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b23      	subs	r3, #35	; 0x23
 80025fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
 800260a:	e023      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	; 0x41
 800261e:	221f      	movs	r2, #31
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b41      	subs	r3, #65	; 0x41
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a30      	ldr	r2, [pc, #192]	; (800271c <HAL_ADC_ConfigChannel+0x29c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002666:	d105      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 800266e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002672:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_ADC_ConfigChannel+0x29c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10f      	bne.n	800269e <HAL_ADC_ConfigChannel+0x21e>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b12      	cmp	r3, #18
 8002684:	d10b      	bne.n	800269e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a25      	ldr	r2, [pc, #148]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 800268c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002690:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 8002698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800269c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_ADC_ConfigChannel+0x29c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d12b      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x280>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_ADC_ConfigChannel+0x298>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	d122      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 80026c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a15      	ldr	r2, [pc, #84]	; (8002720 <HAL_ADC_ConfigChannel+0x2a0>)
 80026cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_ADC_ConfigChannel+0x298>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_ADC_ConfigChannel+0x2a4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_ADC_ConfigChannel+0x2a8>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9a      	lsrs	r2, r3, #18
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026f2:	e002      	b.n	80026fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f9      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	10000012 	.word	0x10000012
 800271c:	40012000 	.word	0x40012000
 8002720:	40012300 	.word	0x40012300
 8002724:	20000004 	.word	0x20000004
 8002728:	431bde83 	.word	0x431bde83

0800272c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002734:	4b78      	ldr	r3, [pc, #480]	; (8002918 <ADC_Init+0x1ec>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a77      	ldr	r2, [pc, #476]	; (8002918 <ADC_Init+0x1ec>)
 800273a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800273e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002740:	4b75      	ldr	r3, [pc, #468]	; (8002918 <ADC_Init+0x1ec>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4973      	ldr	r1, [pc, #460]	; (8002918 <ADC_Init+0x1ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800275c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	021a      	lsls	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	4a58      	ldr	r2, [pc, #352]	; (800291c <ADC_Init+0x1f0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	e00f      	b.n	8002826 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002824:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0202 	bic.w	r2, r2, #2
 8002834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	005a      	lsls	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002862:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002872:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	3b01      	subs	r3, #1
 8002880:	035a      	lsls	r2, r3, #13
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	e007      	b.n	800289c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	051a      	lsls	r2, r3, #20
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028de:	025a      	lsls	r2, r3, #9
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	029a      	lsls	r2, r3, #10
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40012300 	.word	0x40012300
 800291c:	0f000001 	.word	0x0f000001

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <__NVIC_SetPriorityGrouping+0x40>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	4313      	orrs	r3, r2
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x40>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00
 8002964:	05fa0000 	.word	0x05fa0000

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	; (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	; (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a8c:	d301      	bcc.n	8002a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <SysTick_Config+0x40>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f7ff ff8e 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SysTick_Config+0x40>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <SysTick_Config+0x40>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	e000e010 	.word	0xe000e010

08002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff29 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff3e 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ff8e 	bl	8002a14 <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff5d 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff31 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffa2 	bl	8002a7c <SysTick_Config>
 8002b38:	4603      	mov	r3, r0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e169      	b.n	8002e38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 8158 	bne.w	8002e32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d005      	beq.n	8002b9a <HAL_GPIO_Init+0x56>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d130      	bne.n	8002bfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 0201 	and.w	r2, r3, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d017      	beq.n	8002c38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80b2 	beq.w	8002e32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <HAL_GPIO_Init+0x30c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4a5f      	ldr	r2, [pc, #380]	; (8002e50 <HAL_GPIO_Init+0x30c>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_GPIO_Init+0x30c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ce6:	4a5b      	ldr	r2, [pc, #364]	; (8002e54 <HAL_GPIO_Init+0x310>)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_GPIO_Init+0x314>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02b      	beq.n	8002d6a <HAL_GPIO_Init+0x226>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a51      	ldr	r2, [pc, #324]	; (8002e5c <HAL_GPIO_Init+0x318>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d025      	beq.n	8002d66 <HAL_GPIO_Init+0x222>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_GPIO_Init+0x31c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01f      	beq.n	8002d62 <HAL_GPIO_Init+0x21e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4f      	ldr	r2, [pc, #316]	; (8002e64 <HAL_GPIO_Init+0x320>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d019      	beq.n	8002d5e <HAL_GPIO_Init+0x21a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <HAL_GPIO_Init+0x324>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_GPIO_Init+0x216>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4d      	ldr	r2, [pc, #308]	; (8002e6c <HAL_GPIO_Init+0x328>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00d      	beq.n	8002d56 <HAL_GPIO_Init+0x212>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_GPIO_Init+0x32c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <HAL_GPIO_Init+0x20e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_GPIO_Init+0x330>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_GPIO_Init+0x20a>
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	e00e      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d4e:	2308      	movs	r3, #8
 8002d50:	e00c      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d52:	2306      	movs	r3, #6
 8002d54:	e00a      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d56:	2305      	movs	r3, #5
 8002d58:	e008      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e004      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e002      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_Init+0x228>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f002 0203 	and.w	r2, r2, #3
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	4093      	lsls	r3, r2
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d7c:	4935      	ldr	r1, [pc, #212]	; (8002e54 <HAL_GPIO_Init+0x310>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	3302      	adds	r3, #2
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8a:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e2c:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <HAL_GPIO_Init+0x334>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	f67f ae92 	bls.w	8002b64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40013800 	.word	0x40013800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40021c00 	.word	0x40021c00
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ec0:	887a      	ldrh	r2, [r7, #2]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	041a      	lsls	r2, r3, #16
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	400b      	ands	r3, r1
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fe4a 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e006      	b.n	8002f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d104      	bne.n	8002f7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_I2C_Init+0x11c>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	02008000 	.word	0x02008000

08003004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	d138      	bne.n	800308c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003024:	2302      	movs	r3, #2
 8003026:	e032      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d139      	bne.n	8003124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e033      	b.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2224      	movs	r2, #36	; 0x24
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003132:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003134:	b08f      	sub	sp, #60	; 0x3c
 8003136:	af0a      	add	r7, sp, #40	; 0x28
 8003138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e116      	b.n	8003372 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f00a ff32 	bl	800dfc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f004 f86f 	bl	8007266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	687e      	ldr	r6, [r7, #4]
 8003190:	466d      	mov	r5, sp
 8003192:	f106 0410 	add.w	r4, r6, #16
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a6:	1d33      	adds	r3, r6, #4
 80031a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f003 ff20 	bl	8006ff0 <USB_CoreInit>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0d7      	b.n	8003372 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 f85d 	bl	8007288 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e04a      	b.n	800326a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	333d      	adds	r3, #61	; 0x3d
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	b298      	uxth	r0, r3
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3344      	adds	r3, #68	; 0x44
 8003210:	4602      	mov	r2, r0
 8003212:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3340      	adds	r3, #64	; 0x40
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	3348      	adds	r3, #72	; 0x48
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	334c      	adds	r3, #76	; 0x4c
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3354      	adds	r3, #84	; 0x54
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	3301      	adds	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d3af      	bcc.n	80031d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	e044      	b.n	8003304 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3301      	adds	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d3b5      	bcc.n	800327a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	687e      	ldr	r6, [r7, #4]
 8003316:	466d      	mov	r5, sp
 8003318:	f106 0410 	add.w	r4, r6, #16
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003324:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003328:	e885 0003 	stmia.w	r5, {r0, r1}
 800332c:	1d33      	adds	r3, r6, #4
 800332e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	f003 fff5 	bl	8007320 <USB_DevInit>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e014      	b.n	8003372 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f001 f97b 	bl	800465c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f005 f953 	bl	8008616 <USB_DevDisconnect>

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800337a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_PCD_Start+0x16>
 800338c:	2302      	movs	r3, #2
 800338e:	e012      	b.n	80033b6 <HAL_PCD_Start+0x3c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 ff51 	bl	8007244 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 f914 	bl	80085d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033be:	b590      	push	{r4, r7, lr}
 80033c0:	b08d      	sub	sp, #52	; 0x34
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 f9d2 	bl	800877e <USB_GetMode>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 84b7 	bne.w	8003d50 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f005 f936 	bl	8008658 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 84ad 	beq.w	8003d4e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f005 f923 	bl	8008658 <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d107      	bne.n	800342c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f002 0202 	and.w	r2, r2, #2
 800342a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f005 f911 	bl	8008658 <USB_ReadInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d161      	bne.n	8003504 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0210 	bic.w	r2, r2, #16
 800344e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	0c5b      	lsrs	r3, r3, #17
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	2b02      	cmp	r3, #2
 800347a:	d124      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d035      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	6a38      	ldr	r0, [r7, #32]
 800349c:	f004 ff48 	bl	8008330 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ac:	441a      	add	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034be:	441a      	add	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	e016      	b.n	80034f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	0c5b      	lsrs	r3, r3, #17
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d110      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034d8:	2208      	movs	r2, #8
 80034da:	4619      	mov	r1, r3
 80034dc:	6a38      	ldr	r0, [r7, #32]
 80034de:	f004 ff27 	bl	8008330 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ee:	441a      	add	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0210 	orr.w	r2, r2, #16
 8003502:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f005 f8a5 	bl	8008658 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003514:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003518:	f040 80a7 	bne.w	800366a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f005 f8aa 	bl	800867e <USB_ReadDevAllOutEpInterrupt>
 800352a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800352c:	e099      	b.n	8003662 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 808e 	beq.w	8003656 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f005 f8ce 	bl	80086e6 <USB_ReadDevOutEPInterrupt>
 800354a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2301      	movs	r3, #1
 8003566:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fef0 	bl	8004350 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	461a      	mov	r2, r3
 8003588:	2308      	movs	r3, #8
 800358a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800358c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 ffc6 	bl	8004520 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035aa:	461a      	mov	r2, r3
 80035ac:	2310      	movs	r3, #16
 80035ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d030      	beq.n	800361c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	d109      	bne.n	80035da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	78db      	ldrb	r3, [r3, #3]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d108      	bne.n	800360a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f00a fe03 	bl	800e210 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003616:	461a      	mov	r2, r3
 8003618:	2302      	movs	r3, #2
 800361a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	461a      	mov	r2, r3
 8003634:	2320      	movs	r3, #32
 8003636:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003654:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	3301      	adds	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f af62 	bne.w	800352e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f004 fff2 	bl	8008658 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800367e:	f040 80db 	bne.w	8003838 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f005 f813 	bl	80086b2 <USB_ReadDevAllInEpInterrupt>
 800368c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003692:	e0cd      	b.n	8003830 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80c2 	beq.w	8003824 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 f839 	bl	8008722 <USB_ReadDevInEPInterrupt>
 80036b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d057      	beq.n	800376c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69f9      	ldr	r1, [r7, #28]
 80036d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036dc:	4013      	ands	r3, r2
 80036de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ec:	461a      	mov	r2, r3
 80036ee:	2301      	movs	r3, #1
 80036f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d132      	bne.n	8003760 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	334c      	adds	r3, #76	; 0x4c
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	3348      	adds	r3, #72	; 0x48
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4419      	add	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	334c      	adds	r3, #76	; 0x4c
 8003730:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d113      	bne.n	8003760 <HAL_PCD_IRQHandler+0x3a2>
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3354      	adds	r3, #84	; 0x54
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003758:	461a      	mov	r2, r3
 800375a:	2101      	movs	r1, #1
 800375c:	f005 f842 	bl	80087e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f00a fccd 	bl	800e106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	461a      	mov	r2, r3
 8003784:	2308      	movs	r3, #8
 8003786:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	461a      	mov	r2, r3
 80037a0:	2310      	movs	r3, #16
 80037a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	461a      	mov	r2, r3
 80037bc:	2340      	movs	r3, #64	; 0x40
 80037be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d023      	beq.n	8003812 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037cc:	6a38      	ldr	r0, [r7, #32]
 80037ce:	f003 ff15 	bl	80075fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	3338      	adds	r3, #56	; 0x38
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	78db      	ldrb	r3, [r3, #3]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d108      	bne.n	8003800 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f00a fd1a 	bl	800e234 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	2302      	movs	r3, #2
 8003810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800381c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fd08 	bl	8004234 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	3301      	adds	r3, #1
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	f47f af2e 	bne.w	8003694 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 ff0b 	bl	8008658 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800384c:	d122      	bne.n	8003894 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003868:	2b01      	cmp	r3, #1
 800386a:	d108      	bne.n	800387e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003874:	2100      	movs	r1, #0
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f00a fe98 	bl	800e5ac <HAL_PCDEx_LPM_Callback>
 800387c:	e002      	b.n	8003884 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f00a fcb8 	bl	800e1f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f004 fedd 	bl	8008658 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a8:	d112      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f00a fc74 	bl	800e1a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 febf 	bl	8008658 <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e4:	d121      	bne.n	800392a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800391a:	2101      	movs	r1, #1
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f00a fe45 	bl	800e5ac <HAL_PCDEx_LPM_Callback>
 8003922:	e002      	b.n	800392a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f00a fc3f 	bl	800e1a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f004 fe92 	bl	8008658 <USB_ReadInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	f040 80b7 	bne.w	8003ab0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2110      	movs	r1, #16
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fe4d 	bl	80075fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	e046      	b.n	80039f6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	461a      	mov	r2, r3
 8003976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800397a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	440a      	add	r2, r1
 8003992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800399a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c0:	0151      	lsls	r1, r2, #5
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	440a      	add	r2, r1
 80039c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	3301      	adds	r3, #1
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3b3      	bcc.n	8003968 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a2c:	f043 030b 	orr.w	r3, r3, #11
 8003a30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a42:	f043 030b 	orr.w	r3, r3, #11
 8003a46:	6453      	str	r3, [r2, #68]	; 0x44
 8003a48:	e015      	b.n	8003a76 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f242 032b 	movw	r3, #8235	; 0x202b
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a70:	f043 030b 	orr.w	r3, r3, #11
 8003a74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f004 fea2 	bl	80087e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 fdcf 	bl	8008658 <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d124      	bne.n	8003b10 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fe66 	bl	800879c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 fe0e 	bl	80076f6 <USB_GetDevSpeed>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681c      	ldr	r4, [r3, #0]
 8003ae6:	f001 fb53 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 8003aea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	4620      	mov	r0, r4
 8003af6:	f003 fb03 	bl	8007100 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f00a fb2b 	bl	800e156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 fd9f 	bl	8008658 <USB_ReadInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d10a      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f00a fb08 	bl	800e13a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 0208 	and.w	r2, r2, #8
 8003b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 fd8a 	bl	8008658 <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d122      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e014      	b.n	8003b8a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fb27 	bl	80041d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	3301      	adds	r3, #1
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3e5      	bcc.n	8003b60 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 fd5d 	bl	8008658 <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba8:	d13b      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e02b      	b.n	8003c08 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3340      	adds	r3, #64	; 0x40
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d115      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da12      	bge.n	8003c02 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	333f      	adds	r3, #63	; 0x3f
 8003bec:	2201      	movs	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fae8 	bl	80041d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	3301      	adds	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3ce      	bcc.n	8003bb0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fd16 	bl	8008658 <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c36:	d155      	bne.n	8003ce4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c38:	2301      	movs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	e045      	b.n	8003cca <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d12e      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	da2b      	bge.n	8003cc4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d121      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc0:	6053      	str	r3, [r2, #4]
            break;
 8003cc2:	e007      	b.n	8003cd4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3b4      	bcc.n	8003c3e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 fcb5 	bl	8008658 <USB_ReadInterrupts>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf8:	d10a      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f00a faac 	bl	800e258 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f004 fc9f 	bl	8008658 <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d115      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f00a fa9c 	bl	800e274 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	e000      	b.n	8003d50 <HAL_PCD_IRQHandler+0x992>
      return;
 8003d4e:	bf00      	nop
    }
  }
}
 8003d50:	3734      	adds	r7, #52	; 0x34
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}

08003d56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_PCD_SetAddress+0x1a>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e013      	b.n	8003d98 <HAL_PCD_SetAddress+0x42>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 fbfd 	bl	8008588 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	70fb      	strb	r3, [r7, #3]
 8003db2:	460b      	mov	r3, r1
 8003db4:	803b      	strh	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da0f      	bge.n	8003de6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3338      	adds	r3, #56	; 0x38
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	705a      	strb	r2, [r3, #1]
 8003de4:	e00f      	b.n	8003e06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e12:	883a      	ldrh	r2, [r7, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	78ba      	ldrb	r2, [r7, #2]
 8003e1c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d004      	beq.n	8003e30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e30:	78bb      	ldrb	r3, [r7, #2]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d102      	bne.n	8003e3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_PCD_EP_Open+0xaa>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e00e      	b.n	8003e68 <HAL_PCD_EP_Open+0xc8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 fc71 	bl	8007740 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e66:	7afb      	ldrb	r3, [r7, #11]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	da0f      	bge.n	8003ea4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	3338      	adds	r3, #56	; 0x38
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	e00f      	b.n	8003ec4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 020f 	and.w	r2, r3, #15
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	3304      	adds	r3, #4
 8003ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_PCD_EP_Close+0x6e>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e00e      	b.n	8003efc <HAL_PCD_EP_Close+0x8c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 fcaf 	bl	8007850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	460b      	mov	r3, r1
 8003f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	f003 020f 	and.w	r2, r3, #15
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2200      	movs	r2, #0
 8003f44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f46:	7afb      	ldrb	r3, [r7, #11]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	f003 ff96 	bl	8007ea8 <USB_EP0StartXfer>
 8003f7c:	e008      	b.n	8003f90 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6979      	ldr	r1, [r7, #20]
 8003f8c:	f003 fd3c 	bl	8007a08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003fbc:	681b      	ldr	r3, [r3, #0]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b086      	sub	sp, #24
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	7afb      	ldrb	r3, [r7, #11]
 8003fdc:	f003 020f 	and.w	r2, r3, #15
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3338      	adds	r3, #56	; 0x38
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2201      	movs	r2, #1
 8004008:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	b2da      	uxtb	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d102      	bne.n	8004024 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004024:	7afb      	ldrb	r3, [r7, #11]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6979      	ldr	r1, [r7, #20]
 800403c:	f003 ff34 	bl	8007ea8 <USB_EP0StartXfer>
 8004040:	e008      	b.n	8004054 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	f003 fcda 	bl	8007a08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	429a      	cmp	r2, r3
 8004076:	d901      	bls.n	800407c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e050      	b.n	800411e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800407c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004080:	2b00      	cmp	r3, #0
 8004082:	da0f      	bge.n	80040a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	3338      	adds	r3, #56	; 0x38
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	3304      	adds	r3, #4
 800409a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	705a      	strb	r2, [r3, #1]
 80040a2:	e00d      	b.n	80040c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_PCD_EP_SetStall+0x82>
 80040dc:	2302      	movs	r3, #2
 80040de:	e01e      	b.n	800411e <HAL_PCD_EP_SetStall+0xc0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f004 f976 	bl	80083e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	b2d9      	uxtb	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800410e:	461a      	mov	r2, r3
 8004110:	f004 fb68 	bl	80087e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 020f 	and.w	r2, r3, #15
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d901      	bls.n	8004144 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e042      	b.n	80041ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da0f      	bge.n	800416c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	3338      	adds	r3, #56	; 0x38
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	705a      	strb	r2, [r3, #1]
 800416a:	e00f      	b.n	800418c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	3304      	adds	r3, #4
 8004184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_PCD_EP_ClrStall+0x86>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e00e      	b.n	80041ca <HAL_PCD_EP_ClrStall+0xa4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68f9      	ldr	r1, [r7, #12]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 f97e 	bl	80084bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da0c      	bge.n	8004200 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	3338      	adds	r3, #56	; 0x38
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e00c      	b.n	800421a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	3304      	adds	r3, #4
 8004218:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	4618      	mov	r0, r3
 8004222:	f003 ff9d 	bl	8008160 <USB_EPStopXfer>
 8004226:	4603      	mov	r3, r0
 8004228:	72fb      	strb	r3, [r7, #11]

  return ret;
 800422a:	7afb      	ldrb	r3, [r7, #11]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	3338      	adds	r3, #56	; 0x38
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	429a      	cmp	r2, r3
 8004266:	d901      	bls.n	800426c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e06c      	b.n	8004346 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	429a      	cmp	r2, r3
 8004280:	d902      	bls.n	8004288 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3303      	adds	r3, #3
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004290:	e02b      	b.n	80042ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d902      	bls.n	80042ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3303      	adds	r3, #3
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6919      	ldr	r1, [r3, #16]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	4603      	mov	r3, r0
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f003 fff1 	bl	80082b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	441a      	add	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	441a      	add	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d809      	bhi.n	8004314 <PCD_WriteEmptyTxFifo+0xe0>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1a      	ldr	r2, [r3, #32]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004308:	429a      	cmp	r2, r3
 800430a:	d203      	bcs.n	8004314 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1be      	bne.n	8004292 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	429a      	cmp	r2, r3
 800431e:	d811      	bhi.n	8004344 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	2201      	movs	r2, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	43db      	mvns	r3, r3
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4013      	ands	r3, r2
 8004342:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	333c      	adds	r3, #60	; 0x3c
 8004368:	3304      	adds	r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d17b      	bne.n	800447e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a61      	ldr	r2, [pc, #388]	; (8004518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	f240 80b9 	bls.w	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80b3 	beq.w	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b8:	6093      	str	r3, [r2, #8]
 80043ba:	e0a7      	b.n	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	461a      	mov	r2, r3
 80043d4:	2320      	movs	r3, #32
 80043d6:	6093      	str	r3, [r2, #8]
 80043d8:	e098      	b.n	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 8093 	bne.w	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4a4b      	ldr	r2, [pc, #300]	; (8004518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d90f      	bls.n	800440e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	461a      	mov	r2, r3
 8004406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440a:	6093      	str	r3, [r2, #8]
 800440c:	e07e      	b.n	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	440b      	add	r3, r1
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d114      	bne.n	8004470 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004458:	461a      	mov	r2, r3
 800445a:	2101      	movs	r1, #1
 800445c:	f004 f9c2 	bl	80087e4 <USB_EP0_OutStart>
 8004460:	e006      	b.n	8004470 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	441a      	add	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f009 fe2a 	bl	800e0d0 <HAL_PCD_DataOutStageCallback>
 800447c:	e046      	b.n	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d124      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	461a      	mov	r2, r3
 800449e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a2:	6093      	str	r3, [r2, #8]
 80044a4:	e032      	b.n	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	2320      	movs	r3, #32
 80044c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f009 fe01 	bl	800e0d0 <HAL_PCD_DataOutStageCallback>
 80044ce:	e01d      	b.n	800450c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d114      	bne.n	8004500 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044f8:	461a      	mov	r2, r3
 80044fa:	2100      	movs	r1, #0
 80044fc:	f004 f972 	bl	80087e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f009 fde2 	bl	800e0d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	4f54300a 	.word	0x4f54300a
 800451c:	4f54310a 	.word	0x4f54310a

08004520 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	333c      	adds	r3, #60	; 0x3c
 8004538:	3304      	adds	r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d90e      	bls.n	8004574 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	461a      	mov	r2, r3
 800456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004572:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f009 fd99 	bl	800e0ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d90c      	bls.n	800459c <PCD_EP_OutSetupPacket_int+0x7c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d108      	bne.n	800459c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004594:	461a      	mov	r2, r3
 8004596:	2101      	movs	r1, #1
 8004598:	f004 f924 	bl	80087e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	4f54300a 	.word	0x4f54300a

080045ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
 80045b8:	4613      	mov	r3, r2
 80045ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045ca:	883b      	ldrh	r3, [r7, #0]
 80045cc:	0419      	lsls	r1, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
 80045d8:	e028      	b.n	800462c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	4413      	add	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]
 80045ec:	e00d      	b.n	800460a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	3340      	adds	r3, #64	; 0x40
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	0c1b      	lsrs	r3, r3, #16
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	4413      	add	r3, r2
 8004602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	3301      	adds	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	3b01      	subs	r3, #1
 8004610:	429a      	cmp	r2, r3
 8004612:	d3ec      	bcc.n	80045ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004614:	883b      	ldrh	r3, [r7, #0]
 8004616:	0418      	lsls	r0, r3, #16
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	3b01      	subs	r3, #1
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	4302      	orrs	r2, r0
 8004624:	3340      	adds	r3, #64	; 0x40
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800468c:	4313      	orrs	r3, r2
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	10000003 	.word	0x10000003

080046a4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80046aa:	f7fd fe75 	bl	8002398 <HAL_GetTick>
 80046ae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046be:	f7fd fe6b 	bl	8002398 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e0b8      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80046d0:	4b5e      	ldr	r3, [pc, #376]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80046dc:	4b5b      	ldr	r3, [pc, #364]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a5a      	ldr	r2, [pc, #360]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80046e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80046e8:	f7fd fe56 	bl	8002398 <HAL_GetTick>
 80046ec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80046ee:	4b57      	ldr	r3, [pc, #348]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f6:	f7fd fe4f 	bl	8002398 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e09a      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800470c:	4b4f      	ldr	r3, [pc, #316]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ee      	bne.n	80046f6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004718:	f7fd fe3e 	bl	8002398 <HAL_GetTick>
 800471c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800471e:	4b4b      	ldr	r3, [pc, #300]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a4a      	ldr	r2, [pc, #296]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004724:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8004728:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd fe34 	bl	8002398 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e081      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800474a:	f7fd fe25 	bl	8002398 <HAL_GetTick>
 800474e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004750:	4b3e      	ldr	r3, [pc, #248]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3d      	ldr	r2, [pc, #244]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475e:	f7fd fe1b 	bl	8002398 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e068      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800477c:	f7fd fe0c 	bl	8002398 <HAL_GetTick>
 8004780:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004782:	4b32      	ldr	r3, [pc, #200]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a31      	ldr	r2, [pc, #196]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800478c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004790:	f7fd fe02 	bl	8002398 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e04f      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80047ae:	f7fd fdf3 	bl	8002398 <HAL_GetTick>
 80047b2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047c2:	f7fd fde9 	bl	8002398 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b64      	cmp	r3, #100	; 0x64
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e036      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047e2:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_RCC_DeInit+0x1ac>)
 80047e4:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80047e6:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047e8:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_RCC_DeInit+0x1b0>)
 80047ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047f0:	4a18      	ldr	r2, [pc, #96]	; (8004854 <HAL_RCC_DeInit+0x1b0>)
 80047f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4a14      	ldr	r2, [pc, #80]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 80047fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004800:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480c:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	4a0b      	ldr	r2, [pc, #44]	; (800484c <HAL_RCC_DeInit+0x1a8>)
 8004820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004824:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <HAL_RCC_DeInit+0x1b4>)
 8004828:	4a0c      	ldr	r2, [pc, #48]	; (800485c <HAL_RCC_DeInit+0x1b8>)
 800482a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <HAL_RCC_DeInit+0x1bc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fd fd6d 	bl	8002310 <HAL_InitTick>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8004840:	2300      	movs	r3, #0
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800
 8004850:	24003010 	.word	0x24003010
 8004854:	24003000 	.word	0x24003000
 8004858:	20000004 	.word	0x20000004
 800485c:	00f42400 	.word	0x00f42400
 8004860:	20000008 	.word	0x20000008

08004864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e291      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8087 	beq.w	8004996 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004888:	4b96      	ldr	r3, [pc, #600]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b04      	cmp	r3, #4
 8004892:	d00c      	beq.n	80048ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004894:	4b93      	ldr	r3, [pc, #588]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d112      	bne.n	80048c6 <HAL_RCC_OscConfig+0x62>
 80048a0:	4b90      	ldr	r3, [pc, #576]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ac:	d10b      	bne.n	80048c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ae:	4b8d      	ldr	r3, [pc, #564]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d06c      	beq.n	8004994 <HAL_RCC_OscConfig+0x130>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d168      	bne.n	8004994 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e26b      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x7a>
 80048d0:	4b84      	ldr	r3, [pc, #528]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a83      	ldr	r2, [pc, #524]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e02e      	b.n	800493c <HAL_RCC_OscConfig+0xd8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x9c>
 80048e6:	4b7f      	ldr	r3, [pc, #508]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7e      	ldr	r2, [pc, #504]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b7c      	ldr	r3, [pc, #496]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7b      	ldr	r2, [pc, #492]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xd8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0xc0>
 800490a:	4b76      	ldr	r3, [pc, #472]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a75      	ldr	r2, [pc, #468]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b73      	ldr	r3, [pc, #460]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a72      	ldr	r2, [pc, #456]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xd8>
 8004924:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6b      	ldr	r2, [pc, #428]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fd fd28 	bl	8002398 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd fd24 	bl	8002398 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e21f      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b61      	ldr	r3, [pc, #388]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd fd14 	bl	8002398 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fd10 	bl	8002398 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e20b      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x110>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d069      	beq.n	8004a76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049a2:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b4d      	ldr	r3, [pc, #308]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x190>
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x17a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1df      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	493d      	ldr	r1, [pc, #244]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e040      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a38      	ldr	r2, [pc, #224]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fd fcc6 	bl	8002398 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a10:	f7fd fcc2 	bl	8002398 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1bd      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4929      	ldr	r1, [pc, #164]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
 8004a42:	e018      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fca2 	bl	8002398 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fd fc9e 	bl	8002398 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e199      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d038      	beq.n	8004af4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d019      	beq.n	8004abe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fd fc7f 	bl	8002398 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9e:	f7fd fc7b 	bl	8002398 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e176      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x23a>
 8004abc:	e01a      	b.n	8004af4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aca:	f7fd fc65 	bl	8002398 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fc61 	bl	8002398 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d903      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e15c      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
 8004ae4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	4b91      	ldr	r3, [pc, #580]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ee      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80a4 	beq.w	8004c4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b8b      	ldr	r3, [pc, #556]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a87      	ldr	r2, [pc, #540]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1a:	4b85      	ldr	r3, [pc, #532]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2a:	4b82      	ldr	r3, [pc, #520]	; (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d118      	bne.n	8004b68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b36:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	; (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b42:	f7fd fc29 	bl	8002398 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fd fc25 	bl	8002398 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b64      	cmp	r3, #100	; 0x64
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e120      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5c:	4b75      	ldr	r3, [pc, #468]	; (8004d34 <HAL_RCC_OscConfig+0x4d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x31a>
 8004b70:	4b6f      	ldr	r3, [pc, #444]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a6e      	ldr	r2, [pc, #440]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	e02d      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x33c>
 8004b86:	4b6a      	ldr	r3, [pc, #424]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70
 8004b92:	4b67      	ldr	r3, [pc, #412]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a66      	ldr	r2, [pc, #408]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004b98:	f023 0304 	bic.w	r3, r3, #4
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	e01c      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x35e>
 8004ba8:	4b61      	ldr	r3, [pc, #388]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a60      	ldr	r2, [pc, #384]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	4b5e      	ldr	r3, [pc, #376]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a5d      	ldr	r2, [pc, #372]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	e00b      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
 8004bc2:	4b5b      	ldr	r3, [pc, #364]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	4b58      	ldr	r3, [pc, #352]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a57      	ldr	r2, [pc, #348]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d015      	beq.n	8004c0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd fbd9 	bl	8002398 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd fbd5 	bl	8002398 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0ce      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ee      	beq.n	8004bea <HAL_RCC_OscConfig+0x386>
 8004c0c:	e014      	b.n	8004c38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fbc3 	bl	8002398 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fd fbbf 	bl	8002398 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0b8      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2c:	4b40      	ldr	r3, [pc, #256]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ee      	bne.n	8004c16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3e:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a3b      	ldr	r2, [pc, #236]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80a4 	beq.w	8004d9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c54:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d06b      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d149      	bne.n	8004cfc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c68:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a30      	ldr	r2, [pc, #192]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fb90 	bl	8002398 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fb8c 	bl	8002398 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e087      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc8:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fb60 	bl	8002398 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fb5c 	bl	8002398 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e057      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x478>
 8004cfa:	e04f      	b.n	8004d9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd fb46 	bl	8002398 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fd fb42 	bl	8002398 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e03d      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_OscConfig+0x4cc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4ac>
 8004d2e:	e035      	b.n	8004d9c <HAL_RCC_OscConfig+0x538>
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d38:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_RCC_OscConfig+0x544>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d028      	beq.n	8004d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d121      	bne.n	8004d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d11a      	bne.n	8004d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	3b01      	subs	r3, #1
 8004d82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800

08004dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0d0      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b67      	ldr	r3, [pc, #412]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 020f 	bic.w	r2, r3, #15
 8004dda:	4965      	ldr	r1, [pc, #404]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b59      	ldr	r3, [pc, #356]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a58      	ldr	r2, [pc, #352]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e24:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a52      	ldr	r2, [pc, #328]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	494d      	ldr	r1, [pc, #308]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d040      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d115      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e073      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06b      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f023 0203 	bic.w	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4936      	ldr	r1, [pc, #216]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fa7a 	bl	8002398 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea8:	f7fd fa76 	bl	8002398 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e053      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 020c 	and.w	r2, r3, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1eb      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d210      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 020f 	bic.w	r2, r3, #15
 8004ee6:	4922      	ldr	r1, [pc, #136]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4916      	ldr	r1, [pc, #88]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	490e      	ldr	r1, [pc, #56]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f3e:	f000 f821 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_ClockConfig+0x1c8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <HAL_RCC_ClockConfig+0x1cc>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <HAL_RCC_ClockConfig+0x1d0>)
 8004f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1d4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd f9d6 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023c00 	.word	0x40023c00
 8004f74:	40023800 	.word	0x40023800
 8004f78:	0800f4c4 	.word	0x0800f4c4
 8004f7c:	20000004 	.word	0x20000004
 8004f80:	20000008 	.word	0x20000008

08004f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b094      	sub	sp, #80	; 0x50
 8004f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	2300      	movs	r3, #0
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	2300      	movs	r3, #0
 8004f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9c:	4b79      	ldr	r3, [pc, #484]	; (8005184 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	f200 80e1 	bhi.w	8005170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004fb6:	e0db      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4b73      	ldr	r3, [pc, #460]	; (8005188 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fbc:	e0db      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fbe:	4b73      	ldr	r3, [pc, #460]	; (800518c <HAL_RCC_GetSysClockFreq+0x208>)
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc2:	e0d8      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc4:	4b6f      	ldr	r3, [pc, #444]	; (8005184 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fce:	4b6d      	ldr	r3, [pc, #436]	; (8005184 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d063      	beq.n	80050a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fda:	4b6a      	ldr	r3, [pc, #424]	; (8005184 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
 8004fee:	2300      	movs	r3, #0
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	f04f 0000 	mov.w	r0, #0
 8004ffe:	f04f 0100 	mov.w	r1, #0
 8005002:	0159      	lsls	r1, r3, #5
 8005004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005008:	0150      	lsls	r0, r2, #5
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4621      	mov	r1, r4
 8005010:	1a51      	subs	r1, r2, r1
 8005012:	6139      	str	r1, [r7, #16]
 8005014:	4629      	mov	r1, r5
 8005016:	eb63 0301 	sbc.w	r3, r3, r1
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005028:	4659      	mov	r1, fp
 800502a:	018b      	lsls	r3, r1, #6
 800502c:	4651      	mov	r1, sl
 800502e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005032:	4651      	mov	r1, sl
 8005034:	018a      	lsls	r2, r1, #6
 8005036:	4651      	mov	r1, sl
 8005038:	ebb2 0801 	subs.w	r8, r2, r1
 800503c:	4659      	mov	r1, fp
 800503e:	eb63 0901 	sbc.w	r9, r3, r1
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800504e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005056:	4690      	mov	r8, r2
 8005058:	4699      	mov	r9, r3
 800505a:	4623      	mov	r3, r4
 800505c:	eb18 0303 	adds.w	r3, r8, r3
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	462b      	mov	r3, r5
 8005064:	eb49 0303 	adc.w	r3, r9, r3
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005076:	4629      	mov	r1, r5
 8005078:	024b      	lsls	r3, r1, #9
 800507a:	4621      	mov	r1, r4
 800507c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005080:	4621      	mov	r1, r4
 8005082:	024a      	lsls	r2, r1, #9
 8005084:	4610      	mov	r0, r2
 8005086:	4619      	mov	r1, r3
 8005088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508a:	2200      	movs	r2, #0
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
 800508e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005094:	f7fb f91c 	bl	80002d0 <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4613      	mov	r3, r2
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a0:	e058      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	2200      	movs	r2, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	4611      	mov	r1, r2
 80050ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050b2:	623b      	str	r3, [r7, #32]
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	0159      	lsls	r1, r3, #5
 80050ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ce:	0150      	lsls	r0, r2, #5
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4641      	mov	r1, r8
 80050d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80050da:	4649      	mov	r1, r9
 80050dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050f4:	ebb2 040a 	subs.w	r4, r2, sl
 80050f8:	eb63 050b 	sbc.w	r5, r3, fp
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	00eb      	lsls	r3, r5, #3
 8005106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510a:	00e2      	lsls	r2, r4, #3
 800510c:	4614      	mov	r4, r2
 800510e:	461d      	mov	r5, r3
 8005110:	4643      	mov	r3, r8
 8005112:	18e3      	adds	r3, r4, r3
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	464b      	mov	r3, r9
 8005118:	eb45 0303 	adc.w	r3, r5, r3
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800512a:	4629      	mov	r1, r5
 800512c:	028b      	lsls	r3, r1, #10
 800512e:	4621      	mov	r1, r4
 8005130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005134:	4621      	mov	r1, r4
 8005136:	028a      	lsls	r2, r1, #10
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513e:	2200      	movs	r2, #0
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	61fa      	str	r2, [r7, #28]
 8005144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005148:	f7fb f8c2 	bl	80002d0 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4613      	mov	r3, r2
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_GetSysClockFreq+0x200>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	3301      	adds	r3, #1
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800516e:	e002      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetSysClockFreq+0x204>)
 8005172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005178:	4618      	mov	r0, r3
 800517a:	3750      	adds	r7, #80	; 0x50
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	00f42400 	.word	0x00f42400
 800518c:	007a1200 	.word	0x007a1200

08005190 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000004 	.word	0x20000004

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051ac:	f7ff fff0 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0a9b      	lsrs	r3, r3, #10
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800f4d4 	.word	0x0800f4d4

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051d4:	f7ff ffdc 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0b5b      	lsrs	r3, r3, #13
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	0800f4d4 	.word	0x0800f4d4

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d012      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800521c:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a64      	ldr	r2, [pc, #400]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005226:	6093      	str	r3, [r2, #8]
 8005228:	4b62      	ldr	r3, [pc, #392]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4960      	ldr	r1, [pc, #384]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800524e:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525c:	4955      	ldr	r1, [pc, #340]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526c:	d101      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800528a:	4b4a      	ldr	r3, [pc, #296]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	4946      	ldr	r1, [pc, #280]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a8:	d101      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 808b 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052c8:	4b3a      	ldr	r3, [pc, #232]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4a39      	ldr	r2, [pc, #228]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6413      	str	r3, [r2, #64]	; 0x40
 80052d4:	4b37      	ldr	r3, [pc, #220]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052e0:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ec:	f7fd f854 	bl	8002398 <HAL_GetTick>
 80052f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f4:	f7fd f850 	bl	8002398 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e2bc      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005306:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005312:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d035      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d02e      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005330:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800533a:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800534c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005350:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d114      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fd f818 	bl	8002398 <HAL_GetTick>
 8005368:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd f814 	bl	8002398 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e27e      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ee      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800539a:	d111      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	4901      	ldr	r1, [pc, #4]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
 80053b2:	e00b      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40007000 	.word	0x40007000
 80053bc:	0ffffcff 	.word	0x0ffffcff
 80053c0:	4ba4      	ldr	r3, [pc, #656]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4aa3      	ldr	r2, [pc, #652]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053ca:	6093      	str	r3, [r2, #8]
 80053cc:	4ba1      	ldr	r3, [pc, #644]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d8:	499e      	ldr	r1, [pc, #632]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d010      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053ea:	4b9a      	ldr	r3, [pc, #616]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	4a98      	ldr	r2, [pc, #608]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053fa:	4b96      	ldr	r3, [pc, #600]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80053fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	4993      	ldr	r1, [pc, #588]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005418:	4b8e      	ldr	r3, [pc, #568]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	498b      	ldr	r1, [pc, #556]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800543a:	4b86      	ldr	r3, [pc, #536]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005448:	4982      	ldr	r1, [pc, #520]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800545c:	4b7d      	ldr	r3, [pc, #500]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546a:	497a      	ldr	r1, [pc, #488]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800547e:	4b75      	ldr	r3, [pc, #468]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f023 0203 	bic.w	r2, r3, #3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	4971      	ldr	r1, [pc, #452]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054a0:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f023 020c 	bic.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	4969      	ldr	r1, [pc, #420]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054c2:	4b64      	ldr	r3, [pc, #400]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	4960      	ldr	r1, [pc, #384]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054e4:	4b5b      	ldr	r3, [pc, #364]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	4958      	ldr	r1, [pc, #352]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005506:	4b53      	ldr	r3, [pc, #332]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005514:	494f      	ldr	r1, [pc, #316]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005528:	4b4a      	ldr	r3, [pc, #296]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	4947      	ldr	r1, [pc, #284]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800554a:	4b42      	ldr	r3, [pc, #264]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	493e      	ldr	r1, [pc, #248]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800556c:	4b39      	ldr	r3, [pc, #228]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557a:	4936      	ldr	r1, [pc, #216]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d011      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800558e:	4b31      	ldr	r3, [pc, #196]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559c:	492d      	ldr	r1, [pc, #180]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ac:	d101      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055be:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055cc:	4921      	ldr	r1, [pc, #132]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055e0:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ee:	4919      	ldr	r1, [pc, #100]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005610:	4910      	ldr	r1, [pc, #64]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d006      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 809d 	beq.w	8005766 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a08      	ldr	r2, [pc, #32]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005638:	f7fc feae 	bl	8002398 <HAL_GetTick>
 800563c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800563e:	e00b      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005640:	f7fc feaa 	bl	8002398 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d904      	bls.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e116      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005658:	4b8b      	ldr	r3, [pc, #556]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ed      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d113      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005678:	4b83      	ldr	r3, [pc, #524]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	019a      	lsls	r2, r3, #6
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	071b      	lsls	r3, r3, #28
 8005698:	497b      	ldr	r1, [pc, #492]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d024      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ca:	d11f      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056cc:	4b6e      	ldr	r3, [pc, #440]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d2:	0f1b      	lsrs	r3, r3, #28
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	019a      	lsls	r2, r3, #6
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	061b      	lsls	r3, r3, #24
 80056e6:	431a      	orrs	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	071b      	lsls	r3, r3, #28
 80056ec:	4966      	ldr	r1, [pc, #408]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056f4:	4b64      	ldr	r3, [pc, #400]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80056f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fa:	f023 021f 	bic.w	r2, r3, #31
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	3b01      	subs	r3, #1
 8005704:	4960      	ldr	r1, [pc, #384]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	019a      	lsls	r2, r3, #6
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	061b      	lsls	r3, r3, #24
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	071b      	lsls	r3, r3, #28
 800572c:	4956      	ldr	r1, [pc, #344]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005734:	4b54      	ldr	r3, [pc, #336]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a53      	ldr	r2, [pc, #332]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800573a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800573e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005740:	f7fc fe2a 	bl	8002398 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005748:	f7fc fe26 	bl	8002398 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e092      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800575a:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b01      	cmp	r3, #1
 800576a:	f040 8088 	bne.w	800587e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800576e:	4b46      	ldr	r3, [pc, #280]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a45      	ldr	r2, [pc, #276]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577a:	f7fc fe0d 	bl	8002398 <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005782:	f7fc fe09 	bl	8002398 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b64      	cmp	r3, #100	; 0x64
 800578e:	d901      	bls.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e075      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005794:	4b3c      	ldr	r3, [pc, #240]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800579c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a0:	d0ef      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d024      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d120      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057ca:	4b2f      	ldr	r3, [pc, #188]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	019a      	lsls	r2, r3, #6
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	061b      	lsls	r3, r3, #24
 80057ea:	4927      	ldr	r1, [pc, #156]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057f2:	4b25      	ldr	r3, [pc, #148]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80057f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	3b01      	subs	r3, #1
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	4920      	ldr	r1, [pc, #128]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d018      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005820:	d113      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005822:	4b19      	ldr	r3, [pc, #100]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	0e1b      	lsrs	r3, r3, #24
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	019a      	lsls	r2, r3, #6
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	431a      	orrs	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	061b      	lsls	r3, r3, #24
 8005842:	4911      	ldr	r1, [pc, #68]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005856:	f7fc fd9f 	bl	8002398 <HAL_GetTick>
 800585a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800585e:	f7fc fd9b 	bl	8002398 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e007      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587c:	d1ef      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800

0800588c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e09d      	b.n	80059da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ae:	d009      	beq.n	80058c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
 80058b6:	e005      	b.n	80058c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc f9c0 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005904:	d902      	bls.n	800590c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e002      	b.n	8005912 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800590c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005910:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800591a:	d007      	beq.n	800592c <HAL_SPI_Init+0xa0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005924:	d002      	beq.n	800592c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	ea42 0103 	orr.w	r1, r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	0c1b      	lsrs	r3, r3, #16
 8005988:	f003 0204 	and.w	r2, r3, #4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059a8:	ea42 0103 	orr.w	r1, r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b088      	sub	sp, #32
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_SPI_Transmit+0x22>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e158      	b.n	8005cb6 <HAL_SPI_Transmit+0x2d4>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a0c:	f7fc fcc4 	bl	8002398 <HAL_GetTick>
 8005a10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
 8005a24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a26:	e13d      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_SPI_Transmit+0x52>
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a38:	e134      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a84:	d10f      	bne.n	8005aa6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005acc:	d94b      	bls.n	8005b66 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0xfa>
 8005ad6:	8afb      	ldrh	r3, [r7, #22]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d13e      	bne.n	8005b5a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b00:	e02b      	b.n	8005b5a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d112      	bne.n	8005b36 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b34:	e011      	b.n	8005b5a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b36:	f7fc fc2f 	bl	8002398 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d803      	bhi.n	8005b4e <HAL_SPI_Transmit+0x16c>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Transmit+0x172>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b58:	e0a4      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ce      	bne.n	8005b02 <HAL_SPI_Transmit+0x120>
 8005b64:	e07c      	b.n	8005c60 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Transmit+0x192>
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d170      	bne.n	8005c56 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d912      	bls.n	8005ba4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	881a      	ldrh	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	1c9a      	adds	r2, r3, #2
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b02      	subs	r3, #2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba2:	e058      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005bca:	e044      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d12b      	bne.n	8005c32 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d912      	bls.n	8005c0a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b02      	subs	r3, #2
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c08:	e025      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c30:	e011      	b.n	8005c56 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c32:	f7fc fbb1 	bl	8002398 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d803      	bhi.n	8005c4a <HAL_SPI_Transmit+0x268>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d102      	bne.n	8005c50 <HAL_SPI_Transmit+0x26e>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c54:	e026      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1b5      	bne.n	8005bcc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fd07 	bl	8006678 <SPI_EndRxTxTransaction>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e000      	b.n	8005ca4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b088      	sub	sp, #32
 8005cc2:	af02      	add	r7, sp, #8
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cda:	d112      	bne.n	8005d02 <HAL_SPI_Receive+0x44>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10e      	bne.n	8005d02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005cec:	88fa      	ldrh	r2, [r7, #6]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f910 	bl	8005f1e <HAL_SPI_TransmitReceive>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	e109      	b.n	8005f16 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_SPI_Receive+0x52>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e102      	b.n	8005f16 <HAL_SPI_Receive+0x258>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d18:	f7fc fb3e 	bl	8002398 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d2e:	e0e9      	b.n	8005f04 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Receive+0x7e>
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d40:	e0e0      	b.n	8005f04 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2204      	movs	r2, #4
 8005d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	88fa      	ldrh	r2, [r7, #6]
 8005d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	88fa      	ldrh	r2, [r7, #6]
 8005d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d8c:	d908      	bls.n	8005da0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	e007      	b.n	8005db0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db8:	d10f      	bne.n	8005dda <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d007      	beq.n	8005df8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e00:	d867      	bhi.n	8005ed2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e02:	e030      	b.n	8005e66 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d117      	bne.n	8005e42 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f103 020c 	add.w	r2, r3, #12
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	7812      	ldrb	r2, [r2, #0]
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e40:	e011      	b.n	8005e66 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e42:	f7fc faa9 	bl	8002398 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_Receive+0x19c>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_Receive+0x1a2>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e64:	e04e      	b.n	8005f04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1c8      	bne.n	8005e04 <HAL_SPI_Receive+0x146>
 8005e72:	e034      	b.n	8005ede <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d115      	bne.n	8005eae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	b292      	uxth	r2, r2
 8005e8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	1c9a      	adds	r2, r3, #2
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005eac:	e011      	b.n	8005ed2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eae:	f7fc fa73 	bl	8002398 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d803      	bhi.n	8005ec6 <HAL_SPI_Receive+0x208>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d102      	bne.n	8005ecc <HAL_SPI_Receive+0x20e>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ed0:	e018      	b.n	8005f04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ca      	bne.n	8005e74 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fb4c 	bl	8006580 <SPI_EndRxTransaction>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
 8005f00:	e000      	b.n	8005f04 <HAL_SPI_Receive+0x246>
  }

error :
 8005f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b08a      	sub	sp, #40	; 0x28
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x26>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e1fb      	b.n	800633c <HAL_SPI_TransmitReceive+0x41e>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4c:	f7fc fa24 	bl	8002398 <HAL_GetTick>
 8005f50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f60:	887b      	ldrh	r3, [r7, #2]
 8005f62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005f64:	887b      	ldrh	r3, [r7, #2]
 8005f66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f68:	7efb      	ldrb	r3, [r7, #27]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d00e      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x6e>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f74:	d106      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x66>
 8005f7e:	7efb      	ldrb	r3, [r7, #27]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d003      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f8a:	e1cd      	b.n	8006328 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x80>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x80>
 8005f98:	887b      	ldrh	r3, [r7, #2]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005fa4:	e1c0      	b.n	8006328 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d003      	beq.n	8005fba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	887a      	ldrh	r2, [r7, #2]
 8005fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	887a      	ldrh	r2, [r7, #2]
 8005fe6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ffc:	d802      	bhi.n	8006004 <HAL_SPI_TransmitReceive+0xe6>
 8005ffe:	8a3b      	ldrh	r3, [r7, #16]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d908      	bls.n	8006016 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006012:	605a      	str	r2, [r3, #4]
 8006014:	e007      	b.n	8006026 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d007      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800604c:	d97c      	bls.n	8006148 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SPI_TransmitReceive+0x13e>
 8006056:	8a7b      	ldrh	r3, [r7, #18]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d169      	bne.n	8006130 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006080:	e056      	b.n	8006130 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d11b      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x1aa>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x1aa>
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	2b01      	cmp	r3, #1
 800609e:	d113      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d11c      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x1f2>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	b292      	uxth	r2, r2
 80060ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800610c:	2301      	movs	r3, #1
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006110:	f7fc f942 	bl	8002398 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611c:	429a      	cmp	r2, r3
 800611e:	d807      	bhi.n	8006130 <HAL_SPI_TransmitReceive+0x212>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d003      	beq.n	8006130 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800612e:	e0fb      	b.n	8006328 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1a3      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x164>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d19d      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x164>
 8006146:	e0df      	b.n	8006308 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x23a>
 8006150:	8a7b      	ldrh	r3, [r7, #18]
 8006152:	2b01      	cmp	r3, #1
 8006154:	f040 80cb 	bne.w	80062ee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d912      	bls.n	8006188 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b02      	subs	r3, #2
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006186:	e0b2      	b.n	80062ee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ae:	e09e      	b.n	80062ee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d134      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x30a>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d02f      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x30a>
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d12c      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d912      	bls.n	80061fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b02      	subs	r3, #2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061fc:	e012      	b.n	8006224 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d148      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x3aa>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d042      	beq.n	80062c8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	d923      	bls.n	8006296 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	b292      	uxth	r2, r2
 800625a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	1c9a      	adds	r2, r3, #2
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b02      	subs	r3, #2
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	d81f      	bhi.n	80062c4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006292:	605a      	str	r2, [r3, #4]
 8006294:	e016      	b.n	80062c4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f103 020c 	add.w	r2, r3, #12
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	7812      	ldrb	r2, [r2, #0]
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062c4:	2301      	movs	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062c8:	f7fc f866 	bl	8002398 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d803      	bhi.n	80062e0 <HAL_SPI_TransmitReceive+0x3c2>
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d102      	bne.n	80062e6 <HAL_SPI_TransmitReceive+0x3c8>
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062ec:	e01c      	b.n	8006328 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f47f af5b 	bne.w	80061b0 <HAL_SPI_TransmitReceive+0x292>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	f47f af54 	bne.w	80061b0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f9b3 	bl	8006678 <SPI_EndRxTxTransaction>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	661a      	str	r2, [r3, #96]	; 0x60
 8006324:	e000      	b.n	8006328 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800633c:	4618      	mov	r0, r3
 800633e:	3728      	adds	r7, #40	; 0x28
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006354:	f7fc f820 	bl	8002398 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	1a9b      	subs	r3, r3, r2
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	4413      	add	r3, r2
 8006362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006364:	f7fc f818 	bl	8002398 <HAL_GetTick>
 8006368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800636a:	4b39      	ldr	r3, [pc, #228]	; (8006450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	015b      	lsls	r3, r3, #5
 8006370:	0d1b      	lsrs	r3, r3, #20
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800637a:	e054      	b.n	8006426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d050      	beq.n	8006426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006384:	f7fc f808 	bl	8002398 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	429a      	cmp	r2, r3
 8006392:	d902      	bls.n	800639a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d13d      	bne.n	8006416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063b2:	d111      	bne.n	80063d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063bc:	d004      	beq.n	80063c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c6:	d107      	bne.n	80063d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d10f      	bne.n	8006402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e017      	b.n	8006446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3b01      	subs	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	429a      	cmp	r2, r3
 8006442:	d19b      	bne.n	800637c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000004 	.word	0x20000004

08006454 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006466:	f7fb ff97 	bl	8002398 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	4413      	add	r3, r2
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006476:	f7fb ff8f 	bl	8002398 <HAL_GetTick>
 800647a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006484:	4b3d      	ldr	r3, [pc, #244]	; (800657c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	00da      	lsls	r2, r3, #3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	0d1b      	lsrs	r3, r3, #20
 8006494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006496:	fb02 f303 	mul.w	r3, r2, r3
 800649a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800649c:	e060      	b.n	8006560 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064a4:	d107      	bne.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d050      	beq.n	8006560 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064be:	f7fb ff6b 	bl	8002398 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d902      	bls.n	80064d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d13d      	bne.n	8006550 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ec:	d111      	bne.n	8006512 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f6:	d004      	beq.n	8006502 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d107      	bne.n	8006512 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006510:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	d10f      	bne.n	800653c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800653a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e010      	b.n	8006572 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	3b01      	subs	r3, #1
 800655e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d196      	bne.n	800649e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3728      	adds	r7, #40	; 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000004 	.word	0x20000004

08006580 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006594:	d111      	bne.n	80065ba <SPI_EndRxTransaction+0x3a>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659e:	d004      	beq.n	80065aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a8:	d107      	bne.n	80065ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c2:	d112      	bne.n	80065ea <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	2180      	movs	r1, #128	; 0x80
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7ff feb8 	bl	8006344 <SPI_WaitFlagStateUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d021      	beq.n	800661e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065de:	f043 0220 	orr.w	r2, r3, #32
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e03d      	b.n	8006666 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065ea:	4b21      	ldr	r3, [pc, #132]	; (8006670 <SPI_EndRxTransaction+0xf0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a21      	ldr	r2, [pc, #132]	; (8006674 <SPI_EndRxTransaction+0xf4>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	0d5b      	lsrs	r3, r3, #21
 80065f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	3b01      	subs	r3, #1
 800660a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d0f2      	beq.n	8006600 <SPI_EndRxTransaction+0x80>
 800661a:	e000      	b.n	800661e <SPI_EndRxTransaction+0x9e>
        break;
 800661c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d11d      	bne.n	8006664 <SPI_EndRxTransaction+0xe4>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006630:	d004      	beq.n	800663c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663a:	d113      	bne.n	8006664 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2200      	movs	r2, #0
 8006644:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7ff ff03 	bl	8006454 <SPI_WaitFifoStateUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e000      	b.n	8006666 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000004 	.word	0x20000004
 8006674:	165e9f81 	.word	0x165e9f81

08006678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff fedf 	bl	8006454 <SPI_WaitFifoStateUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e046      	b.n	800673a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <SPI_EndRxTxTransaction+0xcc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a25      	ldr	r2, [pc, #148]	; (8006748 <SPI_EndRxTxTransaction+0xd0>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	0d5b      	lsrs	r3, r3, #21
 80066b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ca:	d112      	bne.n	80066f2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2200      	movs	r2, #0
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fe34 	bl	8006344 <SPI_WaitFlagStateUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e023      	b.n	800673a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d0f2      	beq.n	80066f2 <SPI_EndRxTxTransaction+0x7a>
 800670c:	e000      	b.n	8006710 <SPI_EndRxTxTransaction+0x98>
        break;
 800670e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2200      	movs	r2, #0
 8006718:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff fe99 	bl	8006454 <SPI_WaitFifoStateUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e000      	b.n	800673a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000004 	.word	0x20000004
 8006748:	165e9f81 	.word	0x165e9f81

0800674c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e040      	b.n	80067e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fb fb3c 	bl	8001dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2224      	movs	r2, #36	; 0x24
 8006778:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f82c 	bl	80067e8 <UART_SetConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e022      	b.n	80067e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa84 	bl	8006cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb0b 	bl	8006df4 <UART_CheckIdleState>
 80067de:	4603      	mov	r3, r0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4ba6      	ldr	r3, [pc, #664]	; (8006aac <UART_SetConfig+0x2c4>)
 8006814:	4013      	ands	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	6979      	ldr	r1, [r7, #20]
 800681c:	430b      	orrs	r3, r1
 800681e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	430a      	orrs	r2, r1
 8006858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a94      	ldr	r2, [pc, #592]	; (8006ab0 <UART_SetConfig+0x2c8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d120      	bne.n	80068a6 <UART_SetConfig+0xbe>
 8006864:	4b93      	ldr	r3, [pc, #588]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b03      	cmp	r3, #3
 8006870:	d816      	bhi.n	80068a0 <UART_SetConfig+0xb8>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x90>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006889 	.word	0x08006889
 800687c:	08006895 	.word	0x08006895
 8006880:	0800688f 	.word	0x0800688f
 8006884:	0800689b 	.word	0x0800689b
 8006888:	2301      	movs	r3, #1
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e150      	b.n	8006b30 <UART_SetConfig+0x348>
 800688e:	2302      	movs	r3, #2
 8006890:	77fb      	strb	r3, [r7, #31]
 8006892:	e14d      	b.n	8006b30 <UART_SetConfig+0x348>
 8006894:	2304      	movs	r3, #4
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e14a      	b.n	8006b30 <UART_SetConfig+0x348>
 800689a:	2308      	movs	r3, #8
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e147      	b.n	8006b30 <UART_SetConfig+0x348>
 80068a0:	2310      	movs	r3, #16
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e144      	b.n	8006b30 <UART_SetConfig+0x348>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a83      	ldr	r2, [pc, #524]	; (8006ab8 <UART_SetConfig+0x2d0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d132      	bne.n	8006916 <UART_SetConfig+0x12e>
 80068b0:	4b80      	ldr	r3, [pc, #512]	; (8006ab4 <UART_SetConfig+0x2cc>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b0c      	cmp	r3, #12
 80068bc:	d828      	bhi.n	8006910 <UART_SetConfig+0x128>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0xdc>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006911 	.word	0x08006911
 80068cc:	08006911 	.word	0x08006911
 80068d0:	08006911 	.word	0x08006911
 80068d4:	08006905 	.word	0x08006905
 80068d8:	08006911 	.word	0x08006911
 80068dc:	08006911 	.word	0x08006911
 80068e0:	08006911 	.word	0x08006911
 80068e4:	080068ff 	.word	0x080068ff
 80068e8:	08006911 	.word	0x08006911
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006911 	.word	0x08006911
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e118      	b.n	8006b30 <UART_SetConfig+0x348>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e115      	b.n	8006b30 <UART_SetConfig+0x348>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e112      	b.n	8006b30 <UART_SetConfig+0x348>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e10f      	b.n	8006b30 <UART_SetConfig+0x348>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e10c      	b.n	8006b30 <UART_SetConfig+0x348>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a68      	ldr	r2, [pc, #416]	; (8006abc <UART_SetConfig+0x2d4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d120      	bne.n	8006962 <UART_SetConfig+0x17a>
 8006920:	4b64      	ldr	r3, [pc, #400]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800692a:	2b30      	cmp	r3, #48	; 0x30
 800692c:	d013      	beq.n	8006956 <UART_SetConfig+0x16e>
 800692e:	2b30      	cmp	r3, #48	; 0x30
 8006930:	d814      	bhi.n	800695c <UART_SetConfig+0x174>
 8006932:	2b20      	cmp	r3, #32
 8006934:	d009      	beq.n	800694a <UART_SetConfig+0x162>
 8006936:	2b20      	cmp	r3, #32
 8006938:	d810      	bhi.n	800695c <UART_SetConfig+0x174>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <UART_SetConfig+0x15c>
 800693e:	2b10      	cmp	r3, #16
 8006940:	d006      	beq.n	8006950 <UART_SetConfig+0x168>
 8006942:	e00b      	b.n	800695c <UART_SetConfig+0x174>
 8006944:	2300      	movs	r3, #0
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e0f2      	b.n	8006b30 <UART_SetConfig+0x348>
 800694a:	2302      	movs	r3, #2
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e0ef      	b.n	8006b30 <UART_SetConfig+0x348>
 8006950:	2304      	movs	r3, #4
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e0ec      	b.n	8006b30 <UART_SetConfig+0x348>
 8006956:	2308      	movs	r3, #8
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e0e9      	b.n	8006b30 <UART_SetConfig+0x348>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e0e6      	b.n	8006b30 <UART_SetConfig+0x348>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a56      	ldr	r2, [pc, #344]	; (8006ac0 <UART_SetConfig+0x2d8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d120      	bne.n	80069ae <UART_SetConfig+0x1c6>
 800696c:	4b51      	ldr	r3, [pc, #324]	; (8006ab4 <UART_SetConfig+0x2cc>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006976:	2bc0      	cmp	r3, #192	; 0xc0
 8006978:	d013      	beq.n	80069a2 <UART_SetConfig+0x1ba>
 800697a:	2bc0      	cmp	r3, #192	; 0xc0
 800697c:	d814      	bhi.n	80069a8 <UART_SetConfig+0x1c0>
 800697e:	2b80      	cmp	r3, #128	; 0x80
 8006980:	d009      	beq.n	8006996 <UART_SetConfig+0x1ae>
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d810      	bhi.n	80069a8 <UART_SetConfig+0x1c0>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <UART_SetConfig+0x1a8>
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	d006      	beq.n	800699c <UART_SetConfig+0x1b4>
 800698e:	e00b      	b.n	80069a8 <UART_SetConfig+0x1c0>
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e0cc      	b.n	8006b30 <UART_SetConfig+0x348>
 8006996:	2302      	movs	r3, #2
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e0c9      	b.n	8006b30 <UART_SetConfig+0x348>
 800699c:	2304      	movs	r3, #4
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e0c6      	b.n	8006b30 <UART_SetConfig+0x348>
 80069a2:	2308      	movs	r3, #8
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e0c3      	b.n	8006b30 <UART_SetConfig+0x348>
 80069a8:	2310      	movs	r3, #16
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e0c0      	b.n	8006b30 <UART_SetConfig+0x348>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a44      	ldr	r2, [pc, #272]	; (8006ac4 <UART_SetConfig+0x2dc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d125      	bne.n	8006a04 <UART_SetConfig+0x21c>
 80069b8:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <UART_SetConfig+0x2cc>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c6:	d017      	beq.n	80069f8 <UART_SetConfig+0x210>
 80069c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069cc:	d817      	bhi.n	80069fe <UART_SetConfig+0x216>
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d2:	d00b      	beq.n	80069ec <UART_SetConfig+0x204>
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d8:	d811      	bhi.n	80069fe <UART_SetConfig+0x216>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <UART_SetConfig+0x1fe>
 80069de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e2:	d006      	beq.n	80069f2 <UART_SetConfig+0x20a>
 80069e4:	e00b      	b.n	80069fe <UART_SetConfig+0x216>
 80069e6:	2300      	movs	r3, #0
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e0a1      	b.n	8006b30 <UART_SetConfig+0x348>
 80069ec:	2302      	movs	r3, #2
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e09e      	b.n	8006b30 <UART_SetConfig+0x348>
 80069f2:	2304      	movs	r3, #4
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e09b      	b.n	8006b30 <UART_SetConfig+0x348>
 80069f8:	2308      	movs	r3, #8
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e098      	b.n	8006b30 <UART_SetConfig+0x348>
 80069fe:	2310      	movs	r3, #16
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e095      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2f      	ldr	r2, [pc, #188]	; (8006ac8 <UART_SetConfig+0x2e0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d125      	bne.n	8006a5a <UART_SetConfig+0x272>
 8006a0e:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a1c:	d017      	beq.n	8006a4e <UART_SetConfig+0x266>
 8006a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a22:	d817      	bhi.n	8006a54 <UART_SetConfig+0x26c>
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d00b      	beq.n	8006a42 <UART_SetConfig+0x25a>
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2e:	d811      	bhi.n	8006a54 <UART_SetConfig+0x26c>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <UART_SetConfig+0x254>
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d006      	beq.n	8006a48 <UART_SetConfig+0x260>
 8006a3a:	e00b      	b.n	8006a54 <UART_SetConfig+0x26c>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e076      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a42:	2302      	movs	r3, #2
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e073      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e070      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a4e:	2308      	movs	r3, #8
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e06d      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a54:	2310      	movs	r3, #16
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e06a      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <UART_SetConfig+0x2e4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d138      	bne.n	8006ad6 <UART_SetConfig+0x2ee>
 8006a64:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a72:	d017      	beq.n	8006aa4 <UART_SetConfig+0x2bc>
 8006a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a78:	d82a      	bhi.n	8006ad0 <UART_SetConfig+0x2e8>
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7e:	d00b      	beq.n	8006a98 <UART_SetConfig+0x2b0>
 8006a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a84:	d824      	bhi.n	8006ad0 <UART_SetConfig+0x2e8>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <UART_SetConfig+0x2aa>
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8e:	d006      	beq.n	8006a9e <UART_SetConfig+0x2b6>
 8006a90:	e01e      	b.n	8006ad0 <UART_SetConfig+0x2e8>
 8006a92:	2300      	movs	r3, #0
 8006a94:	77fb      	strb	r3, [r7, #31]
 8006a96:	e04b      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e048      	b.n	8006b30 <UART_SetConfig+0x348>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e045      	b.n	8006b30 <UART_SetConfig+0x348>
 8006aa4:	2308      	movs	r3, #8
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e042      	b.n	8006b30 <UART_SetConfig+0x348>
 8006aaa:	bf00      	nop
 8006aac:	efff69f3 	.word	0xefff69f3
 8006ab0:	40011000 	.word	0x40011000
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	40004400 	.word	0x40004400
 8006abc:	40004800 	.word	0x40004800
 8006ac0:	40004c00 	.word	0x40004c00
 8006ac4:	40005000 	.word	0x40005000
 8006ac8:	40011400 	.word	0x40011400
 8006acc:	40007800 	.word	0x40007800
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e02c      	b.n	8006b30 <UART_SetConfig+0x348>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a72      	ldr	r2, [pc, #456]	; (8006ca4 <UART_SetConfig+0x4bc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d125      	bne.n	8006b2c <UART_SetConfig+0x344>
 8006ae0:	4b71      	ldr	r3, [pc, #452]	; (8006ca8 <UART_SetConfig+0x4c0>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006aea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aee:	d017      	beq.n	8006b20 <UART_SetConfig+0x338>
 8006af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006af4:	d817      	bhi.n	8006b26 <UART_SetConfig+0x33e>
 8006af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006afa:	d00b      	beq.n	8006b14 <UART_SetConfig+0x32c>
 8006afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b00:	d811      	bhi.n	8006b26 <UART_SetConfig+0x33e>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <UART_SetConfig+0x326>
 8006b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b0a:	d006      	beq.n	8006b1a <UART_SetConfig+0x332>
 8006b0c:	e00b      	b.n	8006b26 <UART_SetConfig+0x33e>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e00d      	b.n	8006b30 <UART_SetConfig+0x348>
 8006b14:	2302      	movs	r3, #2
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e00a      	b.n	8006b30 <UART_SetConfig+0x348>
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e007      	b.n	8006b30 <UART_SetConfig+0x348>
 8006b20:	2308      	movs	r3, #8
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e004      	b.n	8006b30 <UART_SetConfig+0x348>
 8006b26:	2310      	movs	r3, #16
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e001      	b.n	8006b30 <UART_SetConfig+0x348>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b38:	d15b      	bne.n	8006bf2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b3a:	7ffb      	ldrb	r3, [r7, #31]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d828      	bhi.n	8006b92 <UART_SetConfig+0x3aa>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x360>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b7d 	.word	0x08006b7d
 8006b54:	08006b93 	.word	0x08006b93
 8006b58:	08006b83 	.word	0x08006b83
 8006b5c:	08006b93 	.word	0x08006b93
 8006b60:	08006b93 	.word	0x08006b93
 8006b64:	08006b93 	.word	0x08006b93
 8006b68:	08006b8b 	.word	0x08006b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b6c:	f7fe fb1c 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8006b70:	61b8      	str	r0, [r7, #24]
        break;
 8006b72:	e013      	b.n	8006b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b74:	f7fe fb2c 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006b78:	61b8      	str	r0, [r7, #24]
        break;
 8006b7a:	e00f      	b.n	8006b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b7c:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <UART_SetConfig+0x4c4>)
 8006b7e:	61bb      	str	r3, [r7, #24]
        break;
 8006b80:	e00c      	b.n	8006b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b82:	f7fe f9ff 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8006b86:	61b8      	str	r0, [r7, #24]
        break;
 8006b88:	e008      	b.n	8006b9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8e:	61bb      	str	r3, [r7, #24]
        break;
 8006b90:	e004      	b.n	8006b9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	77bb      	strb	r3, [r7, #30]
        break;
 8006b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d074      	beq.n	8006c8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	005a      	lsls	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	441a      	add	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b0f      	cmp	r3, #15
 8006bbc:	d916      	bls.n	8006bec <UART_SetConfig+0x404>
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d212      	bcs.n	8006bec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f023 030f 	bic.w	r3, r3, #15
 8006bce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	89fa      	ldrh	r2, [r7, #14]
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	e04f      	b.n	8006c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	77bb      	strb	r3, [r7, #30]
 8006bf0:	e04c      	b.n	8006c8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf2:	7ffb      	ldrb	r3, [r7, #31]
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d828      	bhi.n	8006c4a <UART_SetConfig+0x462>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <UART_SetConfig+0x418>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c25 	.word	0x08006c25
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	08006c4b 	.word	0x08006c4b
 8006c10:	08006c3b 	.word	0x08006c3b
 8006c14:	08006c4b 	.word	0x08006c4b
 8006c18:	08006c4b 	.word	0x08006c4b
 8006c1c:	08006c4b 	.word	0x08006c4b
 8006c20:	08006c43 	.word	0x08006c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c24:	f7fe fac0 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8006c28:	61b8      	str	r0, [r7, #24]
        break;
 8006c2a:	e013      	b.n	8006c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fe fad0 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006c30:	61b8      	str	r0, [r7, #24]
        break;
 8006c32:	e00f      	b.n	8006c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <UART_SetConfig+0x4c4>)
 8006c36:	61bb      	str	r3, [r7, #24]
        break;
 8006c38:	e00c      	b.n	8006c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe f9a3 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8006c3e:	61b8      	str	r0, [r7, #24]
        break;
 8006c40:	e008      	b.n	8006c54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c46:	61bb      	str	r3, [r7, #24]
        break;
 8006c48:	e004      	b.n	8006c54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	77bb      	strb	r3, [r7, #30]
        break;
 8006c52:	bf00      	nop
    }

    if (pclk != 0U)
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d018      	beq.n	8006c8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	085a      	lsrs	r2, r3, #1
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	441a      	add	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b0f      	cmp	r3, #15
 8006c72:	d909      	bls.n	8006c88 <UART_SetConfig+0x4a0>
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d205      	bcs.n	8006c88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	e001      	b.n	8006c8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c98:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3720      	adds	r7, #32
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40007c00 	.word	0x40007c00
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	00f42400 	.word	0x00f42400

08006cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dae:	d10a      	bne.n	8006dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e04:	f7fb fac8 	bl	8002398 <HAL_GetTick>
 8006e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d10e      	bne.n	8006e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f81b 	bl	8006e62 <UART_WaitOnFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e011      	b.n	8006e5a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b09c      	sub	sp, #112	; 0x70
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	603b      	str	r3, [r7, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e72:	e0a7      	b.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	f000 80a3 	beq.w	8006fc4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7e:	f7fb fa8b 	bl	8002398 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d13f      	bne.n	8006f14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006eb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e6      	bne.n	8006e94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ee6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e068      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d050      	beq.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f30:	d148      	bne.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e6      	bne.n	8006f3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f023 0301 	bic.w	r3, r3, #1
 8006f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f8e:	623a      	str	r2, [r7, #32]
 8006f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	69f9      	ldr	r1, [r7, #28]
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e010      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	bf0c      	ite	eq
 8006fd4:	2301      	moveq	r3, #1
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	f43f af48 	beq.w	8006e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3770      	adds	r7, #112	; 0x70
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	f107 001c 	add.w	r0, r7, #28
 8006ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	2b01      	cmp	r3, #1
 8007006:	d126      	bne.n	8007056 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	4b38      	ldr	r3, [pc, #224]	; (80070fc <USB_CoreInit+0x10c>)
 800701a:	4013      	ands	r3, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f043 0210 	orr.w	r2, r3, #16
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d105      	bne.n	800704a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fc28 	bl	80088a0 <USB_CoreReset>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
 8007054:	e03a      	b.n	80070cc <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	2b03      	cmp	r3, #3
 800705a:	d126      	bne.n	80070aa <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <USB_CoreInit+0x10c>)
 800706e:	4013      	ands	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f023 0210 	bic.w	r2, r3, #16
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800708c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708e:	2b01      	cmp	r3, #1
 8007090:	d105      	bne.n	800709e <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fbfe 	bl	80088a0 <USB_CoreReset>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
 80070a8:	e010      	b.n	80070cc <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fbf2 	bl	80088a0 <USB_CoreReset>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10b      	bne.n	80070ea <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f043 0206 	orr.w	r2, r3, #6
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f043 0220 	orr.w	r2, r3, #32
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f6:	b004      	add	sp, #16
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	ffbdffbf 	.word	0xffbdffbf

08007100 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d165      	bne.n	80071e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a41      	ldr	r2, [pc, #260]	; (800721c <USB_SetTurnaroundTime+0x11c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d906      	bls.n	800712a <USB_SetTurnaroundTime+0x2a>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a40      	ldr	r2, [pc, #256]	; (8007220 <USB_SetTurnaroundTime+0x120>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d202      	bcs.n	800712a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007124:	230f      	movs	r3, #15
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e062      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a3c      	ldr	r2, [pc, #240]	; (8007220 <USB_SetTurnaroundTime+0x120>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d306      	bcc.n	8007140 <USB_SetTurnaroundTime+0x40>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a3b      	ldr	r2, [pc, #236]	; (8007224 <USB_SetTurnaroundTime+0x124>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d202      	bcs.n	8007140 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800713a:	230e      	movs	r3, #14
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e057      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a38      	ldr	r2, [pc, #224]	; (8007224 <USB_SetTurnaroundTime+0x124>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d306      	bcc.n	8007156 <USB_SetTurnaroundTime+0x56>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a37      	ldr	r2, [pc, #220]	; (8007228 <USB_SetTurnaroundTime+0x128>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d202      	bcs.n	8007156 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007150:	230d      	movs	r3, #13
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e04c      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4a33      	ldr	r2, [pc, #204]	; (8007228 <USB_SetTurnaroundTime+0x128>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d306      	bcc.n	800716c <USB_SetTurnaroundTime+0x6c>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a32      	ldr	r2, [pc, #200]	; (800722c <USB_SetTurnaroundTime+0x12c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d802      	bhi.n	800716c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007166:	230c      	movs	r3, #12
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	e041      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4a2f      	ldr	r2, [pc, #188]	; (800722c <USB_SetTurnaroundTime+0x12c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d906      	bls.n	8007182 <USB_SetTurnaroundTime+0x82>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4a2e      	ldr	r2, [pc, #184]	; (8007230 <USB_SetTurnaroundTime+0x130>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d802      	bhi.n	8007182 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800717c:	230b      	movs	r3, #11
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	e036      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4a2a      	ldr	r2, [pc, #168]	; (8007230 <USB_SetTurnaroundTime+0x130>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d906      	bls.n	8007198 <USB_SetTurnaroundTime+0x98>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	4a29      	ldr	r2, [pc, #164]	; (8007234 <USB_SetTurnaroundTime+0x134>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d802      	bhi.n	8007198 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007192:	230a      	movs	r3, #10
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	e02b      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4a26      	ldr	r2, [pc, #152]	; (8007234 <USB_SetTurnaroundTime+0x134>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d906      	bls.n	80071ae <USB_SetTurnaroundTime+0xae>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4a25      	ldr	r2, [pc, #148]	; (8007238 <USB_SetTurnaroundTime+0x138>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d202      	bcs.n	80071ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80071a8:	2309      	movs	r3, #9
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	e020      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4a21      	ldr	r2, [pc, #132]	; (8007238 <USB_SetTurnaroundTime+0x138>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d306      	bcc.n	80071c4 <USB_SetTurnaroundTime+0xc4>
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4a20      	ldr	r2, [pc, #128]	; (800723c <USB_SetTurnaroundTime+0x13c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d802      	bhi.n	80071c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80071be:	2308      	movs	r3, #8
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	e015      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <USB_SetTurnaroundTime+0x13c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d906      	bls.n	80071da <USB_SetTurnaroundTime+0xda>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <USB_SetTurnaroundTime+0x140>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d202      	bcs.n	80071da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071d4:	2307      	movs	r3, #7
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	e00a      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071da:	2306      	movs	r3, #6
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	e007      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071e6:	2309      	movs	r3, #9
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e001      	b.n	80071f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071ec:	2309      	movs	r3, #9
 80071ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	029b      	lsls	r3, r3, #10
 8007204:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007208:	431a      	orrs	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	00d8acbf 	.word	0x00d8acbf
 8007220:	00e4e1c0 	.word	0x00e4e1c0
 8007224:	00f42400 	.word	0x00f42400
 8007228:	01067380 	.word	0x01067380
 800722c:	011a499f 	.word	0x011a499f
 8007230:	01312cff 	.word	0x01312cff
 8007234:	014ca43f 	.word	0x014ca43f
 8007238:	016e3600 	.word	0x016e3600
 800723c:	01a6ab1f 	.word	0x01a6ab1f
 8007240:	01e84800 	.word	0x01e84800

08007244 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f043 0201 	orr.w	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f023 0201 	bic.w	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d115      	bne.n	80072d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072b6:	2001      	movs	r0, #1
 80072b8:	f7fb f87a 	bl	80023b0 <HAL_Delay>
      ms++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fa5b 	bl	800877e <USB_GetMode>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d01e      	beq.n	800730c <USB_SetCurrentMode+0x84>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b31      	cmp	r3, #49	; 0x31
 80072d2:	d9f0      	bls.n	80072b6 <USB_SetCurrentMode+0x2e>
 80072d4:	e01a      	b.n	800730c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d115      	bne.n	8007308 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072e8:	2001      	movs	r0, #1
 80072ea:	f7fb f861 	bl	80023b0 <HAL_Delay>
      ms++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3301      	adds	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fa42 	bl	800877e <USB_GetMode>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <USB_SetCurrentMode+0x84>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b31      	cmp	r3, #49	; 0x31
 8007304:	d9f0      	bls.n	80072e8 <USB_SetCurrentMode+0x60>
 8007306:	e001      	b.n	800730c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e005      	b.n	8007318 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b32      	cmp	r3, #50	; 0x32
 8007310:	d101      	bne.n	8007316 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e000      	b.n	8007318 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007320:	b084      	sub	sp, #16
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800732e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e009      	b.n	8007354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3340      	adds	r3, #64	; 0x40
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	2200      	movs	r2, #0
 800734c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3301      	adds	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b0e      	cmp	r3, #14
 8007358:	d9f2      	bls.n	8007340 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800735a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d11c      	bne.n	800739a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800736e:	f043 0302 	orr.w	r3, r3, #2
 8007372:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e005      	b.n	80073a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ac:	461a      	mov	r2, r3
 80073ae:	2300      	movs	r3, #0
 80073b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b8:	4619      	mov	r1, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c0:	461a      	mov	r2, r3
 80073c2:	680b      	ldr	r3, [r1, #0]
 80073c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d10c      	bne.n	80073e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073d2:	2100      	movs	r1, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f975 	bl	80076c4 <USB_SetDevSpeed>
 80073da:	e018      	b.n	800740e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f970 	bl	80076c4 <USB_SetDevSpeed>
 80073e4:	e013      	b.n	800740e <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d10c      	bne.n	8007406 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073f2:	2100      	movs	r1, #0
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f965 	bl	80076c4 <USB_SetDevSpeed>
 80073fa:	e008      	b.n	800740e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073fc:	2101      	movs	r1, #1
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f960 	bl	80076c4 <USB_SetDevSpeed>
 8007404:	e003      	b.n	800740e <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007406:	2103      	movs	r1, #3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f95b 	bl	80076c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800740e:	2110      	movs	r1, #16
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f8f3 	bl	80075fc <USB_FlushTxFifo>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f91f 	bl	8007664 <USB_FlushRxFifo>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007436:	461a      	mov	r2, r3
 8007438:	2300      	movs	r3, #0
 800743a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007442:	461a      	mov	r2, r3
 8007444:	2300      	movs	r3, #0
 8007446:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	461a      	mov	r2, r3
 8007450:	2300      	movs	r3, #0
 8007452:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	e043      	b.n	80074e2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800746c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007470:	d118      	bne.n	80074a4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10a      	bne.n	800748e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	461a      	mov	r2, r3
 8007486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	e013      	b.n	80074b6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	461a      	mov	r2, r3
 800749c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e008      	b.n	80074b6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	461a      	mov	r2, r3
 80074b2:	2300      	movs	r3, #0
 80074b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c2:	461a      	mov	r2, r3
 80074c4:	2300      	movs	r3, #0
 80074c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d4:	461a      	mov	r2, r3
 80074d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	3301      	adds	r3, #1
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d3b7      	bcc.n	800745a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	e043      	b.n	8007578 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007506:	d118      	bne.n	800753a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	461a      	mov	r2, r3
 800751c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e013      	b.n	800754c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	461a      	mov	r2, r3
 8007532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e008      	b.n	800754c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007546:	461a      	mov	r2, r3
 8007548:	2300      	movs	r3, #0
 800754a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	461a      	mov	r2, r3
 800756c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3301      	adds	r3, #1
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	429a      	cmp	r2, r3
 800757e:	d3b7      	bcc.n	80074f0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800758e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007592:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80075a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d105      	bne.n	80075b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f043 0210 	orr.w	r2, r3, #16
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <USB_DevInit+0x2d4>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f043 0208 	orr.w	r2, r3, #8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80075d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d105      	bne.n	80075e4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <USB_DevInit+0x2d8>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f0:	b004      	add	sp, #16
 80075f2:	4770      	bx	lr
 80075f4:	803c3800 	.word	0x803c3800
 80075f8:	40000004 	.word	0x40000004

080075fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a13      	ldr	r2, [pc, #76]	; (8007660 <USB_FlushTxFifo+0x64>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d901      	bls.n	800761c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e01b      	b.n	8007654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	daf2      	bge.n	800760a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	019b      	lsls	r3, r3, #6
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4a08      	ldr	r2, [pc, #32]	; (8007660 <USB_FlushTxFifo+0x64>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e006      	b.n	8007654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b20      	cmp	r3, #32
 8007650:	d0f0      	beq.n	8007634 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	00030d40 	.word	0x00030d40

08007664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <USB_FlushRxFifo+0x5c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e018      	b.n	80076b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	daf2      	bge.n	8007670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2210      	movs	r2, #16
 8007692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <USB_FlushRxFifo+0x5c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e006      	b.n	80076b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d0f0      	beq.n	8007694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	00030d40 	.word	0x00030d40

080076c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e4:	4313      	orrs	r3, r2
 80076e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b087      	sub	sp, #28
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 0306 	and.w	r3, r3, #6
 800770e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007716:	2300      	movs	r3, #0
 8007718:	75fb      	strb	r3, [r7, #23]
 800771a:	e00a      	b.n	8007732 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d002      	beq.n	8007728 <USB_GetDevSpeed+0x32>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b06      	cmp	r3, #6
 8007726:	d102      	bne.n	800772e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007728:	2302      	movs	r3, #2
 800772a:	75fb      	strb	r3, [r7, #23]
 800772c:	e001      	b.n	8007732 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800772e:	230f      	movs	r3, #15
 8007730:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d139      	bne.n	80077d0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	2101      	movs	r1, #1
 800776e:	fa01 f303 	lsl.w	r3, r1, r3
 8007772:	b29b      	uxth	r3, r3
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800777a:	4313      	orrs	r3, r2
 800777c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d153      	bne.n	800783c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	791b      	ldrb	r3, [r3, #4]
 80077ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	059b      	lsls	r3, r3, #22
 80077b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	0159      	lsls	r1, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	440b      	add	r3, r1
 80077c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c6:	4619      	mov	r1, r3
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <USB_ActivateEndpoint+0x10c>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	600b      	str	r3, [r1, #0]
 80077ce:	e035      	b.n	800783c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	2101      	movs	r1, #1
 80077e2:	fa01 f303 	lsl.w	r3, r1, r3
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d119      	bne.n	800783c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	791b      	ldrb	r3, [r3, #4]
 8007822:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007824:	430b      	orrs	r3, r1
 8007826:	431a      	orrs	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	0159      	lsls	r1, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	440b      	add	r3, r1
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	4619      	mov	r1, r3
 8007836:	4b05      	ldr	r3, [pc, #20]	; (800784c <USB_ActivateEndpoint+0x10c>)
 8007838:	4313      	orrs	r3, r2
 800783a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	10008000 	.word	0x10008000

08007850 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d161      	bne.n	8007930 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800787e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007882:	d11f      	bne.n	80078c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	2101      	movs	r1, #1
 80078d6:	fa01 f303 	lsl.w	r3, r1, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078e4:	4013      	ands	r3, r2
 80078e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	2101      	movs	r1, #1
 80078fa:	fa01 f303 	lsl.w	r3, r1, r3
 80078fe:	b29b      	uxth	r3, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	68f9      	ldr	r1, [r7, #12]
 8007904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007908:	4013      	ands	r3, r2
 800790a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	0159      	lsls	r1, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	440b      	add	r3, r1
 8007922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007926:	4619      	mov	r1, r3
 8007928:	4b35      	ldr	r3, [pc, #212]	; (8007a00 <USB_DeactivateEndpoint+0x1b0>)
 800792a:	4013      	ands	r3, r2
 800792c:	600b      	str	r3, [r1, #0]
 800792e:	e060      	b.n	80079f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007946:	d11f      	bne.n	8007988 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007962:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007966:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	2101      	movs	r1, #1
 800799a:	fa01 f303 	lsl.w	r3, r1, r3
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	43db      	mvns	r3, r3
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079a8:	4013      	ands	r3, r2
 80079aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	2101      	movs	r1, #1
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	43db      	mvns	r3, r3
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079cc:	4013      	ands	r3, r2
 80079ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	0159      	lsls	r1, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	440b      	add	r3, r1
 80079e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ea:	4619      	mov	r1, r3
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <USB_DeactivateEndpoint+0x1b4>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	ec337800 	.word	0xec337800
 8007a04:	eff37800 	.word	0xeff37800

08007a08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 8163 	bne.w	8007cf0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d132      	bne.n	8007a98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	0159      	lsls	r1, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	440b      	add	r3, r1
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4ba5      	ldr	r3, [pc, #660]	; (8007ce4 <USB_EPStartXfer+0x2dc>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	0159      	lsls	r1, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	440b      	add	r3, r1
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4b95      	ldr	r3, [pc, #596]	; (8007ce8 <USB_EPStartXfer+0x2e0>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	610b      	str	r3, [r1, #16]
 8007a96:	e074      	b.n	8007b82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	0159      	lsls	r1, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	440b      	add	r3, r1
 8007aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4b8c      	ldr	r3, [pc, #560]	; (8007ce8 <USB_EPStartXfer+0x2e0>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	0159      	lsls	r1, r3, #5
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	440b      	add	r3, r1
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4b83      	ldr	r3, [pc, #524]	; (8007ce4 <USB_EPStartXfer+0x2dc>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6999      	ldr	r1, [r3, #24]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	440b      	add	r3, r1
 8007af4:	1e59      	subs	r1, r3, #1
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007afe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b00:	4b7a      	ldr	r3, [pc, #488]	; (8007cec <USB_EPStartXfer+0x2e4>)
 8007b02:	400b      	ands	r3, r1
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	0148      	lsls	r0, r1, #5
 8007b08:	69f9      	ldr	r1, [r7, #28]
 8007b0a:	4401      	add	r1, r0
 8007b0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b10:	4313      	orrs	r3, r2
 8007b12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b2a:	69b9      	ldr	r1, [r7, #24]
 8007b2c:	0148      	lsls	r0, r1, #5
 8007b2e:	69f9      	ldr	r1, [r7, #28]
 8007b30:	4401      	add	r1, r0
 8007b32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b36:	4313      	orrs	r3, r2
 8007b38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	791b      	ldrb	r3, [r3, #4]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d11f      	bne.n	8007b82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	69fa      	ldr	r2, [r7, #28]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d14b      	bne.n	8007c20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d128      	bne.n	8007bfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d110      	bne.n	8007bde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	e00f      	b.n	8007bfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e137      	b.n	8007e90 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	791b      	ldrb	r3, [r3, #4]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d015      	beq.n	8007c74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 811f 	beq.w	8007e90 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	2101      	movs	r1, #1
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	69f9      	ldr	r1, [r7, #28]
 8007c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	634b      	str	r3, [r1, #52]	; 0x34
 8007c72:	e10d      	b.n	8007e90 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d110      	bne.n	8007ca6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	e00f      	b.n	8007cc6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	69fa      	ldr	r2, [r7, #28]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6919      	ldr	r1, [r3, #16]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	b298      	uxth	r0, r3
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4603      	mov	r3, r0
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 faea 	bl	80082b4 <USB_WritePacket>
 8007ce0:	e0d6      	b.n	8007e90 <USB_EPStartXfer+0x488>
 8007ce2:	bf00      	nop
 8007ce4:	e007ffff 	.word	0xe007ffff
 8007ce8:	fff80000 	.word	0xfff80000
 8007cec:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	0159      	lsls	r1, r3, #5
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	440b      	add	r3, r1
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4b63      	ldr	r3, [pc, #396]	; (8007e9c <USB_EPStartXfer+0x494>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	0159      	lsls	r1, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	440b      	add	r3, r1
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4b5c      	ldr	r3, [pc, #368]	; (8007ea0 <USB_EPStartXfer+0x498>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d123      	bne.n	8007d84 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	691a      	ldr	r2, [r3, #16]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d52:	69b9      	ldr	r1, [r7, #24]
 8007d54:	0148      	lsls	r0, r1, #5
 8007d56:	69f9      	ldr	r1, [r7, #28]
 8007d58:	4401      	add	r1, r0
 8007d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d80:	6113      	str	r3, [r2, #16]
 8007d82:	e037      	b.n	8007df4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	699a      	ldr	r2, [r3, #24]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	1e5a      	subs	r2, r3, #1
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	8afa      	ldrh	r2, [r7, #22]
 8007da0:	fb03 f202 	mul.w	r2, r3, r2
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	691a      	ldr	r2, [r3, #16]
 8007db6:	8afb      	ldrh	r3, [r7, #22]
 8007db8:	04d9      	lsls	r1, r3, #19
 8007dba:	4b3a      	ldr	r3, [pc, #232]	; (8007ea4 <USB_EPStartXfer+0x49c>)
 8007dbc:	400b      	ands	r3, r1
 8007dbe:	69b9      	ldr	r1, [r7, #24]
 8007dc0:	0148      	lsls	r0, r1, #5
 8007dc2:	69f9      	ldr	r1, [r7, #28]
 8007dc4:	4401      	add	r1, r0
 8007dc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007de4:	69b9      	ldr	r1, [r7, #24]
 8007de6:	0148      	lsls	r0, r1, #5
 8007de8:	69f9      	ldr	r1, [r7, #28]
 8007dea:	4401      	add	r1, r0
 8007dec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007df0:	4313      	orrs	r3, r2
 8007df2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d10d      	bne.n	8007e16 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6919      	ldr	r1, [r3, #16]
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	460a      	mov	r2, r1
 8007e14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	791b      	ldrb	r3, [r3, #4]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d128      	bne.n	8007e70 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d110      	bne.n	8007e50 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e00f      	b.n	8007e70 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	fff80000 	.word	0xfff80000
 8007ea0:	e007ffff 	.word	0xe007ffff
 8007ea4:	1ff80000 	.word	0x1ff80000

08007ea8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f040 80ce 	bne.w	8008066 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d132      	bne.n	8007f38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	0159      	lsls	r1, r3, #5
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	4619      	mov	r1, r3
 8007eee:	4b9a      	ldr	r3, [pc, #616]	; (8008158 <USB_EP0StartXfer+0x2b0>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	691a      	ldr	r2, [r3, #16]
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	0159      	lsls	r1, r3, #5
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	440b      	add	r3, r1
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4b8a      	ldr	r3, [pc, #552]	; (800815c <USB_EP0StartXfer+0x2b4>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	610b      	str	r3, [r1, #16]
 8007f36:	e04e      	b.n	8007fd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	691a      	ldr	r2, [r3, #16]
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	0159      	lsls	r1, r3, #5
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	440b      	add	r3, r1
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	4619      	mov	r1, r3
 8007f54:	4b81      	ldr	r3, [pc, #516]	; (800815c <USB_EP0StartXfer+0x2b4>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	0159      	lsls	r1, r3, #5
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	440b      	add	r3, r1
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	4619      	mov	r1, r3
 8007f76:	4b78      	ldr	r3, [pc, #480]	; (8008158 <USB_EP0StartXfer+0x2b0>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fc6:	6939      	ldr	r1, [r7, #16]
 8007fc8:	0148      	lsls	r0, r1, #5
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	4401      	add	r1, r0
 8007fce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d11e      	bne.n	800801a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	e097      	b.n	800814a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008038:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8083 	beq.w	800814a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	2101      	movs	r1, #1
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	6979      	ldr	r1, [r7, #20]
 800805c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008060:	4313      	orrs	r3, r2
 8008062:	634b      	str	r3, [r1, #52]	; 0x34
 8008064:	e071      	b.n	800814a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	0159      	lsls	r1, r3, #5
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	440b      	add	r3, r1
 800807c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008080:	4619      	mov	r1, r3
 8008082:	4b36      	ldr	r3, [pc, #216]	; (800815c <USB_EP0StartXfer+0x2b4>)
 8008084:	4013      	ands	r3, r2
 8008086:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	0159      	lsls	r1, r3, #5
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	440b      	add	r3, r1
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	4619      	mov	r1, r3
 80080a4:	4b2c      	ldr	r3, [pc, #176]	; (8008158 <USB_EP0StartXfer+0x2b0>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080f8:	6939      	ldr	r1, [r7, #16]
 80080fa:	0148      	lsls	r0, r1, #5
 80080fc:	6979      	ldr	r1, [r7, #20]
 80080fe:	4401      	add	r1, r0
 8008100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008104:	4313      	orrs	r3, r2
 8008106:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d10d      	bne.n	800812a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6919      	ldr	r1, [r3, #16]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	460a      	mov	r2, r1
 8008128:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008148:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	e007ffff 	.word	0xe007ffff
 800815c:	fff80000 	.word	0xfff80000

08008160 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d14a      	bne.n	8008214 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008196:	f040 8086 	bne.w	80082a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	7812      	ldrb	r2, [r2, #0]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	0151      	lsls	r1, r2, #5
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	440a      	add	r2, r1
 80081d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d902      	bls.n	80081f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]
          break;
 80081f6:	e056      	b.n	80082a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800820c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008210:	d0e7      	beq.n	80081e2 <USB_EPStopXfer+0x82>
 8008212:	e048      	b.n	80082a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800822c:	d13b      	bne.n	80082a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800824c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008250:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008274:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008282:	4293      	cmp	r3, r2
 8008284:	d902      	bls.n	800828c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
          break;
 800828a:	e00c      	b.n	80082a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082a4:	d0e7      	beq.n	8008276 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b089      	sub	sp, #36	; 0x24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4611      	mov	r1, r2
 80082c0:	461a      	mov	r2, r3
 80082c2:	460b      	mov	r3, r1
 80082c4:	71fb      	strb	r3, [r7, #7]
 80082c6:	4613      	mov	r3, r2
 80082c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d123      	bne.n	8008322 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082da:	88bb      	ldrh	r3, [r7, #4]
 80082dc:	3303      	adds	r3, #3
 80082de:	089b      	lsrs	r3, r3, #2
 80082e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082e2:	2300      	movs	r3, #0
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	e018      	b.n	800831a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	031a      	lsls	r2, r3, #12
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f4:	461a      	mov	r2, r3
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	3301      	adds	r3, #1
 8008300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	3301      	adds	r3, #1
 8008306:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	3301      	adds	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	3301      	adds	r3, #1
 8008312:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	3301      	adds	r3, #1
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	429a      	cmp	r2, r3
 8008320:	d3e2      	bcc.n	80082e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3724      	adds	r7, #36	; 0x24
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008330:	b480      	push	{r7}
 8008332:	b08b      	sub	sp, #44	; 0x2c
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	089b      	lsrs	r3, r3, #2
 800834a:	b29b      	uxth	r3, r3
 800834c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008356:	2300      	movs	r3, #0
 8008358:	623b      	str	r3, [r7, #32]
 800835a:	e014      	b.n	8008386 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	601a      	str	r2, [r3, #0]
    pDest++;
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	3301      	adds	r3, #1
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	3301      	adds	r3, #1
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	3301      	adds	r3, #1
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	3301      	adds	r3, #1
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	3301      	adds	r3, #1
 8008384:	623b      	str	r3, [r7, #32]
 8008386:	6a3a      	ldr	r2, [r7, #32]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	429a      	cmp	r2, r3
 800838c:	d3e6      	bcc.n	800835c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800838e:	8bfb      	ldrh	r3, [r7, #30]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01e      	beq.n	80083d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839e:	461a      	mov	r2, r3
 80083a0:	f107 0310 	add.w	r3, r7, #16
 80083a4:	6812      	ldr	r2, [r2, #0]
 80083a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	fa22 f303 	lsr.w	r3, r2, r3
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	701a      	strb	r2, [r3, #0]
      i++;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	3301      	adds	r3, #1
 80083be:	623b      	str	r3, [r7, #32]
      pDest++;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	3301      	adds	r3, #1
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083c6:	8bfb      	ldrh	r3, [r7, #30]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083cc:	8bfb      	ldrh	r3, [r7, #30]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1ea      	bne.n	80083a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	372c      	adds	r7, #44	; 0x2c
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d12c      	bne.n	8008456 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	db12      	blt.n	8008434 <USB_EPSetStall+0x54>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00f      	beq.n	8008434 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008432:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	e02b      	b.n	80084ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	db12      	blt.n	800848e <USB_EPSetStall+0xae>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00f      	beq.n	800848e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	440a      	add	r2, r1
 8008484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008488:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800848c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	0151      	lsls	r1, r2, #5
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	440a      	add	r2, r1
 80084a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	785b      	ldrb	r3, [r3, #1]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d128      	bne.n	800852a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	791b      	ldrb	r3, [r3, #4]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d003      	beq.n	8008508 <USB_EPClearStall+0x4c>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	791b      	ldrb	r3, [r3, #4]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d138      	bne.n	800857a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	440a      	add	r2, r1
 800851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	e027      	b.n	800857a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	0151      	lsls	r1, r2, #5
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	440a      	add	r2, r1
 8008540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008544:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008548:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	791b      	ldrb	r3, [r3, #4]
 800854e:	2b03      	cmp	r3, #3
 8008550:	d003      	beq.n	800855a <USB_EPClearStall+0x9e>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	791b      	ldrb	r3, [r3, #4]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d10f      	bne.n	800857a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008578:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085bc:	68f9      	ldr	r1, [r7, #12]
 80085be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c2:	4313      	orrs	r3, r2
 80085c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085ee:	f023 0303 	bic.w	r3, r3, #3
 80085f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008602:	f023 0302 	bic.w	r3, r3, #2
 8008606:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008616:	b480      	push	{r7}
 8008618:	b085      	sub	sp, #20
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008630:	f023 0303 	bic.w	r3, r3, #3
 8008634:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008644:	f043 0302 	orr.w	r3, r3, #2
 8008648:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4013      	ands	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008670:	68fb      	ldr	r3, [r7, #12]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	0c1b      	lsrs	r3, r3, #16
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	4013      	ands	r3, r2
 80086d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	b29b      	uxth	r3, r3
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4013      	ands	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008714:	68bb      	ldr	r3, [r7, #8]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008722:	b480      	push	{r7}
 8008724:	b087      	sub	sp, #28
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	fa22 f303 	lsr.w	r3, r2, r3
 8008752:	01db      	lsls	r3, r3, #7
 8008754:	b2db      	uxtb	r3, r3
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4013      	ands	r3, r2
 800876e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008770:	68bb      	ldr	r3, [r7, #8]
}
 8008772:	4618      	mov	r0, r3
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f003 0301 	and.w	r3, r3, #1
}
 800878e:	4618      	mov	r0, r3
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b6:	4619      	mov	r1, r3
 80087b8:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <USB_ActivateSetup+0x44>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	fffff800 	.word	0xfffff800

080087e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	460b      	mov	r3, r1
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	333c      	adds	r3, #60	; 0x3c
 80087fa:	3304      	adds	r3, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	4a26      	ldr	r2, [pc, #152]	; (800889c <USB_EP0_OutStart+0xb8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d90a      	bls.n	800881e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008818:	d101      	bne.n	800881e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	e037      	b.n	800888e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800883c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800884c:	f043 0318 	orr.w	r3, r3, #24
 8008850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008860:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008864:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10f      	bne.n	800888c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008886:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800888a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	4f54300a 	.word	0x4f54300a

080088a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4a13      	ldr	r2, [pc, #76]	; (8008904 <USB_CoreReset+0x64>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d901      	bls.n	80088be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e01b      	b.n	80088f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	daf2      	bge.n	80088ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f043 0201 	orr.w	r2, r3, #1
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a09      	ldr	r2, [pc, #36]	; (8008904 <USB_CoreReset+0x64>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d901      	bls.n	80088e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e006      	b.n	80088f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d0f0      	beq.n	80088d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	00030d40 	.word	0x00030d40

08008908 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800890c:	4904      	ldr	r1, [pc, #16]	; (8008920 <MX_FATFS_Init+0x18>)
 800890e:	4805      	ldr	r0, [pc, #20]	; (8008924 <MX_FATFS_Init+0x1c>)
 8008910:	f005 f90a 	bl	800db28 <FATFS_LinkDriver>
 8008914:	4603      	mov	r3, r0
 8008916:	461a      	mov	r2, r3
 8008918:	4b03      	ldr	r3, [pc, #12]	; (8008928 <MX_FATFS_Init+0x20>)
 800891a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800891c:	bf00      	nop
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000804 	.word	0x20000804
 8008924:	20000010 	.word	0x20000010
 8008928:	20000800 	.word	0x20000800

0800892c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008930:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008932:	4618      	mov	r0, r3
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f9d3 	bl	8008cf4 <USER_SPI_initialize>
 800894e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fab1 	bl	8008ecc <USER_SPI_status>
 800896a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8008984:	7bf8      	ldrb	r0, [r7, #15]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	f000 fab4 	bl	8008ef8 <USER_SPI_read>
 8008990:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80089aa:	7bf8      	ldrb	r0, [r7, #15]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	f000 fb07 	bl	8008fc4 <USER_SPI_write>
 80089b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	603a      	str	r2, [r7, #0]
 80089ca:	71fb      	strb	r3, [r7, #7]
 80089cc:	460b      	mov	r3, r1
 80089ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80089d0:	79b9      	ldrb	r1, [r7, #6]
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fb70 	bl	80090bc <USER_SPI_ioctl>
 80089dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80089f0:	f7f9 fcd2 	bl	8002398 <HAL_GetTick>
 80089f4:	4603      	mov	r3, r0
 80089f6:	4a04      	ldr	r2, [pc, #16]	; (8008a08 <SPI_Timer_On+0x20>)
 80089f8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <SPI_Timer_On+0x24>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000080c 	.word	0x2000080c
 8008a0c:	20000810 	.word	0x20000810

08008a10 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008a14:	f7f9 fcc0 	bl	8002398 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <SPI_Timer_Status+0x24>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <SPI_Timer_Status+0x28>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf34      	ite	cc
 8008a28:	2301      	movcc	r3, #1
 8008a2a:	2300      	movcs	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	2000080c 	.word	0x2000080c
 8008a38:	20000810 	.word	0x20000810

08008a3c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	4603      	mov	r3, r0
 8008a44:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008a46:	f107 020f 	add.w	r2, r7, #15
 8008a4a:	1df9      	adds	r1, r7, #7
 8008a4c:	2332      	movs	r3, #50	; 0x32
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	2301      	movs	r3, #1
 8008a52:	4804      	ldr	r0, [pc, #16]	; (8008a64 <xchg_spi+0x28>)
 8008a54:	f7fd fa63 	bl	8005f1e <HAL_SPI_TransmitReceive>
    return rxDat;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000340 	.word	0x20000340

08008a68 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e00a      	b.n	8008a8e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	18d4      	adds	r4, r2, r3
 8008a7e:	20ff      	movs	r0, #255	; 0xff
 8008a80:	f7ff ffdc 	bl	8008a3c <xchg_spi>
 8008a84:	4603      	mov	r3, r0
 8008a86:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d3f0      	bcc.n	8008a78 <rcvr_spi_multi+0x10>
	}
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd90      	pop	{r4, r7, pc}

08008aa0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	4803      	ldr	r0, [pc, #12]	; (8008ac4 <xmit_spi_multi+0x24>)
 8008ab6:	f7fc ff94 	bl	80059e2 <HAL_SPI_Transmit>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000340 	.word	0x20000340

08008ac8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008ad0:	f7f9 fc62 	bl	8002398 <HAL_GetTick>
 8008ad4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008ada:	20ff      	movs	r0, #255	; 0xff
 8008adc:	f7ff ffae 	bl	8008a3c <xchg_spi>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	2bff      	cmp	r3, #255	; 0xff
 8008ae8:	d007      	beq.n	8008afa <wait_ready+0x32>
 8008aea:	f7f9 fc55 	bl	8002398 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d8ef      	bhi.n	8008ada <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	2bff      	cmp	r3, #255	; 0xff
 8008afe:	bf0c      	ite	eq
 8008b00:	2301      	moveq	r3, #1
 8008b02:	2300      	movne	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008b14:	2201      	movs	r2, #1
 8008b16:	2180      	movs	r1, #128	; 0x80
 8008b18:	4803      	ldr	r0, [pc, #12]	; (8008b28 <despiselect+0x18>)
 8008b1a:	f7fa f9af 	bl	8002e7c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008b1e:	20ff      	movs	r0, #255	; 0xff
 8008b20:	f7ff ff8c 	bl	8008a3c <xchg_spi>

}
 8008b24:	bf00      	nop
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	40020400 	.word	0x40020400

08008b2c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008b30:	2200      	movs	r2, #0
 8008b32:	2180      	movs	r1, #128	; 0x80
 8008b34:	4809      	ldr	r0, [pc, #36]	; (8008b5c <spiselect+0x30>)
 8008b36:	f7fa f9a1 	bl	8002e7c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008b3a:	20ff      	movs	r0, #255	; 0xff
 8008b3c:	f7ff ff7e 	bl	8008a3c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b44:	f7ff ffc0 	bl	8008ac8 <wait_ready>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <spiselect+0x26>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e002      	b.n	8008b58 <spiselect+0x2c>

	despiselect();
 8008b52:	f7ff ffdd 	bl	8008b10 <despiselect>
	return 0;	/* Timeout */
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40020400 	.word	0x40020400

08008b60 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008b6a:	20c8      	movs	r0, #200	; 0xc8
 8008b6c:	f7ff ff3c 	bl	80089e8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008b70:	20ff      	movs	r0, #255	; 0xff
 8008b72:	f7ff ff63 	bl	8008a3c <xchg_spi>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2bff      	cmp	r3, #255	; 0xff
 8008b7e:	d104      	bne.n	8008b8a <rcvr_datablock+0x2a>
 8008b80:	f7ff ff46 	bl	8008a10 <SPI_Timer_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f2      	bne.n	8008b70 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8008b8e:	d001      	beq.n	8008b94 <rcvr_datablock+0x34>
 8008b90:	2300      	movs	r3, #0
 8008b92:	e00a      	b.n	8008baa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff ff66 	bl	8008a68 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008b9c:	20ff      	movs	r0, #255	; 0xff
 8008b9e:	f7ff ff4d 	bl	8008a3c <xchg_spi>
 8008ba2:	20ff      	movs	r0, #255	; 0xff
 8008ba4:	f7ff ff4a 	bl	8008a3c <xchg_spi>

	return 1;						/* Function succeeded */
 8008ba8:	2301      	movs	r3, #1
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008bc2:	f7ff ff81 	bl	8008ac8 <wait_ready>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xmit_datablock+0x1e>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e01e      	b.n	8008c0e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff32 	bl	8008a3c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	2bfd      	cmp	r3, #253	; 0xfd
 8008bdc:	d016      	beq.n	8008c0c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff ff5c 	bl	8008aa0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008be8:	20ff      	movs	r0, #255	; 0xff
 8008bea:	f7ff ff27 	bl	8008a3c <xchg_spi>
 8008bee:	20ff      	movs	r0, #255	; 0xff
 8008bf0:	f7ff ff24 	bl	8008a3c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008bf4:	20ff      	movs	r0, #255	; 0xff
 8008bf6:	f7ff ff21 	bl	8008a3c <xchg_spi>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	2b05      	cmp	r3, #5
 8008c06:	d001      	beq.n	8008c0c <xmit_datablock+0x5a>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e000      	b.n	8008c0e <xmit_datablock+0x5c>
	}
	return 1;
 8008c0c:	2301      	movs	r3, #1
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	6039      	str	r1, [r7, #0]
 8008c20:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da0e      	bge.n	8008c48 <send_cmd+0x32>
		cmd &= 0x7F;
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c30:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008c32:	2100      	movs	r1, #0
 8008c34:	2037      	movs	r0, #55	; 0x37
 8008c36:	f7ff ffee 	bl	8008c16 <send_cmd>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d901      	bls.n	8008c48 <send_cmd+0x32>
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	e051      	b.n	8008cec <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b0c      	cmp	r3, #12
 8008c4c:	d008      	beq.n	8008c60 <send_cmd+0x4a>
		despiselect();
 8008c4e:	f7ff ff5f 	bl	8008b10 <despiselect>
		if (!spiselect()) return 0xFF;
 8008c52:	f7ff ff6b 	bl	8008b2c <spiselect>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <send_cmd+0x4a>
 8008c5c:	23ff      	movs	r3, #255	; 0xff
 8008c5e:	e045      	b.n	8008cec <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fee7 	bl	8008a3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	0e1b      	lsrs	r3, r3, #24
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff fee1 	bl	8008a3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	0c1b      	lsrs	r3, r3, #16
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fedb 	bl	8008a3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff fed5 	bl	8008a3c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fed0 	bl	8008a3c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <send_cmd+0x94>
 8008ca6:	2395      	movs	r3, #149	; 0x95
 8008ca8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d101      	bne.n	8008cb4 <send_cmd+0x9e>
 8008cb0:	2387      	movs	r3, #135	; 0x87
 8008cb2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fec0 	bl	8008a3c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b0c      	cmp	r3, #12
 8008cc0:	d102      	bne.n	8008cc8 <send_cmd+0xb2>
 8008cc2:	20ff      	movs	r0, #255	; 0xff
 8008cc4:	f7ff feba 	bl	8008a3c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008cc8:	230a      	movs	r3, #10
 8008cca:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008ccc:	20ff      	movs	r0, #255	; 0xff
 8008cce:	f7ff feb5 	bl	8008a3c <xchg_spi>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	da05      	bge.n	8008cea <send_cmd+0xd4>
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <send_cmd+0xb6>

	return res;							/* Return received response */
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <USER_SPI_initialize+0x14>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e0d6      	b.n	8008eb6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008d08:	4b6d      	ldr	r3, [pc, #436]	; (8008ec0 <USER_SPI_initialize+0x1cc>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <USER_SPI_initialize+0x2a>
 8008d16:	4b6a      	ldr	r3, [pc, #424]	; (8008ec0 <USER_SPI_initialize+0x1cc>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	e0cb      	b.n	8008eb6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008d1e:	4b69      	ldr	r3, [pc, #420]	; (8008ec4 <USER_SPI_initialize+0x1d0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d28:	4b66      	ldr	r3, [pc, #408]	; (8008ec4 <USER_SPI_initialize+0x1d0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8008d30:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008d32:	230a      	movs	r3, #10
 8008d34:	73fb      	strb	r3, [r7, #15]
 8008d36:	e005      	b.n	8008d44 <USER_SPI_initialize+0x50>
 8008d38:	20ff      	movs	r0, #255	; 0xff
 8008d3a:	f7ff fe7f 	bl	8008a3c <xchg_spi>
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f6      	bne.n	8008d38 <USER_SPI_initialize+0x44>

	ty = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008d4e:	2100      	movs	r1, #0
 8008d50:	2000      	movs	r0, #0
 8008d52:	f7ff ff60 	bl	8008c16 <send_cmd>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	f040 808b 	bne.w	8008e74 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d62:	f7ff fe41 	bl	80089e8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008d66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d6a:	2008      	movs	r0, #8
 8008d6c:	f7ff ff53 	bl	8008c16 <send_cmd>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d151      	bne.n	8008e1a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
 8008d7a:	e00d      	b.n	8008d98 <USER_SPI_initialize+0xa4>
 8008d7c:	7bfc      	ldrb	r4, [r7, #15]
 8008d7e:	20ff      	movs	r0, #255	; 0xff
 8008d80:	f7ff fe5c 	bl	8008a3c <xchg_spi>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	f104 0310 	add.w	r3, r4, #16
 8008d8c:	443b      	add	r3, r7
 8008d8e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	3301      	adds	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d9ee      	bls.n	8008d7c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008d9e:	7abb      	ldrb	r3, [r7, #10]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d167      	bne.n	8008e74 <USER_SPI_initialize+0x180>
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	2baa      	cmp	r3, #170	; 0xaa
 8008da8:	d164      	bne.n	8008e74 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008daa:	bf00      	nop
 8008dac:	f7ff fe30 	bl	8008a10 <SPI_Timer_Status>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <USER_SPI_initialize+0xd2>
 8008db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008dba:	20a9      	movs	r0, #169	; 0xa9
 8008dbc:	f7ff ff2b 	bl	8008c16 <send_cmd>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1f2      	bne.n	8008dac <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008dc6:	f7ff fe23 	bl	8008a10 <SPI_Timer_Status>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d051      	beq.n	8008e74 <USER_SPI_initialize+0x180>
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	203a      	movs	r0, #58	; 0x3a
 8008dd4:	f7ff ff1f 	bl	8008c16 <send_cmd>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d14a      	bne.n	8008e74 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
 8008de2:	e00d      	b.n	8008e00 <USER_SPI_initialize+0x10c>
 8008de4:	7bfc      	ldrb	r4, [r7, #15]
 8008de6:	20ff      	movs	r0, #255	; 0xff
 8008de8:	f7ff fe28 	bl	8008a3c <xchg_spi>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	f104 0310 	add.w	r3, r4, #16
 8008df4:	443b      	add	r3, r7
 8008df6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d9ee      	bls.n	8008de4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008e06:	7a3b      	ldrb	r3, [r7, #8]
 8008e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <USER_SPI_initialize+0x120>
 8008e10:	230c      	movs	r3, #12
 8008e12:	e000      	b.n	8008e16 <USER_SPI_initialize+0x122>
 8008e14:	2304      	movs	r3, #4
 8008e16:	737b      	strb	r3, [r7, #13]
 8008e18:	e02c      	b.n	8008e74 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	20a9      	movs	r0, #169	; 0xa9
 8008e1e:	f7ff fefa 	bl	8008c16 <send_cmd>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d804      	bhi.n	8008e32 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008e28:	2302      	movs	r3, #2
 8008e2a:	737b      	strb	r3, [r7, #13]
 8008e2c:	23a9      	movs	r3, #169	; 0xa9
 8008e2e:	73bb      	strb	r3, [r7, #14]
 8008e30:	e003      	b.n	8008e3a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008e32:	2301      	movs	r3, #1
 8008e34:	737b      	strb	r3, [r7, #13]
 8008e36:	2301      	movs	r3, #1
 8008e38:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008e3a:	bf00      	nop
 8008e3c:	f7ff fde8 	bl	8008a10 <SPI_Timer_Status>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <USER_SPI_initialize+0x162>
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fee3 	bl	8008c16 <send_cmd>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f2      	bne.n	8008e3c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008e56:	f7ff fddb 	bl	8008a10 <SPI_Timer_Status>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d007      	beq.n	8008e70 <USER_SPI_initialize+0x17c>
 8008e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e64:	2010      	movs	r0, #16
 8008e66:	f7ff fed6 	bl	8008c16 <send_cmd>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <USER_SPI_initialize+0x180>
				ty = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008e74:	4a14      	ldr	r2, [pc, #80]	; (8008ec8 <USER_SPI_initialize+0x1d4>)
 8008e76:	7b7b      	ldrb	r3, [r7, #13]
 8008e78:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008e7a:	f7ff fe49 	bl	8008b10 <despiselect>

	if (ty) {			/* OK */
 8008e7e:	7b7b      	ldrb	r3, [r7, #13]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d012      	beq.n	8008eaa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008e84:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <USER_SPI_initialize+0x1d0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <USER_SPI_initialize+0x1d0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8008e96:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008e98:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <USER_SPI_initialize+0x1cc>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f023 0301 	bic.w	r3, r3, #1
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <USER_SPI_initialize+0x1cc>)
 8008ea6:	701a      	strb	r2, [r3, #0]
 8008ea8:	e002      	b.n	8008eb0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <USER_SPI_initialize+0x1cc>)
 8008eac:	2201      	movs	r2, #1
 8008eae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008eb0:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <USER_SPI_initialize+0x1cc>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	b2db      	uxtb	r3, r3
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd90      	pop	{r4, r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000024 	.word	0x20000024
 8008ec4:	20000340 	.word	0x20000340
 8008ec8:	20000808 	.word	0x20000808

08008ecc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <USER_SPI_status+0x14>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e002      	b.n	8008ee6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008ee0:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <USER_SPI_status+0x28>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b2db      	uxtb	r3, r3
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000024 	.word	0x20000024

08008ef8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <USER_SPI_read+0x1c>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <USER_SPI_read+0x20>
 8008f14:	2304      	movs	r3, #4
 8008f16:	e04d      	b.n	8008fb4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008f18:	4b28      	ldr	r3, [pc, #160]	; (8008fbc <USER_SPI_read+0xc4>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <USER_SPI_read+0x32>
 8008f26:	2303      	movs	r3, #3
 8008f28:	e044      	b.n	8008fb4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008f2a:	4b25      	ldr	r3, [pc, #148]	; (8008fc0 <USER_SPI_read+0xc8>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <USER_SPI_read+0x44>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	025b      	lsls	r3, r3, #9
 8008f3a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d111      	bne.n	8008f66 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	2011      	movs	r0, #17
 8008f46:	f7ff fe66 	bl	8008c16 <send_cmd>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d129      	bne.n	8008fa4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f54:	68b8      	ldr	r0, [r7, #8]
 8008f56:	f7ff fe03 	bl	8008b60 <rcvr_datablock>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d021      	beq.n	8008fa4 <USER_SPI_read+0xac>
			count = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	e01e      	b.n	8008fa4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	2012      	movs	r0, #18
 8008f6a:	f7ff fe54 	bl	8008c16 <send_cmd>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d117      	bne.n	8008fa4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f78:	68b8      	ldr	r0, [r7, #8]
 8008f7a:	f7ff fdf1 	bl	8008b60 <rcvr_datablock>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <USER_SPI_read+0xa2>
				buff += 512;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008f8a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1ed      	bne.n	8008f74 <USER_SPI_read+0x7c>
 8008f98:	e000      	b.n	8008f9c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008f9a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	200c      	movs	r0, #12
 8008fa0:	f7ff fe39 	bl	8008c16 <send_cmd>
		}
	}
	despiselect();
 8008fa4:	f7ff fdb4 	bl	8008b10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bf14      	ite	ne
 8008fae:	2301      	movne	r3, #1
 8008fb0:	2300      	moveq	r3, #0
 8008fb2:	b2db      	uxtb	r3, r3
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000024 	.word	0x20000024
 8008fc0:	20000808 	.word	0x20000808

08008fc4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <USER_SPI_write+0x1c>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <USER_SPI_write+0x20>
 8008fe0:	2304      	movs	r3, #4
 8008fe2:	e063      	b.n	80090ac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008fe4:	4b33      	ldr	r3, [pc, #204]	; (80090b4 <USER_SPI_write+0xf0>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <USER_SPI_write+0x32>
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e05a      	b.n	80090ac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008ff6:	4b2f      	ldr	r3, [pc, #188]	; (80090b4 <USER_SPI_write+0xf0>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <USER_SPI_write+0x44>
 8009004:	2302      	movs	r3, #2
 8009006:	e051      	b.n	80090ac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <USER_SPI_write+0xf4>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <USER_SPI_write+0x56>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	025b      	lsls	r3, r3, #9
 8009018:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d110      	bne.n	8009042 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	2018      	movs	r0, #24
 8009024:	f7ff fdf7 	bl	8008c16 <send_cmd>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d136      	bne.n	800909c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800902e:	21fe      	movs	r1, #254	; 0xfe
 8009030:	68b8      	ldr	r0, [r7, #8]
 8009032:	f7ff fdbe 	bl	8008bb2 <xmit_datablock>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02f      	beq.n	800909c <USER_SPI_write+0xd8>
			count = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	e02c      	b.n	800909c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009042:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <USER_SPI_write+0xf4>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	f003 0306 	and.w	r3, r3, #6
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <USER_SPI_write+0x92>
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	2097      	movs	r0, #151	; 0x97
 8009052:	f7ff fde0 	bl	8008c16 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	2019      	movs	r0, #25
 800905a:	f7ff fddc 	bl	8008c16 <send_cmd>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d11b      	bne.n	800909c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009064:	21fc      	movs	r1, #252	; 0xfc
 8009066:	68b8      	ldr	r0, [r7, #8]
 8009068:	f7ff fda3 	bl	8008bb2 <xmit_datablock>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <USER_SPI_write+0xc4>
				buff += 512;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009078:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	3b01      	subs	r3, #1
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1ee      	bne.n	8009064 <USER_SPI_write+0xa0>
 8009086:	e000      	b.n	800908a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009088:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800908a:	21fd      	movs	r1, #253	; 0xfd
 800908c:	2000      	movs	r0, #0
 800908e:	f7ff fd90 	bl	8008bb2 <xmit_datablock>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <USER_SPI_write+0xd8>
 8009098:	2301      	movs	r3, #1
 800909a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800909c:	f7ff fd38 	bl	8008b10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bf14      	ite	ne
 80090a6:	2301      	movne	r3, #1
 80090a8:	2300      	moveq	r3, #0
 80090aa:	b2db      	uxtb	r3, r3
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000024 	.word	0x20000024
 80090b8:	20000808 	.word	0x20000808

080090bc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08c      	sub	sp, #48	; 0x30
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	603a      	str	r2, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
 80090c8:	460b      	mov	r3, r1
 80090ca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <USER_SPI_ioctl+0x1a>
 80090d2:	2304      	movs	r3, #4
 80090d4:	e15a      	b.n	800938c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80090d6:	4baf      	ldr	r3, [pc, #700]	; (8009394 <USER_SPI_ioctl+0x2d8>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <USER_SPI_ioctl+0x2c>
 80090e4:	2303      	movs	r3, #3
 80090e6:	e151      	b.n	800938c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80090ee:	79bb      	ldrb	r3, [r7, #6]
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	f200 8136 	bhi.w	8009362 <USER_SPI_ioctl+0x2a6>
 80090f6:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <USER_SPI_ioctl+0x40>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009111 	.word	0x08009111
 8009100:	08009125 	.word	0x08009125
 8009104:	08009363 	.word	0x08009363
 8009108:	080091d1 	.word	0x080091d1
 800910c:	080092c7 	.word	0x080092c7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009110:	f7ff fd0c 	bl	8008b2c <spiselect>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8127 	beq.w	800936a <USER_SPI_ioctl+0x2ae>
 800911c:	2300      	movs	r3, #0
 800911e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009122:	e122      	b.n	800936a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009124:	2100      	movs	r1, #0
 8009126:	2009      	movs	r0, #9
 8009128:	f7ff fd75 	bl	8008c16 <send_cmd>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	f040 811d 	bne.w	800936e <USER_SPI_ioctl+0x2b2>
 8009134:	f107 030c 	add.w	r3, r7, #12
 8009138:	2110      	movs	r1, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fd10 	bl	8008b60 <rcvr_datablock>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8113 	beq.w	800936e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009148:	7b3b      	ldrb	r3, [r7, #12]
 800914a:	099b      	lsrs	r3, r3, #6
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b01      	cmp	r3, #1
 8009150:	d111      	bne.n	8009176 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009152:	7d7b      	ldrb	r3, [r7, #21]
 8009154:	461a      	mov	r2, r3
 8009156:	7d3b      	ldrb	r3, [r7, #20]
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	4413      	add	r3, r2
 800915c:	461a      	mov	r2, r3
 800915e:	7cfb      	ldrb	r3, [r7, #19]
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009166:	4413      	add	r3, r2
 8009168:	3301      	adds	r3, #1
 800916a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	029a      	lsls	r2, r3, #10
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	e028      	b.n	80091c8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009176:	7c7b      	ldrb	r3, [r7, #17]
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	b2da      	uxtb	r2, r3
 800917e:	7dbb      	ldrb	r3, [r7, #22]
 8009180:	09db      	lsrs	r3, r3, #7
 8009182:	b2db      	uxtb	r3, r3
 8009184:	4413      	add	r3, r2
 8009186:	b2da      	uxtb	r2, r3
 8009188:	7d7b      	ldrb	r3, [r7, #21]
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 0306 	and.w	r3, r3, #6
 8009192:	b2db      	uxtb	r3, r3
 8009194:	4413      	add	r3, r2
 8009196:	b2db      	uxtb	r3, r3
 8009198:	3302      	adds	r3, #2
 800919a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800919e:	7d3b      	ldrb	r3, [r7, #20]
 80091a0:	099b      	lsrs	r3, r3, #6
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	461a      	mov	r2, r3
 80091a6:	7cfb      	ldrb	r3, [r7, #19]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	441a      	add	r2, r3
 80091ac:	7cbb      	ldrb	r3, [r7, #18]
 80091ae:	029b      	lsls	r3, r3, #10
 80091b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091b4:	4413      	add	r3, r2
 80091b6:	3301      	adds	r3, #1
 80091b8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80091ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80091be:	3b09      	subs	r3, #9
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	409a      	lsls	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80091ce:	e0ce      	b.n	800936e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80091d0:	4b71      	ldr	r3, [pc, #452]	; (8009398 <USER_SPI_ioctl+0x2dc>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d031      	beq.n	8009240 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80091dc:	2100      	movs	r1, #0
 80091de:	208d      	movs	r0, #141	; 0x8d
 80091e0:	f7ff fd19 	bl	8008c16 <send_cmd>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f040 80c3 	bne.w	8009372 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80091ec:	20ff      	movs	r0, #255	; 0xff
 80091ee:	f7ff fc25 	bl	8008a3c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80091f2:	f107 030c 	add.w	r3, r7, #12
 80091f6:	2110      	movs	r1, #16
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fcb1 	bl	8008b60 <rcvr_datablock>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80b6 	beq.w	8009372 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009206:	2330      	movs	r3, #48	; 0x30
 8009208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800920c:	e007      	b.n	800921e <USER_SPI_ioctl+0x162>
 800920e:	20ff      	movs	r0, #255	; 0xff
 8009210:	f7ff fc14 	bl	8008a3c <xchg_spi>
 8009214:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009218:	3b01      	subs	r3, #1
 800921a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800921e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1f3      	bne.n	800920e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009226:	7dbb      	ldrb	r3, [r7, #22]
 8009228:	091b      	lsrs	r3, r3, #4
 800922a:	b2db      	uxtb	r3, r3
 800922c:	461a      	mov	r2, r3
 800922e:	2310      	movs	r3, #16
 8009230:	fa03 f202 	lsl.w	r2, r3, r2
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800923e:	e098      	b.n	8009372 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009240:	2100      	movs	r1, #0
 8009242:	2009      	movs	r0, #9
 8009244:	f7ff fce7 	bl	8008c16 <send_cmd>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 8091 	bne.w	8009372 <USER_SPI_ioctl+0x2b6>
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	2110      	movs	r1, #16
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff fc82 	bl	8008b60 <rcvr_datablock>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 8087 	beq.w	8009372 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009264:	4b4c      	ldr	r3, [pc, #304]	; (8009398 <USER_SPI_ioctl+0x2dc>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d012      	beq.n	8009296 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009270:	7dbb      	ldrb	r3, [r7, #22]
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009278:	7dfa      	ldrb	r2, [r7, #23]
 800927a:	09d2      	lsrs	r2, r2, #7
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	4413      	add	r3, r2
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	7e7b      	ldrb	r3, [r7, #25]
 8009284:	099b      	lsrs	r3, r3, #6
 8009286:	b2db      	uxtb	r3, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	fa02 f303 	lsl.w	r3, r2, r3
 800928e:	461a      	mov	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e013      	b.n	80092be <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009296:	7dbb      	ldrb	r3, [r7, #22]
 8009298:	109b      	asrs	r3, r3, #2
 800929a:	b29b      	uxth	r3, r3
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	3301      	adds	r3, #1
 80092a2:	7dfa      	ldrb	r2, [r7, #23]
 80092a4:	00d2      	lsls	r2, r2, #3
 80092a6:	f002 0218 	and.w	r2, r2, #24
 80092aa:	7df9      	ldrb	r1, [r7, #23]
 80092ac:	0949      	lsrs	r1, r1, #5
 80092ae:	b2c9      	uxtb	r1, r1
 80092b0:	440a      	add	r2, r1
 80092b2:	3201      	adds	r2, #1
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80092c4:	e055      	b.n	8009372 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80092c6:	4b34      	ldr	r3, [pc, #208]	; (8009398 <USER_SPI_ioctl+0x2dc>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f003 0306 	and.w	r3, r3, #6
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d051      	beq.n	8009376 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80092d2:	f107 020c 	add.w	r2, r7, #12
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	210b      	movs	r1, #11
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff feee 	bl	80090bc <USER_SPI_ioctl>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d149      	bne.n	800937a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80092e6:	7b3b      	ldrb	r3, [r7, #12]
 80092e8:	099b      	lsrs	r3, r3, #6
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d104      	bne.n	80092fa <USER_SPI_ioctl+0x23e>
 80092f0:	7dbb      	ldrb	r3, [r7, #22]
 80092f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d041      	beq.n	800937e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800930a:	4b23      	ldr	r3, [pc, #140]	; (8009398 <USER_SPI_ioctl+0x2dc>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	025b      	lsls	r3, r3, #9
 800931a:	62bb      	str	r3, [r7, #40]	; 0x28
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	025b      	lsls	r3, r3, #9
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009324:	2020      	movs	r0, #32
 8009326:	f7ff fc76 	bl	8008c16 <send_cmd>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d128      	bne.n	8009382 <USER_SPI_ioctl+0x2c6>
 8009330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009332:	2021      	movs	r0, #33	; 0x21
 8009334:	f7ff fc6f 	bl	8008c16 <send_cmd>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d121      	bne.n	8009382 <USER_SPI_ioctl+0x2c6>
 800933e:	2100      	movs	r1, #0
 8009340:	2026      	movs	r0, #38	; 0x26
 8009342:	f7ff fc68 	bl	8008c16 <send_cmd>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11a      	bne.n	8009382 <USER_SPI_ioctl+0x2c6>
 800934c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009350:	f7ff fbba 	bl	8008ac8 <wait_ready>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d013      	beq.n	8009382 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800935a:	2300      	movs	r3, #0
 800935c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009360:	e00f      	b.n	8009382 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009362:	2304      	movs	r3, #4
 8009364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009368:	e00c      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		break;
 800936a:	bf00      	nop
 800936c:	e00a      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		break;
 800936e:	bf00      	nop
 8009370:	e008      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		break;
 8009372:	bf00      	nop
 8009374:	e006      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009376:	bf00      	nop
 8009378:	e004      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800937a:	bf00      	nop
 800937c:	e002      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800937e:	bf00      	nop
 8009380:	e000      	b.n	8009384 <USER_SPI_ioctl+0x2c8>
		break;
 8009382:	bf00      	nop
	}

	despiselect();
 8009384:	f7ff fbc4 	bl	8008b10 <despiselect>

	return res;
 8009388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800938c:	4618      	mov	r0, r3
 800938e:	3730      	adds	r7, #48	; 0x30
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000024 	.word	0x20000024
 8009398:	20000808 	.word	0x20000808

0800939c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093ac:	f005 f97e 	bl	800e6ac <malloc>
 80093b0:	4603      	mov	r3, r0
 80093b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	32b0      	adds	r2, #176	; 0xb0
 80093c4:	2100      	movs	r1, #0
 80093c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093ca:	2302      	movs	r3, #2
 80093cc:	e0d4      	b.n	8009578 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80093ce:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80093d2:	2100      	movs	r1, #0
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f005 fa69 	bl	800e8ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	; 0xb0
 80093e4:	68f9      	ldr	r1, [r7, #12]
 80093e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	32b0      	adds	r2, #176	; 0xb0
 80093f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7c1b      	ldrb	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d138      	bne.n	8009478 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009406:	4b5e      	ldr	r3, [pc, #376]	; (8009580 <USBD_CDC_Init+0x1e4>)
 8009408:	7819      	ldrb	r1, [r3, #0]
 800940a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800940e:	2202      	movs	r2, #2
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f004 ffa8 	bl	800e366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009416:	4b5a      	ldr	r3, [pc, #360]	; (8009580 <USBD_CDC_Init+0x1e4>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	f003 020f 	and.w	r2, r3, #15
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	3324      	adds	r3, #36	; 0x24
 800942c:	2201      	movs	r2, #1
 800942e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009430:	4b54      	ldr	r3, [pc, #336]	; (8009584 <USBD_CDC_Init+0x1e8>)
 8009432:	7819      	ldrb	r1, [r3, #0]
 8009434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009438:	2202      	movs	r2, #2
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f004 ff93 	bl	800e366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009440:	4b50      	ldr	r3, [pc, #320]	; (8009584 <USBD_CDC_Init+0x1e8>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	f003 020f 	and.w	r2, r3, #15
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009458:	2201      	movs	r2, #1
 800945a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800945c:	4b4a      	ldr	r3, [pc, #296]	; (8009588 <USBD_CDC_Init+0x1ec>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 020f 	and.w	r2, r3, #15
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	3326      	adds	r3, #38	; 0x26
 8009472:	2210      	movs	r2, #16
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	e035      	b.n	80094e4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009478:	4b41      	ldr	r3, [pc, #260]	; (8009580 <USBD_CDC_Init+0x1e4>)
 800947a:	7819      	ldrb	r1, [r3, #0]
 800947c:	2340      	movs	r3, #64	; 0x40
 800947e:	2202      	movs	r2, #2
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f004 ff70 	bl	800e366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009486:	4b3e      	ldr	r3, [pc, #248]	; (8009580 <USBD_CDC_Init+0x1e4>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	f003 020f 	and.w	r2, r3, #15
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	3324      	adds	r3, #36	; 0x24
 800949c:	2201      	movs	r2, #1
 800949e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094a0:	4b38      	ldr	r3, [pc, #224]	; (8009584 <USBD_CDC_Init+0x1e8>)
 80094a2:	7819      	ldrb	r1, [r3, #0]
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	2202      	movs	r2, #2
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f004 ff5c 	bl	800e366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094ae:	4b35      	ldr	r3, [pc, #212]	; (8009584 <USBD_CDC_Init+0x1e8>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	f003 020f 	and.w	r2, r3, #15
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094c6:	2201      	movs	r2, #1
 80094c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094ca:	4b2f      	ldr	r3, [pc, #188]	; (8009588 <USBD_CDC_Init+0x1ec>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	f003 020f 	and.w	r2, r3, #15
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	3326      	adds	r3, #38	; 0x26
 80094e0:	2210      	movs	r2, #16
 80094e2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094e4:	4b28      	ldr	r3, [pc, #160]	; (8009588 <USBD_CDC_Init+0x1ec>)
 80094e6:	7819      	ldrb	r1, [r3, #0]
 80094e8:	2308      	movs	r3, #8
 80094ea:	2203      	movs	r2, #3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f004 ff3a 	bl	800e366 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80094f2:	4b25      	ldr	r3, [pc, #148]	; (8009588 <USBD_CDC_Init+0x1ec>)
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f003 020f 	and.w	r2, r3, #15
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	3324      	adds	r3, #36	; 0x24
 8009508:	2201      	movs	r2, #1
 800950a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	33b0      	adds	r3, #176	; 0xb0
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009542:	2302      	movs	r3, #2
 8009544:	e018      	b.n	8009578 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7c1b      	ldrb	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800954e:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <USBD_CDC_Init+0x1e8>)
 8009550:	7819      	ldrb	r1, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f004 fff1 	bl	800e544 <USBD_LL_PrepareReceive>
 8009562:	e008      	b.n	8009576 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009564:	4b07      	ldr	r3, [pc, #28]	; (8009584 <USBD_CDC_Init+0x1e8>)
 8009566:	7819      	ldrb	r1, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800956e:	2340      	movs	r3, #64	; 0x40
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f004 ffe7 	bl	800e544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	200000af 	.word	0x200000af
 8009584:	200000b0 	.word	0x200000b0
 8009588:	200000b1 	.word	0x200000b1

0800958c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009598:	4b3a      	ldr	r3, [pc, #232]	; (8009684 <USBD_CDC_DeInit+0xf8>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f004 ff07 	bl	800e3b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095a4:	4b37      	ldr	r3, [pc, #220]	; (8009684 <USBD_CDC_DeInit+0xf8>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	f003 020f 	and.w	r2, r3, #15
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	3324      	adds	r3, #36	; 0x24
 80095ba:	2200      	movs	r2, #0
 80095bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095be:	4b32      	ldr	r3, [pc, #200]	; (8009688 <USBD_CDC_DeInit+0xfc>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f004 fef4 	bl	800e3b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095ca:	4b2f      	ldr	r3, [pc, #188]	; (8009688 <USBD_CDC_DeInit+0xfc>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 020f 	and.w	r2, r3, #15
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095e2:	2200      	movs	r2, #0
 80095e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80095e6:	4b29      	ldr	r3, [pc, #164]	; (800968c <USBD_CDC_DeInit+0x100>)
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f004 fee0 	bl	800e3b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80095f2:	4b26      	ldr	r3, [pc, #152]	; (800968c <USBD_CDC_DeInit+0x100>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 020f 	and.w	r2, r3, #15
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	3324      	adds	r3, #36	; 0x24
 8009608:	2200      	movs	r2, #0
 800960a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800960c:	4b1f      	ldr	r3, [pc, #124]	; (800968c <USBD_CDC_DeInit+0x100>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 020f 	and.w	r2, r3, #15
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	440b      	add	r3, r1
 8009620:	3326      	adds	r3, #38	; 0x26
 8009622:	2200      	movs	r2, #0
 8009624:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	32b0      	adds	r2, #176	; 0xb0
 8009630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01f      	beq.n	8009678 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	33b0      	adds	r3, #176	; 0xb0
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	32b0      	adds	r2, #176	; 0xb0
 8009656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965a:	4618      	mov	r0, r3
 800965c:	f005 f82e 	bl	800e6bc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	32b0      	adds	r2, #176	; 0xb0
 800966a:	2100      	movs	r1, #0
 800966c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200000af 	.word	0x200000af
 8009688:	200000b0 	.word	0x200000b0
 800968c:	200000b1 	.word	0x200000b1

08009690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	32b0      	adds	r2, #176	; 0xb0
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	e0bf      	b.n	8009840 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d050      	beq.n	800976e <USBD_CDC_Setup+0xde>
 80096cc:	2b20      	cmp	r3, #32
 80096ce:	f040 80af 	bne.w	8009830 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	88db      	ldrh	r3, [r3, #6]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d03a      	beq.n	8009750 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b25b      	sxtb	r3, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	da1b      	bge.n	800971c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	33b0      	adds	r3, #176	; 0xb0
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80096fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	88d2      	ldrh	r2, [r2, #6]
 8009700:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	88db      	ldrh	r3, [r3, #6]
 8009706:	2b07      	cmp	r3, #7
 8009708:	bf28      	it	cs
 800970a:	2307      	movcs	r3, #7
 800970c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	89fa      	ldrh	r2, [r7, #14]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 fdad 	bl	800b274 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800971a:	e090      	b.n	800983e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	785a      	ldrb	r2, [r3, #1]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	2b3f      	cmp	r3, #63	; 0x3f
 800972c:	d803      	bhi.n	8009736 <USBD_CDC_Setup+0xa6>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	88db      	ldrh	r3, [r3, #6]
 8009732:	b2da      	uxtb	r2, r3
 8009734:	e000      	b.n	8009738 <USBD_CDC_Setup+0xa8>
 8009736:	2240      	movs	r2, #64	; 0x40
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800973e:	6939      	ldr	r1, [r7, #16]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009746:	461a      	mov	r2, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 fdbf 	bl	800b2cc <USBD_CtlPrepareRx>
      break;
 800974e:	e076      	b.n	800983e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	33b0      	adds	r3, #176	; 0xb0
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	7850      	ldrb	r0, [r2, #1]
 8009766:	2200      	movs	r2, #0
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	4798      	blx	r3
      break;
 800976c:	e067      	b.n	800983e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b0b      	cmp	r3, #11
 8009774:	d851      	bhi.n	800981a <USBD_CDC_Setup+0x18a>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <USBD_CDC_Setup+0xec>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	080097ad 	.word	0x080097ad
 8009780:	08009829 	.word	0x08009829
 8009784:	0800981b 	.word	0x0800981b
 8009788:	0800981b 	.word	0x0800981b
 800978c:	0800981b 	.word	0x0800981b
 8009790:	0800981b 	.word	0x0800981b
 8009794:	0800981b 	.word	0x0800981b
 8009798:	0800981b 	.word	0x0800981b
 800979c:	0800981b 	.word	0x0800981b
 80097a0:	0800981b 	.word	0x0800981b
 80097a4:	080097d7 	.word	0x080097d7
 80097a8:	08009801 	.word	0x08009801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d107      	bne.n	80097c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097b8:	f107 030a 	add.w	r3, r7, #10
 80097bc:	2202      	movs	r2, #2
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 fd57 	bl	800b274 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097c6:	e032      	b.n	800982e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fce1 	bl	800b192 <USBD_CtlError>
            ret = USBD_FAIL;
 80097d0:	2303      	movs	r3, #3
 80097d2:	75fb      	strb	r3, [r7, #23]
          break;
 80097d4:	e02b      	b.n	800982e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d107      	bne.n	80097f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80097e2:	f107 030d 	add.w	r3, r7, #13
 80097e6:	2201      	movs	r2, #1
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fd42 	bl	800b274 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097f0:	e01d      	b.n	800982e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fccc 	bl	800b192 <USBD_CtlError>
            ret = USBD_FAIL;
 80097fa:	2303      	movs	r3, #3
 80097fc:	75fb      	strb	r3, [r7, #23]
          break;
 80097fe:	e016      	b.n	800982e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b03      	cmp	r3, #3
 800980a:	d00f      	beq.n	800982c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 fcbf 	bl	800b192 <USBD_CtlError>
            ret = USBD_FAIL;
 8009814:	2303      	movs	r3, #3
 8009816:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009818:	e008      	b.n	800982c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fcb8 	bl	800b192 <USBD_CtlError>
          ret = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	75fb      	strb	r3, [r7, #23]
          break;
 8009826:	e002      	b.n	800982e <USBD_CDC_Setup+0x19e>
          break;
 8009828:	bf00      	nop
 800982a:	e008      	b.n	800983e <USBD_CDC_Setup+0x1ae>
          break;
 800982c:	bf00      	nop
      }
      break;
 800982e:	e006      	b.n	800983e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 fcad 	bl	800b192 <USBD_CtlError>
      ret = USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	75fb      	strb	r3, [r7, #23]
      break;
 800983c:	bf00      	nop
  }

  return (uint8_t)ret;
 800983e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800985a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	32b0      	adds	r2, #176	; 0xb0
 8009866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800986e:	2303      	movs	r3, #3
 8009870:	e065      	b.n	800993e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	32b0      	adds	r2, #176	; 0xb0
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	f003 020f 	and.w	r2, r3, #15
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	440b      	add	r3, r1
 8009894:	3318      	adds	r3, #24
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d02f      	beq.n	80098fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800989c:	78fb      	ldrb	r3, [r7, #3]
 800989e:	f003 020f 	and.w	r2, r3, #15
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	3318      	adds	r3, #24
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	f003 010f 	and.w	r1, r3, #15
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	460b      	mov	r3, r1
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	440b      	add	r3, r1
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4403      	add	r3, r0
 80098c4:	3348      	adds	r3, #72	; 0x48
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80098cc:	fb01 f303 	mul.w	r3, r1, r3
 80098d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d112      	bne.n	80098fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80098d6:	78fb      	ldrb	r3, [r7, #3]
 80098d8:	f003 020f 	and.w	r2, r3, #15
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	3318      	adds	r3, #24
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098ee:	78f9      	ldrb	r1, [r7, #3]
 80098f0:	2300      	movs	r3, #0
 80098f2:	2200      	movs	r2, #0
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f004 fe04 	bl	800e502 <USBD_LL_Transmit>
 80098fa:	e01f      	b.n	800993c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	33b0      	adds	r3, #176	; 0xb0
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d010      	beq.n	800993c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	33b0      	adds	r3, #176	; 0xb0
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	32b0      	adds	r2, #176	; 0xb0
 800995c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009960:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	32b0      	adds	r2, #176	; 0xb0
 800996c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e01a      	b.n	80099ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f004 fe02 	bl	800e586 <USBD_LL_GetRxDataSize>
 8009982:	4602      	mov	r2, r0
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	33b0      	adds	r3, #176	; 0xb0
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80099a8:	4611      	mov	r1, r2
 80099aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	32b0      	adds	r2, #176	; 0xb0
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e025      	b.n	8009a24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	33b0      	adds	r3, #176	; 0xb0
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d01a      	beq.n	8009a22 <USBD_CDC_EP0_RxReady+0x6c>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099f2:	2bff      	cmp	r3, #255	; 0xff
 80099f4:	d015      	beq.n	8009a22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	33b0      	adds	r3, #176	; 0xb0
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a16:	b292      	uxth	r2, r2
 8009a18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	22ff      	movs	r2, #255	; 0xff
 8009a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a34:	2182      	movs	r1, #130	; 0x82
 8009a36:	4818      	ldr	r0, [pc, #96]	; (8009a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a38:	f000 fd49 	bl	800a4ce <USBD_GetEpDesc>
 8009a3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4815      	ldr	r0, [pc, #84]	; (8009a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a42:	f000 fd44 	bl	800a4ce <USBD_GetEpDesc>
 8009a46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a48:	2181      	movs	r1, #129	; 0x81
 8009a4a:	4813      	ldr	r0, [pc, #76]	; (8009a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a4c:	f000 fd3f 	bl	800a4ce <USBD_GetEpDesc>
 8009a50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2210      	movs	r2, #16
 8009a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d006      	beq.n	8009a72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a6c:	711a      	strb	r2, [r3, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d006      	beq.n	8009a86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a80:	711a      	strb	r2, [r3, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2243      	movs	r2, #67	; 0x43
 8009a8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a8c:	4b02      	ldr	r3, [pc, #8]	; (8009a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	2000006c 	.word	0x2000006c

08009a9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009aa4:	2182      	movs	r1, #130	; 0x82
 8009aa6:	4818      	ldr	r0, [pc, #96]	; (8009b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009aa8:	f000 fd11 	bl	800a4ce <USBD_GetEpDesc>
 8009aac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aae:	2101      	movs	r1, #1
 8009ab0:	4815      	ldr	r0, [pc, #84]	; (8009b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ab2:	f000 fd0c 	bl	800a4ce <USBD_GetEpDesc>
 8009ab6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ab8:	2181      	movs	r1, #129	; 0x81
 8009aba:	4813      	ldr	r0, [pc, #76]	; (8009b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009abc:	f000 fd07 	bl	800a4ce <USBD_GetEpDesc>
 8009ac0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2210      	movs	r2, #16
 8009acc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d006      	beq.n	8009ae2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	711a      	strb	r2, [r3, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f042 0202 	orr.w	r2, r2, #2
 8009ae0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d006      	beq.n	8009af6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	711a      	strb	r2, [r3, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f042 0202 	orr.w	r2, r2, #2
 8009af4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2243      	movs	r2, #67	; 0x43
 8009afa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	2000006c 	.word	0x2000006c

08009b0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b14:	2182      	movs	r1, #130	; 0x82
 8009b16:	4818      	ldr	r0, [pc, #96]	; (8009b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b18:	f000 fcd9 	bl	800a4ce <USBD_GetEpDesc>
 8009b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4815      	ldr	r0, [pc, #84]	; (8009b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b22:	f000 fcd4 	bl	800a4ce <USBD_GetEpDesc>
 8009b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b28:	2181      	movs	r1, #129	; 0x81
 8009b2a:	4813      	ldr	r0, [pc, #76]	; (8009b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b2c:	f000 fccf 	bl	800a4ce <USBD_GetEpDesc>
 8009b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2210      	movs	r2, #16
 8009b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d006      	beq.n	8009b52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b4c:	711a      	strb	r2, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b60:	711a      	strb	r2, [r3, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2243      	movs	r2, #67	; 0x43
 8009b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b6c:	4b02      	ldr	r3, [pc, #8]	; (8009b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	2000006c 	.word	0x2000006c

08009b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	220a      	movs	r2, #10
 8009b88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b8a:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	20000028 	.word	0x20000028

08009b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e009      	b.n	8009bc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	33b0      	adds	r3, #176	; 0xb0
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	32b0      	adds	r2, #176	; 0xb0
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e008      	b.n	8009c08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	32b0      	adds	r2, #176	; 0xb0
 8009c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e004      	b.n	8009c42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	32b0      	adds	r2, #176	; 0xb0
 8009c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e025      	b.n	8009cc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11f      	bne.n	8009cc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009c88:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <USBD_CDC_TransmitPacket+0x7c>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 020f 	and.w	r2, r3, #15
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4403      	add	r3, r0
 8009ca2:	3318      	adds	r3, #24
 8009ca4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <USBD_CDC_TransmitPacket+0x7c>)
 8009ca8:	7819      	ldrb	r1, [r3, #0]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f004 fc23 	bl	800e502 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200000af 	.word	0x200000af

08009cd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	32b0      	adds	r2, #176	; 0xb0
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	32b0      	adds	r2, #176	; 0xb0
 8009cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e018      	b.n	8009d30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	7c1b      	ldrb	r3, [r3, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <USBD_CDC_ReceivePacket+0x68>)
 8009d08:	7819      	ldrb	r1, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f004 fc15 	bl	800e544 <USBD_LL_PrepareReceive>
 8009d1a:	e008      	b.n	8009d2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d1c:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <USBD_CDC_ReceivePacket+0x68>)
 8009d1e:	7819      	ldrb	r1, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d26:	2340      	movs	r3, #64	; 0x40
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f004 fc0b 	bl	800e544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	200000b0 	.word	0x200000b0

08009d3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e01f      	b.n	8009d94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	79fa      	ldrb	r2, [r7, #7]
 8009d86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f004 fa81 	bl	800e290 <USBD_LL_Init>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e025      	b.n	8009e00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	32ae      	adds	r2, #174	; 0xae
 8009dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00f      	beq.n	8009df0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	32ae      	adds	r2, #174	; 0xae
 8009dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	f107 020e 	add.w	r2, r7, #14
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
 8009de8:	4602      	mov	r2, r0
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f004 fa8d 	bl	800e330 <USBD_LL_Start>
 8009e16:	4603      	mov	r3, r0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d009      	beq.n	8009e64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	78fa      	ldrb	r2, [r7, #3]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	4611      	mov	r1, r2
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 f932 	bl	800b11e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ec8:	461a      	mov	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ed6:	f003 031f 	and.w	r3, r3, #31
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d01a      	beq.n	8009f14 <USBD_LL_SetupStage+0x72>
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d822      	bhi.n	8009f28 <USBD_LL_SetupStage+0x86>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <USBD_LL_SetupStage+0x4a>
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d00a      	beq.n	8009f00 <USBD_LL_SetupStage+0x5e>
 8009eea:	e01d      	b.n	8009f28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fb5f 	bl	800a5b8 <USBD_StdDevReq>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73fb      	strb	r3, [r7, #15]
      break;
 8009efe:	e020      	b.n	8009f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fbc7 	bl	800a69c <USBD_StdItfReq>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73fb      	strb	r3, [r7, #15]
      break;
 8009f12:	e016      	b.n	8009f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fc29 	bl	800a774 <USBD_StdEPReq>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
      break;
 8009f26:	e00c      	b.n	8009f42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f004 fa5a 	bl	800e3f0 <USBD_LL_StallEP>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f40:	bf00      	nop
  }

  return ret;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	460b      	mov	r3, r1
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d16e      	bne.n	800a042 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	f040 8098 	bne.w	800a0a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d913      	bls.n	8009fac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	1ad2      	subs	r2, r2, r3
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bf28      	it	cs
 8009f9e:	4613      	movcs	r3, r2
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f001 f9ae 	bl	800b306 <USBD_CtlContinueRx>
 8009faa:	e07d      	b.n	800a0a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fb2:	f003 031f 	and.w	r3, r3, #31
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d014      	beq.n	8009fe4 <USBD_LL_DataOutStage+0x98>
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d81d      	bhi.n	8009ffa <USBD_LL_DataOutStage+0xae>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <USBD_LL_DataOutStage+0x7c>
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d003      	beq.n	8009fce <USBD_LL_DataOutStage+0x82>
 8009fc6:	e018      	b.n	8009ffa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75bb      	strb	r3, [r7, #22]
            break;
 8009fcc:	e018      	b.n	800a000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fa5e 	bl	800a49a <USBD_CoreFindIF>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75bb      	strb	r3, [r7, #22]
            break;
 8009fe2:	e00d      	b.n	800a000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	4619      	mov	r1, r3
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 fa60 	bl	800a4b4 <USBD_CoreFindEP>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8009ff8:	e002      	b.n	800a000 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8009ffe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a000:	7dbb      	ldrb	r3, [r7, #22]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d119      	bne.n	800a03a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d113      	bne.n	800a03a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a012:	7dba      	ldrb	r2, [r7, #22]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	32ae      	adds	r2, #174	; 0xae
 800a018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00b      	beq.n	800a03a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a022:	7dba      	ldrb	r2, [r7, #22]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a02a:	7dba      	ldrb	r2, [r7, #22]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	32ae      	adds	r2, #174	; 0xae
 800a030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f001 f974 	bl	800b328 <USBD_CtlSendStatus>
 800a040:	e032      	b.n	800a0a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	4619      	mov	r1, r3
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fa31 	bl	800a4b4 <USBD_CoreFindEP>
 800a052:	4603      	mov	r3, r0
 800a054:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a056:	7dbb      	ldrb	r3, [r7, #22]
 800a058:	2bff      	cmp	r3, #255	; 0xff
 800a05a:	d025      	beq.n	800a0a8 <USBD_LL_DataOutStage+0x15c>
 800a05c:	7dbb      	ldrb	r3, [r7, #22]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d122      	bne.n	800a0a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d117      	bne.n	800a09e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a06e:	7dba      	ldrb	r2, [r7, #22]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	32ae      	adds	r2, #174	; 0xae
 800a074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00f      	beq.n	800a09e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a07e:	7dba      	ldrb	r2, [r7, #22]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a086:	7dba      	ldrb	r2, [r7, #22]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	32ae      	adds	r2, #174	; 0xae
 800a08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	7afa      	ldrb	r2, [r7, #11]
 800a094:	4611      	mov	r1, r2
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	e000      	b.n	800a0aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	607a      	str	r2, [r7, #4]
 800a0be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0c0:	7afb      	ldrb	r3, [r7, #11]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d16f      	bne.n	800a1a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3314      	adds	r3, #20
 800a0ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d15a      	bne.n	800a18c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d914      	bls.n	800a10c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f001 f8d6 	bl	800b2aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0fe:	2300      	movs	r3, #0
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f004 fa1d 	bl	800e544 <USBD_LL_PrepareReceive>
 800a10a:	e03f      	b.n	800a18c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	429a      	cmp	r2, r3
 800a116:	d11c      	bne.n	800a152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a120:	429a      	cmp	r2, r3
 800a122:	d316      	bcc.n	800a152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a12e:	429a      	cmp	r2, r3
 800a130:	d20f      	bcs.n	800a152 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a132:	2200      	movs	r2, #0
 800a134:	2100      	movs	r1, #0
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f001 f8b7 	bl	800b2aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a144:	2300      	movs	r3, #0
 800a146:	2200      	movs	r2, #0
 800a148:	2100      	movs	r1, #0
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f004 f9fa 	bl	800e544 <USBD_LL_PrepareReceive>
 800a150:	e01c      	b.n	800a18c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d10f      	bne.n	800a17e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a17e:	2180      	movs	r1, #128	; 0x80
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f004 f935 	bl	800e3f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f001 f8e1 	bl	800b34e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d03a      	beq.n	800a20c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7ff fe42 	bl	8009e20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1a4:	e032      	b.n	800a20c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f97f 	bl	800a4b4 <USBD_CoreFindEP>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	2bff      	cmp	r3, #255	; 0xff
 800a1be:	d025      	beq.n	800a20c <USBD_LL_DataInStage+0x15a>
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d122      	bne.n	800a20c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d11c      	bne.n	800a20c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1d2:	7dfa      	ldrb	r2, [r7, #23]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	32ae      	adds	r2, #174	; 0xae
 800a1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d014      	beq.n	800a20c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1e2:	7dfa      	ldrb	r2, [r7, #23]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1ea:	7dfa      	ldrb	r2, [r7, #23]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	32ae      	adds	r2, #174	; 0xae
 800a1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	7afa      	ldrb	r2, [r7, #11]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	4798      	blx	r3
 800a1fe:	4603      	mov	r3, r0
 800a200:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a202:	7dbb      	ldrb	r3, [r7, #22]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a208:	7dbb      	ldrb	r3, [r7, #22]
 800a20a:	e000      	b.n	800a20e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d014      	beq.n	800a27c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00e      	beq.n	800a27c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	6852      	ldr	r2, [r2, #4]
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	4611      	mov	r1, r2
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	4798      	blx	r3
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a278:	2303      	movs	r3, #3
 800a27a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f004 f86f 	bl	800e366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2240      	movs	r2, #64	; 0x40
 800a294:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a298:	2340      	movs	r3, #64	; 0x40
 800a29a:	2200      	movs	r2, #0
 800a29c:	2180      	movs	r1, #128	; 0x80
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f004 f861 	bl	800e366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2240      	movs	r2, #64	; 0x40
 800a2ae:	621a      	str	r2, [r3, #32]

  return ret;
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	78fa      	ldrb	r2, [r7, #3]
 800a2ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2204      	movs	r2, #4
 800a2f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b04      	cmp	r3, #4
 800a318:	d106      	bne.n	800a328 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a320:	b2da      	uxtb	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b03      	cmp	r3, #3
 800a348:	d110      	bne.n	800a36c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	460b      	mov	r3, r1
 800a380:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	32ae      	adds	r2, #174	; 0xae
 800a38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a394:	2303      	movs	r3, #3
 800a396:	e01c      	b.n	800a3d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d115      	bne.n	800a3d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	32ae      	adds	r2, #174	; 0xae
 800a3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	32ae      	adds	r2, #174	; 0xae
 800a3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	32ae      	adds	r2, #174	; 0xae
 800a3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e01c      	b.n	800a436 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b03      	cmp	r3, #3
 800a406:	d115      	bne.n	800a434 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32ae      	adds	r2, #174	; 0xae
 800a412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	32ae      	adds	r2, #174	; 0xae
 800a426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	4611      	mov	r1, r2
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00e      	beq.n	800a490 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6852      	ldr	r2, [r2, #4]
 800a47e:	b2d2      	uxtb	r2, r2
 800a480:	4611      	mov	r1, r2
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a48c:	2303      	movs	r3, #3
 800a48e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a490:	7bfb      	ldrb	r3, [r7, #15]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d920      	bls.n	800a538 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a4fe:	e013      	b.n	800a528 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a500:	f107 030a 	add.w	r3, r7, #10
 800a504:	4619      	mov	r1, r3
 800a506:	6978      	ldr	r0, [r7, #20]
 800a508:	f000 f81b 	bl	800a542 <USBD_GetNextDesc>
 800a50c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b05      	cmp	r3, #5
 800a514:	d108      	bne.n	800a528 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	789b      	ldrb	r3, [r3, #2]
 800a51e:	78fa      	ldrb	r2, [r7, #3]
 800a520:	429a      	cmp	r2, r3
 800a522:	d008      	beq.n	800a536 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	885b      	ldrh	r3, [r3, #2]
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	897b      	ldrh	r3, [r7, #10]
 800a530:	429a      	cmp	r2, r3
 800a532:	d8e5      	bhi.n	800a500 <USBD_GetEpDesc+0x32>
 800a534:	e000      	b.n	800a538 <USBD_GetEpDesc+0x6a>
          break;
 800a536:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a538:	693b      	ldr	r3, [r7, #16]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a542:	b480      	push	{r7}
 800a544:	b085      	sub	sp, #20
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	881a      	ldrh	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4413      	add	r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4413      	add	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a56e:	68fb      	ldr	r3, [r7, #12]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	3301      	adds	r3, #1
 800a592:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a59a:	8a3b      	ldrh	r3, [r7, #16]
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	b21a      	sxth	r2, r3
 800a5a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	b21b      	sxth	r3, r3
 800a5a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5aa:	89fb      	ldrh	r3, [r7, #14]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	371c      	adds	r7, #28
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ce:	2b40      	cmp	r3, #64	; 0x40
 800a5d0:	d005      	beq.n	800a5de <USBD_StdDevReq+0x26>
 800a5d2:	2b40      	cmp	r3, #64	; 0x40
 800a5d4:	d857      	bhi.n	800a686 <USBD_StdDevReq+0xce>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00f      	beq.n	800a5fa <USBD_StdDevReq+0x42>
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d153      	bne.n	800a686 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	32ae      	adds	r2, #174	; 0xae
 800a5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	4798      	blx	r3
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f8:	e04a      	b.n	800a690 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b09      	cmp	r3, #9
 800a600:	d83b      	bhi.n	800a67a <USBD_StdDevReq+0xc2>
 800a602:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <USBD_StdDevReq+0x50>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a65d 	.word	0x0800a65d
 800a60c:	0800a671 	.word	0x0800a671
 800a610:	0800a67b 	.word	0x0800a67b
 800a614:	0800a667 	.word	0x0800a667
 800a618:	0800a67b 	.word	0x0800a67b
 800a61c:	0800a63b 	.word	0x0800a63b
 800a620:	0800a631 	.word	0x0800a631
 800a624:	0800a67b 	.word	0x0800a67b
 800a628:	0800a653 	.word	0x0800a653
 800a62c:	0800a645 	.word	0x0800a645
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa3c 	bl	800aab0 <USBD_GetDescriptor>
          break;
 800a638:	e024      	b.n	800a684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fbcb 	bl	800add8 <USBD_SetAddress>
          break;
 800a642:	e01f      	b.n	800a684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fc0a 	bl	800ae60 <USBD_SetConfig>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
          break;
 800a650:	e018      	b.n	800a684 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fcad 	bl	800afb4 <USBD_GetConfig>
          break;
 800a65a:	e013      	b.n	800a684 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fcde 	bl	800b020 <USBD_GetStatus>
          break;
 800a664:	e00e      	b.n	800a684 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fd0d 	bl	800b088 <USBD_SetFeature>
          break;
 800a66e:	e009      	b.n	800a684 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fd31 	bl	800b0da <USBD_ClrFeature>
          break;
 800a678:	e004      	b.n	800a684 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fd88 	bl	800b192 <USBD_CtlError>
          break;
 800a682:	bf00      	nop
      }
      break;
 800a684:	e004      	b.n	800a690 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fd82 	bl	800b192 <USBD_CtlError>
      break;
 800a68e:	bf00      	nop
  }

  return ret;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop

0800a69c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	d005      	beq.n	800a6c2 <USBD_StdItfReq+0x26>
 800a6b6:	2b40      	cmp	r3, #64	; 0x40
 800a6b8:	d852      	bhi.n	800a760 <USBD_StdItfReq+0xc4>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <USBD_StdItfReq+0x26>
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	d14e      	bne.n	800a760 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d840      	bhi.n	800a752 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	889b      	ldrh	r3, [r3, #4]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d836      	bhi.n	800a748 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	889b      	ldrh	r3, [r3, #4]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff fed9 	bl	800a49a <USBD_CoreFindIF>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	2bff      	cmp	r3, #255	; 0xff
 800a6f0:	d01d      	beq.n	800a72e <USBD_StdItfReq+0x92>
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d11a      	bne.n	800a72e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a6f8:	7bba      	ldrb	r2, [r7, #14]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	32ae      	adds	r2, #174	; 0xae
 800a6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00f      	beq.n	800a728 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a708:	7bba      	ldrb	r2, [r7, #14]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a710:	7bba      	ldrb	r2, [r7, #14]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	32ae      	adds	r2, #174	; 0xae
 800a716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	6839      	ldr	r1, [r7, #0]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	4798      	blx	r3
 800a722:	4603      	mov	r3, r0
 800a724:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a726:	e004      	b.n	800a732 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a728:	2303      	movs	r3, #3
 800a72a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a72c:	e001      	b.n	800a732 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a72e:	2303      	movs	r3, #3
 800a730:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	88db      	ldrh	r3, [r3, #6]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d110      	bne.n	800a75c <USBD_StdItfReq+0xc0>
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10d      	bne.n	800a75c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fdf1 	bl	800b328 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a746:	e009      	b.n	800a75c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fd21 	bl	800b192 <USBD_CtlError>
          break;
 800a750:	e004      	b.n	800a75c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fd1c 	bl	800b192 <USBD_CtlError>
          break;
 800a75a:	e000      	b.n	800a75e <USBD_StdItfReq+0xc2>
          break;
 800a75c:	bf00      	nop
      }
      break;
 800a75e:	e004      	b.n	800a76a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fd15 	bl	800b192 <USBD_CtlError>
      break;
 800a768:	bf00      	nop
  }

  return ret;
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	889b      	ldrh	r3, [r3, #4]
 800a786:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d007      	beq.n	800a7a4 <USBD_StdEPReq+0x30>
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	f200 817f 	bhi.w	800aa98 <USBD_StdEPReq+0x324>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d02a      	beq.n	800a7f4 <USBD_StdEPReq+0x80>
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	f040 817a 	bne.w	800aa98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7ff fe83 	bl	800a4b4 <USBD_CoreFindEP>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7b2:	7b7b      	ldrb	r3, [r7, #13]
 800a7b4:	2bff      	cmp	r3, #255	; 0xff
 800a7b6:	f000 8174 	beq.w	800aaa2 <USBD_StdEPReq+0x32e>
 800a7ba:	7b7b      	ldrb	r3, [r7, #13]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f040 8170 	bne.w	800aaa2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7c2:	7b7a      	ldrb	r2, [r7, #13]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7ca:	7b7a      	ldrb	r2, [r7, #13]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	32ae      	adds	r2, #174	; 0xae
 800a7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 8163 	beq.w	800aaa2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a7dc:	7b7a      	ldrb	r2, [r7, #13]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	32ae      	adds	r2, #174	; 0xae
 800a7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	4798      	blx	r3
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7f2:	e156      	b.n	800aaa2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	785b      	ldrb	r3, [r3, #1]
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d008      	beq.n	800a80e <USBD_StdEPReq+0x9a>
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	f300 8145 	bgt.w	800aa8c <USBD_StdEPReq+0x318>
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 809b 	beq.w	800a93e <USBD_StdEPReq+0x1ca>
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d03c      	beq.n	800a886 <USBD_StdEPReq+0x112>
 800a80c:	e13e      	b.n	800aa8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d002      	beq.n	800a820 <USBD_StdEPReq+0xac>
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d016      	beq.n	800a84c <USBD_StdEPReq+0xd8>
 800a81e:	e02c      	b.n	800a87a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00d      	beq.n	800a842 <USBD_StdEPReq+0xce>
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	d00a      	beq.n	800a842 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f003 fddd 	bl	800e3f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a836:	2180      	movs	r1, #128	; 0x80
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f003 fdd9 	bl	800e3f0 <USBD_LL_StallEP>
 800a83e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a840:	e020      	b.n	800a884 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fca4 	bl	800b192 <USBD_CtlError>
              break;
 800a84a:	e01b      	b.n	800a884 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	885b      	ldrh	r3, [r3, #2]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10e      	bne.n	800a872 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00b      	beq.n	800a872 <USBD_StdEPReq+0xfe>
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b80      	cmp	r3, #128	; 0x80
 800a85e:	d008      	beq.n	800a872 <USBD_StdEPReq+0xfe>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	88db      	ldrh	r3, [r3, #6]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d104      	bne.n	800a872 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f003 fdbf 	bl	800e3f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fd58 	bl	800b328 <USBD_CtlSendStatus>

              break;
 800a878:	e004      	b.n	800a884 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fc88 	bl	800b192 <USBD_CtlError>
              break;
 800a882:	bf00      	nop
          }
          break;
 800a884:	e107      	b.n	800aa96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d002      	beq.n	800a898 <USBD_StdEPReq+0x124>
 800a892:	2b03      	cmp	r3, #3
 800a894:	d016      	beq.n	800a8c4 <USBD_StdEPReq+0x150>
 800a896:	e04b      	b.n	800a930 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00d      	beq.n	800a8ba <USBD_StdEPReq+0x146>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b80      	cmp	r3, #128	; 0x80
 800a8a2:	d00a      	beq.n	800a8ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f003 fda1 	bl	800e3f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ae:	2180      	movs	r1, #128	; 0x80
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f003 fd9d 	bl	800e3f0 <USBD_LL_StallEP>
 800a8b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8b8:	e040      	b.n	800a93c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fc68 	bl	800b192 <USBD_CtlError>
              break;
 800a8c2:	e03b      	b.n	800a93c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	885b      	ldrh	r3, [r3, #2]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d136      	bne.n	800a93a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d004      	beq.n	800a8e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f003 fda7 	bl	800e42e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fd21 	bl	800b328 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fde2 	bl	800a4b4 <USBD_CoreFindEP>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8f4:	7b7b      	ldrb	r3, [r7, #13]
 800a8f6:	2bff      	cmp	r3, #255	; 0xff
 800a8f8:	d01f      	beq.n	800a93a <USBD_StdEPReq+0x1c6>
 800a8fa:	7b7b      	ldrb	r3, [r7, #13]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d11c      	bne.n	800a93a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a900:	7b7a      	ldrb	r2, [r7, #13]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a908:	7b7a      	ldrb	r2, [r7, #13]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32ae      	adds	r2, #174	; 0xae
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d010      	beq.n	800a93a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a918:	7b7a      	ldrb	r2, [r7, #13]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	32ae      	adds	r2, #174	; 0xae
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	4798      	blx	r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a92e:	e004      	b.n	800a93a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fc2d 	bl	800b192 <USBD_CtlError>
              break;
 800a938:	e000      	b.n	800a93c <USBD_StdEPReq+0x1c8>
              break;
 800a93a:	bf00      	nop
          }
          break;
 800a93c:	e0ab      	b.n	800aa96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b02      	cmp	r3, #2
 800a948:	d002      	beq.n	800a950 <USBD_StdEPReq+0x1dc>
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d032      	beq.n	800a9b4 <USBD_StdEPReq+0x240>
 800a94e:	e097      	b.n	800aa80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d007      	beq.n	800a966 <USBD_StdEPReq+0x1f2>
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	2b80      	cmp	r3, #128	; 0x80
 800a95a:	d004      	beq.n	800a966 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fc17 	bl	800b192 <USBD_CtlError>
                break;
 800a964:	e091      	b.n	800aa8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	da0b      	bge.n	800a986 <USBD_StdEPReq+0x212>
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	3310      	adds	r3, #16
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	4413      	add	r3, r2
 800a982:	3304      	adds	r3, #4
 800a984:	e00b      	b.n	800a99e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a98c:	4613      	mov	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	4413      	add	r3, r2
 800a99c:	3304      	adds	r3, #4
 800a99e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fc61 	bl	800b274 <USBD_CtlSendData>
              break;
 800a9b2:	e06a      	b.n	800aa8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	da11      	bge.n	800a9e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	f003 020f 	and.w	r2, r3, #15
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	3324      	adds	r3, #36	; 0x24
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d117      	bne.n	800aa06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fbda 	bl	800b192 <USBD_CtlError>
                  break;
 800a9de:	e054      	b.n	800aa8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	f003 020f 	and.w	r2, r3, #15
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	440b      	add	r3, r1
 800a9f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d104      	bne.n	800aa06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fbc7 	bl	800b192 <USBD_CtlError>
                  break;
 800aa04:	e041      	b.n	800aa8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da0b      	bge.n	800aa26 <USBD_StdEPReq+0x2b2>
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	3310      	adds	r3, #16
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	3304      	adds	r3, #4
 800aa24:	e00b      	b.n	800aa3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <USBD_StdEPReq+0x2d8>
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	2b80      	cmp	r3, #128	; 0x80
 800aa4a:	d103      	bne.n	800aa54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	e00e      	b.n	800aa72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f003 fd07 	bl	800e46c <USBD_LL_IsStallEP>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2201      	movs	r2, #1
 800aa68:	601a      	str	r2, [r3, #0]
 800aa6a:	e002      	b.n	800aa72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2202      	movs	r2, #2
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fbfb 	bl	800b274 <USBD_CtlSendData>
              break;
 800aa7e:	e004      	b.n	800aa8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fb85 	bl	800b192 <USBD_CtlError>
              break;
 800aa88:	bf00      	nop
          }
          break;
 800aa8a:	e004      	b.n	800aa96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fb7f 	bl	800b192 <USBD_CtlError>
          break;
 800aa94:	bf00      	nop
      }
      break;
 800aa96:	e005      	b.n	800aaa4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fb79 	bl	800b192 <USBD_CtlError>
      break;
 800aaa0:	e000      	b.n	800aaa4 <USBD_StdEPReq+0x330>
      break;
 800aaa2:	bf00      	nop
  }

  return ret;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	885b      	ldrh	r3, [r3, #2]
 800aaca:	0a1b      	lsrs	r3, r3, #8
 800aacc:	b29b      	uxth	r3, r3
 800aace:	3b01      	subs	r3, #1
 800aad0:	2b0e      	cmp	r3, #14
 800aad2:	f200 8152 	bhi.w	800ad7a <USBD_GetDescriptor+0x2ca>
 800aad6:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <USBD_GetDescriptor+0x2c>)
 800aad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aadc:	0800ab4d 	.word	0x0800ab4d
 800aae0:	0800ab65 	.word	0x0800ab65
 800aae4:	0800aba5 	.word	0x0800aba5
 800aae8:	0800ad7b 	.word	0x0800ad7b
 800aaec:	0800ad7b 	.word	0x0800ad7b
 800aaf0:	0800ad1b 	.word	0x0800ad1b
 800aaf4:	0800ad47 	.word	0x0800ad47
 800aaf8:	0800ad7b 	.word	0x0800ad7b
 800aafc:	0800ad7b 	.word	0x0800ad7b
 800ab00:	0800ad7b 	.word	0x0800ad7b
 800ab04:	0800ad7b 	.word	0x0800ad7b
 800ab08:	0800ad7b 	.word	0x0800ad7b
 800ab0c:	0800ad7b 	.word	0x0800ad7b
 800ab10:	0800ad7b 	.word	0x0800ad7b
 800ab14:	0800ab19 	.word	0x0800ab19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	69db      	ldr	r3, [r3, #28]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	7c12      	ldrb	r2, [r2, #16]
 800ab30:	f107 0108 	add.w	r1, r7, #8
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3a:	e126      	b.n	800ad8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fb27 	bl	800b192 <USBD_CtlError>
        err++;
 800ab44:	7afb      	ldrb	r3, [r7, #11]
 800ab46:	3301      	adds	r3, #1
 800ab48:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4a:	e11e      	b.n	800ad8a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	7c12      	ldrb	r2, [r2, #16]
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	4798      	blx	r3
 800ab60:	60f8      	str	r0, [r7, #12]
      break;
 800ab62:	e112      	b.n	800ad8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7c1b      	ldrb	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10d      	bne.n	800ab88 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab74:	f107 0208 	add.w	r2, r7, #8
 800ab78:	4610      	mov	r0, r2
 800ab7a:	4798      	blx	r3
 800ab7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3301      	adds	r3, #1
 800ab82:	2202      	movs	r2, #2
 800ab84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab86:	e100      	b.n	800ad8a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	f107 0208 	add.w	r2, r7, #8
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	2202      	movs	r2, #2
 800aba0:	701a      	strb	r2, [r3, #0]
      break;
 800aba2:	e0f2      	b.n	800ad8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	885b      	ldrh	r3, [r3, #2]
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b05      	cmp	r3, #5
 800abac:	f200 80ac 	bhi.w	800ad08 <USBD_GetDescriptor+0x258>
 800abb0:	a201      	add	r2, pc, #4	; (adr r2, 800abb8 <USBD_GetDescriptor+0x108>)
 800abb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb6:	bf00      	nop
 800abb8:	0800abd1 	.word	0x0800abd1
 800abbc:	0800ac05 	.word	0x0800ac05
 800abc0:	0800ac39 	.word	0x0800ac39
 800abc4:	0800ac6d 	.word	0x0800ac6d
 800abc8:	0800aca1 	.word	0x0800aca1
 800abcc:	0800acd5 	.word	0x0800acd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abf2:	e091      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 facb 	bl	800b192 <USBD_CtlError>
            err++;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3301      	adds	r3, #1
 800ac00:	72fb      	strb	r3, [r7, #11]
          break;
 800ac02:	e089      	b.n	800ad18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7c12      	ldrb	r2, [r2, #16]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac26:	e077      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fab1 	bl	800b192 <USBD_CtlError>
            err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
          break;
 800ac36:	e06f      	b.n	800ad18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	7c12      	ldrb	r2, [r2, #16]
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac5a:	e05d      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa97 	bl	800b192 <USBD_CtlError>
            err++;
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	3301      	adds	r3, #1
 800ac68:	72fb      	strb	r3, [r7, #11]
          break;
 800ac6a:	e055      	b.n	800ad18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	7c12      	ldrb	r2, [r2, #16]
 800ac84:	f107 0108 	add.w	r1, r7, #8
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4798      	blx	r3
 800ac8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8e:	e043      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fa7d 	bl	800b192 <USBD_CtlError>
            err++;
 800ac98:	7afb      	ldrb	r3, [r7, #11]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9e:	e03b      	b.n	800ad18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00b      	beq.n	800acc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	7c12      	ldrb	r2, [r2, #16]
 800acb8:	f107 0108 	add.w	r1, r7, #8
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
 800acc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acc2:	e029      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa63 	bl	800b192 <USBD_CtlError>
            err++;
 800accc:	7afb      	ldrb	r3, [r7, #11]
 800acce:	3301      	adds	r3, #1
 800acd0:	72fb      	strb	r3, [r7, #11]
          break;
 800acd2:	e021      	b.n	800ad18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	7c12      	ldrb	r2, [r2, #16]
 800acec:	f107 0108 	add.w	r1, r7, #8
 800acf0:	4610      	mov	r0, r2
 800acf2:	4798      	blx	r3
 800acf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf6:	e00f      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fa49 	bl	800b192 <USBD_CtlError>
            err++;
 800ad00:	7afb      	ldrb	r3, [r7, #11]
 800ad02:	3301      	adds	r3, #1
 800ad04:	72fb      	strb	r3, [r7, #11]
          break;
 800ad06:	e007      	b.n	800ad18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa41 	bl	800b192 <USBD_CtlError>
          err++;
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	3301      	adds	r3, #1
 800ad14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad16:	bf00      	nop
      }
      break;
 800ad18:	e037      	b.n	800ad8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	7c1b      	ldrb	r3, [r3, #16]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d109      	bne.n	800ad36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2a:	f107 0208 	add.w	r2, r7, #8
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4798      	blx	r3
 800ad32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad34:	e029      	b.n	800ad8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fa2a 	bl	800b192 <USBD_CtlError>
        err++;
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	3301      	adds	r3, #1
 800ad42:	72fb      	strb	r3, [r7, #11]
      break;
 800ad44:	e021      	b.n	800ad8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7c1b      	ldrb	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10d      	bne.n	800ad6a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad56:	f107 0208 	add.w	r2, r7, #8
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	4798      	blx	r3
 800ad5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	2207      	movs	r2, #7
 800ad66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad68:	e00f      	b.n	800ad8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa10 	bl	800b192 <USBD_CtlError>
        err++;
 800ad72:	7afb      	ldrb	r3, [r7, #11]
 800ad74:	3301      	adds	r3, #1
 800ad76:	72fb      	strb	r3, [r7, #11]
      break;
 800ad78:	e007      	b.n	800ad8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fa08 	bl	800b192 <USBD_CtlError>
      err++;
 800ad82:	7afb      	ldrb	r3, [r7, #11]
 800ad84:	3301      	adds	r3, #1
 800ad86:	72fb      	strb	r3, [r7, #11]
      break;
 800ad88:	bf00      	nop
  }

  if (err != 0U)
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d11e      	bne.n	800adce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	88db      	ldrh	r3, [r3, #6]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d016      	beq.n	800adc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ad98:	893b      	ldrh	r3, [r7, #8]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00e      	beq.n	800adbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	88da      	ldrh	r2, [r3, #6]
 800ada2:	893b      	ldrh	r3, [r7, #8]
 800ada4:	4293      	cmp	r3, r2
 800ada6:	bf28      	it	cs
 800ada8:	4613      	movcs	r3, r2
 800adaa:	b29b      	uxth	r3, r3
 800adac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adae:	893b      	ldrh	r3, [r7, #8]
 800adb0:	461a      	mov	r2, r3
 800adb2:	68f9      	ldr	r1, [r7, #12]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa5d 	bl	800b274 <USBD_CtlSendData>
 800adba:	e009      	b.n	800add0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9e7 	bl	800b192 <USBD_CtlError>
 800adc4:	e004      	b.n	800add0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 faae 	bl	800b328 <USBD_CtlSendStatus>
 800adcc:	e000      	b.n	800add0 <USBD_GetDescriptor+0x320>
    return;
 800adce:	bf00      	nop
  }
}
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop

0800add8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	889b      	ldrh	r3, [r3, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d131      	bne.n	800ae4e <USBD_SetAddress+0x76>
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	88db      	ldrh	r3, [r3, #6]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d12d      	bne.n	800ae4e <USBD_SetAddress+0x76>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	885b      	ldrh	r3, [r3, #2]
 800adf6:	2b7f      	cmp	r3, #127	; 0x7f
 800adf8:	d829      	bhi.n	800ae4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	885b      	ldrh	r3, [r3, #2]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	d104      	bne.n	800ae1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f9bc 	bl	800b192 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1a:	e01d      	b.n	800ae58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	7bfa      	ldrb	r2, [r7, #15]
 800ae20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f003 fb4b 	bl	800e4c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa7a 	bl	800b328 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae42:	e009      	b.n	800ae58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae4c:	e004      	b.n	800ae58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f99e 	bl	800b192 <USBD_CtlError>
  }
}
 800ae56:	bf00      	nop
 800ae58:	bf00      	nop
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	885b      	ldrh	r3, [r3, #2]
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	4b4e      	ldr	r3, [pc, #312]	; (800afb0 <USBD_SetConfig+0x150>)
 800ae76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae78:	4b4d      	ldr	r3, [pc, #308]	; (800afb0 <USBD_SetConfig+0x150>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d905      	bls.n	800ae8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f985 	bl	800b192 <USBD_CtlError>
    return USBD_FAIL;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e08c      	b.n	800afa6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d002      	beq.n	800ae9e <USBD_SetConfig+0x3e>
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d029      	beq.n	800aef0 <USBD_SetConfig+0x90>
 800ae9c:	e075      	b.n	800af8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae9e:	4b44      	ldr	r3, [pc, #272]	; (800afb0 <USBD_SetConfig+0x150>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d020      	beq.n	800aee8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aea6:	4b42      	ldr	r3, [pc, #264]	; (800afb0 <USBD_SetConfig+0x150>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aeb0:	4b3f      	ldr	r3, [pc, #252]	; (800afb0 <USBD_SetConfig+0x150>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7fe ffbd 	bl	8009e36 <USBD_SetClassConfig>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d008      	beq.n	800aed8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f962 	bl	800b192 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2202      	movs	r2, #2
 800aed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aed6:	e065      	b.n	800afa4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fa25 	bl	800b328 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2203      	movs	r2, #3
 800aee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aee6:	e05d      	b.n	800afa4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fa1d 	bl	800b328 <USBD_CtlSendStatus>
      break;
 800aeee:	e059      	b.n	800afa4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aef0:	4b2f      	ldr	r3, [pc, #188]	; (800afb0 <USBD_SetConfig+0x150>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d112      	bne.n	800af1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af00:	4b2b      	ldr	r3, [pc, #172]	; (800afb0 <USBD_SetConfig+0x150>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af0a:	4b29      	ldr	r3, [pc, #164]	; (800afb0 <USBD_SetConfig+0x150>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7fe ffac 	bl	8009e6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa06 	bl	800b328 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af1c:	e042      	b.n	800afa4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <USBD_SetConfig+0x150>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d02a      	beq.n	800af82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	b2db      	uxtb	r3, r3
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7fe ff9a 	bl	8009e6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af3a:	4b1d      	ldr	r3, [pc, #116]	; (800afb0 <USBD_SetConfig+0x150>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af44:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <USBD_SetConfig+0x150>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7fe ff73 	bl	8009e36 <USBD_SetClassConfig>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00f      	beq.n	800af7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f918 	bl	800b192 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	b2db      	uxtb	r3, r3
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7fe ff7f 	bl	8009e6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af78:	e014      	b.n	800afa4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f9d4 	bl	800b328 <USBD_CtlSendStatus>
      break;
 800af80:	e010      	b.n	800afa4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f9d0 	bl	800b328 <USBD_CtlSendStatus>
      break;
 800af88:	e00c      	b.n	800afa4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f900 	bl	800b192 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af92:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <USBD_SetConfig+0x150>)
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fe ff68 	bl	8009e6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af9e:	2303      	movs	r3, #3
 800afa0:	73fb      	strb	r3, [r7, #15]
      break;
 800afa2:	bf00      	nop
  }

  return ret;
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20000814 	.word	0x20000814

0800afb4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	88db      	ldrh	r3, [r3, #6]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d004      	beq.n	800afd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f8e2 	bl	800b192 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afce:	e023      	b.n	800b018 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b02      	cmp	r3, #2
 800afda:	dc02      	bgt.n	800afe2 <USBD_GetConfig+0x2e>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	dc03      	bgt.n	800afe8 <USBD_GetConfig+0x34>
 800afe0:	e015      	b.n	800b00e <USBD_GetConfig+0x5a>
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d00b      	beq.n	800affe <USBD_GetConfig+0x4a>
 800afe6:	e012      	b.n	800b00e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3308      	adds	r3, #8
 800aff2:	2201      	movs	r2, #1
 800aff4:	4619      	mov	r1, r3
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f93c 	bl	800b274 <USBD_CtlSendData>
        break;
 800affc:	e00c      	b.n	800b018 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3304      	adds	r3, #4
 800b002:	2201      	movs	r2, #1
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f934 	bl	800b274 <USBD_CtlSendData>
        break;
 800b00c:	e004      	b.n	800b018 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f8be 	bl	800b192 <USBD_CtlError>
        break;
 800b016:	bf00      	nop
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	3b01      	subs	r3, #1
 800b034:	2b02      	cmp	r3, #2
 800b036:	d81e      	bhi.n	800b076 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	88db      	ldrh	r3, [r3, #6]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d004      	beq.n	800b04a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f8a5 	bl	800b192 <USBD_CtlError>
        break;
 800b048:	e01a      	b.n	800b080 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d005      	beq.n	800b066 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f043 0202 	orr.w	r2, r3, #2
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	330c      	adds	r3, #12
 800b06a:	2202      	movs	r2, #2
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f900 	bl	800b274 <USBD_CtlSendData>
      break;
 800b074:	e004      	b.n	800b080 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f88a 	bl	800b192 <USBD_CtlError>
      break;
 800b07e:	bf00      	nop
  }
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	885b      	ldrh	r3, [r3, #2]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d107      	bne.n	800b0aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f940 	bl	800b328 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0a8:	e013      	b.n	800b0d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d10b      	bne.n	800b0ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	889b      	ldrh	r3, [r3, #4]
 800b0b6:	0a1b      	lsrs	r3, r3, #8
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f930 	bl	800b328 <USBD_CtlSendStatus>
}
 800b0c8:	e003      	b.n	800b0d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f860 	bl	800b192 <USBD_CtlError>
}
 800b0d2:	bf00      	nop
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d80b      	bhi.n	800b10a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	885b      	ldrh	r3, [r3, #2]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d10c      	bne.n	800b114 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f910 	bl	800b328 <USBD_CtlSendStatus>
      }
      break;
 800b108:	e004      	b.n	800b114 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f840 	bl	800b192 <USBD_CtlError>
      break;
 800b112:	e000      	b.n	800b116 <USBD_ClrFeature+0x3c>
      break;
 800b114:	bf00      	nop
  }
}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	781a      	ldrb	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3301      	adds	r3, #1
 800b138:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	781a      	ldrb	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f7ff fa17 	bl	800a57c <SWAPBYTE>
 800b14e:	4603      	mov	r3, r0
 800b150:	461a      	mov	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3301      	adds	r3, #1
 800b15a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3301      	adds	r3, #1
 800b160:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fa0a 	bl	800a57c <SWAPBYTE>
 800b168:	4603      	mov	r3, r0
 800b16a:	461a      	mov	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3301      	adds	r3, #1
 800b174:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3301      	adds	r3, #1
 800b17a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7ff f9fd 	bl	800a57c <SWAPBYTE>
 800b182:	4603      	mov	r3, r0
 800b184:	461a      	mov	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	80da      	strh	r2, [r3, #6]
}
 800b18a:	bf00      	nop
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b19c:	2180      	movs	r1, #128	; 0x80
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f003 f926 	bl	800e3f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f003 f922 	bl	800e3f0 <USBD_LL_StallEP>
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d036      	beq.n	800b238 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1ce:	6938      	ldr	r0, [r7, #16]
 800b1d0:	f000 f836 	bl	800b240 <USBD_GetLen>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	7812      	ldrb	r2, [r2, #0]
 800b1ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1fe:	7dfb      	ldrb	r3, [r7, #23]
 800b200:	3301      	adds	r3, #1
 800b202:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b204:	e013      	b.n	800b22e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	4413      	add	r3, r2
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	3301      	adds	r3, #1
 800b216:	613b      	str	r3, [r7, #16]
    idx++;
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	3301      	adds	r3, #1
 800b21c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	4413      	add	r3, r2
 800b224:	2200      	movs	r2, #0
 800b226:	701a      	strb	r2, [r3, #0]
    idx++;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	3301      	adds	r3, #1
 800b22c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e7      	bne.n	800b206 <USBD_GetString+0x52>
 800b236:	e000      	b.n	800b23a <USBD_GetString+0x86>
    return;
 800b238:	bf00      	nop
  }
}
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b250:	e005      	b.n	800b25e <USBD_GetLen+0x1e>
  {
    len++;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	3301      	adds	r3, #1
 800b256:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3301      	adds	r3, #1
 800b25c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1f5      	bne.n	800b252 <USBD_GetLen+0x12>
  }

  return len;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2202      	movs	r2, #2
 800b284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	2100      	movs	r1, #0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f003 f931 	bl	800e502 <USBD_LL_Transmit>

  return USBD_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f003 f920 	bl	800e502 <USBD_LL_Transmit>

  return USBD_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2203      	movs	r2, #3
 800b2dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f003 f924 	bl	800e544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	2100      	movs	r1, #0
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f003 f913 	bl	800e544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2204      	movs	r2, #4
 800b334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b338:	2300      	movs	r3, #0
 800b33a:	2200      	movs	r2, #0
 800b33c:	2100      	movs	r1, #0
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f003 f8df 	bl	800e502 <USBD_LL_Transmit>

  return USBD_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b082      	sub	sp, #8
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2205      	movs	r2, #5
 800b35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b35e:	2300      	movs	r3, #0
 800b360:	2200      	movs	r2, #0
 800b362:	2100      	movs	r1, #0
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f003 f8ed 	bl	800e544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	4a08      	ldr	r2, [pc, #32]	; (800b3a4 <disk_status+0x30>)
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	79fa      	ldrb	r2, [r7, #7]
 800b38c:	4905      	ldr	r1, [pc, #20]	; (800b3a4 <disk_status+0x30>)
 800b38e:	440a      	add	r2, r1
 800b390:	7a12      	ldrb	r2, [r2, #8]
 800b392:	4610      	mov	r0, r2
 800b394:	4798      	blx	r3
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	20000840 	.word	0x20000840

0800b3a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	4a0d      	ldr	r2, [pc, #52]	; (800b3f0 <disk_initialize+0x48>)
 800b3ba:	5cd3      	ldrb	r3, [r2, r3]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d111      	bne.n	800b3e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	4a0b      	ldr	r2, [pc, #44]	; (800b3f0 <disk_initialize+0x48>)
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <disk_initialize+0x48>)
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	79fa      	ldrb	r2, [r7, #7]
 800b3d6:	4906      	ldr	r1, [pc, #24]	; (800b3f0 <disk_initialize+0x48>)
 800b3d8:	440a      	add	r2, r1
 800b3da:	7a12      	ldrb	r2, [r2, #8]
 800b3dc:	4610      	mov	r0, r2
 800b3de:	4798      	blx	r3
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000840 	.word	0x20000840

0800b3f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b3f4:	b590      	push	{r4, r7, lr}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	4a0a      	ldr	r2, [pc, #40]	; (800b430 <disk_read+0x3c>)
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	689c      	ldr	r4, [r3, #8]
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	4a07      	ldr	r2, [pc, #28]	; (800b430 <disk_read+0x3c>)
 800b414:	4413      	add	r3, r2
 800b416:	7a18      	ldrb	r0, [r3, #8]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	68b9      	ldr	r1, [r7, #8]
 800b41e:	47a0      	blx	r4
 800b420:	4603      	mov	r3, r0
 800b422:	75fb      	strb	r3, [r7, #23]
  return res;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
}
 800b426:	4618      	mov	r0, r3
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd90      	pop	{r4, r7, pc}
 800b42e:	bf00      	nop
 800b430:	20000840 	.word	0x20000840

0800b434 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b087      	sub	sp, #28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	607a      	str	r2, [r7, #4]
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	4a0a      	ldr	r2, [pc, #40]	; (800b470 <disk_write+0x3c>)
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68dc      	ldr	r4, [r3, #12]
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	4a07      	ldr	r2, [pc, #28]	; (800b470 <disk_write+0x3c>)
 800b454:	4413      	add	r3, r2
 800b456:	7a18      	ldrb	r0, [r3, #8]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	47a0      	blx	r4
 800b460:	4603      	mov	r3, r0
 800b462:	75fb      	strb	r3, [r7, #23]
  return res;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
}
 800b466:	4618      	mov	r0, r3
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd90      	pop	{r4, r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000840 	.word	0x20000840

0800b474 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	603a      	str	r2, [r7, #0]
 800b47e:	71fb      	strb	r3, [r7, #7]
 800b480:	460b      	mov	r3, r1
 800b482:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	4a09      	ldr	r2, [pc, #36]	; (800b4ac <disk_ioctl+0x38>)
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	79fa      	ldrb	r2, [r7, #7]
 800b492:	4906      	ldr	r1, [pc, #24]	; (800b4ac <disk_ioctl+0x38>)
 800b494:	440a      	add	r2, r1
 800b496:	7a10      	ldrb	r0, [r2, #8]
 800b498:	79b9      	ldrb	r1, [r7, #6]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	4798      	blx	r3
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20000840 	.word	0x20000840

0800b4b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b4c0:	89fb      	ldrh	r3, [r7, #14]
 800b4c2:	021b      	lsls	r3, r3, #8
 800b4c4:	b21a      	sxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b21b      	sxth	r3, r3
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	b21b      	sxth	r3, r3
 800b4d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b4d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3303      	adds	r3, #3
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	3202      	adds	r2, #2
 800b4f8:	7812      	ldrb	r2, [r2, #0]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	021b      	lsls	r3, r3, #8
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	3201      	adds	r2, #1
 800b506:	7812      	ldrb	r2, [r2, #0]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	021b      	lsls	r3, r3, #8
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	7812      	ldrb	r2, [r2, #0]
 800b514:	4313      	orrs	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]
	return rv;
 800b518:	68fb      	ldr	r3, [r7, #12]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b526:	b480      	push	{r7}
 800b528:	b083      	sub	sp, #12
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	887a      	ldrh	r2, [r7, #2]
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]
 800b53e:	887b      	ldrh	r3, [r7, #2]
 800b540:	0a1b      	lsrs	r3, r3, #8
 800b542:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	607a      	str	r2, [r7, #4]
 800b54a:	887a      	ldrh	r2, [r7, #2]
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	701a      	strb	r2, [r3, #0]
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	b2d2      	uxtb	r2, r2
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	0a1b      	lsrs	r3, r3, #8
 800b576:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	0a1b      	lsrs	r3, r3, #8
 800b588:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	607a      	str	r2, [r7, #4]
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	b2d2      	uxtb	r2, r2
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	0a1b      	lsrs	r3, r3, #8
 800b59a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	607a      	str	r2, [r7, #4]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	701a      	strb	r2, [r3, #0]
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00d      	beq.n	800b5ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	1c53      	adds	r3, r2, #1
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	1c59      	adds	r1, r3, #1
 800b5d8:	6179      	str	r1, [r7, #20]
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	607b      	str	r3, [r7, #4]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1f1      	bne.n	800b5ce <mem_cpy+0x1a>
	}
}
 800b5ea:	bf00      	nop
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b5f6:	b480      	push	{r7}
 800b5f8:	b087      	sub	sp, #28
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	617a      	str	r2, [r7, #20]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3b01      	subs	r3, #1
 800b616:	607b      	str	r3, [r7, #4]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1f3      	bne.n	800b606 <mem_set+0x10>
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b62c:	b480      	push	{r7}
 800b62e:	b089      	sub	sp, #36	; 0x24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	61fb      	str	r3, [r7, #28]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	61fa      	str	r2, [r7, #28]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	4619      	mov	r1, r3
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	61ba      	str	r2, [r7, #24]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	1acb      	subs	r3, r1, r3
 800b658:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	607b      	str	r3, [r7, #4]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <mem_cmp+0x40>
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0eb      	beq.n	800b644 <mem_cmp+0x18>

	return r;
 800b66c:	697b      	ldr	r3, [r7, #20]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3724      	adds	r7, #36	; 0x24
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b684:	e002      	b.n	800b68c <chk_chr+0x12>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3301      	adds	r3, #1
 800b68a:	607b      	str	r3, [r7, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d005      	beq.n	800b6a0 <chk_chr+0x26>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d1f2      	bne.n	800b686 <chk_chr+0xc>
	return *str;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	e029      	b.n	800b718 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b6c4:	4a27      	ldr	r2, [pc, #156]	; (800b764 <chk_lock+0xb4>)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	011b      	lsls	r3, r3, #4
 800b6ca:	4413      	add	r3, r2
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d01d      	beq.n	800b70e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6d2:	4a24      	ldr	r2, [pc, #144]	; (800b764 <chk_lock+0xb4>)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	4413      	add	r3, r2
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d116      	bne.n	800b712 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b6e4:	4a1f      	ldr	r2, [pc, #124]	; (800b764 <chk_lock+0xb4>)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	011b      	lsls	r3, r3, #4
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d10c      	bne.n	800b712 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6f8:	4a1a      	ldr	r2, [pc, #104]	; (800b764 <chk_lock+0xb4>)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	4413      	add	r3, r2
 800b700:	3308      	adds	r3, #8
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b708:	429a      	cmp	r2, r3
 800b70a:	d102      	bne.n	800b712 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b70c:	e007      	b.n	800b71e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b70e:	2301      	movs	r3, #1
 800b710:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3301      	adds	r3, #1
 800b716:	60fb      	str	r3, [r7, #12]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d9d2      	bls.n	800b6c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d109      	bne.n	800b738 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d102      	bne.n	800b730 <chk_lock+0x80>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d101      	bne.n	800b734 <chk_lock+0x84>
 800b730:	2300      	movs	r3, #0
 800b732:	e010      	b.n	800b756 <chk_lock+0xa6>
 800b734:	2312      	movs	r3, #18
 800b736:	e00e      	b.n	800b756 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d108      	bne.n	800b750 <chk_lock+0xa0>
 800b73e:	4a09      	ldr	r2, [pc, #36]	; (800b764 <chk_lock+0xb4>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	011b      	lsls	r3, r3, #4
 800b744:	4413      	add	r3, r2
 800b746:	330c      	adds	r3, #12
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b74e:	d101      	bne.n	800b754 <chk_lock+0xa4>
 800b750:	2310      	movs	r3, #16
 800b752:	e000      	b.n	800b756 <chk_lock+0xa6>
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20000820 	.word	0x20000820

0800b768 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b76e:	2300      	movs	r3, #0
 800b770:	607b      	str	r3, [r7, #4]
 800b772:	e002      	b.n	800b77a <enq_lock+0x12>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3301      	adds	r3, #1
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d806      	bhi.n	800b78e <enq_lock+0x26>
 800b780:	4a09      	ldr	r2, [pc, #36]	; (800b7a8 <enq_lock+0x40>)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	4413      	add	r3, r2
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1f2      	bne.n	800b774 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b02      	cmp	r3, #2
 800b792:	bf14      	ite	ne
 800b794:	2301      	movne	r3, #1
 800b796:	2300      	moveq	r3, #0
 800b798:	b2db      	uxtb	r3, r3
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000820 	.word	0x20000820

0800b7ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
 800b7ba:	e01f      	b.n	800b7fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b7bc:	4a41      	ldr	r2, [pc, #260]	; (800b8c4 <inc_lock+0x118>)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	4413      	add	r3, r2
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d113      	bne.n	800b7f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b7ce:	4a3d      	ldr	r2, [pc, #244]	; (800b8c4 <inc_lock+0x118>)
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4413      	add	r3, r2
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d109      	bne.n	800b7f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b7e2:	4a38      	ldr	r2, [pc, #224]	; (800b8c4 <inc_lock+0x118>)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	011b      	lsls	r3, r3, #4
 800b7e8:	4413      	add	r3, r2
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d006      	beq.n	800b804 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d9dc      	bls.n	800b7bc <inc_lock+0x10>
 800b802:	e000      	b.n	800b806 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b804:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d132      	bne.n	800b872 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b80c:	2300      	movs	r3, #0
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e002      	b.n	800b818 <inc_lock+0x6c>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3301      	adds	r3, #1
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d806      	bhi.n	800b82c <inc_lock+0x80>
 800b81e:	4a29      	ldr	r2, [pc, #164]	; (800b8c4 <inc_lock+0x118>)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	4413      	add	r3, r2
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1f2      	bne.n	800b812 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d101      	bne.n	800b836 <inc_lock+0x8a>
 800b832:	2300      	movs	r3, #0
 800b834:	e040      	b.n	800b8b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	4922      	ldr	r1, [pc, #136]	; (800b8c4 <inc_lock+0x118>)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	440b      	add	r3, r1
 800b842:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689a      	ldr	r2, [r3, #8]
 800b848:	491e      	ldr	r1, [pc, #120]	; (800b8c4 <inc_lock+0x118>)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	440b      	add	r3, r1
 800b850:	3304      	adds	r3, #4
 800b852:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	695a      	ldr	r2, [r3, #20]
 800b858:	491a      	ldr	r1, [pc, #104]	; (800b8c4 <inc_lock+0x118>)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	440b      	add	r3, r1
 800b860:	3308      	adds	r3, #8
 800b862:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b864:	4a17      	ldr	r2, [pc, #92]	; (800b8c4 <inc_lock+0x118>)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	4413      	add	r3, r2
 800b86c:	330c      	adds	r3, #12
 800b86e:	2200      	movs	r2, #0
 800b870:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d009      	beq.n	800b88c <inc_lock+0xe0>
 800b878:	4a12      	ldr	r2, [pc, #72]	; (800b8c4 <inc_lock+0x118>)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	4413      	add	r3, r2
 800b880:	330c      	adds	r3, #12
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <inc_lock+0xe0>
 800b888:	2300      	movs	r3, #0
 800b88a:	e015      	b.n	800b8b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d108      	bne.n	800b8a4 <inc_lock+0xf8>
 800b892:	4a0c      	ldr	r2, [pc, #48]	; (800b8c4 <inc_lock+0x118>)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	4413      	add	r3, r2
 800b89a:	330c      	adds	r3, #12
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	e001      	b.n	800b8a8 <inc_lock+0xfc>
 800b8a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8a8:	4906      	ldr	r1, [pc, #24]	; (800b8c4 <inc_lock+0x118>)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	011b      	lsls	r3, r3, #4
 800b8ae:	440b      	add	r3, r1
 800b8b0:	330c      	adds	r3, #12
 800b8b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3301      	adds	r3, #1
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	20000820 	.word	0x20000820

0800b8c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	607b      	str	r3, [r7, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d825      	bhi.n	800b928 <dec_lock+0x60>
		n = Files[i].ctr;
 800b8dc:	4a17      	ldr	r2, [pc, #92]	; (800b93c <dec_lock+0x74>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	011b      	lsls	r3, r3, #4
 800b8e2:	4413      	add	r3, r2
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b8ea:	89fb      	ldrh	r3, [r7, #14]
 800b8ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f0:	d101      	bne.n	800b8f6 <dec_lock+0x2e>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b8f6:	89fb      	ldrh	r3, [r7, #14]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <dec_lock+0x3a>
 800b8fc:	89fb      	ldrh	r3, [r7, #14]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b902:	4a0e      	ldr	r2, [pc, #56]	; (800b93c <dec_lock+0x74>)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4413      	add	r3, r2
 800b90a:	330c      	adds	r3, #12
 800b90c:	89fa      	ldrh	r2, [r7, #14]
 800b90e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b910:	89fb      	ldrh	r3, [r7, #14]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d105      	bne.n	800b922 <dec_lock+0x5a>
 800b916:	4a09      	ldr	r2, [pc, #36]	; (800b93c <dec_lock+0x74>)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	011b      	lsls	r3, r3, #4
 800b91c:	4413      	add	r3, r2
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	737b      	strb	r3, [r7, #13]
 800b926:	e001      	b.n	800b92c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b928:	2302      	movs	r3, #2
 800b92a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b92c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	20000820 	.word	0x20000820

0800b940 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b948:	2300      	movs	r3, #0
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	e010      	b.n	800b970 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b94e:	4a0d      	ldr	r2, [pc, #52]	; (800b984 <clear_lock+0x44>)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	011b      	lsls	r3, r3, #4
 800b954:	4413      	add	r3, r2
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d105      	bne.n	800b96a <clear_lock+0x2a>
 800b95e:	4a09      	ldr	r2, [pc, #36]	; (800b984 <clear_lock+0x44>)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	4413      	add	r3, r2
 800b966:	2200      	movs	r2, #0
 800b968:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	3301      	adds	r3, #1
 800b96e:	60fb      	str	r3, [r7, #12]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d9eb      	bls.n	800b94e <clear_lock+0xe>
	}
}
 800b976:	bf00      	nop
 800b978:	bf00      	nop
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	20000820 	.word	0x20000820

0800b988 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	78db      	ldrb	r3, [r3, #3]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d034      	beq.n	800ba06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	7858      	ldrb	r0, [r3, #1]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	f7ff fd40 	bl	800b434 <disk_write>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	73fb      	strb	r3, [r7, #15]
 800b9be:	e022      	b.n	800ba06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	1ad2      	subs	r2, r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d217      	bcs.n	800ba06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	789b      	ldrb	r3, [r3, #2]
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	e010      	b.n	800ba00 <sync_window+0x78>
					wsect += fs->fsize;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	7858      	ldrb	r0, [r3, #1]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	f7ff fd1d 	bl	800b434 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	613b      	str	r3, [r7, #16]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d8eb      	bhi.n	800b9de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d01b      	beq.n	800ba60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff ffad 	bl	800b988 <sync_window>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d113      	bne.n	800ba60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	7858      	ldrb	r0, [r3, #1]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba42:	2301      	movs	r3, #1
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	f7ff fcd5 	bl	800b3f4 <disk_read>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d004      	beq.n	800ba5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba50:	f04f 33ff 	mov.w	r3, #4294967295
 800ba54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
	...

0800ba6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7ff ff87 	bl	800b988 <sync_window>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d158      	bne.n	800bb36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d148      	bne.n	800bb1e <sync_fs+0xb2>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	791b      	ldrb	r3, [r3, #4]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d144      	bne.n	800bb1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3330      	adds	r3, #48	; 0x30
 800ba98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fda9 	bl	800b5f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	3330      	adds	r3, #48	; 0x30
 800baa8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff fd38 	bl	800b526 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3330      	adds	r3, #48	; 0x30
 800baba:	4921      	ldr	r1, [pc, #132]	; (800bb40 <sync_fs+0xd4>)
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff fd4d 	bl	800b55c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3330      	adds	r3, #48	; 0x30
 800bac6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800baca:	491e      	ldr	r1, [pc, #120]	; (800bb44 <sync_fs+0xd8>)
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fd45 	bl	800b55c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	3330      	adds	r3, #48	; 0x30
 800bad6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	4619      	mov	r1, r3
 800bae0:	4610      	mov	r0, r2
 800bae2:	f7ff fd3b 	bl	800b55c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	3330      	adds	r3, #48	; 0x30
 800baea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7ff fd31 	bl	800b55c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7858      	ldrb	r0, [r3, #1]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb12:	2301      	movs	r3, #1
 800bb14:	f7ff fc8e 	bl	800b434 <disk_write>
			fs->fsi_flag = 0;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	785b      	ldrb	r3, [r3, #1]
 800bb22:	2200      	movs	r2, #0
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7ff fca4 	bl	800b474 <disk_ioctl>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <sync_fs+0xca>
 800bb32:	2301      	movs	r3, #1
 800bb34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	41615252 	.word	0x41615252
 800bb44:	61417272 	.word	0x61417272

0800bb48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	3b02      	subs	r3, #2
 800bb56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	3b02      	subs	r3, #2
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d301      	bcc.n	800bb68 <clust2sect+0x20>
 800bb64:	2300      	movs	r3, #0
 800bb66:	e008      	b.n	800bb7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	895b      	ldrh	r3, [r3, #10]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	fb03 f202 	mul.w	r2, r3, r2
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	4413      	add	r3, r2
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b086      	sub	sp, #24
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d904      	bls.n	800bba6 <get_fat+0x20>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d302      	bcc.n	800bbac <get_fat+0x26>
		val = 1;	/* Internal error */
 800bba6:	2301      	movs	r3, #1
 800bba8:	617b      	str	r3, [r7, #20]
 800bbaa:	e08f      	b.n	800bccc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bbac:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d062      	beq.n	800bc80 <get_fat+0xfa>
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	dc7c      	bgt.n	800bcb8 <get_fat+0x132>
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d002      	beq.n	800bbc8 <get_fat+0x42>
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d042      	beq.n	800bc4c <get_fat+0xc6>
 800bbc6:	e077      	b.n	800bcb8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	085b      	lsrs	r3, r3, #1
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6a1a      	ldr	r2, [r3, #32]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	0a5b      	lsrs	r3, r3, #9
 800bbde:	4413      	add	r3, r2
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6938      	ldr	r0, [r7, #16]
 800bbe4:	f7ff ff14 	bl	800ba10 <move_window>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d167      	bne.n	800bcbe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	60fa      	str	r2, [r7, #12]
 800bbf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	6a1a      	ldr	r2, [r3, #32]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	0a5b      	lsrs	r3, r3, #9
 800bc0a:	4413      	add	r3, r2
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f7ff fefe 	bl	800ba10 <move_window>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d153      	bne.n	800bcc2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	4413      	add	r3, r2
 800bc24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc28:	021b      	lsls	r3, r3, #8
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <get_fat+0xbc>
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	091b      	lsrs	r3, r3, #4
 800bc40:	e002      	b.n	800bc48 <get_fat+0xc2>
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc48:	617b      	str	r3, [r7, #20]
			break;
 800bc4a:	e03f      	b.n	800bccc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	6a1a      	ldr	r2, [r3, #32]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	0a1b      	lsrs	r3, r3, #8
 800bc54:	4413      	add	r3, r2
 800bc56:	4619      	mov	r1, r3
 800bc58:	6938      	ldr	r0, [r7, #16]
 800bc5a:	f7ff fed9 	bl	800ba10 <move_window>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d130      	bne.n	800bcc6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bc72:	4413      	add	r3, r2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff fc1b 	bl	800b4b0 <ld_word>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	617b      	str	r3, [r7, #20]
			break;
 800bc7e:	e025      	b.n	800bccc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6a1a      	ldr	r2, [r3, #32]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	09db      	lsrs	r3, r3, #7
 800bc88:	4413      	add	r3, r2
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6938      	ldr	r0, [r7, #16]
 800bc8e:	f7ff febf 	bl	800ba10 <move_window>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d118      	bne.n	800bcca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bca6:	4413      	add	r3, r2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7ff fc19 	bl	800b4e0 <ld_dword>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bcb4:	617b      	str	r3, [r7, #20]
			break;
 800bcb6:	e009      	b.n	800bccc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bcb8:	2301      	movs	r3, #1
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e006      	b.n	800bccc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcbe:	bf00      	nop
 800bcc0:	e004      	b.n	800bccc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcc2:	bf00      	nop
 800bcc4:	e002      	b.n	800bccc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcc6:	bf00      	nop
 800bcc8:	e000      	b.n	800bccc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcca:	bf00      	nop
		}
	}

	return val;
 800bccc:	697b      	ldr	r3, [r7, #20]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bcd6:	b590      	push	{r4, r7, lr}
 800bcd8:	b089      	sub	sp, #36	; 0x24
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	60b9      	str	r1, [r7, #8]
 800bce0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bce2:	2302      	movs	r3, #2
 800bce4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	f240 80d9 	bls.w	800bea0 <put_fat+0x1ca>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	f080 80d3 	bcs.w	800bea0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	f000 8096 	beq.w	800be30 <put_fat+0x15a>
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	f300 80cb 	bgt.w	800bea0 <put_fat+0x1ca>
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d002      	beq.n	800bd14 <put_fat+0x3e>
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d06e      	beq.n	800bdf0 <put_fat+0x11a>
 800bd12:	e0c5      	b.n	800bea0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	61bb      	str	r3, [r7, #24]
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	085b      	lsrs	r3, r3, #1
 800bd1c:	69ba      	ldr	r2, [r7, #24]
 800bd1e:	4413      	add	r3, r2
 800bd20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6a1a      	ldr	r2, [r3, #32]
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	0a5b      	lsrs	r3, r3, #9
 800bd2a:	4413      	add	r3, r2
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f7ff fe6e 	bl	800ba10 <move_window>
 800bd34:	4603      	mov	r3, r0
 800bd36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd38:	7ffb      	ldrb	r3, [r7, #31]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f040 80a9 	bne.w	800be92 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	1c59      	adds	r1, r3, #1
 800bd4a:	61b9      	str	r1, [r7, #24]
 800bd4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd50:	4413      	add	r3, r2
 800bd52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00d      	beq.n	800bd7a <put_fat+0xa4>
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	b25b      	sxtb	r3, r3
 800bd64:	f003 030f 	and.w	r3, r3, #15
 800bd68:	b25a      	sxtb	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	4313      	orrs	r3, r2
 800bd74:	b25b      	sxtb	r3, r3
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	e001      	b.n	800bd7e <put_fat+0xa8>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6a1a      	ldr	r2, [r3, #32]
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	0a5b      	lsrs	r3, r3, #9
 800bd90:	4413      	add	r3, r2
 800bd92:	4619      	mov	r1, r3
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff fe3b 	bl	800ba10 <move_window>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd9e:	7ffb      	ldrb	r3, [r7, #31]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d178      	bne.n	800be96 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb0:	4413      	add	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <put_fat+0xf0>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	091b      	lsrs	r3, r3, #4
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	e00e      	b.n	800bde4 <put_fat+0x10e>
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	f023 030f 	bic.w	r3, r3, #15
 800bdd0:	b25a      	sxtb	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0a1b      	lsrs	r3, r3, #8
 800bdd6:	b25b      	sxtb	r3, r3
 800bdd8:	f003 030f 	and.w	r3, r3, #15
 800bddc:	b25b      	sxtb	r3, r3
 800bdde:	4313      	orrs	r3, r2
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2201      	movs	r2, #1
 800bdec:	70da      	strb	r2, [r3, #3]
			break;
 800bdee:	e057      	b.n	800bea0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6a1a      	ldr	r2, [r3, #32]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	0a1b      	lsrs	r3, r3, #8
 800bdf8:	4413      	add	r3, r2
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7ff fe07 	bl	800ba10 <move_window>
 800be02:	4603      	mov	r3, r0
 800be04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be06:	7ffb      	ldrb	r3, [r7, #31]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d146      	bne.n	800be9a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be1a:	4413      	add	r3, r2
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	b292      	uxth	r2, r2
 800be20:	4611      	mov	r1, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff fb7f 	bl	800b526 <st_word>
			fs->wflag = 1;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2201      	movs	r2, #1
 800be2c:	70da      	strb	r2, [r3, #3]
			break;
 800be2e:	e037      	b.n	800bea0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a1a      	ldr	r2, [r3, #32]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	09db      	lsrs	r3, r3, #7
 800be38:	4413      	add	r3, r2
 800be3a:	4619      	mov	r1, r3
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fde7 	bl	800ba10 <move_window>
 800be42:	4603      	mov	r3, r0
 800be44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be46:	7ffb      	ldrb	r3, [r7, #31]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d128      	bne.n	800be9e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be60:	4413      	add	r3, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff fb3c 	bl	800b4e0 <ld_dword>
 800be68:	4603      	mov	r3, r0
 800be6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be6e:	4323      	orrs	r3, r4
 800be70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be80:	4413      	add	r3, r2
 800be82:	6879      	ldr	r1, [r7, #4]
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fb69 	bl	800b55c <st_dword>
			fs->wflag = 1;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2201      	movs	r2, #1
 800be8e:	70da      	strb	r2, [r3, #3]
			break;
 800be90:	e006      	b.n	800bea0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be92:	bf00      	nop
 800be94:	e004      	b.n	800bea0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be96:	bf00      	nop
 800be98:	e002      	b.n	800bea0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800be9e:	bf00      	nop
		}
	}
	return res;
 800bea0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3724      	adds	r7, #36	; 0x24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd90      	pop	{r4, r7, pc}

0800beaa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d904      	bls.n	800bed0 <remove_chain+0x26>
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	429a      	cmp	r2, r3
 800bece:	d301      	bcc.n	800bed4 <remove_chain+0x2a>
 800bed0:	2302      	movs	r3, #2
 800bed2:	e04b      	b.n	800bf6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00c      	beq.n	800bef4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800beda:	f04f 32ff 	mov.w	r2, #4294967295
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	69b8      	ldr	r0, [r7, #24]
 800bee2:	f7ff fef8 	bl	800bcd6 <put_fat>
 800bee6:	4603      	mov	r3, r0
 800bee8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800beea:	7ffb      	ldrb	r3, [r7, #31]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <remove_chain+0x4a>
 800bef0:	7ffb      	ldrb	r3, [r7, #31]
 800bef2:	e03b      	b.n	800bf6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bef4:	68b9      	ldr	r1, [r7, #8]
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f7ff fe45 	bl	800bb86 <get_fat>
 800befc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d031      	beq.n	800bf68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d101      	bne.n	800bf0e <remove_chain+0x64>
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e02e      	b.n	800bf6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf14:	d101      	bne.n	800bf1a <remove_chain+0x70>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e028      	b.n	800bf6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	69b8      	ldr	r0, [r7, #24]
 800bf20:	f7ff fed9 	bl	800bcd6 <put_fat>
 800bf24:	4603      	mov	r3, r0
 800bf26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <remove_chain+0x88>
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
 800bf30:	e01c      	b.n	800bf6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	691a      	ldr	r2, [r3, #16]
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	3b02      	subs	r3, #2
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d20b      	bcs.n	800bf58 <remove_chain+0xae>
			fs->free_clst++;
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	791b      	ldrb	r3, [r3, #4]
 800bf4e:	f043 0301 	orr.w	r3, r3, #1
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d3c6      	bcc.n	800bef4 <remove_chain+0x4a>
 800bf66:	e000      	b.n	800bf6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10d      	bne.n	800bfa6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d004      	beq.n	800bfa0 <create_chain+0x2c>
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d31b      	bcc.n	800bfd8 <create_chain+0x64>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	61bb      	str	r3, [r7, #24]
 800bfa4:	e018      	b.n	800bfd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff fdec 	bl	800bb86 <get_fat>
 800bfae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d801      	bhi.n	800bfba <create_chain+0x46>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e070      	b.n	800c09c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d101      	bne.n	800bfc6 <create_chain+0x52>
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	e06a      	b.n	800c09c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d201      	bcs.n	800bfd4 <create_chain+0x60>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	e063      	b.n	800c09c <create_chain+0x128>
		scl = clst;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	69fa      	ldr	r2, [r7, #28]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d307      	bcc.n	800bffc <create_chain+0x88>
				ncl = 2;
 800bfec:	2302      	movs	r3, #2
 800bfee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bff0:	69fa      	ldr	r2, [r7, #28]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d901      	bls.n	800bffc <create_chain+0x88>
 800bff8:	2300      	movs	r3, #0
 800bffa:	e04f      	b.n	800c09c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bffc:	69f9      	ldr	r1, [r7, #28]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7ff fdc1 	bl	800bb86 <get_fat>
 800c004:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00e      	beq.n	800c02a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d003      	beq.n	800c01a <create_chain+0xa6>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d101      	bne.n	800c01e <create_chain+0xaa>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	e03e      	b.n	800c09c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c01e:	69fa      	ldr	r2, [r7, #28]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	429a      	cmp	r2, r3
 800c024:	d1da      	bne.n	800bfdc <create_chain+0x68>
 800c026:	2300      	movs	r3, #0
 800c028:	e038      	b.n	800c09c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c02a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c02c:	f04f 32ff 	mov.w	r2, #4294967295
 800c030:	69f9      	ldr	r1, [r7, #28]
 800c032:	6938      	ldr	r0, [r7, #16]
 800c034:	f7ff fe4f 	bl	800bcd6 <put_fat>
 800c038:	4603      	mov	r3, r0
 800c03a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d109      	bne.n	800c056 <create_chain+0xe2>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d006      	beq.n	800c056 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6938      	ldr	r0, [r7, #16]
 800c04e:	f7ff fe42 	bl	800bcd6 <put_fat>
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d116      	bne.n	800c08a <create_chain+0x116>
		fs->last_clst = ncl;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	69fa      	ldr	r2, [r7, #28]
 800c060:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	691a      	ldr	r2, [r3, #16]
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	3b02      	subs	r3, #2
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d804      	bhi.n	800c07a <create_chain+0x106>
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	1e5a      	subs	r2, r3, #1
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	791b      	ldrb	r3, [r3, #4]
 800c07e:	f043 0301 	orr.w	r3, r3, #1
 800c082:	b2da      	uxtb	r2, r3
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	711a      	strb	r2, [r3, #4]
 800c088:	e007      	b.n	800c09a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c08a:	7dfb      	ldrb	r3, [r7, #23]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d102      	bne.n	800c096 <create_chain+0x122>
 800c090:	f04f 33ff 	mov.w	r3, #4294967295
 800c094:	e000      	b.n	800c098 <create_chain+0x124>
 800c096:	2301      	movs	r3, #1
 800c098:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c09a:	69fb      	ldr	r3, [r7, #28]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3720      	adds	r7, #32
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	0a5b      	lsrs	r3, r3, #9
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	8952      	ldrh	r2, [r2, #10]
 800c0c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	1d1a      	adds	r2, r3, #4
 800c0ce:	613a      	str	r2, [r7, #16]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <clmt_clust+0x3a>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e010      	b.n	800c100 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d307      	bcc.n	800c0f6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	1ad3      	subs	r3, r2, r3
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0f4:	e7e9      	b.n	800c0ca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c0f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	4413      	add	r3, r2
}
 800c100:	4618      	mov	r0, r3
 800c102:	371c      	adds	r7, #28
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c122:	d204      	bcs.n	800c12e <dir_sdi+0x22>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	f003 031f 	and.w	r3, r3, #31
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c12e:	2302      	movs	r3, #2
 800c130:	e063      	b.n	800c1fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <dir_sdi+0x46>
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d902      	bls.n	800c152 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10c      	bne.n	800c172 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	095b      	lsrs	r3, r3, #5
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	8912      	ldrh	r2, [r2, #8]
 800c160:	4293      	cmp	r3, r2
 800c162:	d301      	bcc.n	800c168 <dir_sdi+0x5c>
 800c164:	2302      	movs	r3, #2
 800c166:	e048      	b.n	800c1fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	61da      	str	r2, [r3, #28]
 800c170:	e029      	b.n	800c1c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	895b      	ldrh	r3, [r3, #10]
 800c176:	025b      	lsls	r3, r3, #9
 800c178:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c17a:	e019      	b.n	800c1b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6979      	ldr	r1, [r7, #20]
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff fd00 	bl	800bb86 <get_fat>
 800c186:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18e:	d101      	bne.n	800c194 <dir_sdi+0x88>
 800c190:	2301      	movs	r3, #1
 800c192:	e032      	b.n	800c1fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d904      	bls.n	800c1a4 <dir_sdi+0x98>
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	697a      	ldr	r2, [r7, #20]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d301      	bcc.n	800c1a8 <dir_sdi+0x9c>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e028      	b.n	800c1fa <dir_sdi+0xee>
			ofs -= csz;
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d2e1      	bcs.n	800c17c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c1b8:	6979      	ldr	r1, [r7, #20]
 800c1ba:	6938      	ldr	r0, [r7, #16]
 800c1bc:	f7ff fcc4 	bl	800bb48 <clust2sect>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	69db      	ldr	r3, [r3, #28]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d101      	bne.n	800c1d8 <dir_sdi+0xcc>
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	e010      	b.n	800c1fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	69da      	ldr	r2, [r3, #28]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	0a5b      	lsrs	r3, r3, #9
 800c1e0:	441a      	add	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f2:	441a      	add	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b086      	sub	sp, #24
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	3320      	adds	r3, #32
 800c218:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <dir_next+0x28>
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c228:	d301      	bcc.n	800c22e <dir_next+0x2c>
 800c22a:	2304      	movs	r3, #4
 800c22c:	e0aa      	b.n	800c384 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c234:	2b00      	cmp	r3, #0
 800c236:	f040 8098 	bne.w	800c36a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10b      	bne.n	800c264 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	095b      	lsrs	r3, r3, #5
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	8912      	ldrh	r2, [r2, #8]
 800c254:	4293      	cmp	r3, r2
 800c256:	f0c0 8088 	bcc.w	800c36a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	61da      	str	r2, [r3, #28]
 800c260:	2304      	movs	r3, #4
 800c262:	e08f      	b.n	800c384 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	0a5b      	lsrs	r3, r3, #9
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	8952      	ldrh	r2, [r2, #10]
 800c26c:	3a01      	subs	r2, #1
 800c26e:	4013      	ands	r3, r2
 800c270:	2b00      	cmp	r3, #0
 800c272:	d17a      	bne.n	800c36a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	4619      	mov	r1, r3
 800c27c:	4610      	mov	r0, r2
 800c27e:	f7ff fc82 	bl	800bb86 <get_fat>
 800c282:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d801      	bhi.n	800c28e <dir_next+0x8c>
 800c28a:	2302      	movs	r3, #2
 800c28c:	e07a      	b.n	800c384 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c294:	d101      	bne.n	800c29a <dir_next+0x98>
 800c296:	2301      	movs	r3, #1
 800c298:	e074      	b.n	800c384 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d358      	bcc.n	800c356 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d104      	bne.n	800c2b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	61da      	str	r2, [r3, #28]
 800c2b0:	2304      	movs	r3, #4
 800c2b2:	e067      	b.n	800c384 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f7ff fe59 	bl	800bf74 <create_chain>
 800c2c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <dir_next+0xcc>
 800c2ca:	2307      	movs	r3, #7
 800c2cc:	e05a      	b.n	800c384 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d101      	bne.n	800c2d8 <dir_next+0xd6>
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	e055      	b.n	800c384 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2de:	d101      	bne.n	800c2e4 <dir_next+0xe2>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e04f      	b.n	800c384 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff fb4f 	bl	800b988 <sync_window>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <dir_next+0xf2>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e047      	b.n	800c384 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3330      	adds	r3, #48	; 0x30
 800c2f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff f979 	bl	800b5f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c304:	2300      	movs	r3, #0
 800c306:	613b      	str	r3, [r7, #16]
 800c308:	6979      	ldr	r1, [r7, #20]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f7ff fc1c 	bl	800bb48 <clust2sect>
 800c310:	4602      	mov	r2, r0
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	62da      	str	r2, [r3, #44]	; 0x2c
 800c316:	e012      	b.n	800c33e <dir_next+0x13c>
						fs->wflag = 1;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2201      	movs	r2, #1
 800c31c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f7ff fb32 	bl	800b988 <sync_window>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <dir_next+0x12c>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e02a      	b.n	800c384 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	3301      	adds	r3, #1
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	895b      	ldrh	r3, [r3, #10]
 800c342:	461a      	mov	r2, r3
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	4293      	cmp	r3, r2
 800c348:	d3e6      	bcc.n	800c318 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	1ad2      	subs	r2, r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c35c:	6979      	ldr	r1, [r7, #20]
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff fbf2 	bl	800bb48 <clust2sect>
 800c364:	4602      	mov	r2, r0
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c37c:	441a      	add	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c39c:	2100      	movs	r1, #0
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff feb4 	bl	800c10c <dir_sdi>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d12b      	bne.n	800c406 <dir_alloc+0x7a>
		n = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7ff fb29 	bl	800ba10 <move_window>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d11d      	bne.n	800c404 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	2be5      	cmp	r3, #229	; 0xe5
 800c3d0:	d004      	beq.n	800c3dc <dir_alloc+0x50>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d107      	bne.n	800c3ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d102      	bne.n	800c3f0 <dir_alloc+0x64>
 800c3ea:	e00c      	b.n	800c406 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff ff05 	bl	800c202 <dir_next>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0d7      	beq.n	800c3b2 <dir_alloc+0x26>
 800c402:	e000      	b.n	800c406 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c404:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d101      	bne.n	800c410 <dir_alloc+0x84>
 800c40c:	2307      	movs	r3, #7
 800c40e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c410:	7dfb      	ldrb	r3, [r7, #23]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	331a      	adds	r3, #26
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff f841 	bl	800b4b0 <ld_word>
 800c42e:	4603      	mov	r3, r0
 800c430:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b03      	cmp	r3, #3
 800c438:	d109      	bne.n	800c44e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	3314      	adds	r3, #20
 800c43e:	4618      	mov	r0, r3
 800c440:	f7ff f836 	bl	800b4b0 <ld_word>
 800c444:	4603      	mov	r3, r0
 800c446:	041b      	lsls	r3, r3, #16
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c44e:	68fb      	ldr	r3, [r7, #12]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	331a      	adds	r3, #26
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	b292      	uxth	r2, r2
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff f859 	bl	800b526 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b03      	cmp	r3, #3
 800c47a:	d109      	bne.n	800c490 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f103 0214 	add.w	r2, r3, #20
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	0c1b      	lsrs	r3, r3, #16
 800c486:	b29b      	uxth	r3, r3
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f7ff f84b 	bl	800b526 <st_word>
	}
}
 800c490:	bf00      	nop
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff fe2f 	bl	800c10c <dir_sdi>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <dir_find+0x24>
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	e03e      	b.n	800c53a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	69db      	ldr	r3, [r3, #28]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6938      	ldr	r0, [r7, #16]
 800c4c4:	f7ff faa4 	bl	800ba10 <move_window>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d12f      	bne.n	800c532 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a1b      	ldr	r3, [r3, #32]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d102      	bne.n	800c4e6 <dir_find+0x4e>
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	75fb      	strb	r3, [r7, #23]
 800c4e4:	e028      	b.n	800c538 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	330b      	adds	r3, #11
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a1b      	ldr	r3, [r3, #32]
 800c4fc:	330b      	adds	r3, #11
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	f003 0308 	and.w	r3, r3, #8
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <dir_find+0x86>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a18      	ldr	r0, [r3, #32]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3324      	adds	r3, #36	; 0x24
 800c510:	220b      	movs	r2, #11
 800c512:	4619      	mov	r1, r3
 800c514:	f7ff f88a 	bl	800b62c <mem_cmp>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c51e:	2100      	movs	r1, #0
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff fe6e 	bl	800c202 <dir_next>
 800c526:	4603      	mov	r3, r0
 800c528:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c52a:	7dfb      	ldrb	r3, [r7, #23]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0c5      	beq.n	800c4bc <dir_find+0x24>
 800c530:	e002      	b.n	800c538 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c532:	bf00      	nop
 800c534:	e000      	b.n	800c538 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c536:	bf00      	nop

	return res;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c550:	2101      	movs	r1, #1
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff ff1a 	bl	800c38c <dir_alloc>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d11c      	bne.n	800c59c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	4619      	mov	r1, r3
 800c568:	68b8      	ldr	r0, [r7, #8]
 800c56a:	f7ff fa51 	bl	800ba10 <move_window>
 800c56e:	4603      	mov	r3, r0
 800c570:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d111      	bne.n	800c59c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	2220      	movs	r2, #32
 800c57e:	2100      	movs	r1, #0
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff f838 	bl	800b5f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a18      	ldr	r0, [r3, #32]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3324      	adds	r3, #36	; 0x24
 800c58e:	220b      	movs	r2, #11
 800c590:	4619      	mov	r1, r3
 800c592:	f7ff f80f 	bl	800b5b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2201      	movs	r2, #1
 800c59a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b088      	sub	sp, #32
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3324      	adds	r3, #36	; 0x24
 800c5bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c5be:	220b      	movs	r2, #11
 800c5c0:	2120      	movs	r1, #32
 800c5c2:	68b8      	ldr	r0, [r7, #8]
 800c5c4:	f7ff f817 	bl	800b5f6 <mem_set>
	si = i = 0; ni = 8;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	613b      	str	r3, [r7, #16]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	61fb      	str	r3, [r7, #28]
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	61fa      	str	r2, [r7, #28]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	4413      	add	r3, r2
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5e2:	7efb      	ldrb	r3, [r7, #27]
 800c5e4:	2b20      	cmp	r3, #32
 800c5e6:	d94e      	bls.n	800c686 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c5e8:	7efb      	ldrb	r3, [r7, #27]
 800c5ea:	2b2f      	cmp	r3, #47	; 0x2f
 800c5ec:	d006      	beq.n	800c5fc <create_name+0x54>
 800c5ee:	7efb      	ldrb	r3, [r7, #27]
 800c5f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c5f2:	d110      	bne.n	800c616 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c5f4:	e002      	b.n	800c5fc <create_name+0x54>
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	4413      	add	r3, r2
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b2f      	cmp	r3, #47	; 0x2f
 800c606:	d0f6      	beq.n	800c5f6 <create_name+0x4e>
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b5c      	cmp	r3, #92	; 0x5c
 800c612:	d0f0      	beq.n	800c5f6 <create_name+0x4e>
			break;
 800c614:	e038      	b.n	800c688 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c616:	7efb      	ldrb	r3, [r7, #27]
 800c618:	2b2e      	cmp	r3, #46	; 0x2e
 800c61a:	d003      	beq.n	800c624 <create_name+0x7c>
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	429a      	cmp	r2, r3
 800c622:	d30c      	bcc.n	800c63e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2b0b      	cmp	r3, #11
 800c628:	d002      	beq.n	800c630 <create_name+0x88>
 800c62a:	7efb      	ldrb	r3, [r7, #27]
 800c62c:	2b2e      	cmp	r3, #46	; 0x2e
 800c62e:	d001      	beq.n	800c634 <create_name+0x8c>
 800c630:	2306      	movs	r3, #6
 800c632:	e044      	b.n	800c6be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c634:	2308      	movs	r3, #8
 800c636:	613b      	str	r3, [r7, #16]
 800c638:	230b      	movs	r3, #11
 800c63a:	617b      	str	r3, [r7, #20]
			continue;
 800c63c:	e022      	b.n	800c684 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c63e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c642:	2b00      	cmp	r3, #0
 800c644:	da04      	bge.n	800c650 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c646:	7efb      	ldrb	r3, [r7, #27]
 800c648:	3b80      	subs	r3, #128	; 0x80
 800c64a:	4a1f      	ldr	r2, [pc, #124]	; (800c6c8 <create_name+0x120>)
 800c64c:	5cd3      	ldrb	r3, [r2, r3]
 800c64e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c650:	7efb      	ldrb	r3, [r7, #27]
 800c652:	4619      	mov	r1, r3
 800c654:	481d      	ldr	r0, [pc, #116]	; (800c6cc <create_name+0x124>)
 800c656:	f7ff f810 	bl	800b67a <chk_chr>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <create_name+0xbc>
 800c660:	2306      	movs	r3, #6
 800c662:	e02c      	b.n	800c6be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c664:	7efb      	ldrb	r3, [r7, #27]
 800c666:	2b60      	cmp	r3, #96	; 0x60
 800c668:	d905      	bls.n	800c676 <create_name+0xce>
 800c66a:	7efb      	ldrb	r3, [r7, #27]
 800c66c:	2b7a      	cmp	r3, #122	; 0x7a
 800c66e:	d802      	bhi.n	800c676 <create_name+0xce>
 800c670:	7efb      	ldrb	r3, [r7, #27]
 800c672:	3b20      	subs	r3, #32
 800c674:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	613a      	str	r2, [r7, #16]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	4413      	add	r3, r2
 800c680:	7efa      	ldrb	r2, [r7, #27]
 800c682:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c684:	e7a6      	b.n	800c5d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c686:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	441a      	add	r2, r3
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <create_name+0xf4>
 800c698:	2306      	movs	r3, #6
 800c69a:	e010      	b.n	800c6be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2be5      	cmp	r3, #229	; 0xe5
 800c6a2:	d102      	bne.n	800c6aa <create_name+0x102>
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2205      	movs	r2, #5
 800c6a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6aa:	7efb      	ldrb	r3, [r7, #27]
 800c6ac:	2b20      	cmp	r3, #32
 800c6ae:	d801      	bhi.n	800c6b4 <create_name+0x10c>
 800c6b0:	2204      	movs	r2, #4
 800c6b2:	e000      	b.n	800c6b6 <create_name+0x10e>
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	330b      	adds	r3, #11
 800c6ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c6bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	0800f4dc 	.word	0x0800f4dc
 800c6cc:	0800f438 	.word	0x0800f438

0800c6d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c6e4:	e002      	b.n	800c6ec <follow_path+0x1c>
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	603b      	str	r3, [r7, #0]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b2f      	cmp	r3, #47	; 0x2f
 800c6f2:	d0f8      	beq.n	800c6e6 <follow_path+0x16>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b5c      	cmp	r3, #92	; 0x5c
 800c6fa:	d0f4      	beq.n	800c6e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2200      	movs	r2, #0
 800c700:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b1f      	cmp	r3, #31
 800c708:	d80a      	bhi.n	800c720 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2280      	movs	r2, #128	; 0x80
 800c70e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c712:	2100      	movs	r1, #0
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7ff fcf9 	bl	800c10c <dir_sdi>
 800c71a:	4603      	mov	r3, r0
 800c71c:	75fb      	strb	r3, [r7, #23]
 800c71e:	e043      	b.n	800c7a8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c720:	463b      	mov	r3, r7
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ff3f 	bl	800c5a8 <create_name>
 800c72a:	4603      	mov	r3, r0
 800c72c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d134      	bne.n	800c79e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7ff feaf 	bl	800c498 <dir_find>
 800c73a:	4603      	mov	r3, r0
 800c73c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c744:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00a      	beq.n	800c762 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	2b04      	cmp	r3, #4
 800c750:	d127      	bne.n	800c7a2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c752:	7afb      	ldrb	r3, [r7, #11]
 800c754:	f003 0304 	and.w	r3, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d122      	bne.n	800c7a2 <follow_path+0xd2>
 800c75c:	2305      	movs	r3, #5
 800c75e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c760:	e01f      	b.n	800c7a2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c762:	7afb      	ldrb	r3, [r7, #11]
 800c764:	f003 0304 	and.w	r3, r3, #4
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11c      	bne.n	800c7a6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	799b      	ldrb	r3, [r3, #6]
 800c770:	f003 0310 	and.w	r3, r3, #16
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c778:	2305      	movs	r3, #5
 800c77a:	75fb      	strb	r3, [r7, #23]
 800c77c:	e014      	b.n	800c7a8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78c:	4413      	add	r3, r2
 800c78e:	4619      	mov	r1, r3
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7ff fe42 	bl	800c41a <ld_clust>
 800c796:	4602      	mov	r2, r0
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c79c:	e7c0      	b.n	800c720 <follow_path+0x50>
			if (res != FR_OK) break;
 800c79e:	bf00      	nop
 800c7a0:	e002      	b.n	800c7a8 <follow_path+0xd8>
				break;
 800c7a2:	bf00      	nop
 800c7a4:	e000      	b.n	800c7a8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7a6:	bf00      	nop
			}
		}
	}

	return res;
 800c7a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b087      	sub	sp, #28
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c7be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d031      	beq.n	800c82c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	617b      	str	r3, [r7, #20]
 800c7ce:	e002      	b.n	800c7d6 <get_ldnumber+0x24>
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	617b      	str	r3, [r7, #20]
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	2b20      	cmp	r3, #32
 800c7dc:	d903      	bls.n	800c7e6 <get_ldnumber+0x34>
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b3a      	cmp	r3, #58	; 0x3a
 800c7e4:	d1f4      	bne.n	800c7d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b3a      	cmp	r3, #58	; 0x3a
 800c7ec:	d11c      	bne.n	800c828 <get_ldnumber+0x76>
			tp = *path;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	60fa      	str	r2, [r7, #12]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	3b30      	subs	r3, #48	; 0x30
 800c7fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b09      	cmp	r3, #9
 800c804:	d80e      	bhi.n	800c824 <get_ldnumber+0x72>
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d10a      	bne.n	800c824 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d107      	bne.n	800c824 <get_ldnumber+0x72>
					vol = (int)i;
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	3301      	adds	r3, #1
 800c81c:	617b      	str	r3, [r7, #20]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	e002      	b.n	800c82e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c828:	2300      	movs	r3, #0
 800c82a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c82c:	693b      	ldr	r3, [r7, #16]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	371c      	adds	r7, #28
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
	...

0800c83c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	70da      	strb	r2, [r3, #3]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f04f 32ff 	mov.w	r2, #4294967295
 800c852:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff f8da 	bl	800ba10 <move_window>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <check_fs+0x2a>
 800c862:	2304      	movs	r3, #4
 800c864:	e038      	b.n	800c8d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3330      	adds	r3, #48	; 0x30
 800c86a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fe1e 	bl	800b4b0 <ld_word>
 800c874:	4603      	mov	r3, r0
 800c876:	461a      	mov	r2, r3
 800c878:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d001      	beq.n	800c884 <check_fs+0x48>
 800c880:	2303      	movs	r3, #3
 800c882:	e029      	b.n	800c8d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c88a:	2be9      	cmp	r3, #233	; 0xe9
 800c88c:	d009      	beq.n	800c8a2 <check_fs+0x66>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c894:	2beb      	cmp	r3, #235	; 0xeb
 800c896:	d11e      	bne.n	800c8d6 <check_fs+0x9a>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c89e:	2b90      	cmp	r3, #144	; 0x90
 800c8a0:	d119      	bne.n	800c8d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3330      	adds	r3, #48	; 0x30
 800c8a6:	3336      	adds	r3, #54	; 0x36
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fe fe19 	bl	800b4e0 <ld_dword>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c8b4:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <check_fs+0xa4>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d101      	bne.n	800c8be <check_fs+0x82>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e00c      	b.n	800c8d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3330      	adds	r3, #48	; 0x30
 800c8c2:	3352      	adds	r3, #82	; 0x52
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe fe0b 	bl	800b4e0 <ld_dword>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	4a05      	ldr	r2, [pc, #20]	; (800c8e4 <check_fs+0xa8>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d101      	bne.n	800c8d6 <check_fs+0x9a>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	e000      	b.n	800c8d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c8d6:	2302      	movs	r3, #2
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	00544146 	.word	0x00544146
 800c8e4:	33544146 	.word	0x33544146

0800c8e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b096      	sub	sp, #88	; 0x58
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff ff58 	bl	800c7b2 <get_ldnumber>
 800c902:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c906:	2b00      	cmp	r3, #0
 800c908:	da01      	bge.n	800c90e <find_volume+0x26>
 800c90a:	230b      	movs	r3, #11
 800c90c:	e22d      	b.n	800cd6a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c90e:	4aa1      	ldr	r2, [pc, #644]	; (800cb94 <find_volume+0x2ac>)
 800c910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c916:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <find_volume+0x3a>
 800c91e:	230c      	movs	r3, #12
 800c920:	e223      	b.n	800cd6a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c926:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c928:	79fb      	ldrb	r3, [r7, #7]
 800c92a:	f023 0301 	bic.w	r3, r3, #1
 800c92e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d01a      	beq.n	800c96e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93a:	785b      	ldrb	r3, [r3, #1]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fe fd19 	bl	800b374 <disk_status>
 800c942:	4603      	mov	r3, r0
 800c944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10c      	bne.n	800c96e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c954:	79fb      	ldrb	r3, [r7, #7]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d007      	beq.n	800c96a <find_volume+0x82>
 800c95a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c966:	230a      	movs	r3, #10
 800c968:	e1ff      	b.n	800cd6a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c96a:	2300      	movs	r3, #0
 800c96c:	e1fd      	b.n	800cd6a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	2200      	movs	r2, #0
 800c972:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c976:	b2da      	uxtb	r2, r3
 800c978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	785b      	ldrb	r3, [r3, #1]
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fd11 	bl	800b3a8 <disk_initialize>
 800c986:	4603      	mov	r3, r0
 800c988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c98c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c998:	2303      	movs	r3, #3
 800c99a:	e1e6      	b.n	800cd6a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c99c:	79fb      	ldrb	r3, [r7, #7]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d007      	beq.n	800c9b2 <find_volume+0xca>
 800c9a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9a6:	f003 0304 	and.w	r3, r3, #4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c9ae:	230a      	movs	r3, #10
 800c9b0:	e1db      	b.n	800cd6a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c9b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9ba:	f7ff ff3f 	bl	800c83c <check_fs>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c9c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d149      	bne.n	800ca60 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c9d0:	e01e      	b.n	800ca10 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9da:	011b      	lsls	r3, r3, #4
 800c9dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c9e0:	4413      	add	r3, r2
 800c9e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d006      	beq.n	800c9fc <find_volume+0x114>
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fd74 	bl	800b4e0 <ld_dword>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	e000      	b.n	800c9fe <find_volume+0x116>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	3358      	adds	r3, #88	; 0x58
 800ca04:	443b      	add	r3, r7
 800ca06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	643b      	str	r3, [r7, #64]	; 0x40
 800ca10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d9dd      	bls.n	800c9d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca16:	2300      	movs	r3, #0
 800ca18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ca1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <find_volume+0x13e>
 800ca20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca22:	3b01      	subs	r3, #1
 800ca24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	3358      	adds	r3, #88	; 0x58
 800ca2c:	443b      	add	r3, r7
 800ca2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d005      	beq.n	800ca46 <find_volume+0x15e>
 800ca3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca3e:	f7ff fefd 	bl	800c83c <check_fs>
 800ca42:	4603      	mov	r3, r0
 800ca44:	e000      	b.n	800ca48 <find_volume+0x160>
 800ca46:	2303      	movs	r3, #3
 800ca48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d905      	bls.n	800ca60 <find_volume+0x178>
 800ca54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca56:	3301      	adds	r3, #1
 800ca58:	643b      	str	r3, [r7, #64]	; 0x40
 800ca5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d9e2      	bls.n	800ca26 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca64:	2b04      	cmp	r3, #4
 800ca66:	d101      	bne.n	800ca6c <find_volume+0x184>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e17e      	b.n	800cd6a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ca6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d901      	bls.n	800ca78 <find_volume+0x190>
 800ca74:	230d      	movs	r3, #13
 800ca76:	e178      	b.n	800cd6a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	3330      	adds	r3, #48	; 0x30
 800ca7c:	330b      	adds	r3, #11
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fe fd16 	bl	800b4b0 <ld_word>
 800ca84:	4603      	mov	r3, r0
 800ca86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca8a:	d001      	beq.n	800ca90 <find_volume+0x1a8>
 800ca8c:	230d      	movs	r3, #13
 800ca8e:	e16c      	b.n	800cd6a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	3330      	adds	r3, #48	; 0x30
 800ca94:	3316      	adds	r3, #22
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fd0a 	bl	800b4b0 <ld_word>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800caa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <find_volume+0x1cc>
 800caa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa8:	3330      	adds	r3, #48	; 0x30
 800caaa:	3324      	adds	r3, #36	; 0x24
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe fd17 	bl	800b4e0 <ld_dword>
 800cab2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cab8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac6:	789b      	ldrb	r3, [r3, #2]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d005      	beq.n	800cad8 <find_volume+0x1f0>
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	789b      	ldrb	r3, [r3, #2]
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d001      	beq.n	800cad8 <find_volume+0x1f0>
 800cad4:	230d      	movs	r3, #13
 800cad6:	e148      	b.n	800cd6a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	789b      	ldrb	r3, [r3, #2]
 800cadc:	461a      	mov	r2, r3
 800cade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae0:	fb02 f303 	mul.w	r3, r2, r3
 800cae4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caec:	b29a      	uxth	r2, r3
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	895b      	ldrh	r3, [r3, #10]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d008      	beq.n	800cb0c <find_volume+0x224>
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	895b      	ldrh	r3, [r3, #10]
 800cafe:	461a      	mov	r2, r3
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	895b      	ldrh	r3, [r3, #10]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	4013      	ands	r3, r2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d001      	beq.n	800cb10 <find_volume+0x228>
 800cb0c:	230d      	movs	r3, #13
 800cb0e:	e12c      	b.n	800cd6a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	3330      	adds	r3, #48	; 0x30
 800cb14:	3311      	adds	r3, #17
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fe fcca 	bl	800b4b0 <ld_word>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	891b      	ldrh	r3, [r3, #8]
 800cb28:	f003 030f 	and.w	r3, r3, #15
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <find_volume+0x24e>
 800cb32:	230d      	movs	r3, #13
 800cb34:	e119      	b.n	800cd6a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	3330      	adds	r3, #48	; 0x30
 800cb3a:	3313      	adds	r3, #19
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fe fcb7 	bl	800b4b0 <ld_word>
 800cb42:	4603      	mov	r3, r0
 800cb44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d106      	bne.n	800cb5a <find_volume+0x272>
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	3330      	adds	r3, #48	; 0x30
 800cb50:	3320      	adds	r3, #32
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe fcc4 	bl	800b4e0 <ld_dword>
 800cb58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	3330      	adds	r3, #48	; 0x30
 800cb5e:	330e      	adds	r3, #14
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fe fca5 	bl	800b4b0 <ld_word>
 800cb66:	4603      	mov	r3, r0
 800cb68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cb6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <find_volume+0x28c>
 800cb70:	230d      	movs	r3, #13
 800cb72:	e0fa      	b.n	800cd6a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cb74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb78:	4413      	add	r3, r2
 800cb7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb7c:	8912      	ldrh	r2, [r2, #8]
 800cb7e:	0912      	lsrs	r2, r2, #4
 800cb80:	b292      	uxth	r2, r2
 800cb82:	4413      	add	r3, r2
 800cb84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d204      	bcs.n	800cb98 <find_volume+0x2b0>
 800cb8e:	230d      	movs	r3, #13
 800cb90:	e0eb      	b.n	800cd6a <find_volume+0x482>
 800cb92:	bf00      	nop
 800cb94:	20000818 	.word	0x20000818
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cba0:	8952      	ldrh	r2, [r2, #10]
 800cba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cba6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <find_volume+0x2ca>
 800cbae:	230d      	movs	r3, #13
 800cbb0:	e0db      	b.n	800cd6a <find_volume+0x482>
		fmt = FS_FAT32;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d802      	bhi.n	800cbc8 <find_volume+0x2e0>
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d802      	bhi.n	800cbd8 <find_volume+0x2f0>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	1c9a      	adds	r2, r3, #2
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbe4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cbe6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbea:	441a      	add	r2, r3
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cbf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	441a      	add	r2, r3
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cbfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d11e      	bne.n	800cc40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	3330      	adds	r3, #48	; 0x30
 800cc06:	332a      	adds	r3, #42	; 0x2a
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fc51 	bl	800b4b0 <ld_word>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <find_volume+0x330>
 800cc14:	230d      	movs	r3, #13
 800cc16:	e0a8      	b.n	800cd6a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	891b      	ldrh	r3, [r3, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <find_volume+0x33c>
 800cc20:	230d      	movs	r3, #13
 800cc22:	e0a2      	b.n	800cd6a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	3330      	adds	r3, #48	; 0x30
 800cc28:	332c      	adds	r3, #44	; 0x2c
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fe fc58 	bl	800b4e0 <ld_dword>
 800cc30:	4602      	mov	r2, r0
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc3e:	e01f      	b.n	800cc80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	891b      	ldrh	r3, [r3, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d101      	bne.n	800cc4c <find_volume+0x364>
 800cc48:	230d      	movs	r3, #13
 800cc4a:	e08e      	b.n	800cd6a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	6a1a      	ldr	r2, [r3, #32]
 800cc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc52:	441a      	add	r2, r3
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d103      	bne.n	800cc68 <find_volume+0x380>
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	e00a      	b.n	800cc7e <find_volume+0x396>
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	695a      	ldr	r2, [r3, #20]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	4413      	add	r3, r2
 800cc72:	085a      	lsrs	r2, r3, #1
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cc7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc82:	699a      	ldr	r2, [r3, #24]
 800cc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc8a:	0a5b      	lsrs	r3, r3, #9
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d201      	bcs.n	800cc94 <find_volume+0x3ac>
 800cc90:	230d      	movs	r3, #13
 800cc92:	e06a      	b.n	800cd6a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9a:	611a      	str	r2, [r3, #16]
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	691a      	ldr	r2, [r3, #16]
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	2280      	movs	r2, #128	; 0x80
 800cca8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ccaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d149      	bne.n	800cd46 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb4:	3330      	adds	r3, #48	; 0x30
 800ccb6:	3330      	adds	r3, #48	; 0x30
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fe fbf9 	bl	800b4b0 <ld_word>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d140      	bne.n	800cd46 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ccc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	4619      	mov	r1, r3
 800ccca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cccc:	f7fe fea0 	bl	800ba10 <move_window>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d137      	bne.n	800cd46 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	2200      	movs	r2, #0
 800ccda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	3330      	adds	r3, #48	; 0x30
 800cce0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fe fbe3 	bl	800b4b0 <ld_word>
 800ccea:	4603      	mov	r3, r0
 800ccec:	461a      	mov	r2, r3
 800ccee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d127      	bne.n	800cd46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	3330      	adds	r3, #48	; 0x30
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fbf0 	bl	800b4e0 <ld_dword>
 800cd00:	4603      	mov	r3, r0
 800cd02:	4a1c      	ldr	r2, [pc, #112]	; (800cd74 <find_volume+0x48c>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d11e      	bne.n	800cd46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	3330      	adds	r3, #48	; 0x30
 800cd0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7fe fbe5 	bl	800b4e0 <ld_dword>
 800cd16:	4603      	mov	r3, r0
 800cd18:	4a17      	ldr	r2, [pc, #92]	; (800cd78 <find_volume+0x490>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d113      	bne.n	800cd46 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	3330      	adds	r3, #48	; 0x30
 800cd22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe fbda 	bl	800b4e0 <ld_dword>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd34:	3330      	adds	r3, #48	; 0x30
 800cd36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7fe fbd0 	bl	800b4e0 <ld_dword>
 800cd40:	4602      	mov	r2, r0
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cd4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd4e:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <find_volume+0x494>)
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	3301      	adds	r3, #1
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	4b09      	ldr	r3, [pc, #36]	; (800cd7c <find_volume+0x494>)
 800cd58:	801a      	strh	r2, [r3, #0]
 800cd5a:	4b08      	ldr	r3, [pc, #32]	; (800cd7c <find_volume+0x494>)
 800cd5c:	881a      	ldrh	r2, [r3, #0]
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd64:	f7fe fdec 	bl	800b940 <clear_lock>
#endif
	return FR_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3758      	adds	r7, #88	; 0x58
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	41615252 	.word	0x41615252
 800cd78:	61417272 	.word	0x61417272
 800cd7c:	2000081c 	.word	0x2000081c

0800cd80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd8a:	2309      	movs	r3, #9
 800cd8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01c      	beq.n	800cdce <validate+0x4e>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d018      	beq.n	800cdce <validate+0x4e>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d013      	beq.n	800cdce <validate+0x4e>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	889a      	ldrh	r2, [r3, #4]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	88db      	ldrh	r3, [r3, #6]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d10c      	bne.n	800cdce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	785b      	ldrb	r3, [r3, #1]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fe fada 	bl	800b374 <disk_status>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d101      	bne.n	800cdce <validate+0x4e>
			res = FR_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d102      	bne.n	800cdda <validate+0x5a>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	e000      	b.n	800cddc <validate+0x5c>
 800cdda:	2300      	movs	r3, #0
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	6013      	str	r3, [r2, #0]
	return res;
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
	...

0800cdec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b088      	sub	sp, #32
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cdfe:	f107 0310 	add.w	r3, r7, #16
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff fcd5 	bl	800c7b2 <get_ldnumber>
 800ce08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	da01      	bge.n	800ce14 <f_mount+0x28>
 800ce10:	230b      	movs	r3, #11
 800ce12:	e02b      	b.n	800ce6c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce14:	4a17      	ldr	r2, [pc, #92]	; (800ce74 <f_mount+0x88>)
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce24:	69b8      	ldr	r0, [r7, #24]
 800ce26:	f7fe fd8b 	bl	800b940 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d002      	beq.n	800ce3c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	490d      	ldr	r1, [pc, #52]	; (800ce74 <f_mount+0x88>)
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <f_mount+0x66>
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d001      	beq.n	800ce56 <f_mount+0x6a>
 800ce52:	2300      	movs	r3, #0
 800ce54:	e00a      	b.n	800ce6c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce56:	f107 010c 	add.w	r1, r7, #12
 800ce5a:	f107 0308 	add.w	r3, r7, #8
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fd41 	bl	800c8e8 <find_volume>
 800ce66:	4603      	mov	r3, r0
 800ce68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3720      	adds	r7, #32
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	20000818 	.word	0x20000818

0800ce78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b098      	sub	sp, #96	; 0x60
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <f_open+0x18>
 800ce8c:	2309      	movs	r3, #9
 800ce8e:	e1ad      	b.n	800d1ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce98:	79fa      	ldrb	r2, [r7, #7]
 800ce9a:	f107 0110 	add.w	r1, r7, #16
 800ce9e:	f107 0308 	add.w	r3, r7, #8
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff fd20 	bl	800c8e8 <find_volume>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ceae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f040 8191 	bne.w	800d1da <f_open+0x362>
		dj.obj.fs = fs;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	f107 0314 	add.w	r3, r7, #20
 800cec2:	4611      	mov	r1, r2
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff fc03 	bl	800c6d0 <follow_path>
 800ceca:	4603      	mov	r3, r0
 800cecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ced0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d11a      	bne.n	800cf0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ced8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cedc:	b25b      	sxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	da03      	bge.n	800ceea <f_open+0x72>
				res = FR_INVALID_NAME;
 800cee2:	2306      	movs	r3, #6
 800cee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cee8:	e011      	b.n	800cf0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ceea:	79fb      	ldrb	r3, [r7, #7]
 800ceec:	f023 0301 	bic.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	bf14      	ite	ne
 800cef4:	2301      	movne	r3, #1
 800cef6:	2300      	moveq	r3, #0
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	461a      	mov	r2, r3
 800cefc:	f107 0314 	add.w	r3, r7, #20
 800cf00:	4611      	mov	r1, r2
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fbd4 	bl	800b6b0 <chk_lock>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	f003 031c 	and.w	r3, r3, #28
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d07f      	beq.n	800d018 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cf18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d017      	beq.n	800cf50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf24:	2b04      	cmp	r3, #4
 800cf26:	d10e      	bne.n	800cf46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf28:	f7fe fc1e 	bl	800b768 <enq_lock>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d006      	beq.n	800cf40 <f_open+0xc8>
 800cf32:	f107 0314 	add.w	r3, r7, #20
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff fb03 	bl	800c542 <dir_register>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	e000      	b.n	800cf42 <f_open+0xca>
 800cf40:	2312      	movs	r3, #18
 800cf42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	f043 0308 	orr.w	r3, r3, #8
 800cf4c:	71fb      	strb	r3, [r7, #7]
 800cf4e:	e010      	b.n	800cf72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf50:	7ebb      	ldrb	r3, [r7, #26]
 800cf52:	f003 0311 	and.w	r3, r3, #17
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <f_open+0xea>
					res = FR_DENIED;
 800cf5a:	2307      	movs	r3, #7
 800cf5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf60:	e007      	b.n	800cf72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	f003 0304 	and.w	r3, r3, #4
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <f_open+0xfa>
 800cf6c:	2308      	movs	r3, #8
 800cf6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cf72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d168      	bne.n	800d04c <f_open+0x1d4>
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d063      	beq.n	800d04c <f_open+0x1d4>
				dw = GET_FATTIME();
 800cf84:	f7fb fcd2 	bl	800892c <get_fattime>
 800cf88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf8c:	330e      	adds	r3, #14
 800cf8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fe fae3 	bl	800b55c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf98:	3316      	adds	r3, #22
 800cf9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe fadd 	bl	800b55c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cfa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa4:	330b      	adds	r3, #11
 800cfa6:	2220      	movs	r2, #32
 800cfa8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff fa32 	bl	800c41a <ld_clust>
 800cfb6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fa4a 	bl	800c458 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	331c      	adds	r3, #28
 800cfc8:	2100      	movs	r1, #0
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fe fac6 	bl	800b55c <st_dword>
					fs->wflag = 1;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d037      	beq.n	800d04c <f_open+0x1d4>
						dw = fs->winsect;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cfe2:	f107 0314 	add.w	r3, r7, #20
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe ff5d 	bl	800beaa <remove_chain>
 800cff0:	4603      	mov	r3, r0
 800cff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d126      	bne.n	800d04c <f_open+0x1d4>
							res = move_window(fs, dw);
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d002:	4618      	mov	r0, r3
 800d004:	f7fe fd04 	bl	800ba10 <move_window>
 800d008:	4603      	mov	r3, r0
 800d00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d012:	3a01      	subs	r2, #1
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	e019      	b.n	800d04c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d115      	bne.n	800d04c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d020:	7ebb      	ldrb	r3, [r7, #26]
 800d022:	f003 0310 	and.w	r3, r3, #16
 800d026:	2b00      	cmp	r3, #0
 800d028:	d003      	beq.n	800d032 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d02a:	2304      	movs	r3, #4
 800d02c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d030:	e00c      	b.n	800d04c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d007      	beq.n	800d04c <f_open+0x1d4>
 800d03c:	7ebb      	ldrb	r3, [r7, #26]
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	2b00      	cmp	r3, #0
 800d044:	d002      	beq.n	800d04c <f_open+0x1d4>
						res = FR_DENIED;
 800d046:	2307      	movs	r3, #7
 800d048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d04c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d050:	2b00      	cmp	r3, #0
 800d052:	d128      	bne.n	800d0a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	f003 0308 	and.w	r3, r3, #8
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d003      	beq.n	800d066 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d05e:	79fb      	ldrb	r3, [r7, #7]
 800d060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d064:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d06e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	f023 0301 	bic.w	r3, r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bf14      	ite	ne
 800d07e:	2301      	movne	r3, #1
 800d080:	2300      	moveq	r3, #0
 800d082:	b2db      	uxtb	r3, r3
 800d084:	461a      	mov	r2, r3
 800d086:	f107 0314 	add.w	r3, r7, #20
 800d08a:	4611      	mov	r1, r2
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fb8d 	bl	800b7ac <inc_lock>
 800d092:	4602      	mov	r2, r0
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	691b      	ldr	r3, [r3, #16]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <f_open+0x22e>
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f040 8095 	bne.w	800d1da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff f9af 	bl	800c41a <ld_clust>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c4:	331c      	adds	r3, #28
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe fa0a 	bl	800b4e0 <ld_dword>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	88da      	ldrh	r2, [r3, #6]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	79fa      	ldrb	r2, [r7, #7]
 800d0ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3330      	adds	r3, #48	; 0x30
 800d102:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d106:	2100      	movs	r1, #0
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fe fa74 	bl	800b5f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	f003 0320 	and.w	r3, r3, #32
 800d114:	2b00      	cmp	r3, #0
 800d116:	d060      	beq.n	800d1da <f_open+0x362>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d05c      	beq.n	800d1da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	895b      	ldrh	r3, [r3, #10]
 800d12c:	025b      	lsls	r3, r3, #9
 800d12e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	657b      	str	r3, [r7, #84]	; 0x54
 800d13c:	e016      	b.n	800d16c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d142:	4618      	mov	r0, r3
 800d144:	f7fe fd1f 	bl	800bb86 <get_fat>
 800d148:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d802      	bhi.n	800d156 <f_open+0x2de>
 800d150:	2302      	movs	r3, #2
 800d152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15c:	d102      	bne.n	800d164 <f_open+0x2ec>
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d164:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	657b      	str	r3, [r7, #84]	; 0x54
 800d16c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d170:	2b00      	cmp	r3, #0
 800d172:	d103      	bne.n	800d17c <f_open+0x304>
 800d174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d178:	429a      	cmp	r2, r3
 800d17a:	d8e0      	bhi.n	800d13e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d180:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d186:	2b00      	cmp	r3, #0
 800d188:	d127      	bne.n	800d1da <f_open+0x362>
 800d18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d190:	2b00      	cmp	r3, #0
 800d192:	d022      	beq.n	800d1da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fcd5 	bl	800bb48 <clust2sect>
 800d19e:	6478      	str	r0, [r7, #68]	; 0x44
 800d1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d103      	bne.n	800d1ae <f_open+0x336>
						res = FR_INT_ERR;
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d1ac:	e015      	b.n	800d1da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1b0:	0a5a      	lsrs	r2, r3, #9
 800d1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b4:	441a      	add	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	7858      	ldrb	r0, [r3, #1]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6a1a      	ldr	r2, [r3, #32]
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	f7fe f913 	bl	800b3f4 <disk_read>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <f_open+0x362>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d1da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <f_open+0x370>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d1e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3760      	adds	r7, #96	; 0x60
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08e      	sub	sp, #56	; 0x38
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f107 0214 	add.w	r2, r7, #20
 800d212:	4611      	mov	r1, r2
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff fdb3 	bl	800cd80 <validate>
 800d21a:	4603      	mov	r3, r0
 800d21c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d224:	2b00      	cmp	r3, #0
 800d226:	d107      	bne.n	800d238 <f_read+0x44>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	7d5b      	ldrb	r3, [r3, #21]
 800d22c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <f_read+0x4a>
 800d238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d23c:	e115      	b.n	800d46a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	7d1b      	ldrb	r3, [r3, #20]
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <f_read+0x5a>
 800d24a:	2307      	movs	r3, #7
 800d24c:	e10d      	b.n	800d46a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	429a      	cmp	r2, r3
 800d260:	f240 80fe 	bls.w	800d460 <f_read+0x26c>
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d268:	e0fa      	b.n	800d460 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	699b      	ldr	r3, [r3, #24]
 800d26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d272:	2b00      	cmp	r3, #0
 800d274:	f040 80c6 	bne.w	800d404 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	699b      	ldr	r3, [r3, #24]
 800d27c:	0a5b      	lsrs	r3, r3, #9
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	8952      	ldrh	r2, [r2, #10]
 800d282:	3a01      	subs	r2, #1
 800d284:	4013      	ands	r3, r2
 800d286:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d12f      	bne.n	800d2ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d103      	bne.n	800d29e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	633b      	str	r3, [r7, #48]	; 0x30
 800d29c:	e013      	b.n	800d2c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d007      	beq.n	800d2b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7fe fef9 	bl	800c0a4 <clmt_clust>
 800d2b2:	6338      	str	r0, [r7, #48]	; 0x30
 800d2b4:	e007      	b.n	800d2c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	69db      	ldr	r3, [r3, #28]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fe fc61 	bl	800bb86 <get_fat>
 800d2c4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d804      	bhi.n	800d2d6 <f_read+0xe2>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	755a      	strb	r2, [r3, #21]
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	e0c9      	b.n	800d46a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2dc:	d104      	bne.n	800d2e8 <f_read+0xf4>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	755a      	strb	r2, [r3, #21]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e0c0      	b.n	800d46a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	69db      	ldr	r3, [r3, #28]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f7fe fc26 	bl	800bb48 <clust2sect>
 800d2fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d104      	bne.n	800d30e <f_read+0x11a>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2202      	movs	r2, #2
 800d308:	755a      	strb	r2, [r3, #21]
 800d30a:	2302      	movs	r3, #2
 800d30c:	e0ad      	b.n	800d46a <f_read+0x276>
			sect += csect;
 800d30e:	69ba      	ldr	r2, [r7, #24]
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	4413      	add	r3, r2
 800d314:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	0a5b      	lsrs	r3, r3, #9
 800d31a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d039      	beq.n	800d396 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d322:	69fa      	ldr	r2, [r7, #28]
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	4413      	add	r3, r2
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	8952      	ldrh	r2, [r2, #10]
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d905      	bls.n	800d33c <f_read+0x148>
					cc = fs->csize - csect;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	895b      	ldrh	r3, [r3, #10]
 800d334:	461a      	mov	r2, r3
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	7858      	ldrb	r0, [r3, #1]
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d346:	f7fe f855 	bl	800b3f4 <disk_read>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d004      	beq.n	800d35a <f_read+0x166>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2201      	movs	r2, #1
 800d354:	755a      	strb	r2, [r3, #21]
 800d356:	2301      	movs	r3, #1
 800d358:	e087      	b.n	800d46a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	7d1b      	ldrb	r3, [r3, #20]
 800d35e:	b25b      	sxtb	r3, r3
 800d360:	2b00      	cmp	r3, #0
 800d362:	da14      	bge.n	800d38e <f_read+0x19a>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6a1a      	ldr	r2, [r3, #32]
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d36e:	429a      	cmp	r2, r3
 800d370:	d90d      	bls.n	800d38e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6a1a      	ldr	r2, [r3, #32]
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	025b      	lsls	r3, r3, #9
 800d37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37e:	18d0      	adds	r0, r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3330      	adds	r3, #48	; 0x30
 800d384:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d388:	4619      	mov	r1, r3
 800d38a:	f7fe f913 	bl	800b5b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d390:	025b      	lsls	r3, r3, #9
 800d392:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d394:	e050      	b.n	800d438 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	69ba      	ldr	r2, [r7, #24]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d02e      	beq.n	800d3fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	7d1b      	ldrb	r3, [r3, #20]
 800d3a4:	b25b      	sxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da18      	bge.n	800d3dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	7858      	ldrb	r0, [r3, #1]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6a1a      	ldr	r2, [r3, #32]
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f7fe f83b 	bl	800b434 <disk_write>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d004      	beq.n	800d3ce <f_read+0x1da>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	755a      	strb	r2, [r3, #21]
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e04d      	b.n	800d46a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	7d1b      	ldrb	r3, [r3, #20]
 800d3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	7858      	ldrb	r0, [r3, #1]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	69ba      	ldr	r2, [r7, #24]
 800d3ea:	f7fe f803 	bl	800b3f4 <disk_read>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <f_read+0x20a>
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	755a      	strb	r2, [r3, #21]
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e035      	b.n	800d46a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d410:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	429a      	cmp	r2, r3
 800d418:	d901      	bls.n	800d41e <f_read+0x22a>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42c:	4413      	add	r3, r2
 800d42e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d430:	4619      	mov	r1, r3
 800d432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d434:	f7fe f8be 	bl	800b5b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	4413      	add	r3, r2
 800d43e:	627b      	str	r3, [r7, #36]	; 0x24
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	699a      	ldr	r2, [r3, #24]
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	441a      	add	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	619a      	str	r2, [r3, #24]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	441a      	add	r2, r3
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	f47f af01 	bne.w	800d26a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3738      	adds	r7, #56	; 0x38
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b08c      	sub	sp, #48	; 0x30
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	607a      	str	r2, [r7, #4]
 800d47e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2200      	movs	r2, #0
 800d488:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f107 0210 	add.w	r2, r7, #16
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff fc74 	bl	800cd80 <validate>
 800d498:	4603      	mov	r3, r0
 800d49a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d107      	bne.n	800d4b6 <f_write+0x44>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	7d5b      	ldrb	r3, [r3, #21]
 800d4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d002      	beq.n	800d4bc <f_write+0x4a>
 800d4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4ba:	e14b      	b.n	800d754 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	7d1b      	ldrb	r3, [r3, #20]
 800d4c0:	f003 0302 	and.w	r3, r3, #2
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <f_write+0x5a>
 800d4c8:	2307      	movs	r3, #7
 800d4ca:	e143      	b.n	800d754 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	699a      	ldr	r2, [r3, #24]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	441a      	add	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	f080 812d 	bcs.w	800d738 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	43db      	mvns	r3, r3
 800d4e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d4e6:	e127      	b.n	800d738 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f040 80e3 	bne.w	800d6bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	699b      	ldr	r3, [r3, #24]
 800d4fa:	0a5b      	lsrs	r3, r3, #9
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	8952      	ldrh	r2, [r2, #10]
 800d500:	3a01      	subs	r2, #1
 800d502:	4013      	ands	r3, r2
 800d504:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d143      	bne.n	800d594 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10c      	bne.n	800d52e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d11a      	bne.n	800d556 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2100      	movs	r1, #0
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe fd25 	bl	800bf74 <create_chain>
 800d52a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d52c:	e013      	b.n	800d556 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d532:	2b00      	cmp	r3, #0
 800d534:	d007      	beq.n	800d546 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	4619      	mov	r1, r3
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f7fe fdb1 	bl	800c0a4 <clmt_clust>
 800d542:	62b8      	str	r0, [r7, #40]	; 0x28
 800d544:	e007      	b.n	800d556 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	4619      	mov	r1, r3
 800d54e:	4610      	mov	r0, r2
 800d550:	f7fe fd10 	bl	800bf74 <create_chain>
 800d554:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 80f2 	beq.w	800d742 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	2b01      	cmp	r3, #1
 800d562:	d104      	bne.n	800d56e <f_write+0xfc>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2202      	movs	r2, #2
 800d568:	755a      	strb	r2, [r3, #21]
 800d56a:	2302      	movs	r3, #2
 800d56c:	e0f2      	b.n	800d754 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d574:	d104      	bne.n	800d580 <f_write+0x10e>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2201      	movs	r2, #1
 800d57a:	755a      	strb	r2, [r3, #21]
 800d57c:	2301      	movs	r3, #1
 800d57e:	e0e9      	b.n	800d754 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d584:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d102      	bne.n	800d594 <f_write+0x122>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d592:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	7d1b      	ldrb	r3, [r3, #20]
 800d598:	b25b      	sxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	da18      	bge.n	800d5d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	7858      	ldrb	r0, [r3, #1]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6a1a      	ldr	r2, [r3, #32]
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	f7fd ff41 	bl	800b434 <disk_write>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d004      	beq.n	800d5c2 <f_write+0x150>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	755a      	strb	r2, [r3, #21]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e0c8      	b.n	800d754 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	7d1b      	ldrb	r3, [r3, #20]
 800d5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4610      	mov	r0, r2
 800d5da:	f7fe fab5 	bl	800bb48 <clust2sect>
 800d5de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d104      	bne.n	800d5f0 <f_write+0x17e>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	755a      	strb	r2, [r3, #21]
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	e0b1      	b.n	800d754 <f_write+0x2e2>
			sect += csect;
 800d5f0:	697a      	ldr	r2, [r7, #20]
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	0a5b      	lsrs	r3, r3, #9
 800d5fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d03c      	beq.n	800d67e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d604:	69ba      	ldr	r2, [r7, #24]
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	4413      	add	r3, r2
 800d60a:	693a      	ldr	r2, [r7, #16]
 800d60c:	8952      	ldrh	r2, [r2, #10]
 800d60e:	4293      	cmp	r3, r2
 800d610:	d905      	bls.n	800d61e <f_write+0x1ac>
					cc = fs->csize - csect;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	895b      	ldrh	r3, [r3, #10]
 800d616:	461a      	mov	r2, r3
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	7858      	ldrb	r0, [r3, #1]
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	69f9      	ldr	r1, [r7, #28]
 800d628:	f7fd ff04 	bl	800b434 <disk_write>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d004      	beq.n	800d63c <f_write+0x1ca>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2201      	movs	r2, #1
 800d636:	755a      	strb	r2, [r3, #21]
 800d638:	2301      	movs	r3, #1
 800d63a:	e08b      	b.n	800d754 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6a1a      	ldr	r2, [r3, #32]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	6a3a      	ldr	r2, [r7, #32]
 800d646:	429a      	cmp	r2, r3
 800d648:	d915      	bls.n	800d676 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6a1a      	ldr	r2, [r3, #32]
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	025b      	lsls	r3, r3, #9
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	4413      	add	r3, r2
 800d65e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d662:	4619      	mov	r1, r3
 800d664:	f7fd ffa6 	bl	800b5b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d670:	b2da      	uxtb	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	025b      	lsls	r3, r3, #9
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d67c:	e03f      	b.n	800d6fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	429a      	cmp	r2, r3
 800d686:	d016      	beq.n	800d6b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	699a      	ldr	r2, [r3, #24]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d690:	429a      	cmp	r2, r3
 800d692:	d210      	bcs.n	800d6b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	7858      	ldrb	r0, [r3, #1]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d69e:	2301      	movs	r3, #1
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	f7fd fea7 	bl	800b3f4 <disk_read>
 800d6a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d004      	beq.n	800d6b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	755a      	strb	r2, [r3, #21]
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e04e      	b.n	800d754 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d6c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d901      	bls.n	800d6d6 <f_write+0x264>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e4:	4413      	add	r3, r2
 800d6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e8:	69f9      	ldr	r1, [r7, #28]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fd ff62 	bl	800b5b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	7d1b      	ldrb	r3, [r3, #20]
 800d6f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d6fe:	69fa      	ldr	r2, [r7, #28]
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	4413      	add	r3, r2
 800d704:	61fb      	str	r3, [r7, #28]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	699a      	ldr	r2, [r3, #24]
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	441a      	add	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	619a      	str	r2, [r3, #24]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	68da      	ldr	r2, [r3, #12]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	699b      	ldr	r3, [r3, #24]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	bf38      	it	cc
 800d71e:	461a      	movcc	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	60da      	str	r2, [r3, #12]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	441a      	add	r2, r3
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f47f aed4 	bne.w	800d4e8 <f_write+0x76>
 800d740:	e000      	b.n	800d744 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d742:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	7d1b      	ldrb	r3, [r3, #20]
 800d748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3730      	adds	r7, #48	; 0x30
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f107 0208 	add.w	r2, r7, #8
 800d76a:	4611      	mov	r1, r2
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fb07 	bl	800cd80 <validate>
 800d772:	4603      	mov	r3, r0
 800d774:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d168      	bne.n	800d84e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	7d1b      	ldrb	r3, [r3, #20]
 800d780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d784:	2b00      	cmp	r3, #0
 800d786:	d062      	beq.n	800d84e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	7d1b      	ldrb	r3, [r3, #20]
 800d78c:	b25b      	sxtb	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	da15      	bge.n	800d7be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	7858      	ldrb	r0, [r3, #1]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a1a      	ldr	r2, [r3, #32]
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	f7fd fe47 	bl	800b434 <disk_write>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <f_sync+0x54>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e04f      	b.n	800d850 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d7be:	f7fb f8b5 	bl	800892c <get_fattime>
 800d7c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	f7fe f91f 	bl	800ba10 <move_window>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d138      	bne.n	800d84e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	330b      	adds	r3, #11
 800d7e6:	781a      	ldrb	r2, [r3, #0]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	330b      	adds	r3, #11
 800d7ec:	f042 0220 	orr.w	r2, r2, #32
 800d7f0:	b2d2      	uxtb	r2, r2
 800d7f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6818      	ldr	r0, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	68f9      	ldr	r1, [r7, #12]
 800d800:	f7fe fe2a 	bl	800c458 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f103 021c 	add.w	r2, r3, #28
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	4619      	mov	r1, r3
 800d810:	4610      	mov	r0, r2
 800d812:	f7fd fea3 	bl	800b55c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3316      	adds	r3, #22
 800d81a:	6939      	ldr	r1, [r7, #16]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fd fe9d 	bl	800b55c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3312      	adds	r3, #18
 800d826:	2100      	movs	r1, #0
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fd fe7c 	bl	800b526 <st_word>
					fs->wflag = 1;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2201      	movs	r2, #1
 800d832:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	4618      	mov	r0, r3
 800d838:	f7fe f918 	bl	800ba6c <sync_fs>
 800d83c:	4603      	mov	r3, r0
 800d83e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7d1b      	ldrb	r3, [r3, #20]
 800d844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ff7b 	bl	800d75c <f_sync>
 800d866:	4603      	mov	r3, r0
 800d868:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d118      	bne.n	800d8a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f107 0208 	add.w	r2, r7, #8
 800d876:	4611      	mov	r1, r2
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff fa81 	bl	800cd80 <validate>
 800d87e:	4603      	mov	r3, r0
 800d880:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d882:	7bfb      	ldrb	r3, [r7, #15]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10c      	bne.n	800d8a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe f81b 	bl	800b8c8 <dec_lock>
 800d892:	4603      	mov	r3, r0
 800d894:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d896:	7bfb      	ldrb	r3, [r7, #15]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b092      	sub	sp, #72	; 0x48
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d8b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d8bc:	f107 030c 	add.w	r3, r7, #12
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff f810 	bl	800c8e8 <find_volume>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d8ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f040 8099 	bne.w	800da0a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d8d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	691a      	ldr	r2, [r3, #16]
 800d8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	3b02      	subs	r3, #2
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d804      	bhi.n	800d8f6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	e089      	b.n	800da0a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d128      	bne.n	800d954 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d902:	2302      	movs	r3, #2
 800d904:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d90a:	f107 0314 	add.w	r3, r7, #20
 800d90e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe f938 	bl	800bb86 <get_fat>
 800d916:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d91e:	d103      	bne.n	800d928 <f_getfree+0x7c>
 800d920:	2301      	movs	r3, #1
 800d922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d926:	e063      	b.n	800d9f0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d103      	bne.n	800d936 <f_getfree+0x8a>
 800d92e:	2302      	movs	r3, #2
 800d930:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d934:	e05c      	b.n	800d9f0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <f_getfree+0x96>
 800d93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d93e:	3301      	adds	r3, #1
 800d940:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d944:	3301      	adds	r3, #1
 800d946:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	695b      	ldr	r3, [r3, #20]
 800d94c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d94e:	429a      	cmp	r2, r3
 800d950:	d3db      	bcc.n	800d90a <f_getfree+0x5e>
 800d952:	e04d      	b.n	800d9f0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	695b      	ldr	r3, [r3, #20]
 800d958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	637b      	str	r3, [r7, #52]	; 0x34
 800d964:	2300      	movs	r3, #0
 800d966:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d113      	bne.n	800d996 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	63ba      	str	r2, [r7, #56]	; 0x38
 800d976:	4619      	mov	r1, r3
 800d978:	f7fe f84a 	bl	800ba10 <move_window>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d982:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d986:	2b00      	cmp	r3, #0
 800d988:	d131      	bne.n	800d9ee <f_getfree+0x142>
							p = fs->win;
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	3330      	adds	r3, #48	; 0x30
 800d98e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d990:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d994:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d10f      	bne.n	800d9be <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d99e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9a0:	f7fd fd86 	bl	800b4b0 <ld_word>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d102      	bne.n	800d9b0 <f_getfree+0x104>
 800d9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	3302      	adds	r3, #2
 800d9b4:	633b      	str	r3, [r7, #48]	; 0x30
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b8:	3b02      	subs	r3, #2
 800d9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d9bc:	e010      	b.n	800d9e0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d9be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9c0:	f7fd fd8e 	bl	800b4e0 <ld_dword>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <f_getfree+0x128>
 800d9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	633b      	str	r3, [r7, #48]	; 0x30
 800d9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9dc:	3b04      	subs	r3, #4
 800d9de:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1bd      	bne.n	800d968 <f_getfree+0xbc>
 800d9ec:	e000      	b.n	800d9f0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d9ee:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9f4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9fa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	791a      	ldrb	r2, [r3, #4]
 800da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da02:	f042 0201 	orr.w	r2, r2, #1
 800da06:	b2d2      	uxtb	r2, r2
 800da08:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800da0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3748      	adds	r7, #72	; 0x48
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b088      	sub	sp, #32
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	60b9      	str	r1, [r7, #8]
 800da20:	607a      	str	r2, [r7, #4]
	int n = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800da2a:	e01b      	b.n	800da64 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800da2c:	f107 0310 	add.w	r3, r7, #16
 800da30:	f107 0114 	add.w	r1, r7, #20
 800da34:	2201      	movs	r2, #1
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff fbdc 	bl	800d1f4 <f_read>
		if (rc != 1) break;
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d116      	bne.n	800da70 <f_gets+0x5a>
		c = s[0];
 800da42:	7d3b      	ldrb	r3, [r7, #20]
 800da44:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800da46:	7dfb      	ldrb	r3, [r7, #23]
 800da48:	2b0d      	cmp	r3, #13
 800da4a:	d100      	bne.n	800da4e <f_gets+0x38>
 800da4c:	e00a      	b.n	800da64 <f_gets+0x4e>
		*p++ = c;
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	61ba      	str	r2, [r7, #24]
 800da54:	7dfa      	ldrb	r2, [r7, #23]
 800da56:	701a      	strb	r2, [r3, #0]
		n++;
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	3301      	adds	r3, #1
 800da5c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800da5e:	7dfb      	ldrb	r3, [r7, #23]
 800da60:	2b0a      	cmp	r3, #10
 800da62:	d007      	beq.n	800da74 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	3b01      	subs	r3, #1
 800da68:	69fa      	ldr	r2, [r7, #28]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	dbde      	blt.n	800da2c <f_gets+0x16>
 800da6e:	e002      	b.n	800da76 <f_gets+0x60>
		if (rc != 1) break;
 800da70:	bf00      	nop
 800da72:	e000      	b.n	800da76 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800da74:	bf00      	nop
	}
	*p = 0;
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	2200      	movs	r2, #0
 800da7a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <f_gets+0x70>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	e000      	b.n	800da88 <f_gets+0x72>
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3720      	adds	r7, #32
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	4613      	mov	r3, r2
 800da9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da9e:	2301      	movs	r3, #1
 800daa0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800daa6:	4b1f      	ldr	r3, [pc, #124]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800daa8:	7a5b      	ldrb	r3, [r3, #9]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	d131      	bne.n	800db14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dab0:	4b1c      	ldr	r3, [pc, #112]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800dab2:	7a5b      	ldrb	r3, [r3, #9]
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	461a      	mov	r2, r3
 800dab8:	4b1a      	ldr	r3, [pc, #104]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800daba:	2100      	movs	r1, #0
 800dabc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dabe:	4b19      	ldr	r3, [pc, #100]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800dac0:	7a5b      	ldrb	r3, [r3, #9]
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	4a17      	ldr	r2, [pc, #92]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dace:	4b15      	ldr	r3, [pc, #84]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800dad0:	7a5b      	ldrb	r3, [r3, #9]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	461a      	mov	r2, r3
 800dad6:	4b13      	ldr	r3, [pc, #76]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800dad8:	4413      	add	r3, r2
 800dada:	79fa      	ldrb	r2, [r7, #7]
 800dadc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dade:	4b11      	ldr	r3, [pc, #68]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800dae0:	7a5b      	ldrb	r3, [r3, #9]
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	1c5a      	adds	r2, r3, #1
 800dae6:	b2d1      	uxtb	r1, r2
 800dae8:	4a0e      	ldr	r2, [pc, #56]	; (800db24 <FATFS_LinkDriverEx+0x94>)
 800daea:	7251      	strb	r1, [r2, #9]
 800daec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800daee:	7dbb      	ldrb	r3, [r7, #22]
 800daf0:	3330      	adds	r3, #48	; 0x30
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	3301      	adds	r3, #1
 800dafc:	223a      	movs	r2, #58	; 0x3a
 800dafe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	3302      	adds	r3, #2
 800db04:	222f      	movs	r2, #47	; 0x2f
 800db06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	3303      	adds	r3, #3
 800db0c:	2200      	movs	r2, #0
 800db0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db10:	2300      	movs	r3, #0
 800db12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	371c      	adds	r7, #28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	20000840 	.word	0x20000840

0800db28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db32:	2200      	movs	r2, #0
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff ffaa 	bl	800da90 <FATFS_LinkDriverEx>
 800db3c:	4603      	mov	r3, r0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
	...

0800db48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db4c:	2200      	movs	r2, #0
 800db4e:	4912      	ldr	r1, [pc, #72]	; (800db98 <MX_USB_DEVICE_Init+0x50>)
 800db50:	4812      	ldr	r0, [pc, #72]	; (800db9c <MX_USB_DEVICE_Init+0x54>)
 800db52:	f7fc f8f3 	bl	8009d3c <USBD_Init>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db5c:	f7f3 ff8c 	bl	8001a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db60:	490f      	ldr	r1, [pc, #60]	; (800dba0 <MX_USB_DEVICE_Init+0x58>)
 800db62:	480e      	ldr	r0, [pc, #56]	; (800db9c <MX_USB_DEVICE_Init+0x54>)
 800db64:	f7fc f91a 	bl	8009d9c <USBD_RegisterClass>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db6e:	f7f3 ff83 	bl	8001a78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db72:	490c      	ldr	r1, [pc, #48]	; (800dba4 <MX_USB_DEVICE_Init+0x5c>)
 800db74:	4809      	ldr	r0, [pc, #36]	; (800db9c <MX_USB_DEVICE_Init+0x54>)
 800db76:	f7fc f811 	bl	8009b9c <USBD_CDC_RegisterInterface>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db80:	f7f3 ff7a 	bl	8001a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db84:	4805      	ldr	r0, [pc, #20]	; (800db9c <MX_USB_DEVICE_Init+0x54>)
 800db86:	f7fc f93f 	bl	8009e08 <USBD_Start>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db90:	f7f3 ff72 	bl	8001a78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db94:	bf00      	nop
 800db96:	bd80      	pop	{r7, pc}
 800db98:	200000c8 	.word	0x200000c8
 800db9c:	2000084c 	.word	0x2000084c
 800dba0:	20000034 	.word	0x20000034
 800dba4:	200000b4 	.word	0x200000b4

0800dba8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dbac:	2200      	movs	r2, #0
 800dbae:	4905      	ldr	r1, [pc, #20]	; (800dbc4 <CDC_Init_FS+0x1c>)
 800dbb0:	4805      	ldr	r0, [pc, #20]	; (800dbc8 <CDC_Init_FS+0x20>)
 800dbb2:	f7fc f80d 	bl	8009bd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dbb6:	4905      	ldr	r1, [pc, #20]	; (800dbcc <CDC_Init_FS+0x24>)
 800dbb8:	4803      	ldr	r0, [pc, #12]	; (800dbc8 <CDC_Init_FS+0x20>)
 800dbba:	f7fc f82b 	bl	8009c14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	20001328 	.word	0x20001328
 800dbc8:	2000084c 	.word	0x2000084c
 800dbcc:	20000b28 	.word	0x20000b28

0800dbd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
 800dbec:	4613      	mov	r3, r2
 800dbee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbf0:	79fb      	ldrb	r3, [r7, #7]
 800dbf2:	2b23      	cmp	r3, #35	; 0x23
 800dbf4:	d84a      	bhi.n	800dc8c <CDC_Control_FS+0xac>
 800dbf6:	a201      	add	r2, pc, #4	; (adr r2, 800dbfc <CDC_Control_FS+0x1c>)
 800dbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfc:	0800dc8d 	.word	0x0800dc8d
 800dc00:	0800dc8d 	.word	0x0800dc8d
 800dc04:	0800dc8d 	.word	0x0800dc8d
 800dc08:	0800dc8d 	.word	0x0800dc8d
 800dc0c:	0800dc8d 	.word	0x0800dc8d
 800dc10:	0800dc8d 	.word	0x0800dc8d
 800dc14:	0800dc8d 	.word	0x0800dc8d
 800dc18:	0800dc8d 	.word	0x0800dc8d
 800dc1c:	0800dc8d 	.word	0x0800dc8d
 800dc20:	0800dc8d 	.word	0x0800dc8d
 800dc24:	0800dc8d 	.word	0x0800dc8d
 800dc28:	0800dc8d 	.word	0x0800dc8d
 800dc2c:	0800dc8d 	.word	0x0800dc8d
 800dc30:	0800dc8d 	.word	0x0800dc8d
 800dc34:	0800dc8d 	.word	0x0800dc8d
 800dc38:	0800dc8d 	.word	0x0800dc8d
 800dc3c:	0800dc8d 	.word	0x0800dc8d
 800dc40:	0800dc8d 	.word	0x0800dc8d
 800dc44:	0800dc8d 	.word	0x0800dc8d
 800dc48:	0800dc8d 	.word	0x0800dc8d
 800dc4c:	0800dc8d 	.word	0x0800dc8d
 800dc50:	0800dc8d 	.word	0x0800dc8d
 800dc54:	0800dc8d 	.word	0x0800dc8d
 800dc58:	0800dc8d 	.word	0x0800dc8d
 800dc5c:	0800dc8d 	.word	0x0800dc8d
 800dc60:	0800dc8d 	.word	0x0800dc8d
 800dc64:	0800dc8d 	.word	0x0800dc8d
 800dc68:	0800dc8d 	.word	0x0800dc8d
 800dc6c:	0800dc8d 	.word	0x0800dc8d
 800dc70:	0800dc8d 	.word	0x0800dc8d
 800dc74:	0800dc8d 	.word	0x0800dc8d
 800dc78:	0800dc8d 	.word	0x0800dc8d
 800dc7c:	0800dc8d 	.word	0x0800dc8d
 800dc80:	0800dc8d 	.word	0x0800dc8d
 800dc84:	0800dc8d 	.word	0x0800dc8d
 800dc88:	0800dc8d 	.word	0x0800dc8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc8c:	bf00      	nop
  }

  return (USBD_OK);
 800dc8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dca6:	6879      	ldr	r1, [r7, #4]
 800dca8:	4818      	ldr	r0, [pc, #96]	; (800dd0c <CDC_Receive_FS+0x70>)
 800dcaa:	f7fb ffb3 	bl	8009c14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcae:	4817      	ldr	r0, [pc, #92]	; (800dd0c <CDC_Receive_FS+0x70>)
 800dcb0:	f7fc f80e 	bl	8009cd0 <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	e016      	b.n	800dce8 <CDC_Receive_FS+0x4c>
  {
	  Buf[i] = toupper(Buf[i]);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 fdae 	bl	800e824 <toupper>
 800dcc8:	4601      	mov	r1, r0
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	4413      	add	r3, r2
 800dcd0:	b2ca      	uxtb	r2, r1
 800dcd2:	701a      	strb	r2, [r3, #0]
	  test_enable = Buf[i];
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	4413      	add	r3, r2
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4b0c      	ldr	r3, [pc, #48]	; (800dd10 <CDC_Receive_FS+0x74>)
 800dce0:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3301      	adds	r3, #1
 800dce6:	60fb      	str	r3, [r7, #12]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d8e3      	bhi.n	800dcba <CDC_Receive_FS+0x1e>
  }

  CDC_Transmit_FS(Buf,*Len);
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f80a 	bl	800dd14 <CDC_Transmit_FS>



  return (USBD_OK);
 800dd00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	2000084c 	.word	0x2000084c
 800dd10:	200006f4 	.word	0x200006f4

0800dd14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd24:	4b0d      	ldr	r3, [pc, #52]	; (800dd5c <CDC_Transmit_FS+0x48>)
 800dd26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e00b      	b.n	800dd52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd3a:	887b      	ldrh	r3, [r7, #2]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	4806      	ldr	r0, [pc, #24]	; (800dd5c <CDC_Transmit_FS+0x48>)
 800dd42:	f7fb ff45 	bl	8009bd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd46:	4805      	ldr	r0, [pc, #20]	; (800dd5c <CDC_Transmit_FS+0x48>)
 800dd48:	f7fb ff82 	bl	8009c50 <USBD_CDC_TransmitPacket>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	2000084c 	.word	0x2000084c

0800dd60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b087      	sub	sp, #28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	371c      	adds	r7, #28
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
	...

0800dd84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2212      	movs	r2, #18
 800dd94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd96:	4b03      	ldr	r3, [pc, #12]	; (800dda4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	200000e8 	.word	0x200000e8

0800dda8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	6039      	str	r1, [r7, #0]
 800ddb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2204      	movs	r2, #4
 800ddb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddba:	4b03      	ldr	r3, [pc, #12]	; (800ddc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	20000108 	.word	0x20000108

0800ddcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	6039      	str	r1, [r7, #0]
 800ddd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddd8:	79fb      	ldrb	r3, [r7, #7]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d105      	bne.n	800ddea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	4907      	ldr	r1, [pc, #28]	; (800de00 <USBD_FS_ProductStrDescriptor+0x34>)
 800dde2:	4808      	ldr	r0, [pc, #32]	; (800de04 <USBD_FS_ProductStrDescriptor+0x38>)
 800dde4:	f7fd f9e6 	bl	800b1b4 <USBD_GetString>
 800dde8:	e004      	b.n	800ddf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	4904      	ldr	r1, [pc, #16]	; (800de00 <USBD_FS_ProductStrDescriptor+0x34>)
 800ddee:	4805      	ldr	r0, [pc, #20]	; (800de04 <USBD_FS_ProductStrDescriptor+0x38>)
 800ddf0:	f7fd f9e0 	bl	800b1b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddf4:	4b02      	ldr	r3, [pc, #8]	; (800de00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	20001b28 	.word	0x20001b28
 800de04:	0800f47c 	.word	0x0800f47c

0800de08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	4904      	ldr	r1, [pc, #16]	; (800de28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de18:	4804      	ldr	r0, [pc, #16]	; (800de2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de1a:	f7fd f9cb 	bl	800b1b4 <USBD_GetString>
  return USBD_StrDesc;
 800de1e:	4b02      	ldr	r3, [pc, #8]	; (800de28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	20001b28 	.word	0x20001b28
 800de2c:	0800f494 	.word	0x0800f494

0800de30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	6039      	str	r1, [r7, #0]
 800de3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	221a      	movs	r2, #26
 800de40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de42:	f000 f855 	bl	800def0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de46:	4b02      	ldr	r3, [pc, #8]	; (800de50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	2000010c 	.word	0x2000010c

0800de54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	4603      	mov	r3, r0
 800de5c:	6039      	str	r1, [r7, #0]
 800de5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de60:	79fb      	ldrb	r3, [r7, #7]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d105      	bne.n	800de72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de66:	683a      	ldr	r2, [r7, #0]
 800de68:	4907      	ldr	r1, [pc, #28]	; (800de88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de6a:	4808      	ldr	r0, [pc, #32]	; (800de8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800de6c:	f7fd f9a2 	bl	800b1b4 <USBD_GetString>
 800de70:	e004      	b.n	800de7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	4904      	ldr	r1, [pc, #16]	; (800de88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de76:	4805      	ldr	r0, [pc, #20]	; (800de8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800de78:	f7fd f99c 	bl	800b1b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de7c:	4b02      	ldr	r3, [pc, #8]	; (800de88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	20001b28 	.word	0x20001b28
 800de8c:	0800f4a8 	.word	0x0800f4a8

0800de90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	6039      	str	r1, [r7, #0]
 800de9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d105      	bne.n	800deae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	4907      	ldr	r1, [pc, #28]	; (800dec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dea6:	4808      	ldr	r0, [pc, #32]	; (800dec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dea8:	f7fd f984 	bl	800b1b4 <USBD_GetString>
 800deac:	e004      	b.n	800deb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	4904      	ldr	r1, [pc, #16]	; (800dec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800deb2:	4805      	ldr	r0, [pc, #20]	; (800dec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800deb4:	f7fd f97e 	bl	800b1b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800deb8:	4b02      	ldr	r3, [pc, #8]	; (800dec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20001b28 	.word	0x20001b28
 800dec8:	0800f4b4 	.word	0x0800f4b4

0800decc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	6039      	str	r1, [r7, #0]
 800ded6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	220c      	movs	r2, #12
 800dedc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dede:	4b03      	ldr	r3, [pc, #12]	; (800deec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	200000fc 	.word	0x200000fc

0800def0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800def6:	4b0f      	ldr	r3, [pc, #60]	; (800df34 <Get_SerialNum+0x44>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800defc:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <Get_SerialNum+0x48>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df02:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <Get_SerialNum+0x4c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4413      	add	r3, r2
 800df0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d009      	beq.n	800df2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df16:	2208      	movs	r2, #8
 800df18:	4909      	ldr	r1, [pc, #36]	; (800df40 <Get_SerialNum+0x50>)
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f000 f814 	bl	800df48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df20:	2204      	movs	r2, #4
 800df22:	4908      	ldr	r1, [pc, #32]	; (800df44 <Get_SerialNum+0x54>)
 800df24:	68b8      	ldr	r0, [r7, #8]
 800df26:	f000 f80f 	bl	800df48 <IntToUnicode>
  }
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	1ff07a10 	.word	0x1ff07a10
 800df38:	1ff07a14 	.word	0x1ff07a14
 800df3c:	1ff07a18 	.word	0x1ff07a18
 800df40:	2000010e 	.word	0x2000010e
 800df44:	2000011e 	.word	0x2000011e

0800df48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df48:	b480      	push	{r7}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	4613      	mov	r3, r2
 800df54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df5a:	2300      	movs	r3, #0
 800df5c:	75fb      	strb	r3, [r7, #23]
 800df5e:	e027      	b.n	800dfb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	0f1b      	lsrs	r3, r3, #28
 800df64:	2b09      	cmp	r3, #9
 800df66:	d80b      	bhi.n	800df80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	0f1b      	lsrs	r3, r3, #28
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	7dfb      	ldrb	r3, [r7, #23]
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	4619      	mov	r1, r3
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	440b      	add	r3, r1
 800df78:	3230      	adds	r2, #48	; 0x30
 800df7a:	b2d2      	uxtb	r2, r2
 800df7c:	701a      	strb	r2, [r3, #0]
 800df7e:	e00a      	b.n	800df96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	0f1b      	lsrs	r3, r3, #28
 800df84:	b2da      	uxtb	r2, r3
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	4619      	mov	r1, r3
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	440b      	add	r3, r1
 800df90:	3237      	adds	r2, #55	; 0x37
 800df92:	b2d2      	uxtb	r2, r2
 800df94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	3301      	adds	r3, #1
 800dfae:	75fb      	strb	r3, [r7, #23]
 800dfb0:	7dfa      	ldrb	r2, [r7, #23]
 800dfb2:	79fb      	ldrb	r3, [r7, #7]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d3d3      	bcc.n	800df60 <IntToUnicode+0x18>
  }
}
 800dfb8:	bf00      	nop
 800dfba:	bf00      	nop
 800dfbc:	371c      	adds	r7, #28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
	...

0800dfc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b0aa      	sub	sp, #168	; 0xa8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	605a      	str	r2, [r3, #4]
 800dfda:	609a      	str	r2, [r3, #8]
 800dfdc:	60da      	str	r2, [r3, #12]
 800dfde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dfe0:	f107 0314 	add.w	r3, r7, #20
 800dfe4:	2280      	movs	r2, #128	; 0x80
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 fc5f 	bl	800e8ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dff6:	d151      	bne.n	800e09c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dff8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dffc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dffe:	2300      	movs	r3, #0
 800e000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e004:	f107 0314 	add.w	r3, r7, #20
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f7 f8f5 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d001      	beq.n	800e018 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e014:	f7f3 fd30 	bl	8001a78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e018:	4b22      	ldr	r3, [pc, #136]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01c:	4a21      	ldr	r2, [pc, #132]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e01e:	f043 0301 	orr.w	r3, r3, #1
 800e022:	6313      	str	r3, [r2, #48]	; 0x30
 800e024:	4b1f      	ldr	r3, [pc, #124]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	613b      	str	r3, [r7, #16]
 800e02e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e030:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e038:	2302      	movs	r3, #2
 800e03a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e03e:	2300      	movs	r3, #0
 800e040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e044:	2303      	movs	r3, #3
 800e046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e04a:	230a      	movs	r3, #10
 800e04c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e050:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e054:	4619      	mov	r1, r3
 800e056:	4814      	ldr	r0, [pc, #80]	; (800e0a8 <HAL_PCD_MspInit+0xe0>)
 800e058:	f7f4 fd74 	bl	8002b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e05c:	4b11      	ldr	r3, [pc, #68]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e060:	4a10      	ldr	r2, [pc, #64]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e066:	6353      	str	r3, [r2, #52]	; 0x34
 800e068:	4b0e      	ldr	r3, [pc, #56]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e070:	60fb      	str	r3, [r7, #12]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	4b0b      	ldr	r3, [pc, #44]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e078:	4a0a      	ldr	r2, [pc, #40]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e07a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e07e:	6453      	str	r3, [r2, #68]	; 0x44
 800e080:	4b08      	ldr	r3, [pc, #32]	; (800e0a4 <HAL_PCD_MspInit+0xdc>)
 800e082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e088:	60bb      	str	r3, [r7, #8]
 800e08a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e08c:	2200      	movs	r2, #0
 800e08e:	2100      	movs	r1, #0
 800e090:	2043      	movs	r0, #67	; 0x43
 800e092:	f7f4 fd20 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e096:	2043      	movs	r0, #67	; 0x43
 800e098:	f7f4 fd39 	bl	8002b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e09c:	bf00      	nop
 800e09e:	37a8      	adds	r7, #168	; 0xa8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	40023800 	.word	0x40023800
 800e0a8:	40020000 	.word	0x40020000

0800e0ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	f7fb feed 	bl	8009ea2 <USBD_LL_SetupStage>
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e0e2:	78fa      	ldrb	r2, [r7, #3]
 800e0e4:	6879      	ldr	r1, [r7, #4]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	4413      	add	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	440b      	add	r3, r1
 800e0f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	78fb      	ldrb	r3, [r7, #3]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f7fb ff27 	bl	8009f4c <USBD_LL_DataOutStage>
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	460b      	mov	r3, r1
 800e110:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800e118:	78fa      	ldrb	r2, [r7, #3]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	4613      	mov	r3, r2
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	4413      	add	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	440b      	add	r3, r1
 800e126:	334c      	adds	r3, #76	; 0x4c
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	78fb      	ldrb	r3, [r7, #3]
 800e12c:	4619      	mov	r1, r3
 800e12e:	f7fb ffc0 	bl	800a0b2 <USBD_LL_DataInStage>
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b082      	sub	sp, #8
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fc f8f4 	bl	800a336 <USBD_LL_SOF>
}
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e15e:	2301      	movs	r3, #1
 800e160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d102      	bne.n	800e170 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e16a:	2300      	movs	r3, #0
 800e16c:	73fb      	strb	r3, [r7, #15]
 800e16e:	e008      	b.n	800e182 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	2b02      	cmp	r3, #2
 800e176:	d102      	bne.n	800e17e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e178:	2301      	movs	r3, #1
 800e17a:	73fb      	strb	r3, [r7, #15]
 800e17c:	e001      	b.n	800e182 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e17e:	f7f3 fc7b 	bl	8001a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e188:	7bfa      	ldrb	r2, [r7, #15]
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fc f894 	bl	800a2ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fc f83c 	bl	800a216 <USBD_LL_Reset>
}
 800e19e:	bf00      	nop
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
	...

0800e1a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fc f88f 	bl	800a2da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	6812      	ldr	r2, [r2, #0]
 800e1ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1ce:	f043 0301 	orr.w	r3, r3, #1
 800e1d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6a1b      	ldr	r3, [r3, #32]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d005      	beq.n	800e1e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1dc:	4b04      	ldr	r3, [pc, #16]	; (800e1f0 <HAL_PCD_SuspendCallback+0x48>)
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	4a03      	ldr	r2, [pc, #12]	; (800e1f0 <HAL_PCD_SuspendCallback+0x48>)
 800e1e2:	f043 0306 	orr.w	r3, r3, #6
 800e1e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	e000ed00 	.word	0xe000ed00

0800e1f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e202:	4618      	mov	r0, r3
 800e204:	f7fc f87f 	bl	800a306 <USBD_LL_Resume>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	460b      	mov	r3, r1
 800e21a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e222:	78fa      	ldrb	r2, [r7, #3]
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	f7fc f8d7 	bl	800a3da <USBD_LL_IsoOUTIncomplete>
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e246:	78fa      	ldrb	r2, [r7, #3]
 800e248:	4611      	mov	r1, r2
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fc f893 	bl	800a376 <USBD_LL_IsoINIncomplete>
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e266:	4618      	mov	r0, r3
 800e268:	f7fc f8e9 	bl	800a43e <USBD_LL_DevConnected>
}
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e282:	4618      	mov	r0, r3
 800e284:	f7fc f8e6 	bl	800a454 <USBD_LL_DevDisconnected>
}
 800e288:	bf00      	nop
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d13f      	bne.n	800e320 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e2a0:	4a22      	ldr	r2, [pc, #136]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a20      	ldr	r2, [pc, #128]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e2b0:	4b1e      	ldr	r3, [pc, #120]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e2b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e2b8:	4b1c      	ldr	r3, [pc, #112]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2ba:	2206      	movs	r2, #6
 800e2bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e2be:	4b1b      	ldr	r3, [pc, #108]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e2c4:	4b19      	ldr	r3, [pc, #100]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e2ca:	4b18      	ldr	r3, [pc, #96]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2cc:	2202      	movs	r2, #2
 800e2ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e2d0:	4b16      	ldr	r3, [pc, #88]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2d6:	4b15      	ldr	r3, [pc, #84]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e2dc:	4b13      	ldr	r3, [pc, #76]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e2e2:	4b12      	ldr	r3, [pc, #72]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e2e8:	4b10      	ldr	r3, [pc, #64]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2f4:	480d      	ldr	r0, [pc, #52]	; (800e32c <USBD_LL_Init+0x9c>)
 800e2f6:	f7f4 ff1c 	bl	8003132 <HAL_PCD_Init>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800e300:	f7f3 fbba 	bl	8001a78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e304:	2180      	movs	r1, #128	; 0x80
 800e306:	4809      	ldr	r0, [pc, #36]	; (800e32c <USBD_LL_Init+0x9c>)
 800e308:	f7f6 f997 	bl	800463a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e30c:	2240      	movs	r2, #64	; 0x40
 800e30e:	2100      	movs	r1, #0
 800e310:	4806      	ldr	r0, [pc, #24]	; (800e32c <USBD_LL_Init+0x9c>)
 800e312:	f7f6 f94b 	bl	80045ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e316:	2280      	movs	r2, #128	; 0x80
 800e318:	2101      	movs	r1, #1
 800e31a:	4804      	ldr	r0, [pc, #16]	; (800e32c <USBD_LL_Init+0x9c>)
 800e31c:	f7f6 f946 	bl	80045ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	20001d28 	.word	0x20001d28

0800e330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e346:	4618      	mov	r0, r3
 800e348:	f7f5 f817 	bl	800337a <HAL_PCD_Start>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e350:	7bfb      	ldrb	r3, [r7, #15]
 800e352:	4618      	mov	r0, r3
 800e354:	f000 f97e 	bl	800e654 <USBD_Get_USB_Status>
 800e358:	4603      	mov	r3, r0
 800e35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b084      	sub	sp, #16
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	4608      	mov	r0, r1
 800e370:	4611      	mov	r1, r2
 800e372:	461a      	mov	r2, r3
 800e374:	4603      	mov	r3, r0
 800e376:	70fb      	strb	r3, [r7, #3]
 800e378:	460b      	mov	r3, r1
 800e37a:	70bb      	strb	r3, [r7, #2]
 800e37c:	4613      	mov	r3, r2
 800e37e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e38e:	78bb      	ldrb	r3, [r7, #2]
 800e390:	883a      	ldrh	r2, [r7, #0]
 800e392:	78f9      	ldrb	r1, [r7, #3]
 800e394:	f7f5 fd04 	bl	8003da0 <HAL_PCD_EP_Open>
 800e398:	4603      	mov	r3, r0
 800e39a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f000 f958 	bl	800e654 <USBD_Get_USB_Status>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3cc:	78fa      	ldrb	r2, [r7, #3]
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7f5 fd4d 	bl	8003e70 <HAL_PCD_EP_Close>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 f939 	bl	800e654 <USBD_Get_USB_Status>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e400:	2300      	movs	r3, #0
 800e402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e40a:	78fa      	ldrb	r2, [r7, #3]
 800e40c:	4611      	mov	r1, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f5 fe25 	bl	800405e <HAL_PCD_EP_SetStall>
 800e414:	4603      	mov	r3, r0
 800e416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e418:	7bfb      	ldrb	r3, [r7, #15]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f000 f91a 	bl	800e654 <USBD_Get_USB_Status>
 800e420:	4603      	mov	r3, r0
 800e422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e424:	7bbb      	ldrb	r3, [r7, #14]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	460b      	mov	r3, r1
 800e438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e43e:	2300      	movs	r3, #0
 800e440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e448:	78fa      	ldrb	r2, [r7, #3]
 800e44a:	4611      	mov	r1, r2
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f5 fe6a 	bl	8004126 <HAL_PCD_EP_ClrStall>
 800e452:	4603      	mov	r3, r0
 800e454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e456:	7bfb      	ldrb	r3, [r7, #15]
 800e458:	4618      	mov	r0, r3
 800e45a:	f000 f8fb 	bl	800e654 <USBD_Get_USB_Status>
 800e45e:	4603      	mov	r3, r0
 800e460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e462:	7bbb      	ldrb	r3, [r7, #14]
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	460b      	mov	r3, r1
 800e476:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e47e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e484:	2b00      	cmp	r3, #0
 800e486:	da0b      	bge.n	800e4a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e488:	78fb      	ldrb	r3, [r7, #3]
 800e48a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e48e:	68f9      	ldr	r1, [r7, #12]
 800e490:	4613      	mov	r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	4413      	add	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	440b      	add	r3, r1
 800e49a:	333e      	adds	r3, #62	; 0x3e
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	e00b      	b.n	800e4b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4a6:	68f9      	ldr	r1, [r7, #12]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	440b      	add	r3, r1
 800e4b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e4b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4de:	78fa      	ldrb	r2, [r7, #3]
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7f5 fc37 	bl	8003d56 <HAL_PCD_SetAddress>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ec:	7bfb      	ldrb	r3, [r7, #15]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 f8b0 	bl	800e654 <USBD_Get_USB_Status>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b086      	sub	sp, #24
 800e506:	af00      	add	r7, sp, #0
 800e508:	60f8      	str	r0, [r7, #12]
 800e50a:	607a      	str	r2, [r7, #4]
 800e50c:	603b      	str	r3, [r7, #0]
 800e50e:	460b      	mov	r3, r1
 800e510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e512:	2300      	movs	r3, #0
 800e514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e520:	7af9      	ldrb	r1, [r7, #11]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	f7f5 fd50 	bl	8003fca <HAL_PCD_EP_Transmit>
 800e52a:	4603      	mov	r3, r0
 800e52c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
 800e530:	4618      	mov	r0, r3
 800e532:	f000 f88f 	bl	800e654 <USBD_Get_USB_Status>
 800e536:	4603      	mov	r3, r0
 800e538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e53a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3718      	adds	r7, #24
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	607a      	str	r2, [r7, #4]
 800e54e:	603b      	str	r3, [r7, #0]
 800e550:	460b      	mov	r3, r1
 800e552:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e562:	7af9      	ldrb	r1, [r7, #11]
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	f7f5 fccc 	bl	8003f04 <HAL_PCD_EP_Receive>
 800e56c:	4603      	mov	r3, r0
 800e56e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	4618      	mov	r0, r3
 800e574:	f000 f86e 	bl	800e654 <USBD_Get_USB_Status>
 800e578:	4603      	mov	r3, r0
 800e57a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e57c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3718      	adds	r7, #24
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	460b      	mov	r3, r1
 800e590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e598:	78fa      	ldrb	r2, [r7, #3]
 800e59a:	4611      	mov	r1, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7f5 fcfc 	bl	8003f9a <HAL_PCD_EP_GetRxCount>
 800e5a2:	4603      	mov	r3, r0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e5b8:	78fb      	ldrb	r3, [r7, #3]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <HAL_PCDEx_LPM_Callback+0x18>
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d01f      	beq.n	800e602 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e5c2:	e03b      	b.n	800e63c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d007      	beq.n	800e5dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e5cc:	f000 f83c 	bl	800e648 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5d0:	4b1c      	ldr	r3, [pc, #112]	; (800e644 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	4a1b      	ldr	r2, [pc, #108]	; (800e644 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5d6:	f023 0306 	bic.w	r3, r3, #6
 800e5da:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	6812      	ldr	r2, [r2, #0]
 800e5ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5ee:	f023 0301 	bic.w	r3, r3, #1
 800e5f2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fb fe83 	bl	800a306 <USBD_LL_Resume>
    break;
 800e600:	e01c      	b.n	800e63c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	6812      	ldr	r2, [r2, #0]
 800e610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e614:	f043 0301 	orr.w	r3, r3, #1
 800e618:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e620:	4618      	mov	r0, r3
 800e622:	f7fb fe5a 	bl	800a2da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a1b      	ldr	r3, [r3, #32]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d005      	beq.n	800e63a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e62e:	4b05      	ldr	r3, [pc, #20]	; (800e644 <HAL_PCDEx_LPM_Callback+0x98>)
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	4a04      	ldr	r2, [pc, #16]	; (800e644 <HAL_PCDEx_LPM_Callback+0x98>)
 800e634:	f043 0306 	orr.w	r3, r3, #6
 800e638:	6113      	str	r3, [r2, #16]
    break;
 800e63a:	bf00      	nop
}
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	e000ed00 	.word	0xe000ed00

0800e648 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e64c:	f7f2 fe4c 	bl	80012e8 <SystemClock_Config>
}
 800e650:	bf00      	nop
 800e652:	bd80      	pop	{r7, pc}

0800e654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	4603      	mov	r3, r0
 800e65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e65e:	2300      	movs	r3, #0
 800e660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	2b03      	cmp	r3, #3
 800e666:	d817      	bhi.n	800e698 <USBD_Get_USB_Status+0x44>
 800e668:	a201      	add	r2, pc, #4	; (adr r2, 800e670 <USBD_Get_USB_Status+0x1c>)
 800e66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66e:	bf00      	nop
 800e670:	0800e681 	.word	0x0800e681
 800e674:	0800e687 	.word	0x0800e687
 800e678:	0800e68d 	.word	0x0800e68d
 800e67c:	0800e693 	.word	0x0800e693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	73fb      	strb	r3, [r7, #15]
    break;
 800e684:	e00b      	b.n	800e69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e686:	2303      	movs	r3, #3
 800e688:	73fb      	strb	r3, [r7, #15]
    break;
 800e68a:	e008      	b.n	800e69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e68c:	2301      	movs	r3, #1
 800e68e:	73fb      	strb	r3, [r7, #15]
    break;
 800e690:	e005      	b.n	800e69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e692:	2303      	movs	r3, #3
 800e694:	73fb      	strb	r3, [r7, #15]
    break;
 800e696:	e002      	b.n	800e69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e698:	2303      	movs	r3, #3
 800e69a:	73fb      	strb	r3, [r7, #15]
    break;
 800e69c:	bf00      	nop
  }
  return usb_status;
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3714      	adds	r7, #20
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <malloc>:
 800e6ac:	4b02      	ldr	r3, [pc, #8]	; (800e6b8 <malloc+0xc>)
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	6818      	ldr	r0, [r3, #0]
 800e6b2:	f000 b82b 	b.w	800e70c <_malloc_r>
 800e6b6:	bf00      	nop
 800e6b8:	20000174 	.word	0x20000174

0800e6bc <free>:
 800e6bc:	4b02      	ldr	r3, [pc, #8]	; (800e6c8 <free+0xc>)
 800e6be:	4601      	mov	r1, r0
 800e6c0:	6818      	ldr	r0, [r3, #0]
 800e6c2:	f000 b937 	b.w	800e934 <_free_r>
 800e6c6:	bf00      	nop
 800e6c8:	20000174 	.word	0x20000174

0800e6cc <sbrk_aligned>:
 800e6cc:	b570      	push	{r4, r5, r6, lr}
 800e6ce:	4e0e      	ldr	r6, [pc, #56]	; (800e708 <sbrk_aligned+0x3c>)
 800e6d0:	460c      	mov	r4, r1
 800e6d2:	6831      	ldr	r1, [r6, #0]
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	b911      	cbnz	r1, 800e6de <sbrk_aligned+0x12>
 800e6d8:	f000 f8f0 	bl	800e8bc <_sbrk_r>
 800e6dc:	6030      	str	r0, [r6, #0]
 800e6de:	4621      	mov	r1, r4
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f000 f8eb 	bl	800e8bc <_sbrk_r>
 800e6e6:	1c43      	adds	r3, r0, #1
 800e6e8:	d00a      	beq.n	800e700 <sbrk_aligned+0x34>
 800e6ea:	1cc4      	adds	r4, r0, #3
 800e6ec:	f024 0403 	bic.w	r4, r4, #3
 800e6f0:	42a0      	cmp	r0, r4
 800e6f2:	d007      	beq.n	800e704 <sbrk_aligned+0x38>
 800e6f4:	1a21      	subs	r1, r4, r0
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f000 f8e0 	bl	800e8bc <_sbrk_r>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d101      	bne.n	800e704 <sbrk_aligned+0x38>
 800e700:	f04f 34ff 	mov.w	r4, #4294967295
 800e704:	4620      	mov	r0, r4
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	20002234 	.word	0x20002234

0800e70c <_malloc_r>:
 800e70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e710:	1ccd      	adds	r5, r1, #3
 800e712:	f025 0503 	bic.w	r5, r5, #3
 800e716:	3508      	adds	r5, #8
 800e718:	2d0c      	cmp	r5, #12
 800e71a:	bf38      	it	cc
 800e71c:	250c      	movcc	r5, #12
 800e71e:	2d00      	cmp	r5, #0
 800e720:	4607      	mov	r7, r0
 800e722:	db01      	blt.n	800e728 <_malloc_r+0x1c>
 800e724:	42a9      	cmp	r1, r5
 800e726:	d905      	bls.n	800e734 <_malloc_r+0x28>
 800e728:	230c      	movs	r3, #12
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	2600      	movs	r6, #0
 800e72e:	4630      	mov	r0, r6
 800e730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e808 <_malloc_r+0xfc>
 800e738:	f000 f868 	bl	800e80c <__malloc_lock>
 800e73c:	f8d8 3000 	ldr.w	r3, [r8]
 800e740:	461c      	mov	r4, r3
 800e742:	bb5c      	cbnz	r4, 800e79c <_malloc_r+0x90>
 800e744:	4629      	mov	r1, r5
 800e746:	4638      	mov	r0, r7
 800e748:	f7ff ffc0 	bl	800e6cc <sbrk_aligned>
 800e74c:	1c43      	adds	r3, r0, #1
 800e74e:	4604      	mov	r4, r0
 800e750:	d155      	bne.n	800e7fe <_malloc_r+0xf2>
 800e752:	f8d8 4000 	ldr.w	r4, [r8]
 800e756:	4626      	mov	r6, r4
 800e758:	2e00      	cmp	r6, #0
 800e75a:	d145      	bne.n	800e7e8 <_malloc_r+0xdc>
 800e75c:	2c00      	cmp	r4, #0
 800e75e:	d048      	beq.n	800e7f2 <_malloc_r+0xe6>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	4631      	mov	r1, r6
 800e764:	4638      	mov	r0, r7
 800e766:	eb04 0903 	add.w	r9, r4, r3
 800e76a:	f000 f8a7 	bl	800e8bc <_sbrk_r>
 800e76e:	4581      	cmp	r9, r0
 800e770:	d13f      	bne.n	800e7f2 <_malloc_r+0xe6>
 800e772:	6821      	ldr	r1, [r4, #0]
 800e774:	1a6d      	subs	r5, r5, r1
 800e776:	4629      	mov	r1, r5
 800e778:	4638      	mov	r0, r7
 800e77a:	f7ff ffa7 	bl	800e6cc <sbrk_aligned>
 800e77e:	3001      	adds	r0, #1
 800e780:	d037      	beq.n	800e7f2 <_malloc_r+0xe6>
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	442b      	add	r3, r5
 800e786:	6023      	str	r3, [r4, #0]
 800e788:	f8d8 3000 	ldr.w	r3, [r8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d038      	beq.n	800e802 <_malloc_r+0xf6>
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	42a2      	cmp	r2, r4
 800e794:	d12b      	bne.n	800e7ee <_malloc_r+0xe2>
 800e796:	2200      	movs	r2, #0
 800e798:	605a      	str	r2, [r3, #4]
 800e79a:	e00f      	b.n	800e7bc <_malloc_r+0xb0>
 800e79c:	6822      	ldr	r2, [r4, #0]
 800e79e:	1b52      	subs	r2, r2, r5
 800e7a0:	d41f      	bmi.n	800e7e2 <_malloc_r+0xd6>
 800e7a2:	2a0b      	cmp	r2, #11
 800e7a4:	d917      	bls.n	800e7d6 <_malloc_r+0xca>
 800e7a6:	1961      	adds	r1, r4, r5
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	6025      	str	r5, [r4, #0]
 800e7ac:	bf18      	it	ne
 800e7ae:	6059      	strne	r1, [r3, #4]
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	bf08      	it	eq
 800e7b4:	f8c8 1000 	streq.w	r1, [r8]
 800e7b8:	5162      	str	r2, [r4, r5]
 800e7ba:	604b      	str	r3, [r1, #4]
 800e7bc:	4638      	mov	r0, r7
 800e7be:	f104 060b 	add.w	r6, r4, #11
 800e7c2:	f000 f829 	bl	800e818 <__malloc_unlock>
 800e7c6:	f026 0607 	bic.w	r6, r6, #7
 800e7ca:	1d23      	adds	r3, r4, #4
 800e7cc:	1af2      	subs	r2, r6, r3
 800e7ce:	d0ae      	beq.n	800e72e <_malloc_r+0x22>
 800e7d0:	1b9b      	subs	r3, r3, r6
 800e7d2:	50a3      	str	r3, [r4, r2]
 800e7d4:	e7ab      	b.n	800e72e <_malloc_r+0x22>
 800e7d6:	42a3      	cmp	r3, r4
 800e7d8:	6862      	ldr	r2, [r4, #4]
 800e7da:	d1dd      	bne.n	800e798 <_malloc_r+0x8c>
 800e7dc:	f8c8 2000 	str.w	r2, [r8]
 800e7e0:	e7ec      	b.n	800e7bc <_malloc_r+0xb0>
 800e7e2:	4623      	mov	r3, r4
 800e7e4:	6864      	ldr	r4, [r4, #4]
 800e7e6:	e7ac      	b.n	800e742 <_malloc_r+0x36>
 800e7e8:	4634      	mov	r4, r6
 800e7ea:	6876      	ldr	r6, [r6, #4]
 800e7ec:	e7b4      	b.n	800e758 <_malloc_r+0x4c>
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	e7cc      	b.n	800e78c <_malloc_r+0x80>
 800e7f2:	230c      	movs	r3, #12
 800e7f4:	603b      	str	r3, [r7, #0]
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	f000 f80e 	bl	800e818 <__malloc_unlock>
 800e7fc:	e797      	b.n	800e72e <_malloc_r+0x22>
 800e7fe:	6025      	str	r5, [r4, #0]
 800e800:	e7dc      	b.n	800e7bc <_malloc_r+0xb0>
 800e802:	605b      	str	r3, [r3, #4]
 800e804:	deff      	udf	#255	; 0xff
 800e806:	bf00      	nop
 800e808:	20002230 	.word	0x20002230

0800e80c <__malloc_lock>:
 800e80c:	4801      	ldr	r0, [pc, #4]	; (800e814 <__malloc_lock+0x8>)
 800e80e:	f000 b88f 	b.w	800e930 <__retarget_lock_acquire_recursive>
 800e812:	bf00      	nop
 800e814:	20002374 	.word	0x20002374

0800e818 <__malloc_unlock>:
 800e818:	4801      	ldr	r0, [pc, #4]	; (800e820 <__malloc_unlock+0x8>)
 800e81a:	f000 b88a 	b.w	800e932 <__retarget_lock_release_recursive>
 800e81e:	bf00      	nop
 800e820:	20002374 	.word	0x20002374

0800e824 <toupper>:
 800e824:	4b03      	ldr	r3, [pc, #12]	; (800e834 <toupper+0x10>)
 800e826:	5c1b      	ldrb	r3, [r3, r0]
 800e828:	f003 0303 	and.w	r3, r3, #3
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	bf08      	it	eq
 800e830:	3820      	subeq	r0, #32
 800e832:	4770      	bx	lr
 800e834:	0800f55d 	.word	0x0800f55d

0800e838 <_vsniprintf_r>:
 800e838:	b530      	push	{r4, r5, lr}
 800e83a:	4614      	mov	r4, r2
 800e83c:	2c00      	cmp	r4, #0
 800e83e:	b09b      	sub	sp, #108	; 0x6c
 800e840:	4605      	mov	r5, r0
 800e842:	461a      	mov	r2, r3
 800e844:	da05      	bge.n	800e852 <_vsniprintf_r+0x1a>
 800e846:	238b      	movs	r3, #139	; 0x8b
 800e848:	6003      	str	r3, [r0, #0]
 800e84a:	f04f 30ff 	mov.w	r0, #4294967295
 800e84e:	b01b      	add	sp, #108	; 0x6c
 800e850:	bd30      	pop	{r4, r5, pc}
 800e852:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e856:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e85a:	bf14      	ite	ne
 800e85c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e860:	4623      	moveq	r3, r4
 800e862:	9302      	str	r3, [sp, #8]
 800e864:	9305      	str	r3, [sp, #20]
 800e866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e86a:	9100      	str	r1, [sp, #0]
 800e86c:	9104      	str	r1, [sp, #16]
 800e86e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e872:	4669      	mov	r1, sp
 800e874:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e876:	f000 f903 	bl	800ea80 <_svfiprintf_r>
 800e87a:	1c43      	adds	r3, r0, #1
 800e87c:	bfbc      	itt	lt
 800e87e:	238b      	movlt	r3, #139	; 0x8b
 800e880:	602b      	strlt	r3, [r5, #0]
 800e882:	2c00      	cmp	r4, #0
 800e884:	d0e3      	beq.n	800e84e <_vsniprintf_r+0x16>
 800e886:	9b00      	ldr	r3, [sp, #0]
 800e888:	2200      	movs	r2, #0
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	e7df      	b.n	800e84e <_vsniprintf_r+0x16>
	...

0800e890 <vsniprintf>:
 800e890:	b507      	push	{r0, r1, r2, lr}
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	4613      	mov	r3, r2
 800e896:	460a      	mov	r2, r1
 800e898:	4601      	mov	r1, r0
 800e89a:	4803      	ldr	r0, [pc, #12]	; (800e8a8 <vsniprintf+0x18>)
 800e89c:	6800      	ldr	r0, [r0, #0]
 800e89e:	f7ff ffcb 	bl	800e838 <_vsniprintf_r>
 800e8a2:	b003      	add	sp, #12
 800e8a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8a8:	20000174 	.word	0x20000174

0800e8ac <memset>:
 800e8ac:	4402      	add	r2, r0
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d100      	bne.n	800e8b6 <memset+0xa>
 800e8b4:	4770      	bx	lr
 800e8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ba:	e7f9      	b.n	800e8b0 <memset+0x4>

0800e8bc <_sbrk_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d06      	ldr	r5, [pc, #24]	; (800e8d8 <_sbrk_r+0x1c>)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	f7f3 fca4 	bl	8002214 <_sbrk>
 800e8cc:	1c43      	adds	r3, r0, #1
 800e8ce:	d102      	bne.n	800e8d6 <_sbrk_r+0x1a>
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	b103      	cbz	r3, 800e8d6 <_sbrk_r+0x1a>
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	bd38      	pop	{r3, r4, r5, pc}
 800e8d8:	20002370 	.word	0x20002370

0800e8dc <__errno>:
 800e8dc:	4b01      	ldr	r3, [pc, #4]	; (800e8e4 <__errno+0x8>)
 800e8de:	6818      	ldr	r0, [r3, #0]
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	20000174 	.word	0x20000174

0800e8e8 <__libc_init_array>:
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	4d0d      	ldr	r5, [pc, #52]	; (800e920 <__libc_init_array+0x38>)
 800e8ec:	4c0d      	ldr	r4, [pc, #52]	; (800e924 <__libc_init_array+0x3c>)
 800e8ee:	1b64      	subs	r4, r4, r5
 800e8f0:	10a4      	asrs	r4, r4, #2
 800e8f2:	2600      	movs	r6, #0
 800e8f4:	42a6      	cmp	r6, r4
 800e8f6:	d109      	bne.n	800e90c <__libc_init_array+0x24>
 800e8f8:	4d0b      	ldr	r5, [pc, #44]	; (800e928 <__libc_init_array+0x40>)
 800e8fa:	4c0c      	ldr	r4, [pc, #48]	; (800e92c <__libc_init_array+0x44>)
 800e8fc:	f000 fbae 	bl	800f05c <_init>
 800e900:	1b64      	subs	r4, r4, r5
 800e902:	10a4      	asrs	r4, r4, #2
 800e904:	2600      	movs	r6, #0
 800e906:	42a6      	cmp	r6, r4
 800e908:	d105      	bne.n	800e916 <__libc_init_array+0x2e>
 800e90a:	bd70      	pop	{r4, r5, r6, pc}
 800e90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e910:	4798      	blx	r3
 800e912:	3601      	adds	r6, #1
 800e914:	e7ee      	b.n	800e8f4 <__libc_init_array+0xc>
 800e916:	f855 3b04 	ldr.w	r3, [r5], #4
 800e91a:	4798      	blx	r3
 800e91c:	3601      	adds	r6, #1
 800e91e:	e7f2      	b.n	800e906 <__libc_init_array+0x1e>
 800e920:	0800f698 	.word	0x0800f698
 800e924:	0800f698 	.word	0x0800f698
 800e928:	0800f698 	.word	0x0800f698
 800e92c:	0800f69c 	.word	0x0800f69c

0800e930 <__retarget_lock_acquire_recursive>:
 800e930:	4770      	bx	lr

0800e932 <__retarget_lock_release_recursive>:
 800e932:	4770      	bx	lr

0800e934 <_free_r>:
 800e934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e936:	2900      	cmp	r1, #0
 800e938:	d044      	beq.n	800e9c4 <_free_r+0x90>
 800e93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e93e:	9001      	str	r0, [sp, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	f1a1 0404 	sub.w	r4, r1, #4
 800e946:	bfb8      	it	lt
 800e948:	18e4      	addlt	r4, r4, r3
 800e94a:	f7ff ff5f 	bl	800e80c <__malloc_lock>
 800e94e:	4a1e      	ldr	r2, [pc, #120]	; (800e9c8 <_free_r+0x94>)
 800e950:	9801      	ldr	r0, [sp, #4]
 800e952:	6813      	ldr	r3, [r2, #0]
 800e954:	b933      	cbnz	r3, 800e964 <_free_r+0x30>
 800e956:	6063      	str	r3, [r4, #4]
 800e958:	6014      	str	r4, [r2, #0]
 800e95a:	b003      	add	sp, #12
 800e95c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e960:	f7ff bf5a 	b.w	800e818 <__malloc_unlock>
 800e964:	42a3      	cmp	r3, r4
 800e966:	d908      	bls.n	800e97a <_free_r+0x46>
 800e968:	6825      	ldr	r5, [r4, #0]
 800e96a:	1961      	adds	r1, r4, r5
 800e96c:	428b      	cmp	r3, r1
 800e96e:	bf01      	itttt	eq
 800e970:	6819      	ldreq	r1, [r3, #0]
 800e972:	685b      	ldreq	r3, [r3, #4]
 800e974:	1949      	addeq	r1, r1, r5
 800e976:	6021      	streq	r1, [r4, #0]
 800e978:	e7ed      	b.n	800e956 <_free_r+0x22>
 800e97a:	461a      	mov	r2, r3
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	b10b      	cbz	r3, 800e984 <_free_r+0x50>
 800e980:	42a3      	cmp	r3, r4
 800e982:	d9fa      	bls.n	800e97a <_free_r+0x46>
 800e984:	6811      	ldr	r1, [r2, #0]
 800e986:	1855      	adds	r5, r2, r1
 800e988:	42a5      	cmp	r5, r4
 800e98a:	d10b      	bne.n	800e9a4 <_free_r+0x70>
 800e98c:	6824      	ldr	r4, [r4, #0]
 800e98e:	4421      	add	r1, r4
 800e990:	1854      	adds	r4, r2, r1
 800e992:	42a3      	cmp	r3, r4
 800e994:	6011      	str	r1, [r2, #0]
 800e996:	d1e0      	bne.n	800e95a <_free_r+0x26>
 800e998:	681c      	ldr	r4, [r3, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	6053      	str	r3, [r2, #4]
 800e99e:	440c      	add	r4, r1
 800e9a0:	6014      	str	r4, [r2, #0]
 800e9a2:	e7da      	b.n	800e95a <_free_r+0x26>
 800e9a4:	d902      	bls.n	800e9ac <_free_r+0x78>
 800e9a6:	230c      	movs	r3, #12
 800e9a8:	6003      	str	r3, [r0, #0]
 800e9aa:	e7d6      	b.n	800e95a <_free_r+0x26>
 800e9ac:	6825      	ldr	r5, [r4, #0]
 800e9ae:	1961      	adds	r1, r4, r5
 800e9b0:	428b      	cmp	r3, r1
 800e9b2:	bf04      	itt	eq
 800e9b4:	6819      	ldreq	r1, [r3, #0]
 800e9b6:	685b      	ldreq	r3, [r3, #4]
 800e9b8:	6063      	str	r3, [r4, #4]
 800e9ba:	bf04      	itt	eq
 800e9bc:	1949      	addeq	r1, r1, r5
 800e9be:	6021      	streq	r1, [r4, #0]
 800e9c0:	6054      	str	r4, [r2, #4]
 800e9c2:	e7ca      	b.n	800e95a <_free_r+0x26>
 800e9c4:	b003      	add	sp, #12
 800e9c6:	bd30      	pop	{r4, r5, pc}
 800e9c8:	20002230 	.word	0x20002230

0800e9cc <__ssputs_r>:
 800e9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	688e      	ldr	r6, [r1, #8]
 800e9d2:	461f      	mov	r7, r3
 800e9d4:	42be      	cmp	r6, r7
 800e9d6:	680b      	ldr	r3, [r1, #0]
 800e9d8:	4682      	mov	sl, r0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	4690      	mov	r8, r2
 800e9de:	d82c      	bhi.n	800ea3a <__ssputs_r+0x6e>
 800e9e0:	898a      	ldrh	r2, [r1, #12]
 800e9e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9e6:	d026      	beq.n	800ea36 <__ssputs_r+0x6a>
 800e9e8:	6965      	ldr	r5, [r4, #20]
 800e9ea:	6909      	ldr	r1, [r1, #16]
 800e9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9f0:	eba3 0901 	sub.w	r9, r3, r1
 800e9f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9f8:	1c7b      	adds	r3, r7, #1
 800e9fa:	444b      	add	r3, r9
 800e9fc:	106d      	asrs	r5, r5, #1
 800e9fe:	429d      	cmp	r5, r3
 800ea00:	bf38      	it	cc
 800ea02:	461d      	movcc	r5, r3
 800ea04:	0553      	lsls	r3, r2, #21
 800ea06:	d527      	bpl.n	800ea58 <__ssputs_r+0x8c>
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7ff fe7f 	bl	800e70c <_malloc_r>
 800ea0e:	4606      	mov	r6, r0
 800ea10:	b360      	cbz	r0, 800ea6c <__ssputs_r+0xa0>
 800ea12:	6921      	ldr	r1, [r4, #16]
 800ea14:	464a      	mov	r2, r9
 800ea16:	f000 fadb 	bl	800efd0 <memcpy>
 800ea1a:	89a3      	ldrh	r3, [r4, #12]
 800ea1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea24:	81a3      	strh	r3, [r4, #12]
 800ea26:	6126      	str	r6, [r4, #16]
 800ea28:	6165      	str	r5, [r4, #20]
 800ea2a:	444e      	add	r6, r9
 800ea2c:	eba5 0509 	sub.w	r5, r5, r9
 800ea30:	6026      	str	r6, [r4, #0]
 800ea32:	60a5      	str	r5, [r4, #8]
 800ea34:	463e      	mov	r6, r7
 800ea36:	42be      	cmp	r6, r7
 800ea38:	d900      	bls.n	800ea3c <__ssputs_r+0x70>
 800ea3a:	463e      	mov	r6, r7
 800ea3c:	6820      	ldr	r0, [r4, #0]
 800ea3e:	4632      	mov	r2, r6
 800ea40:	4641      	mov	r1, r8
 800ea42:	f000 faab 	bl	800ef9c <memmove>
 800ea46:	68a3      	ldr	r3, [r4, #8]
 800ea48:	1b9b      	subs	r3, r3, r6
 800ea4a:	60a3      	str	r3, [r4, #8]
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	4433      	add	r3, r6
 800ea50:	6023      	str	r3, [r4, #0]
 800ea52:	2000      	movs	r0, #0
 800ea54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea58:	462a      	mov	r2, r5
 800ea5a:	f000 fac7 	bl	800efec <_realloc_r>
 800ea5e:	4606      	mov	r6, r0
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d1e0      	bne.n	800ea26 <__ssputs_r+0x5a>
 800ea64:	6921      	ldr	r1, [r4, #16]
 800ea66:	4650      	mov	r0, sl
 800ea68:	f7ff ff64 	bl	800e934 <_free_r>
 800ea6c:	230c      	movs	r3, #12
 800ea6e:	f8ca 3000 	str.w	r3, [sl]
 800ea72:	89a3      	ldrh	r3, [r4, #12]
 800ea74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea78:	81a3      	strh	r3, [r4, #12]
 800ea7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7e:	e7e9      	b.n	800ea54 <__ssputs_r+0x88>

0800ea80 <_svfiprintf_r>:
 800ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea84:	4698      	mov	r8, r3
 800ea86:	898b      	ldrh	r3, [r1, #12]
 800ea88:	061b      	lsls	r3, r3, #24
 800ea8a:	b09d      	sub	sp, #116	; 0x74
 800ea8c:	4607      	mov	r7, r0
 800ea8e:	460d      	mov	r5, r1
 800ea90:	4614      	mov	r4, r2
 800ea92:	d50e      	bpl.n	800eab2 <_svfiprintf_r+0x32>
 800ea94:	690b      	ldr	r3, [r1, #16]
 800ea96:	b963      	cbnz	r3, 800eab2 <_svfiprintf_r+0x32>
 800ea98:	2140      	movs	r1, #64	; 0x40
 800ea9a:	f7ff fe37 	bl	800e70c <_malloc_r>
 800ea9e:	6028      	str	r0, [r5, #0]
 800eaa0:	6128      	str	r0, [r5, #16]
 800eaa2:	b920      	cbnz	r0, 800eaae <_svfiprintf_r+0x2e>
 800eaa4:	230c      	movs	r3, #12
 800eaa6:	603b      	str	r3, [r7, #0]
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	e0d0      	b.n	800ec50 <_svfiprintf_r+0x1d0>
 800eaae:	2340      	movs	r3, #64	; 0x40
 800eab0:	616b      	str	r3, [r5, #20]
 800eab2:	2300      	movs	r3, #0
 800eab4:	9309      	str	r3, [sp, #36]	; 0x24
 800eab6:	2320      	movs	r3, #32
 800eab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eac0:	2330      	movs	r3, #48	; 0x30
 800eac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ec68 <_svfiprintf_r+0x1e8>
 800eac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaca:	f04f 0901 	mov.w	r9, #1
 800eace:	4623      	mov	r3, r4
 800ead0:	469a      	mov	sl, r3
 800ead2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ead6:	b10a      	cbz	r2, 800eadc <_svfiprintf_r+0x5c>
 800ead8:	2a25      	cmp	r2, #37	; 0x25
 800eada:	d1f9      	bne.n	800ead0 <_svfiprintf_r+0x50>
 800eadc:	ebba 0b04 	subs.w	fp, sl, r4
 800eae0:	d00b      	beq.n	800eafa <_svfiprintf_r+0x7a>
 800eae2:	465b      	mov	r3, fp
 800eae4:	4622      	mov	r2, r4
 800eae6:	4629      	mov	r1, r5
 800eae8:	4638      	mov	r0, r7
 800eaea:	f7ff ff6f 	bl	800e9cc <__ssputs_r>
 800eaee:	3001      	adds	r0, #1
 800eaf0:	f000 80a9 	beq.w	800ec46 <_svfiprintf_r+0x1c6>
 800eaf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf6:	445a      	add	r2, fp
 800eaf8:	9209      	str	r2, [sp, #36]	; 0x24
 800eafa:	f89a 3000 	ldrb.w	r3, [sl]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f000 80a1 	beq.w	800ec46 <_svfiprintf_r+0x1c6>
 800eb04:	2300      	movs	r3, #0
 800eb06:	f04f 32ff 	mov.w	r2, #4294967295
 800eb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb0e:	f10a 0a01 	add.w	sl, sl, #1
 800eb12:	9304      	str	r3, [sp, #16]
 800eb14:	9307      	str	r3, [sp, #28]
 800eb16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb1a:	931a      	str	r3, [sp, #104]	; 0x68
 800eb1c:	4654      	mov	r4, sl
 800eb1e:	2205      	movs	r2, #5
 800eb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb24:	4850      	ldr	r0, [pc, #320]	; (800ec68 <_svfiprintf_r+0x1e8>)
 800eb26:	f7f1 fb83 	bl	8000230 <memchr>
 800eb2a:	9a04      	ldr	r2, [sp, #16]
 800eb2c:	b9d8      	cbnz	r0, 800eb66 <_svfiprintf_r+0xe6>
 800eb2e:	06d0      	lsls	r0, r2, #27
 800eb30:	bf44      	itt	mi
 800eb32:	2320      	movmi	r3, #32
 800eb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb38:	0711      	lsls	r1, r2, #28
 800eb3a:	bf44      	itt	mi
 800eb3c:	232b      	movmi	r3, #43	; 0x2b
 800eb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb42:	f89a 3000 	ldrb.w	r3, [sl]
 800eb46:	2b2a      	cmp	r3, #42	; 0x2a
 800eb48:	d015      	beq.n	800eb76 <_svfiprintf_r+0xf6>
 800eb4a:	9a07      	ldr	r2, [sp, #28]
 800eb4c:	4654      	mov	r4, sl
 800eb4e:	2000      	movs	r0, #0
 800eb50:	f04f 0c0a 	mov.w	ip, #10
 800eb54:	4621      	mov	r1, r4
 800eb56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb5a:	3b30      	subs	r3, #48	; 0x30
 800eb5c:	2b09      	cmp	r3, #9
 800eb5e:	d94d      	bls.n	800ebfc <_svfiprintf_r+0x17c>
 800eb60:	b1b0      	cbz	r0, 800eb90 <_svfiprintf_r+0x110>
 800eb62:	9207      	str	r2, [sp, #28]
 800eb64:	e014      	b.n	800eb90 <_svfiprintf_r+0x110>
 800eb66:	eba0 0308 	sub.w	r3, r0, r8
 800eb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	9304      	str	r3, [sp, #16]
 800eb72:	46a2      	mov	sl, r4
 800eb74:	e7d2      	b.n	800eb1c <_svfiprintf_r+0x9c>
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	1d19      	adds	r1, r3, #4
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	9103      	str	r1, [sp, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	bfbb      	ittet	lt
 800eb82:	425b      	neglt	r3, r3
 800eb84:	f042 0202 	orrlt.w	r2, r2, #2
 800eb88:	9307      	strge	r3, [sp, #28]
 800eb8a:	9307      	strlt	r3, [sp, #28]
 800eb8c:	bfb8      	it	lt
 800eb8e:	9204      	strlt	r2, [sp, #16]
 800eb90:	7823      	ldrb	r3, [r4, #0]
 800eb92:	2b2e      	cmp	r3, #46	; 0x2e
 800eb94:	d10c      	bne.n	800ebb0 <_svfiprintf_r+0x130>
 800eb96:	7863      	ldrb	r3, [r4, #1]
 800eb98:	2b2a      	cmp	r3, #42	; 0x2a
 800eb9a:	d134      	bne.n	800ec06 <_svfiprintf_r+0x186>
 800eb9c:	9b03      	ldr	r3, [sp, #12]
 800eb9e:	1d1a      	adds	r2, r3, #4
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	9203      	str	r2, [sp, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bfb8      	it	lt
 800eba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebac:	3402      	adds	r4, #2
 800ebae:	9305      	str	r3, [sp, #20]
 800ebb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ec78 <_svfiprintf_r+0x1f8>
 800ebb4:	7821      	ldrb	r1, [r4, #0]
 800ebb6:	2203      	movs	r2, #3
 800ebb8:	4650      	mov	r0, sl
 800ebba:	f7f1 fb39 	bl	8000230 <memchr>
 800ebbe:	b138      	cbz	r0, 800ebd0 <_svfiprintf_r+0x150>
 800ebc0:	9b04      	ldr	r3, [sp, #16]
 800ebc2:	eba0 000a 	sub.w	r0, r0, sl
 800ebc6:	2240      	movs	r2, #64	; 0x40
 800ebc8:	4082      	lsls	r2, r0
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	3401      	adds	r4, #1
 800ebce:	9304      	str	r3, [sp, #16]
 800ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd4:	4825      	ldr	r0, [pc, #148]	; (800ec6c <_svfiprintf_r+0x1ec>)
 800ebd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebda:	2206      	movs	r2, #6
 800ebdc:	f7f1 fb28 	bl	8000230 <memchr>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d038      	beq.n	800ec56 <_svfiprintf_r+0x1d6>
 800ebe4:	4b22      	ldr	r3, [pc, #136]	; (800ec70 <_svfiprintf_r+0x1f0>)
 800ebe6:	bb1b      	cbnz	r3, 800ec30 <_svfiprintf_r+0x1b0>
 800ebe8:	9b03      	ldr	r3, [sp, #12]
 800ebea:	3307      	adds	r3, #7
 800ebec:	f023 0307 	bic.w	r3, r3, #7
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	9303      	str	r3, [sp, #12]
 800ebf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf6:	4433      	add	r3, r6
 800ebf8:	9309      	str	r3, [sp, #36]	; 0x24
 800ebfa:	e768      	b.n	800eace <_svfiprintf_r+0x4e>
 800ebfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec00:	460c      	mov	r4, r1
 800ec02:	2001      	movs	r0, #1
 800ec04:	e7a6      	b.n	800eb54 <_svfiprintf_r+0xd4>
 800ec06:	2300      	movs	r3, #0
 800ec08:	3401      	adds	r4, #1
 800ec0a:	9305      	str	r3, [sp, #20]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	f04f 0c0a 	mov.w	ip, #10
 800ec12:	4620      	mov	r0, r4
 800ec14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec18:	3a30      	subs	r2, #48	; 0x30
 800ec1a:	2a09      	cmp	r2, #9
 800ec1c:	d903      	bls.n	800ec26 <_svfiprintf_r+0x1a6>
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0c6      	beq.n	800ebb0 <_svfiprintf_r+0x130>
 800ec22:	9105      	str	r1, [sp, #20]
 800ec24:	e7c4      	b.n	800ebb0 <_svfiprintf_r+0x130>
 800ec26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e7f0      	b.n	800ec12 <_svfiprintf_r+0x192>
 800ec30:	ab03      	add	r3, sp, #12
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	462a      	mov	r2, r5
 800ec36:	4b0f      	ldr	r3, [pc, #60]	; (800ec74 <_svfiprintf_r+0x1f4>)
 800ec38:	a904      	add	r1, sp, #16
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f3af 8000 	nop.w
 800ec40:	1c42      	adds	r2, r0, #1
 800ec42:	4606      	mov	r6, r0
 800ec44:	d1d6      	bne.n	800ebf4 <_svfiprintf_r+0x174>
 800ec46:	89ab      	ldrh	r3, [r5, #12]
 800ec48:	065b      	lsls	r3, r3, #25
 800ec4a:	f53f af2d 	bmi.w	800eaa8 <_svfiprintf_r+0x28>
 800ec4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec50:	b01d      	add	sp, #116	; 0x74
 800ec52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec56:	ab03      	add	r3, sp, #12
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	462a      	mov	r2, r5
 800ec5c:	4b05      	ldr	r3, [pc, #20]	; (800ec74 <_svfiprintf_r+0x1f4>)
 800ec5e:	a904      	add	r1, sp, #16
 800ec60:	4638      	mov	r0, r7
 800ec62:	f000 f879 	bl	800ed58 <_printf_i>
 800ec66:	e7eb      	b.n	800ec40 <_svfiprintf_r+0x1c0>
 800ec68:	0800f65d 	.word	0x0800f65d
 800ec6c:	0800f667 	.word	0x0800f667
 800ec70:	00000000 	.word	0x00000000
 800ec74:	0800e9cd 	.word	0x0800e9cd
 800ec78:	0800f663 	.word	0x0800f663

0800ec7c <_printf_common>:
 800ec7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec80:	4616      	mov	r6, r2
 800ec82:	4699      	mov	r9, r3
 800ec84:	688a      	ldr	r2, [r1, #8]
 800ec86:	690b      	ldr	r3, [r1, #16]
 800ec88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	bfb8      	it	lt
 800ec90:	4613      	movlt	r3, r2
 800ec92:	6033      	str	r3, [r6, #0]
 800ec94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec98:	4607      	mov	r7, r0
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	b10a      	cbz	r2, 800eca2 <_printf_common+0x26>
 800ec9e:	3301      	adds	r3, #1
 800eca0:	6033      	str	r3, [r6, #0]
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	0699      	lsls	r1, r3, #26
 800eca6:	bf42      	ittt	mi
 800eca8:	6833      	ldrmi	r3, [r6, #0]
 800ecaa:	3302      	addmi	r3, #2
 800ecac:	6033      	strmi	r3, [r6, #0]
 800ecae:	6825      	ldr	r5, [r4, #0]
 800ecb0:	f015 0506 	ands.w	r5, r5, #6
 800ecb4:	d106      	bne.n	800ecc4 <_printf_common+0x48>
 800ecb6:	f104 0a19 	add.w	sl, r4, #25
 800ecba:	68e3      	ldr	r3, [r4, #12]
 800ecbc:	6832      	ldr	r2, [r6, #0]
 800ecbe:	1a9b      	subs	r3, r3, r2
 800ecc0:	42ab      	cmp	r3, r5
 800ecc2:	dc26      	bgt.n	800ed12 <_printf_common+0x96>
 800ecc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecc8:	1e13      	subs	r3, r2, #0
 800ecca:	6822      	ldr	r2, [r4, #0]
 800eccc:	bf18      	it	ne
 800ecce:	2301      	movne	r3, #1
 800ecd0:	0692      	lsls	r2, r2, #26
 800ecd2:	d42b      	bmi.n	800ed2c <_printf_common+0xb0>
 800ecd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecd8:	4649      	mov	r1, r9
 800ecda:	4638      	mov	r0, r7
 800ecdc:	47c0      	blx	r8
 800ecde:	3001      	adds	r0, #1
 800ece0:	d01e      	beq.n	800ed20 <_printf_common+0xa4>
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	6922      	ldr	r2, [r4, #16]
 800ece6:	f003 0306 	and.w	r3, r3, #6
 800ecea:	2b04      	cmp	r3, #4
 800ecec:	bf02      	ittt	eq
 800ecee:	68e5      	ldreq	r5, [r4, #12]
 800ecf0:	6833      	ldreq	r3, [r6, #0]
 800ecf2:	1aed      	subeq	r5, r5, r3
 800ecf4:	68a3      	ldr	r3, [r4, #8]
 800ecf6:	bf0c      	ite	eq
 800ecf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecfc:	2500      	movne	r5, #0
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	bfc4      	itt	gt
 800ed02:	1a9b      	subgt	r3, r3, r2
 800ed04:	18ed      	addgt	r5, r5, r3
 800ed06:	2600      	movs	r6, #0
 800ed08:	341a      	adds	r4, #26
 800ed0a:	42b5      	cmp	r5, r6
 800ed0c:	d11a      	bne.n	800ed44 <_printf_common+0xc8>
 800ed0e:	2000      	movs	r0, #0
 800ed10:	e008      	b.n	800ed24 <_printf_common+0xa8>
 800ed12:	2301      	movs	r3, #1
 800ed14:	4652      	mov	r2, sl
 800ed16:	4649      	mov	r1, r9
 800ed18:	4638      	mov	r0, r7
 800ed1a:	47c0      	blx	r8
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	d103      	bne.n	800ed28 <_printf_common+0xac>
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed28:	3501      	adds	r5, #1
 800ed2a:	e7c6      	b.n	800ecba <_printf_common+0x3e>
 800ed2c:	18e1      	adds	r1, r4, r3
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	2030      	movs	r0, #48	; 0x30
 800ed32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed36:	4422      	add	r2, r4
 800ed38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed40:	3302      	adds	r3, #2
 800ed42:	e7c7      	b.n	800ecd4 <_printf_common+0x58>
 800ed44:	2301      	movs	r3, #1
 800ed46:	4622      	mov	r2, r4
 800ed48:	4649      	mov	r1, r9
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	47c0      	blx	r8
 800ed4e:	3001      	adds	r0, #1
 800ed50:	d0e6      	beq.n	800ed20 <_printf_common+0xa4>
 800ed52:	3601      	adds	r6, #1
 800ed54:	e7d9      	b.n	800ed0a <_printf_common+0x8e>
	...

0800ed58 <_printf_i>:
 800ed58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed5c:	7e0f      	ldrb	r7, [r1, #24]
 800ed5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed60:	2f78      	cmp	r7, #120	; 0x78
 800ed62:	4691      	mov	r9, r2
 800ed64:	4680      	mov	r8, r0
 800ed66:	460c      	mov	r4, r1
 800ed68:	469a      	mov	sl, r3
 800ed6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed6e:	d807      	bhi.n	800ed80 <_printf_i+0x28>
 800ed70:	2f62      	cmp	r7, #98	; 0x62
 800ed72:	d80a      	bhi.n	800ed8a <_printf_i+0x32>
 800ed74:	2f00      	cmp	r7, #0
 800ed76:	f000 80d4 	beq.w	800ef22 <_printf_i+0x1ca>
 800ed7a:	2f58      	cmp	r7, #88	; 0x58
 800ed7c:	f000 80c0 	beq.w	800ef00 <_printf_i+0x1a8>
 800ed80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed88:	e03a      	b.n	800ee00 <_printf_i+0xa8>
 800ed8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed8e:	2b15      	cmp	r3, #21
 800ed90:	d8f6      	bhi.n	800ed80 <_printf_i+0x28>
 800ed92:	a101      	add	r1, pc, #4	; (adr r1, 800ed98 <_printf_i+0x40>)
 800ed94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed98:	0800edf1 	.word	0x0800edf1
 800ed9c:	0800ee05 	.word	0x0800ee05
 800eda0:	0800ed81 	.word	0x0800ed81
 800eda4:	0800ed81 	.word	0x0800ed81
 800eda8:	0800ed81 	.word	0x0800ed81
 800edac:	0800ed81 	.word	0x0800ed81
 800edb0:	0800ee05 	.word	0x0800ee05
 800edb4:	0800ed81 	.word	0x0800ed81
 800edb8:	0800ed81 	.word	0x0800ed81
 800edbc:	0800ed81 	.word	0x0800ed81
 800edc0:	0800ed81 	.word	0x0800ed81
 800edc4:	0800ef09 	.word	0x0800ef09
 800edc8:	0800ee31 	.word	0x0800ee31
 800edcc:	0800eec3 	.word	0x0800eec3
 800edd0:	0800ed81 	.word	0x0800ed81
 800edd4:	0800ed81 	.word	0x0800ed81
 800edd8:	0800ef2b 	.word	0x0800ef2b
 800eddc:	0800ed81 	.word	0x0800ed81
 800ede0:	0800ee31 	.word	0x0800ee31
 800ede4:	0800ed81 	.word	0x0800ed81
 800ede8:	0800ed81 	.word	0x0800ed81
 800edec:	0800eecb 	.word	0x0800eecb
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	1d1a      	adds	r2, r3, #4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	602a      	str	r2, [r5, #0]
 800edf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee00:	2301      	movs	r3, #1
 800ee02:	e09f      	b.n	800ef44 <_printf_i+0x1ec>
 800ee04:	6820      	ldr	r0, [r4, #0]
 800ee06:	682b      	ldr	r3, [r5, #0]
 800ee08:	0607      	lsls	r7, r0, #24
 800ee0a:	f103 0104 	add.w	r1, r3, #4
 800ee0e:	6029      	str	r1, [r5, #0]
 800ee10:	d501      	bpl.n	800ee16 <_printf_i+0xbe>
 800ee12:	681e      	ldr	r6, [r3, #0]
 800ee14:	e003      	b.n	800ee1e <_printf_i+0xc6>
 800ee16:	0646      	lsls	r6, r0, #25
 800ee18:	d5fb      	bpl.n	800ee12 <_printf_i+0xba>
 800ee1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ee1e:	2e00      	cmp	r6, #0
 800ee20:	da03      	bge.n	800ee2a <_printf_i+0xd2>
 800ee22:	232d      	movs	r3, #45	; 0x2d
 800ee24:	4276      	negs	r6, r6
 800ee26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee2a:	485a      	ldr	r0, [pc, #360]	; (800ef94 <_printf_i+0x23c>)
 800ee2c:	230a      	movs	r3, #10
 800ee2e:	e012      	b.n	800ee56 <_printf_i+0xfe>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	6820      	ldr	r0, [r4, #0]
 800ee34:	1d19      	adds	r1, r3, #4
 800ee36:	6029      	str	r1, [r5, #0]
 800ee38:	0605      	lsls	r5, r0, #24
 800ee3a:	d501      	bpl.n	800ee40 <_printf_i+0xe8>
 800ee3c:	681e      	ldr	r6, [r3, #0]
 800ee3e:	e002      	b.n	800ee46 <_printf_i+0xee>
 800ee40:	0641      	lsls	r1, r0, #25
 800ee42:	d5fb      	bpl.n	800ee3c <_printf_i+0xe4>
 800ee44:	881e      	ldrh	r6, [r3, #0]
 800ee46:	4853      	ldr	r0, [pc, #332]	; (800ef94 <_printf_i+0x23c>)
 800ee48:	2f6f      	cmp	r7, #111	; 0x6f
 800ee4a:	bf0c      	ite	eq
 800ee4c:	2308      	moveq	r3, #8
 800ee4e:	230a      	movne	r3, #10
 800ee50:	2100      	movs	r1, #0
 800ee52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee56:	6865      	ldr	r5, [r4, #4]
 800ee58:	60a5      	str	r5, [r4, #8]
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	bfa2      	ittt	ge
 800ee5e:	6821      	ldrge	r1, [r4, #0]
 800ee60:	f021 0104 	bicge.w	r1, r1, #4
 800ee64:	6021      	strge	r1, [r4, #0]
 800ee66:	b90e      	cbnz	r6, 800ee6c <_printf_i+0x114>
 800ee68:	2d00      	cmp	r5, #0
 800ee6a:	d04b      	beq.n	800ef04 <_printf_i+0x1ac>
 800ee6c:	4615      	mov	r5, r2
 800ee6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee72:	fb03 6711 	mls	r7, r3, r1, r6
 800ee76:	5dc7      	ldrb	r7, [r0, r7]
 800ee78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee7c:	4637      	mov	r7, r6
 800ee7e:	42bb      	cmp	r3, r7
 800ee80:	460e      	mov	r6, r1
 800ee82:	d9f4      	bls.n	800ee6e <_printf_i+0x116>
 800ee84:	2b08      	cmp	r3, #8
 800ee86:	d10b      	bne.n	800eea0 <_printf_i+0x148>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	07de      	lsls	r6, r3, #31
 800ee8c:	d508      	bpl.n	800eea0 <_printf_i+0x148>
 800ee8e:	6923      	ldr	r3, [r4, #16]
 800ee90:	6861      	ldr	r1, [r4, #4]
 800ee92:	4299      	cmp	r1, r3
 800ee94:	bfde      	ittt	le
 800ee96:	2330      	movle	r3, #48	; 0x30
 800ee98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eea0:	1b52      	subs	r2, r2, r5
 800eea2:	6122      	str	r2, [r4, #16]
 800eea4:	f8cd a000 	str.w	sl, [sp]
 800eea8:	464b      	mov	r3, r9
 800eeaa:	aa03      	add	r2, sp, #12
 800eeac:	4621      	mov	r1, r4
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f7ff fee4 	bl	800ec7c <_printf_common>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d14a      	bne.n	800ef4e <_printf_i+0x1f6>
 800eeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800eebc:	b004      	add	sp, #16
 800eebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	f043 0320 	orr.w	r3, r3, #32
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	4833      	ldr	r0, [pc, #204]	; (800ef98 <_printf_i+0x240>)
 800eecc:	2778      	movs	r7, #120	; 0x78
 800eece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	6829      	ldr	r1, [r5, #0]
 800eed6:	061f      	lsls	r7, r3, #24
 800eed8:	f851 6b04 	ldr.w	r6, [r1], #4
 800eedc:	d402      	bmi.n	800eee4 <_printf_i+0x18c>
 800eede:	065f      	lsls	r7, r3, #25
 800eee0:	bf48      	it	mi
 800eee2:	b2b6      	uxthmi	r6, r6
 800eee4:	07df      	lsls	r7, r3, #31
 800eee6:	bf48      	it	mi
 800eee8:	f043 0320 	orrmi.w	r3, r3, #32
 800eeec:	6029      	str	r1, [r5, #0]
 800eeee:	bf48      	it	mi
 800eef0:	6023      	strmi	r3, [r4, #0]
 800eef2:	b91e      	cbnz	r6, 800eefc <_printf_i+0x1a4>
 800eef4:	6823      	ldr	r3, [r4, #0]
 800eef6:	f023 0320 	bic.w	r3, r3, #32
 800eefa:	6023      	str	r3, [r4, #0]
 800eefc:	2310      	movs	r3, #16
 800eefe:	e7a7      	b.n	800ee50 <_printf_i+0xf8>
 800ef00:	4824      	ldr	r0, [pc, #144]	; (800ef94 <_printf_i+0x23c>)
 800ef02:	e7e4      	b.n	800eece <_printf_i+0x176>
 800ef04:	4615      	mov	r5, r2
 800ef06:	e7bd      	b.n	800ee84 <_printf_i+0x12c>
 800ef08:	682b      	ldr	r3, [r5, #0]
 800ef0a:	6826      	ldr	r6, [r4, #0]
 800ef0c:	6961      	ldr	r1, [r4, #20]
 800ef0e:	1d18      	adds	r0, r3, #4
 800ef10:	6028      	str	r0, [r5, #0]
 800ef12:	0635      	lsls	r5, r6, #24
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	d501      	bpl.n	800ef1c <_printf_i+0x1c4>
 800ef18:	6019      	str	r1, [r3, #0]
 800ef1a:	e002      	b.n	800ef22 <_printf_i+0x1ca>
 800ef1c:	0670      	lsls	r0, r6, #25
 800ef1e:	d5fb      	bpl.n	800ef18 <_printf_i+0x1c0>
 800ef20:	8019      	strh	r1, [r3, #0]
 800ef22:	2300      	movs	r3, #0
 800ef24:	6123      	str	r3, [r4, #16]
 800ef26:	4615      	mov	r5, r2
 800ef28:	e7bc      	b.n	800eea4 <_printf_i+0x14c>
 800ef2a:	682b      	ldr	r3, [r5, #0]
 800ef2c:	1d1a      	adds	r2, r3, #4
 800ef2e:	602a      	str	r2, [r5, #0]
 800ef30:	681d      	ldr	r5, [r3, #0]
 800ef32:	6862      	ldr	r2, [r4, #4]
 800ef34:	2100      	movs	r1, #0
 800ef36:	4628      	mov	r0, r5
 800ef38:	f7f1 f97a 	bl	8000230 <memchr>
 800ef3c:	b108      	cbz	r0, 800ef42 <_printf_i+0x1ea>
 800ef3e:	1b40      	subs	r0, r0, r5
 800ef40:	6060      	str	r0, [r4, #4]
 800ef42:	6863      	ldr	r3, [r4, #4]
 800ef44:	6123      	str	r3, [r4, #16]
 800ef46:	2300      	movs	r3, #0
 800ef48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef4c:	e7aa      	b.n	800eea4 <_printf_i+0x14c>
 800ef4e:	6923      	ldr	r3, [r4, #16]
 800ef50:	462a      	mov	r2, r5
 800ef52:	4649      	mov	r1, r9
 800ef54:	4640      	mov	r0, r8
 800ef56:	47d0      	blx	sl
 800ef58:	3001      	adds	r0, #1
 800ef5a:	d0ad      	beq.n	800eeb8 <_printf_i+0x160>
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	079b      	lsls	r3, r3, #30
 800ef60:	d413      	bmi.n	800ef8a <_printf_i+0x232>
 800ef62:	68e0      	ldr	r0, [r4, #12]
 800ef64:	9b03      	ldr	r3, [sp, #12]
 800ef66:	4298      	cmp	r0, r3
 800ef68:	bfb8      	it	lt
 800ef6a:	4618      	movlt	r0, r3
 800ef6c:	e7a6      	b.n	800eebc <_printf_i+0x164>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	4632      	mov	r2, r6
 800ef72:	4649      	mov	r1, r9
 800ef74:	4640      	mov	r0, r8
 800ef76:	47d0      	blx	sl
 800ef78:	3001      	adds	r0, #1
 800ef7a:	d09d      	beq.n	800eeb8 <_printf_i+0x160>
 800ef7c:	3501      	adds	r5, #1
 800ef7e:	68e3      	ldr	r3, [r4, #12]
 800ef80:	9903      	ldr	r1, [sp, #12]
 800ef82:	1a5b      	subs	r3, r3, r1
 800ef84:	42ab      	cmp	r3, r5
 800ef86:	dcf2      	bgt.n	800ef6e <_printf_i+0x216>
 800ef88:	e7eb      	b.n	800ef62 <_printf_i+0x20a>
 800ef8a:	2500      	movs	r5, #0
 800ef8c:	f104 0619 	add.w	r6, r4, #25
 800ef90:	e7f5      	b.n	800ef7e <_printf_i+0x226>
 800ef92:	bf00      	nop
 800ef94:	0800f66e 	.word	0x0800f66e
 800ef98:	0800f67f 	.word	0x0800f67f

0800ef9c <memmove>:
 800ef9c:	4288      	cmp	r0, r1
 800ef9e:	b510      	push	{r4, lr}
 800efa0:	eb01 0402 	add.w	r4, r1, r2
 800efa4:	d902      	bls.n	800efac <memmove+0x10>
 800efa6:	4284      	cmp	r4, r0
 800efa8:	4623      	mov	r3, r4
 800efaa:	d807      	bhi.n	800efbc <memmove+0x20>
 800efac:	1e43      	subs	r3, r0, #1
 800efae:	42a1      	cmp	r1, r4
 800efb0:	d008      	beq.n	800efc4 <memmove+0x28>
 800efb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efba:	e7f8      	b.n	800efae <memmove+0x12>
 800efbc:	4402      	add	r2, r0
 800efbe:	4601      	mov	r1, r0
 800efc0:	428a      	cmp	r2, r1
 800efc2:	d100      	bne.n	800efc6 <memmove+0x2a>
 800efc4:	bd10      	pop	{r4, pc}
 800efc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efce:	e7f7      	b.n	800efc0 <memmove+0x24>

0800efd0 <memcpy>:
 800efd0:	440a      	add	r2, r1
 800efd2:	4291      	cmp	r1, r2
 800efd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800efd8:	d100      	bne.n	800efdc <memcpy+0xc>
 800efda:	4770      	bx	lr
 800efdc:	b510      	push	{r4, lr}
 800efde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efe6:	4291      	cmp	r1, r2
 800efe8:	d1f9      	bne.n	800efde <memcpy+0xe>
 800efea:	bd10      	pop	{r4, pc}

0800efec <_realloc_r>:
 800efec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff0:	4680      	mov	r8, r0
 800eff2:	4614      	mov	r4, r2
 800eff4:	460e      	mov	r6, r1
 800eff6:	b921      	cbnz	r1, 800f002 <_realloc_r+0x16>
 800eff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800effc:	4611      	mov	r1, r2
 800effe:	f7ff bb85 	b.w	800e70c <_malloc_r>
 800f002:	b92a      	cbnz	r2, 800f010 <_realloc_r+0x24>
 800f004:	f7ff fc96 	bl	800e934 <_free_r>
 800f008:	4625      	mov	r5, r4
 800f00a:	4628      	mov	r0, r5
 800f00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f010:	f000 f81b 	bl	800f04a <_malloc_usable_size_r>
 800f014:	4284      	cmp	r4, r0
 800f016:	4607      	mov	r7, r0
 800f018:	d802      	bhi.n	800f020 <_realloc_r+0x34>
 800f01a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f01e:	d812      	bhi.n	800f046 <_realloc_r+0x5a>
 800f020:	4621      	mov	r1, r4
 800f022:	4640      	mov	r0, r8
 800f024:	f7ff fb72 	bl	800e70c <_malloc_r>
 800f028:	4605      	mov	r5, r0
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d0ed      	beq.n	800f00a <_realloc_r+0x1e>
 800f02e:	42bc      	cmp	r4, r7
 800f030:	4622      	mov	r2, r4
 800f032:	4631      	mov	r1, r6
 800f034:	bf28      	it	cs
 800f036:	463a      	movcs	r2, r7
 800f038:	f7ff ffca 	bl	800efd0 <memcpy>
 800f03c:	4631      	mov	r1, r6
 800f03e:	4640      	mov	r0, r8
 800f040:	f7ff fc78 	bl	800e934 <_free_r>
 800f044:	e7e1      	b.n	800f00a <_realloc_r+0x1e>
 800f046:	4635      	mov	r5, r6
 800f048:	e7df      	b.n	800f00a <_realloc_r+0x1e>

0800f04a <_malloc_usable_size_r>:
 800f04a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f04e:	1f18      	subs	r0, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	bfbc      	itt	lt
 800f054:	580b      	ldrlt	r3, [r1, r0]
 800f056:	18c0      	addlt	r0, r0, r3
 800f058:	4770      	bx	lr
	...

0800f05c <_init>:
 800f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05e:	bf00      	nop
 800f060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f062:	bc08      	pop	{r3}
 800f064:	469e      	mov	lr, r3
 800f066:	4770      	bx	lr

0800f068 <_fini>:
 800f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f06a:	bf00      	nop
 800f06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f06e:	bc08      	pop	{r3}
 800f070:	469e      	mov	lr, r3
 800f072:	4770      	bx	lr
