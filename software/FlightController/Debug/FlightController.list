
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac64  0800ac64  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac64  0800ac64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac6c  0800ac6c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac6c  0800ac6c  0001ac6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800ac74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  2000015c  0800add0  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002240  0800add0  00022240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019598  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003955  00000000  00000000  00039767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9c  00000000  00000000  0003e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b1e  00000000  00000000  0003f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1b8  00000000  00000000  00064fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de17a  00000000  00000000  0008117a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a00  00000000  00000000  0015f2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00164cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aa74 	.word	0x0800aa74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	0800aa74 	.word	0x0800aa74

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <bmp280_read_id_register>:


// BMP280 is SPI1 in the schematic, but CubeIDE has pin33 marked as SPI2
// So, SPI1 means SPI2 here
void bmp280_read_id_register()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af02      	add	r7, sp, #8
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//  HAL_SPI_Transmit(&hspi1, (uint8_t *)BMP280_ID_REG, 1, 100);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  // Read ID register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <bmp280_read_id_register+0x58>)
 80005ca:	f001 feaf 	bl	800232c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)BMP280_ID_REG, spi_buf, 1, 100);
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <bmp280_read_id_register+0x5c>)
 80005d6:	21d0      	movs	r1, #208	; 0xd0
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <bmp280_read_id_register+0x60>)
 80005da:	f004 fb7a 	bl	8004cd2 <HAL_SPI_TransmitReceive>
//  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <bmp280_read_id_register+0x58>)
 80005e6:	f001 fea1 	bl	800232c <HAL_GPIO_WritePin>

  // print out status register, should be 0x58
  uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X\r\n", (unsigned int)spi_buf[0]);
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <bmp280_read_id_register+0x5c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	490b      	ldr	r1, [pc, #44]	; (8000620 <bmp280_read_id_register+0x64>)
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <bmp280_read_id_register+0x68>)
 80005f4:	f009 fe46 	bl	800a284 <siprintf>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <bmp280_read_id_register+0x6c>)
 80005fc:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS(uart_buf, uart_buf_len);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <bmp280_read_id_register+0x6c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	b29b      	uxth	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <bmp280_read_id_register+0x68>)
 8000608:	f009 f8aa 	bl	8009760 <CDC_Transmit_FS>
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020400 	.word	0x40020400
 8000618:	200006f0 	.word	0x200006f0
 800061c:	200002c0 	.word	0x200002c0
 8000620:	0800aa8c 	.word	0x0800aa8c
 8000624:	200006b8 	.word	0x200006b8
 8000628:	200006ec 	.word	0x200006ec

0800062c <bmi270_read_id_register>:



void bmi270_read_id_register()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af02      	add	r7, sp, #8
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//  HAL_SPI_Transmit(&hspi1, (uint8_t *)BMP280_ID_REG, 1, 100);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  // Read ID register
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2110      	movs	r1, #16
 8000636:	4812      	ldr	r0, [pc, #72]	; (8000680 <bmi270_read_id_register+0x54>)
 8000638:	f001 fe78 	bl	800232c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)BMI270_ID_REG, spi_buf, 1, 100);
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <bmi270_read_id_register+0x58>)
 8000644:	2100      	movs	r1, #0
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <bmi270_read_id_register+0x5c>)
 8000648:	f004 fb43 	bl	8004cd2 <HAL_SPI_TransmitReceive>
//  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2110      	movs	r1, #16
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <bmi270_read_id_register+0x54>)
 8000652:	f001 fe6b 	bl	800232c <HAL_GPIO_WritePin>

  // print out status register, should be 0x24
  uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X\r\n", (unsigned int)spi_buf[0]);
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <bmi270_read_id_register+0x58>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	490b      	ldr	r1, [pc, #44]	; (800068c <bmi270_read_id_register+0x60>)
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <bmi270_read_id_register+0x64>)
 8000660:	f009 fe10 	bl	800a284 <siprintf>
 8000664:	4603      	mov	r3, r0
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <bmi270_read_id_register+0x68>)
 8000668:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS(uart_buf, uart_buf_len);
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <bmi270_read_id_register+0x68>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <bmi270_read_id_register+0x64>)
 8000674:	f009 f874 	bl	8009760 <CDC_Transmit_FS>
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020000 	.word	0x40020000
 8000684:	200006f0 	.word	0x200006f0
 8000688:	2000025c 	.word	0x2000025c
 800068c:	0800aaa4 	.word	0x0800aaa4
 8000690:	200006b8 	.word	0x200006b8
 8000694:	200006ec 	.word	0x200006ec

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f001 f883 	bl	80017a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f85c 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fb82 	bl	8000dac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006a8:	f008 ff78 	bl	800959c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006ac:	f000 f8c0 	bl	8000830 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006b0:	f000 f910 	bl	80008d4 <MX_ADC2_Init>
  MX_I2C1_Init();
 80006b4:	f000 f960 	bl	8000978 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006b8:	f000 f99e 	bl	80009f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006bc:	f000 fae6 	bl	8000c8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 fb14 	bl	8000cec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80006c4:	f000 fb42 	bl	8000d4c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80006c8:	f000 f9d4 	bl	8000a74 <MX_SPI2_Init>
  MX_UART4_Init();
 80006cc:	f000 fa4e 	bl	8000b6c <MX_UART4_Init>
  MX_UART5_Init();
 80006d0:	f000 fa7c 	bl	8000bcc <MX_UART5_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 faaa 	bl	8000c2c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80006d8:	f000 fa0a 	bl	8000af0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	4819      	ldr	r0, [pc, #100]	; (8000744 <main+0xac>)
 80006e0:	f001 fe3d 	bl	800235e <HAL_GPIO_TogglePin>



  // CS pin should be default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	4816      	ldr	r0, [pc, #88]	; (8000744 <main+0xac>)
 80006ec:	f001 fe1e 	bl	800232c <HAL_GPIO_WritePin>


  // Print something (probably will be too fast to connect and see?)
  uart_buf_len = sprintf(uart_buf, "STM32F7 main()\r\n");
 80006f0:	4915      	ldr	r1, [pc, #84]	; (8000748 <main+0xb0>)
 80006f2:	4816      	ldr	r0, [pc, #88]	; (800074c <main+0xb4>)
 80006f4:	f009 fdc6 	bl	800a284 <siprintf>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a15      	ldr	r2, [pc, #84]	; (8000750 <main+0xb8>)
 80006fc:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS(uart_buf, uart_buf_len);
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <main+0xb8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	b29b      	uxth	r3, r3
 8000704:	4619      	mov	r1, r3
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <main+0xb4>)
 8000708:	f009 f82a 	bl	8009760 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  if (test_enable)
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <main+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d006      	beq.n	8000722 <main+0x8a>
	  {
		  bmp280_read_id_register();
 8000714:	f7ff ff52 	bl	80005bc <bmp280_read_id_register>
		  bmi270_read_id_register();
 8000718:	f7ff ff88 	bl	800062c <bmi270_read_id_register>
		  test_enable = 0;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <main+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
	  }


	  // blink leds
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <main+0xc0>)
 8000728:	f001 fe19 	bl	800235e <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f001 f897 	bl	8001860 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <main+0xac>)
 8000736:	f001 fe12 	bl	800235e <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f001 f890 	bl	8001860 <HAL_Delay>
  	  if (test_enable)
 8000740:	e7e4      	b.n	800070c <main+0x74>
 8000742:	bf00      	nop
 8000744:	40020400 	.word	0x40020400
 8000748:	0800aabc 	.word	0x0800aabc
 800074c:	200006b8 	.word	0x200006b8
 8000750:	200006ec 	.word	0x200006ec
 8000754:	20000704 	.word	0x20000704
 8000758:	40020800 	.word	0x40020800

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f009 fdaa 	bl	800a2c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a0:	4a22      	ldr	r2, [pc, #136]	; (800082c <SystemClock_Config+0xd0>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c2:	2310      	movs	r3, #16
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f9b5 	bl	8003b54 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f0:	f000 fb7c 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fc44 	bl	800409c <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081a:	f000 fb67 	bl	8000eec <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	; 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <MX_ADC1_Init+0x9c>)
 8000846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_ADC1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC1_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ADC1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_ADC1_Init+0xa0>)
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_ADC1_Init+0x98>)
 800087c:	2201      	movs	r2, #1
 800087e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_ADC1_Init+0x98>)
 800088a:	2201      	movs	r2, #1
 800088c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000890:	f001 f80a 	bl	80018a8 <HAL_ADC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fb27 	bl	8000eec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800089e:	230b      	movs	r3, #11
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_ADC1_Init+0x98>)
 80008b0:	f001 f83e 	bl	8001930 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008ba:	f000 fb17 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000178 	.word	0x20000178
 80008cc:	40012000 	.word	0x40012000
 80008d0:	0f000001 	.word	0x0f000001

080008d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC2_Init+0x98>)
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <MX_ADC2_Init+0x9c>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC2_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_ADC2_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_ADC2_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_ADC2_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC2_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_ADC2_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_ADC2_Init+0x98>)
 8000914:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_ADC2_Init+0xa0>)
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_ADC2_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_ADC2_Init+0x98>)
 8000920:	2201      	movs	r2, #1
 8000922:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_ADC2_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_ADC2_Init+0x98>)
 800092e:	2201      	movs	r2, #1
 8000930:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <MX_ADC2_Init+0x98>)
 8000934:	f000 ffb8 	bl	80018a8 <HAL_ADC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 fad5 	bl	8000eec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000942:	230c      	movs	r3, #12
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000946:	2301      	movs	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_ADC2_Init+0x98>)
 8000954:	f000 ffec 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800095e:	f000 fac5 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001c0 	.word	0x200001c0
 8000970:	40012100 	.word	0x40012100
 8000974:	0f000001 	.word	0x0f000001

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_I2C1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_I2C1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_I2C1_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_I2C1_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <MX_I2C1_Init+0x74>)
 80009b4:	f001 fcee 	bl	8002394 <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 fa95 	bl	8000eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_I2C1_Init+0x74>)
 80009c6:	f001 fd75 	bl	80024b4 <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 fa8c 	bl	8000eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_I2C1_Init+0x74>)
 80009d8:	f001 fdb7 	bl	800254a <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fa83 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000208 	.word	0x20000208
 80009f0:	40005400 	.word	0x40005400
 80009f4:	00303d5b 	.word	0x00303d5b

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_SPI1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_SPI1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a58:	f004 f890 	bl	8004b7c <HAL_SPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fa43 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000025c 	.word	0x2000025c
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_SPI2_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000a8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_SPI2_Init+0x74>)
 8000ad4:	f004 f852 	bl	8004b7c <HAL_SPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fa05 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200002c0 	.word	0x200002c0
 8000aec:	40003800 	.word	0x40003800

08000af0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_SPI3_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_SPI3_Init+0x74>)
 8000b50:	f004 f814 	bl	8004b7c <HAL_SPI_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 f9c7 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000324 	.word	0x20000324
 8000b68:	40003c00 	.word	0x40003c00

08000b6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_UART4_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_UART4_Init+0x58>)
 8000bb0:	f004 fc2a 	bl	8005408 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 f997 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000388 	.word	0x20000388
 8000bc8:	40004c00 	.word	0x40004c00

08000bcc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_UART5_Init+0x58>)
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_UART5_Init+0x5c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_UART5_Init+0x58>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_UART5_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_UART5_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_UART5_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_UART5_Init+0x58>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_UART5_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_UART5_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_UART5_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_UART5_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_UART5_Init+0x58>)
 8000c10:	f004 fbfa 	bl	8005408 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 f967 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000410 	.word	0x20000410
 8000c28:	40005000 	.word	0x40005000

08000c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART1_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART1_UART_Init+0x58>)
 8000c70:	f004 fbca 	bl	8005408 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f937 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000498 	.word	0x20000498
 8000c88:	40011000 	.word	0x40011000

08000c8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_USART2_UART_Init+0x5c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART2_UART_Init+0x58>)
 8000cd0:	f004 fb9a 	bl	8005408 <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f907 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000520 	.word	0x20000520
 8000ce8:	40004400 	.word	0x40004400

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_USART3_UART_Init+0x5c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART3_UART_Init+0x58>)
 8000d30:	f004 fb6a 	bl	8005408 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d3a:	f000 f8d7 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200005a8 	.word	0x200005a8
 8000d48:	40004800 	.word	0x40004800

08000d4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <MX_USART6_UART_Init+0x5c>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USART6_UART_Init+0x58>)
 8000d90:	f004 fb3a 	bl	8005408 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 f8a7 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000630 	.word	0x20000630
 8000da8:	40011400 	.word	0x40011400

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b46      	ldr	r3, [pc, #280]	; (8000edc <MX_GPIO_Init+0x130>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a45      	ldr	r2, [pc, #276]	; (8000edc <MX_GPIO_Init+0x130>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b43      	ldr	r3, [pc, #268]	; (8000edc <MX_GPIO_Init+0x130>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dda:	4b40      	ldr	r3, [pc, #256]	; (8000edc <MX_GPIO_Init+0x130>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a3f      	ldr	r2, [pc, #252]	; (8000edc <MX_GPIO_Init+0x130>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <MX_GPIO_Init+0x130>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <MX_GPIO_Init+0x130>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a39      	ldr	r2, [pc, #228]	; (8000edc <MX_GPIO_Init+0x130>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a33      	ldr	r2, [pc, #204]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a2d      	ldr	r2, [pc, #180]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_GPIO_Init+0x130>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f24a 3101 	movw	r1, #41729	; 0xa301
 8000e40:	4827      	ldr	r0, [pc, #156]	; (8000ee0 <MX_GPIO_Init+0x134>)
 8000e42:	f001 fa73 	bl	800232c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000e4c:	4825      	ldr	r0, [pc, #148]	; (8000ee4 <MX_GPIO_Init+0x138>)
 8000e4e:	f001 fa6d 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000e52:	2200      	movs	r2, #0
 8000e54:	f649 41c3 	movw	r1, #40131	; 0x9cc3
 8000e58:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <MX_GPIO_Init+0x13c>)
 8000e5a:	f001 fa67 	bl	800232c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15|LED1_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 LED0_Pin PC0 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 8000e5e:	f24a 3301 	movw	r3, #41729	; 0xa301
 8000e62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <MX_GPIO_Init+0x134>)
 8000e78:	f001 f8bc 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 8000e7c:	f244 0310 	movw	r3, #16400	; 0x4010
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_GPIO_Init+0x134>)
 8000e94:	f001 f8ae 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000e98:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_GPIO_Init+0x138>)
 8000eb2:	f001 f89f 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB15 LED1_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000eb6:	f649 43c3 	movw	r3, #40131	; 0x9cc3
 8000eba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15|LED1_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_GPIO_Init+0x13c>)
 8000ed0:	f001 f890 	bl	8001ff4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x44>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_MspInit+0x44>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x44>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x44>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x44>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x44>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2a      	ldr	r2, [pc, #168]	; (8001008 <HAL_ADC_MspInit+0xc8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d124      	bne.n	8000fac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481a      	ldr	r0, [pc, #104]	; (8001010 <HAL_ADC_MspInit+0xd0>)
 8000fa6:	f001 f825 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000faa:	e028      	b.n	8000ffe <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_ADC_MspInit+0xd4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d123      	bne.n	8000ffe <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a14      	ldr	r2, [pc, #80]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_ADC_MspInit+0xcc>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_ADC_MspInit+0xd0>)
 8000ffa:	f000 fffb 	bl	8001ff4 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	; 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012000 	.word	0x40012000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40012100 	.word	0x40012100

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0aa      	sub	sp, #168	; 0xa8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f009 f943 	bl	800a2c4 <memset>
  if(hi2c->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_I2C_MspInit+0xb4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d13c      	bne.n	80010c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800104c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800104e:	2300      	movs	r3, #0
 8001050:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fa46 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001062:	f7ff ff43 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800107e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001086:	2312      	movs	r3, #18
 8001088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001098:	2304      	movs	r3, #4
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_I2C_MspInit+0xbc>)
 80010a6:	f000 ffa5 	bl	8001ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	37a8      	adds	r7, #168	; 0xa8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400

080010d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a62      	ldr	r2, [pc, #392]	; (8001280 <HAL_SPI_MspInit+0x1a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d128      	bne.n	800114c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a5b      	ldr	r2, [pc, #364]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b59      	ldr	r3, [pc, #356]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800112a:	23e0      	movs	r3, #224	; 0xe0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800113a:	2305      	movs	r3, #5
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001142:	4619      	mov	r1, r3
 8001144:	4850      	ldr	r0, [pc, #320]	; (8001288 <HAL_SPI_MspInit+0x1b0>)
 8001146:	f000 ff55 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800114a:	e094      	b.n	8001276 <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <HAL_SPI_MspInit+0x1b4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d145      	bne.n	80011e2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001156:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b48      	ldr	r3, [pc, #288]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	623b      	str	r3, [r7, #32]
 800116c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b45      	ldr	r3, [pc, #276]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a44      	ldr	r2, [pc, #272]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a3e      	ldr	r2, [pc, #248]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800119e:	2308      	movs	r3, #8
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ae:	2305      	movs	r3, #5
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4835      	ldr	r0, [pc, #212]	; (8001290 <HAL_SPI_MspInit+0x1b8>)
 80011ba:	f000 ff1b 	bl	8001ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d0:	2305      	movs	r3, #5
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	482e      	ldr	r0, [pc, #184]	; (8001294 <HAL_SPI_MspInit+0x1bc>)
 80011dc:	f000 ff0a 	bl	8001ff4 <HAL_GPIO_Init>
}
 80011e0:	e049      	b.n	8001276 <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI3)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2c      	ldr	r2, [pc, #176]	; (8001298 <HAL_SPI_MspInit+0x1c0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d144      	bne.n	8001276 <HAL_SPI_MspInit+0x19e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 80011f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a18      	ldr	r2, [pc, #96]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_SPI_MspInit+0x1ac>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001246:	2306      	movs	r3, #6
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <HAL_SPI_MspInit+0x1b0>)
 8001252:	f000 fecf 	bl	8001ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001256:	2338      	movs	r3, #56	; 0x38
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001266:	2306      	movs	r3, #6
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126e:	4619      	mov	r1, r3
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <HAL_SPI_MspInit+0x1bc>)
 8001272:	f000 febf 	bl	8001ff4 <HAL_GPIO_Init>
}
 8001276:	bf00      	nop
 8001278:	3740      	adds	r7, #64	; 0x40
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40013000 	.word	0x40013000
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000
 800128c:	40003800 	.word	0x40003800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020400 	.word	0x40020400
 8001298:	40003c00 	.word	0x40003c00

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0b4      	sub	sp, #208	; 0xd0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 f801 	bl	800a2c4 <memset>
  if(huart->Instance==UART4)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4ab6      	ldr	r2, [pc, #728]	; (80015a0 <HAL_UART_MspInit+0x304>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d13d      	bne.n	8001348 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80012cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 f903 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80012e8:	f7ff fe00 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012ec:	4bad      	ldr	r3, [pc, #692]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4aac      	ldr	r2, [pc, #688]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80012f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4baa      	ldr	r3, [pc, #680]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4ba7      	ldr	r3, [pc, #668]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4aa6      	ldr	r2, [pc, #664]	; (80015a4 <HAL_UART_MspInit+0x308>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
 8001310:	4ba4      	ldr	r3, [pc, #656]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131c:	2303      	movs	r3, #3
 800131e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001334:	2308      	movs	r3, #8
 8001336:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800133e:	4619      	mov	r1, r3
 8001340:	4899      	ldr	r0, [pc, #612]	; (80015a8 <HAL_UART_MspInit+0x30c>)
 8001342:	f000 fe57 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001346:	e17f      	b.n	8001648 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==UART5)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a97      	ldr	r2, [pc, #604]	; (80015ac <HAL_UART_MspInit+0x310>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d15f      	bne.n	8001412 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001362:	4618      	mov	r0, r3
 8001364:	f003 f8c0 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800136e:	f7ff fdbd 	bl	8000eec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001372:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a8b      	ldr	r2, [pc, #556]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
 8001388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <HAL_UART_MspInit+0x308>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a85      	ldr	r2, [pc, #532]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b83      	ldr	r3, [pc, #524]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a7f      	ldr	r2, [pc, #508]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b7d      	ldr	r3, [pc, #500]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013d4:	2308      	movs	r3, #8
 80013d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013de:	4619      	mov	r1, r3
 80013e0:	4873      	ldr	r0, [pc, #460]	; (80015b0 <HAL_UART_MspInit+0x314>)
 80013e2:	f000 fe07 	bl	8001ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e6:	2304      	movs	r3, #4
 80013e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013fe:	2308      	movs	r3, #8
 8001400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001408:	4619      	mov	r1, r3
 800140a:	486a      	ldr	r0, [pc, #424]	; (80015b4 <HAL_UART_MspInit+0x318>)
 800140c:	f000 fdf2 	bl	8001ff4 <HAL_GPIO_Init>
}
 8001410:	e11a      	b.n	8001648 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <HAL_UART_MspInit+0x31c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13c      	bne.n	8001496 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001420:	2300      	movs	r3, #0
 8001422:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f85d 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001434:	f7ff fd5a 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	4b5a      	ldr	r3, [pc, #360]	; (80015a4 <HAL_UART_MspInit+0x308>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	4a59      	ldr	r2, [pc, #356]	; (80015a4 <HAL_UART_MspInit+0x308>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6453      	str	r3, [r2, #68]	; 0x44
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <HAL_UART_MspInit+0x308>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001468:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800146c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	2307      	movs	r3, #7
 8001484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800148c:	4619      	mov	r1, r3
 800148e:	4846      	ldr	r0, [pc, #280]	; (80015a8 <HAL_UART_MspInit+0x30c>)
 8001490:	f000 fdb0 	bl	8001ff4 <HAL_GPIO_Init>
}
 8001494:	e0d8      	b.n	8001648 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_UART_MspInit+0x320>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d13b      	bne.n	8001518 <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f81b 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x220>
      Error_Handler();
 80014b8:	f7ff fd18 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a32      	ldr	r2, [pc, #200]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_UART_MspInit+0x308>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ec:	230c      	movs	r3, #12
 80014ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001504:	2307      	movs	r3, #7
 8001506:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800150e:	4619      	mov	r1, r3
 8001510:	4825      	ldr	r0, [pc, #148]	; (80015a8 <HAL_UART_MspInit+0x30c>)
 8001512:	f000 fd6f 	bl	8001ff4 <HAL_GPIO_Init>
}
 8001516:	e097      	b.n	8001648 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART3)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_UART_MspInit+0x324>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d150      	bne.n	80015c4 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001532:	4618      	mov	r0, r3
 8001534:	f002 ffd8 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x2a6>
      Error_Handler();
 800153e:	f7ff fcd5 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0x308>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_UART_MspInit+0x308>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001572:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800158c:	2307      	movs	r3, #7
 800158e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_UART_MspInit+0x314>)
 800159a:	f000 fd2b 	bl	8001ff4 <HAL_GPIO_Init>
}
 800159e:	e053      	b.n	8001648 <HAL_UART_MspInit+0x3ac>
 80015a0:	40004c00 	.word	0x40004c00
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40005000 	.word	0x40005000
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <HAL_UART_MspInit+0x3b4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d13c      	bne.n	8001648 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80015ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 ff82 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x352>
      Error_Handler();
 80015ea:	f7ff fc7f 	bl	8000eec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_UART_MspInit+0x3b8>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_UART_MspInit+0x3b8>)
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_UART_MspInit+0x3b8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_UART_MspInit+0x3b8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_UART_MspInit+0x3b8>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_UART_MspInit+0x3b8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001636:	2308      	movs	r3, #8
 8001638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_UART_MspInit+0x3bc>)
 8001644:	f000 fcd6 	bl	8001ff4 <HAL_GPIO_Init>
}
 8001648:	bf00      	nop
 800164a:	37d0      	adds	r7, #208	; 0xd0
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40011400 	.word	0x40011400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020800 	.word	0x40020800

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8ba 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <OTG_FS_IRQHandler+0x10>)
 80016b6:	f001 f8da 	bl	800286e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20001bf0 	.word	0x20001bf0

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f008 fdfe 	bl	800a2f4 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20040000 	.word	0x20040000
 8001724:	00000400 	.word	0x00000400
 8001728:	20000708 	.word	0x20000708
 800172c:	20002240 	.word	0x20002240

08001730 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001770:	4c0b      	ldr	r4, [pc, #44]	; (80017a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800177e:	f7ff ffd7 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f008 fdbd 	bl	800a300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7fe ff87 	bl	8000698 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001798:	0800ac74 	.word	0x0800ac74
  ldr r2, =_sbss
 800179c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80017a0:	20002240 	.word	0x20002240

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>

080017a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f000 fbe0 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b0:	200f      	movs	r0, #15
 80017b2:	f000 f805 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b6:	f7ff fb9f 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fbfb 	bl	8001fda <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 fbc3 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	2000070c 	.word	0x2000070c

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000070c 	.word	0x2000070c

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e031      	b.n	8001922 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fb3a 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_ADC_Init+0x84>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	f043 0202 	orr.w	r2, r3, #2
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f970 	bl	8001bdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
 8001912:	e001      	b.n	8001918 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	ffffeefd 	.word	0xffffeefd

08001930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1c>
 8001948:	2302      	movs	r3, #2
 800194a:	e136      	b.n	8001bba <HAL_ADC_ConfigChannel+0x28a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d93a      	bls.n	80019d2 <HAL_ADC_ConfigChannel+0xa2>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001964:	d035      	beq.n	80019d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68d9      	ldr	r1, [r3, #12]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b29b      	uxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	3b1e      	subs	r3, #30
 800197c:	2207      	movs	r2, #7
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	400a      	ands	r2, r1
 800198a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a8d      	ldr	r2, [pc, #564]	; (8001bc8 <HAL_ADC_ConfigChannel+0x298>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10a      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68d9      	ldr	r1, [r3, #12]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	061a      	lsls	r2, r3, #24
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019aa:	e035      	b.n	8001a18 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68d9      	ldr	r1, [r3, #12]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	4603      	mov	r3, r0
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4403      	add	r3, r0
 80019c4:	3b1e      	subs	r3, #30
 80019c6:	409a      	lsls	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d0:	e022      	b.n	8001a18 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6919      	ldr	r1, [r3, #16]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43da      	mvns	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	400a      	ands	r2, r1
 80019f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6919      	ldr	r1, [r3, #16]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	4603      	mov	r3, r0
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4403      	add	r3, r0
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d824      	bhi.n	8001a6a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b05      	subs	r3, #5
 8001a32:	221f      	movs	r2, #31
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	400a      	ands	r2, r1
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b05      	subs	r3, #5
 8001a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
 8001a68:	e04c      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d824      	bhi.n	8001abc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b23      	subs	r3, #35	; 0x23
 8001a84:	221f      	movs	r2, #31
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	400a      	ands	r2, r1
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b23      	subs	r3, #35	; 0x23
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aba:	e023      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b41      	subs	r3, #65	; 0x41
 8001ace:	221f      	movs	r2, #31
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	400a      	ands	r2, r1
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b41      	subs	r3, #65	; 0x41
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <HAL_ADC_ConfigChannel+0x29c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10a      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1f4>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b1e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b22:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <HAL_ADC_ConfigChannel+0x29c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d10f      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d10b      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b40:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b4c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <HAL_ADC_ConfigChannel+0x29c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d12b      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x280>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_ADC_ConfigChannel+0x298>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <HAL_ADC_ConfigChannel+0x23a>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b11      	cmp	r3, #17
 8001b68:	d122      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b74:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b80:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_ADC_ConfigChannel+0x298>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d111      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9a      	lsrs	r2, r3, #18
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ba2:	e002      	b.n	8001baa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	10000012 	.word	0x10000012
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	40012300 	.word	0x40012300
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	431bde83 	.word	0x431bde83

08001bdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001be4:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <ADC_Init+0x1ec>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <ADC_Init+0x1ec>)
 8001bea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <ADC_Init+0x1ec>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4973      	ldr	r1, [pc, #460]	; (8001dc8 <ADC_Init+0x1ec>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	021a      	lsls	r2, r3, #8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6899      	ldr	r1, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <ADC_Init+0x1f0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d022      	beq.n	8001cb6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e00f      	b.n	8001cd6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0202 	bic.w	r2, r2, #2
 8001ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	005a      	lsls	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	035a      	lsls	r2, r3, #13
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e007      	b.n	8001d4c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	051a      	lsls	r2, r3, #20
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8e:	025a      	lsls	r2, r3, #9
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	029a      	lsls	r2, r3, #10
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40012300 	.word	0x40012300
 8001dcc:	0f000001 	.word	0x0f000001

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <__NVIC_SetPriorityGrouping+0x40>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x40>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00
 8001e14:	05fa0000 	.word	0x05fa0000

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff3e 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff31 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa2 	bl	8001f2c <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e169      	b.n	80022e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8158 	bne.w	80022e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x56>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b2 	beq.w	80022e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	4b60      	ldr	r3, [pc, #384]	; (8002300 <HAL_GPIO_Init+0x30c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a5f      	ldr	r2, [pc, #380]	; (8002300 <HAL_GPIO_Init+0x30c>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_GPIO_Init+0x30c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002196:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_GPIO_Init+0x310>)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_GPIO_Init+0x314>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <HAL_GPIO_Init+0x226>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_GPIO_Init+0x318>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d025      	beq.n	8002216 <HAL_GPIO_Init+0x222>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_GPIO_Init+0x31c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x21e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x320>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x21a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_GPIO_Init+0x324>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x216>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_GPIO_Init+0x328>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x212>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x32c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_GPIO_Init+0x330>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x20a>
 80021fa:	2307      	movs	r3, #7
 80021fc:	e00e      	b.n	800221c <HAL_GPIO_Init+0x228>
 80021fe:	2308      	movs	r3, #8
 8002200:	e00c      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002202:	2306      	movs	r3, #6
 8002204:	e00a      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002206:	2305      	movs	r3, #5
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x228>
 800220a:	2304      	movs	r3, #4
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x228>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x228>
 800221a:	2300      	movs	r3, #0
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x310>)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_GPIO_Init+0x334>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a32      	ldr	r2, [pc, #200]	; (8002328 <HAL_GPIO_Init+0x334>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_GPIO_Init+0x334>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_GPIO_Init+0x334>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_GPIO_Init+0x334>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_GPIO_Init+0x334>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_GPIO_Init+0x334>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_GPIO_Init+0x334>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	f67f ae92 	bls.w	8002014 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40021000 	.word	0x40021000
 800231c:	40021400 	.word	0x40021400
 8002320:	40021800 	.word	0x40021800
 8002324:	40021c00 	.word	0x40021c00
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	041a      	lsls	r2, r3, #16
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43d9      	mvns	r1, r3
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	400b      	ands	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fe2c 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e006      	b.n	800241c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800241a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d104      	bne.n	800242e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800242c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_I2C_Init+0x11c>)
 800243a:	430b      	orrs	r3, r1
 800243c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	02008000 	.word	0x02008000

080024b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d138      	bne.n	800253c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e032      	b.n	800253e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002506:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800253c:	2302      	movs	r3, #2
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b20      	cmp	r3, #32
 800255e:	d139      	bne.n	80025d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800256a:	2302      	movs	r3, #2
 800256c:	e033      	b.n	80025d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2224      	movs	r2, #36	; 0x24
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e4:	b08f      	sub	sp, #60	; 0x3c
 80025e6:	af0a      	add	r7, sp, #40	; 0x28
 80025e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e116      	b.n	8002822 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f007 fa00 	bl	8009a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fc75 	bl	8005f22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	687e      	ldr	r6, [r7, #4]
 8002640:	466d      	mov	r5, sp
 8002642:	f106 0410 	add.w	r4, r6, #16
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002652:	e885 0003 	stmia.w	r5, {r0, r1}
 8002656:	1d33      	adds	r3, r6, #4
 8002658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f003 fb26 	bl	8005cac <USB_CoreInit>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0d7      	b.n	8002822 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fc63 	bl	8005f44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e04a      	b.n	800271a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	333d      	adds	r3, #61	; 0x3d
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	333c      	adds	r3, #60	; 0x3c
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	b298      	uxth	r0, r3
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3344      	adds	r3, #68	; 0x44
 80026c0:	4602      	mov	r2, r0
 80026c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3340      	adds	r3, #64	; 0x40
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3348      	adds	r3, #72	; 0x48
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334c      	adds	r3, #76	; 0x4c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3354      	adds	r3, #84	; 0x54
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3af      	bcc.n	8002684 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e044      	b.n	80027b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3b5      	bcc.n	800272a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	687e      	ldr	r6, [r7, #4]
 80027c6:	466d      	mov	r5, sp
 80027c8:	f106 0410 	add.w	r4, r6, #16
 80027cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80027dc:	1d33      	adds	r3, r6, #4
 80027de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	f003 fbfb 	bl	8005fdc <USB_DevInit>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e014      	b.n	8002822 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2b01      	cmp	r3, #1
 800280e:	d102      	bne.n	8002816 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f001 f97b 	bl	8003b0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fd59 	bl	80072d2 <USB_DevDisconnect>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800282a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_PCD_Start+0x16>
 800283c:	2302      	movs	r3, #2
 800283e:	e012      	b.n	8002866 <HAL_PCD_Start+0x3c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fb57 	bl	8005f00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 fd1a 	bl	8007290 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800286e:	b590      	push	{r4, r7, lr}
 8002870:	b08d      	sub	sp, #52	; 0x34
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f004 fdd8 	bl	800743a <USB_GetMode>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 84b7 	bne.w	8003200 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fd3c 	bl	8007314 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 84ad 	beq.w	80031fe <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 fd29 	bl	8007314 <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d107      	bne.n	80028dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 0202 	and.w	r2, r2, #2
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fd17 	bl	8007314 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d161      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0210 	bic.w	r2, r2, #16
 80028fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	0c5b      	lsrs	r3, r3, #17
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	2b02      	cmp	r3, #2
 800292a:	d124      	bne.n	8002976 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d035      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	6a38      	ldr	r0, [r7, #32]
 800294c:	f004 fb4e 	bl	8006fec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800295c:	441a      	add	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800296e:	441a      	add	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
 8002974:	e016      	b.n	80029a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	0c5b      	lsrs	r3, r3, #17
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	2b06      	cmp	r3, #6
 8002980:	d110      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002988:	2208      	movs	r2, #8
 800298a:	4619      	mov	r1, r3
 800298c:	6a38      	ldr	r0, [r7, #32]
 800298e:	f004 fb2d 	bl	8006fec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299e:	441a      	add	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0210 	orr.w	r2, r2, #16
 80029b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 fcab 	bl	8007314 <USB_ReadInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029c8:	f040 80a7 	bne.w	8002b1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 fcb0 	bl	800733a <USB_ReadDevAllOutEpInterrupt>
 80029da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029dc:	e099      	b.n	8002b12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 808e 	beq.w	8002b06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f004 fcd4 	bl	80073a2 <USB_ReadDevOutEPInterrupt>
 80029fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a12:	461a      	mov	r2, r3
 8002a14:	2301      	movs	r3, #1
 8002a16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fef0 	bl	8003800 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a36:	461a      	mov	r2, r3
 8002a38:	2308      	movs	r3, #8
 8002a3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 ffc6 	bl	80039d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d030      	beq.n	8002acc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d109      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	78db      	ldrb	r3, [r3, #3]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d108      	bne.n	8002aba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f007 f8d1 	bl	8009c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2302      	movs	r3, #2
 8002aca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afe:	461a      	mov	r2, r3
 8002b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	3301      	adds	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f af62 	bne.w	80029de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fbf8 	bl	8007314 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b2e:	f040 80db 	bne.w	8002ce8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fc19 	bl	800736e <USB_ReadDevAllInEpInterrupt>
 8002b3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b42:	e0cd      	b.n	8002ce0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80c2 	beq.w	8002cd4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 fc3f 	bl	80073de <USB_ReadDevInEPInterrupt>
 8002b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d057      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	2201      	movs	r2, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69f9      	ldr	r1, [r7, #28]
 8002b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d132      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	334c      	adds	r3, #76	; 0x4c
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4403      	add	r3, r0
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4419      	add	r1, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	334c      	adds	r3, #76	; 0x4c
 8002be0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d113      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x3a2>
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3354      	adds	r3, #84	; 0x54
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f004 fc48 	bl	80074a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f006 ff9b 	bl	8009b52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c32:	461a      	mov	r2, r3
 8002c34:	2308      	movs	r3, #8
 8002c36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2310      	movs	r3, #16
 8002c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2340      	movs	r3, #64	; 0x40
 8002c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c7c:	6a38      	ldr	r0, [r7, #32]
 8002c7e:	f003 fb1b 	bl	80062b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	3338      	adds	r3, #56	; 0x38
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	3304      	adds	r3, #4
 8002c94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	78db      	ldrb	r3, [r3, #3]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f006 ffe8 	bl	8009c80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fd08 	bl	80036e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f47f af2e 	bne.w	8002b44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fb11 	bl	8007314 <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cfc:	d122      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d108      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d24:	2100      	movs	r1, #0
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f007 f966 	bl	8009ff8 <HAL_PCDEx_LPM_Callback>
 8002d2c:	e002      	b.n	8002d34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f006 ff86 	bl	8009c40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fae3 	bl	8007314 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d58:	d112      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f006 ff42 	bl	8009bf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 fac5 	bl	8007314 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d94:	d121      	bne.n	8002dda <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002da4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	f003 020f 	and.w	r2, r3, #15
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f007 f913 	bl	8009ff8 <HAL_PCDEx_LPM_Callback>
 8002dd2:	e002      	b.n	8002dda <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f006 ff0d 	bl	8009bf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fa98 	bl	8007314 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	f040 80b7 	bne.w	8002f60 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2110      	movs	r1, #16
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fa53 	bl	80062b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e16:	e046      	b.n	8002ea6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3c:	0151      	lsls	r1, r2, #5
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	440a      	add	r2, r1
 8002e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e70:	0151      	lsls	r1, r2, #5
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	440a      	add	r2, r1
 8002e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e90:	0151      	lsls	r1, r2, #5
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	440a      	add	r2, r1
 8002e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d3b3      	bcc.n	8002e18 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ec2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d016      	beq.n	8002efa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002edc:	f043 030b 	orr.w	r3, r3, #11
 8002ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef2:	f043 030b 	orr.w	r3, r3, #11
 8002ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef8:	e015      	b.n	8002f26 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f242 032b 	movw	r3, #8235	; 0x202b
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f20:	f043 030b 	orr.w	r3, r3, #11
 8002f24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f004 faa8 	bl	80074a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f004 f9d5 	bl	8007314 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f74:	d124      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fa6c 	bl	8007458 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fa14 	bl	80063b2 <USB_GetDevSpeed>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681c      	ldr	r4, [r3, #0]
 8002f96:	f001 fa73 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 8002f9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f002 ff09 	bl	8005dbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f006 fdf9 	bl	8009ba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 f9a5 	bl	8007314 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d10a      	bne.n	8002fea <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f006 fdd6 	bl	8009b86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 0208 	and.w	r2, r2, #8
 8002fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 f990 	bl	8007314 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d122      	bne.n	8003044 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300a:	2301      	movs	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	e014      	b.n	800303a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fb27 	bl	8003682 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	3301      	adds	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	429a      	cmp	r2, r3
 8003042:	d3e5      	bcc.n	8003010 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f004 f963 	bl	8007314 <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003058:	d13b      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305a:	2301      	movs	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e02b      	b.n	80030b8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3340      	adds	r3, #64	; 0x40
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d115      	bne.n	80030b2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003086:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003088:	2b00      	cmp	r3, #0
 800308a:	da12      	bge.n	80030b2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	333f      	adds	r3, #63	; 0x3f
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fae8 	bl	8003682 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	3301      	adds	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3ce      	bcc.n	8003060 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f91c 	bl	8007314 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e6:	d155      	bne.n	8003194 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e8:	2301      	movs	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
 80030ec:	e045      	b.n	800317a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d12e      	bne.n	8003174 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003116:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	da2b      	bge.n	8003174 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003128:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800312c:	429a      	cmp	r2, r3
 800312e:	d121      	bne.n	8003174 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003170:	6053      	str	r3, [r2, #4]
            break;
 8003172:	e007      	b.n	8003184 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	3301      	adds	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	429a      	cmp	r2, r3
 8003182:	d3b4      	bcc.n	80030ee <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f004 f8bb 	bl	8007314 <USB_ReadInterrupts>
 800319e:	4603      	mov	r3, r0
 80031a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d10a      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f006 fd7a 	bl	8009ca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 f8a5 	bl	8007314 <USB_ReadInterrupts>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d115      	bne.n	8003200 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f006 fd6a 	bl	8009cc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	e000      	b.n	8003200 <HAL_PCD_IRQHandler+0x992>
      return;
 80031fe:	bf00      	nop
    }
  }
}
 8003200:	3734      	adds	r7, #52	; 0x34
 8003202:	46bd      	mov	sp, r7
 8003204:	bd90      	pop	{r4, r7, pc}

08003206 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_PCD_SetAddress+0x1a>
 800321c:	2302      	movs	r3, #2
 800321e:	e013      	b.n	8003248 <HAL_PCD_SetAddress+0x42>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f004 f803 	bl	8007244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	70fb      	strb	r3, [r7, #3]
 8003262:	460b      	mov	r3, r1
 8003264:	803b      	strh	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800326e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003272:	2b00      	cmp	r3, #0
 8003274:	da0f      	bge.n	8003296 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3338      	adds	r3, #56	; 0x38
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	705a      	strb	r2, [r3, #1]
 8003294:	e00f      	b.n	80032b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032c2:	883a      	ldrh	r2, [r7, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	78ba      	ldrb	r2, [r7, #2]
 80032cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032e0:	78bb      	ldrb	r3, [r7, #2]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d102      	bne.n	80032ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_PCD_EP_Open+0xaa>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e00e      	b.n	8003318 <HAL_PCD_EP_Open+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68f9      	ldr	r1, [r7, #12]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 f877 	bl	80063fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003316:	7afb      	ldrb	r3, [r7, #11]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800332c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003330:	2b00      	cmp	r3, #0
 8003332:	da0f      	bge.n	8003354 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	3338      	adds	r3, #56	; 0x38
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	705a      	strb	r2, [r3, #1]
 8003352:	e00f      	b.n	8003374 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	3304      	adds	r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_PCD_EP_Close+0x6e>
 800338a:	2302      	movs	r3, #2
 800338c:	e00e      	b.n	80033ac <HAL_PCD_EP_Close+0x8c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 f8b5 	bl	800650c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	7afb      	ldrb	r3, [r7, #11]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f6:	7afb      	ldrb	r3, [r7, #11]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	6979      	ldr	r1, [r7, #20]
 8003428:	f003 fb9c 	bl	8006b64 <USB_EP0StartXfer>
 800342c:	e008      	b.n	8003440 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	f003 f942 	bl	80066c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800346c:	681b      	ldr	r3, [r3, #0]
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	460b      	mov	r3, r1
 8003488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f003 020f 	and.w	r2, r3, #15
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	3338      	adds	r3, #56	; 0x38
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2201      	movs	r2, #1
 80034b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034d4:	7afb      	ldrb	r3, [r7, #11]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	6979      	ldr	r1, [r7, #20]
 80034ec:	f003 fb3a 	bl	8006b64 <USB_EP0StartXfer>
 80034f0:	e008      	b.n	8003504 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	6979      	ldr	r1, [r7, #20]
 8003500:	f003 f8e0 	bl	80066c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d901      	bls.n	800352c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e050      	b.n	80035ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800352c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	da0f      	bge.n	8003554 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	3338      	adds	r3, #56	; 0x38
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	3304      	adds	r3, #4
 800354a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	705a      	strb	r2, [r3, #1]
 8003552:	e00d      	b.n	8003570 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_PCD_EP_SetStall+0x82>
 800358c:	2302      	movs	r3, #2
 800358e:	e01e      	b.n	80035ce <HAL_PCD_EP_SetStall+0xc0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fd7c 	bl	800709c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	b2d9      	uxtb	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035be:	461a      	mov	r2, r3
 80035c0:	f003 ff6e 	bl	80074a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 020f 	and.w	r2, r3, #15
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d901      	bls.n	80035f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e042      	b.n	800367a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	da0f      	bge.n	800361c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3338      	adds	r3, #56	; 0x38
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	3304      	adds	r3, #4
 8003612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	705a      	strb	r2, [r3, #1]
 800361a:	e00f      	b.n	800363c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	3304      	adds	r3, #4
 8003634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_EP_ClrStall+0x86>
 8003658:	2302      	movs	r3, #2
 800365a:	e00e      	b.n	800367a <HAL_PCD_EP_ClrStall+0xa4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fd84 	bl	8007178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800368e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da0c      	bge.n	80036b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3338      	adds	r3, #56	; 0x38
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	3304      	adds	r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e00c      	b.n	80036ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 fba3 	bl	8006e1c <USB_EPStopXfer>
 80036d6:	4603      	mov	r3, r0
 80036d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036da:	7afb      	ldrb	r3, [r7, #11]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3338      	adds	r3, #56	; 0x38
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	d901      	bls.n	800371c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06c      	b.n	80037f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	429a      	cmp	r2, r3
 8003730:	d902      	bls.n	8003738 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3303      	adds	r3, #3
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003740:	e02b      	b.n	800379a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	429a      	cmp	r2, r3
 8003756:	d902      	bls.n	800375e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3303      	adds	r3, #3
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003776:	b2db      	uxtb	r3, r3
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	4603      	mov	r3, r0
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f003 fbf7 	bl	8006f70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	441a      	add	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	441a      	add	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d809      	bhi.n	80037c4 <PCD_WriteEmptyTxFifo+0xe0>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d203      	bcs.n	80037c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1be      	bne.n	8003742 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d811      	bhi.n	80037f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2201      	movs	r2, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	6939      	ldr	r1, [r7, #16]
 80037ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037f0:	4013      	ands	r3, r2
 80037f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	333c      	adds	r3, #60	; 0x3c
 8003818:	3304      	adds	r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d17b      	bne.n	800392e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4a61      	ldr	r2, [pc, #388]	; (80039c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	f240 80b9 	bls.w	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80b3 	beq.w	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003868:	6093      	str	r3, [r2, #8]
 800386a:	e0a7      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	461a      	mov	r2, r3
 8003884:	2320      	movs	r3, #32
 8003886:	6093      	str	r3, [r2, #8]
 8003888:	e098      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	f040 8093 	bne.w	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d90f      	bls.n	80038be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b4:	461a      	mov	r2, r3
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	6093      	str	r3, [r2, #8]
 80038bc:	e07e      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	0159      	lsls	r1, r3, #5
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	440b      	add	r3, r1
 80038e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d114      	bne.n	8003920 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003908:	461a      	mov	r2, r3
 800390a:	2101      	movs	r1, #1
 800390c:	f003 fdc8 	bl	80074a0 <USB_EP0_OutStart>
 8003910:	e006      	b.n	8003920 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	441a      	add	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f006 f8f8 	bl	8009b1c <HAL_PCD_DataOutStageCallback>
 800392c:	e046      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d124      	bne.n	8003980 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	6093      	str	r3, [r2, #8]
 8003954:	e032      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	2320      	movs	r3, #32
 8003970:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f006 f8cf 	bl	8009b1c <HAL_PCD_DataOutStageCallback>
 800397e:	e01d      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d114      	bne.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d108      	bne.n	80039b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a8:	461a      	mov	r2, r3
 80039aa:	2100      	movs	r1, #0
 80039ac:	f003 fd78 	bl	80074a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f006 f8b0 	bl	8009b1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	4f54300a 	.word	0x4f54300a
 80039cc:	4f54310a 	.word	0x4f54310a

080039d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	333c      	adds	r3, #60	; 0x3c
 80039e8:	3304      	adds	r3, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d90e      	bls.n	8003a24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f006 f867 	bl	8009af8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d90c      	bls.n	8003a4c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d108      	bne.n	8003a4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a44:	461a      	mov	r2, r3
 8003a46:	2101      	movs	r1, #1
 8003a48:	f003 fd2a 	bl	80074a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	4f54300a 	.word	0x4f54300a

08003a5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d107      	bne.n	8003a8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a7a:	883b      	ldrh	r3, [r7, #0]
 8003a7c:	0419      	lsls	r1, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
 8003a88:	e028      	b.n	8003adc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e00d      	b.n	8003aba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	3340      	adds	r3, #64	; 0x40
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3ec      	bcc.n	8003a9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ac4:	883b      	ldrh	r3, [r7, #0]
 8003ac6:	0418      	lsls	r0, r3, #16
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	4302      	orrs	r2, r0
 8003ad4:	3340      	adds	r3, #64	; 0x40
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	10000003 	.word	0x10000003

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e291      	b.n	800408e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8087 	beq.w	8003c86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b78:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d00c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b84:	4b93      	ldr	r3, [pc, #588]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d112      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x62>
 8003b90:	4b90      	ldr	r3, [pc, #576]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x130>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d168      	bne.n	8003c84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e26b      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x7a>
 8003bc0:	4b84      	ldr	r3, [pc, #528]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a83      	ldr	r2, [pc, #524]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e02e      	b.n	8003c2c <HAL_RCC_OscConfig+0xd8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x9c>
 8003bd6:	4b7f      	ldr	r3, [pc, #508]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7e      	ldr	r2, [pc, #504]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b7c      	ldr	r3, [pc, #496]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7b      	ldr	r2, [pc, #492]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xd8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0xc0>
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xd8>
 8003c14:	4b6f      	ldr	r3, [pc, #444]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6e      	ldr	r2, [pc, #440]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6b      	ldr	r2, [pc, #428]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fe08 	bl	8001848 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fe04 	bl	8001848 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e21f      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe8>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fdf4 	bl	8001848 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fdf0 	bl	8001848 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e20b      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x110>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d069      	beq.n	8003d66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c92:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x190>
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x17a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1df      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	493d      	ldr	r1, [pc, #244]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e040      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d023      	beq.n	8003d34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fda6 	bl	8001848 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fd fda2 	bl	8001848 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1bd      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d12:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4929      	ldr	r1, [pc, #164]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
 8003d32:	e018      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fd82 	bl	8001848 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd fd7e 	bl	8001848 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e199      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d038      	beq.n	8003de4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7e:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd fd5f 	bl	8001848 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fd fd5b 	bl	8001848 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e176      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x23a>
 8003dac:	e01a      	b.n	8003de4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <HAL_RCC_OscConfig+0x280>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd fd45 	bl	8001848 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fd41 	bl	8001848 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d903      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e15c      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
 8003dd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b91      	ldr	r3, [pc, #580]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a4 	beq.w	8003f3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b8b      	ldr	r3, [pc, #556]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1a:	4b82      	ldr	r3, [pc, #520]	; (8004024 <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e26:	4b7f      	ldr	r3, [pc, #508]	; (8004024 <HAL_RCC_OscConfig+0x4d0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7e      	ldr	r2, [pc, #504]	; (8004024 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fd fd09 	bl	8001848 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fd fd05 	bl	8001848 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e120      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4c:	4b75      	ldr	r3, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x31a>
 8003e60:	4b6f      	ldr	r3, [pc, #444]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a6e      	ldr	r2, [pc, #440]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	e02d      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x33c>
 8003e76:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a69      	ldr	r2, [pc, #420]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a66      	ldr	r2, [pc, #408]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	e01c      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x35e>
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a60      	ldr	r2, [pc, #384]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	4b5e      	ldr	r3, [pc, #376]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a5d      	ldr	r2, [pc, #372]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e00b      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a5a      	ldr	r2, [pc, #360]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	4b58      	ldr	r3, [pc, #352]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a57      	ldr	r2, [pc, #348]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fcb9 	bl	8001848 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fd fcb5 	bl	8001848 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ce      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCC_OscConfig+0x386>
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fd fca3 	bl	8001848 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fd fc9f 	bl	8001848 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0b8      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	4b40      	ldr	r3, [pc, #256]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ee      	bne.n	8003f06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4b3c      	ldr	r3, [pc, #240]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a3b      	ldr	r2, [pc, #236]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80a4 	beq.w	800408c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d06b      	beq.n	8004028 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d149      	bne.n	8003fec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b31      	ldr	r3, [pc, #196]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a30      	ldr	r2, [pc, #192]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd fc70 	bl	8001848 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd fc6c 	bl	8001848 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e087      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69da      	ldr	r2, [r3, #28]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fb6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fc40 	bl	8001848 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fd fc3c 	bl	8001848 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e057      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x478>
 8003fea:	e04f      	b.n	800408c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fc26 	bl	8001848 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd fc22 	bl	8001848 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e03d      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x4ac>
 800401e:	e035      	b.n	800408c <HAL_RCC_OscConfig+0x538>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x544>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d028      	beq.n	8004088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d121      	bne.n	8004088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d11a      	bne.n	8004088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800405e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d111      	bne.n	8004088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 020f 	bic.w	r2, r3, #15
 80040ca:	4965      	ldr	r1, [pc, #404]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004106:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 800411a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800411e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e073      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06b      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4936      	ldr	r1, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fd fb5a 	bl	8001848 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd fb56 	bl	8001848 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e053      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d210      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 020f 	bic.w	r2, r3, #15
 80041d6:	4922      	ldr	r1, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1cc>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1d0>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1d4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fab6 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023c00 	.word	0x40023c00
 8004264:	40023800 	.word	0x40023800
 8004268:	0800ab18 	.word	0x0800ab18
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b094      	sub	sp, #80	; 0x50
 800427a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	2300      	movs	r3, #0
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	2300      	movs	r3, #0
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428c:	4b79      	ldr	r3, [pc, #484]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d00d      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004298:	2b08      	cmp	r3, #8
 800429a:	f200 80e1 	bhi.w	8004460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x34>
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x3a>
 80042a6:	e0db      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCC_GetSysClockFreq+0x204>)
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ac:	e0db      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_GetSysClockFreq+0x208>)
 80042b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b2:	e0d8      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042be:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	2200      	movs	r2, #0
 80042d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
 80042e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042e6:	4622      	mov	r2, r4
 80042e8:	462b      	mov	r3, r5
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f8:	0150      	lsls	r0, r2, #5
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4621      	mov	r1, r4
 8004300:	1a51      	subs	r1, r2, r1
 8004302:	6139      	str	r1, [r7, #16]
 8004304:	4629      	mov	r1, r5
 8004306:	eb63 0301 	sbc.w	r3, r3, r1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004318:	4659      	mov	r1, fp
 800431a:	018b      	lsls	r3, r1, #6
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004322:	4651      	mov	r1, sl
 8004324:	018a      	lsls	r2, r1, #6
 8004326:	4651      	mov	r1, sl
 8004328:	ebb2 0801 	subs.w	r8, r2, r1
 800432c:	4659      	mov	r1, fp
 800432e:	eb63 0901 	sbc.w	r9, r3, r1
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004346:	4690      	mov	r8, r2
 8004348:	4699      	mov	r9, r3
 800434a:	4623      	mov	r3, r4
 800434c:	eb18 0303 	adds.w	r3, r8, r3
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	462b      	mov	r3, r5
 8004354:	eb49 0303 	adc.w	r3, r9, r3
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004366:	4629      	mov	r1, r5
 8004368:	024b      	lsls	r3, r1, #9
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004370:	4621      	mov	r1, r4
 8004372:	024a      	lsls	r2, r1, #9
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437a:	2200      	movs	r2, #0
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004384:	f7fb ff9c 	bl	80002c0 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004390:	e058      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b38      	ldr	r3, [pc, #224]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	2200      	movs	r2, #0
 800439a:	4618      	mov	r0, r3
 800439c:	4611      	mov	r1, r2
 800439e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	2300      	movs	r3, #0
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	f04f 0000 	mov.w	r0, #0
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	0159      	lsls	r1, r3, #5
 80043ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043be:	0150      	lsls	r0, r2, #5
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4641      	mov	r1, r8
 80043c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ca:	4649      	mov	r1, r9
 80043cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e4:	ebb2 040a 	subs.w	r4, r2, sl
 80043e8:	eb63 050b 	sbc.w	r5, r3, fp
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	00eb      	lsls	r3, r5, #3
 80043f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fa:	00e2      	lsls	r2, r4, #3
 80043fc:	4614      	mov	r4, r2
 80043fe:	461d      	mov	r5, r3
 8004400:	4643      	mov	r3, r8
 8004402:	18e3      	adds	r3, r4, r3
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	464b      	mov	r3, r9
 8004408:	eb45 0303 	adc.w	r3, r5, r3
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441a:	4629      	mov	r1, r5
 800441c:	028b      	lsls	r3, r1, #10
 800441e:	4621      	mov	r1, r4
 8004420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004424:	4621      	mov	r1, r4
 8004426:	028a      	lsls	r2, r1, #10
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442e:	2200      	movs	r2, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	61fa      	str	r2, [r7, #28]
 8004434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004438:	f7fb ff42 	bl	80002c0 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4613      	mov	r3, r2
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	3301      	adds	r3, #1
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800445e:	e002      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetSysClockFreq+0x204>)
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004468:	4618      	mov	r0, r3
 800446a:	3750      	adds	r7, #80	; 0x50
 800446c:	46bd      	mov	sp, r7
 800446e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	00f42400 	.word	0x00f42400
 800447c:	007a1200 	.word	0x007a1200

08004480 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_RCC_GetHCLKFreq+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000000 	.word	0x20000000

08004498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800449c:	f7ff fff0 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0a9b      	lsrs	r3, r3, #10
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	0800ab28 	.word	0x0800ab28

080044c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044c4:	f7ff ffdc 	bl	8004480 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	0b5b      	lsrs	r3, r3, #13
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	0800ab28 	.word	0x0800ab28

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800450c:	4b65      	ldr	r3, [pc, #404]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a64      	ldr	r2, [pc, #400]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004512:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004516:	6093      	str	r3, [r2, #8]
 8004518:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4960      	ldr	r1, [pc, #384]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d017      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800453e:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	4955      	ldr	r1, [pc, #340]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d017      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800457a:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800457c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	4946      	ldr	r1, [pc, #280]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 808b 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6413      	str	r3, [r2, #64]	; 0x40
 80045c4:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a34      	ldr	r2, [pc, #208]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fd f934 	bl	8001848 <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd f930 	bl	8001848 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e2bc      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004602:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d035      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d02e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004620:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d114      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd f8f8 	bl	8001848 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd f8f4 	bl	8001848 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e27e      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d111      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800469a:	400b      	ands	r3, r1
 800469c:	4901      	ldr	r1, [pc, #4]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
 80046a2:	e00b      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	0ffffcff 	.word	0x0ffffcff
 80046b0:	4ba4      	ldr	r3, [pc, #656]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4aa3      	ldr	r2, [pc, #652]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ba:	6093      	str	r3, [r2, #8]
 80046bc:	4ba1      	ldr	r3, [pc, #644]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	499e      	ldr	r1, [pc, #632]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046da:	4b9a      	ldr	r3, [pc, #616]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e0:	4a98      	ldr	r2, [pc, #608]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046ea:	4b96      	ldr	r3, [pc, #600]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	4993      	ldr	r1, [pc, #588]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004708:	4b8e      	ldr	r3, [pc, #568]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	498b      	ldr	r1, [pc, #556]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472a:	4b86      	ldr	r3, [pc, #536]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004738:	4982      	ldr	r1, [pc, #520]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474c:	4b7d      	ldr	r3, [pc, #500]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475a:	497a      	ldr	r1, [pc, #488]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476e:	4b75      	ldr	r3, [pc, #468]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 0203 	bic.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	4971      	ldr	r1, [pc, #452]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004790:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f023 020c 	bic.w	r2, r3, #12
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	4969      	ldr	r1, [pc, #420]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b2:	4b64      	ldr	r3, [pc, #400]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	4960      	ldr	r1, [pc, #384]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d4:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	4958      	ldr	r1, [pc, #352]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f6:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004804:	494f      	ldr	r1, [pc, #316]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004818:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	4947      	ldr	r1, [pc, #284]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800483a:	4b42      	ldr	r3, [pc, #264]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	493e      	ldr	r1, [pc, #248]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800485c:	4b39      	ldr	r3, [pc, #228]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	4936      	ldr	r1, [pc, #216]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	492d      	ldr	r1, [pc, #180]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800489c:	d101      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b25      	ldr	r3, [pc, #148]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048bc:	4921      	ldr	r1, [pc, #132]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048de:	4919      	ldr	r1, [pc, #100]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004900:	4910      	ldr	r1, [pc, #64]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d006      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 809d 	beq.w	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a08      	ldr	r2, [pc, #32]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004928:	f7fc ff8e 	bl	8001848 <HAL_GetTick>
 800492c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800492e:	e00b      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004930:	f7fc ff8a 	bl	8001848 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d904      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e116      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004948:	4b8b      	ldr	r3, [pc, #556]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ed      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d017      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d113      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004968:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	071b      	lsls	r3, r3, #28
 8004988:	497b      	ldr	r1, [pc, #492]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d024      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ba:	d11f      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049bc:	4b6e      	ldr	r3, [pc, #440]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c2:	0f1b      	lsrs	r3, r3, #28
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	019a      	lsls	r2, r3, #6
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	431a      	orrs	r2, r3
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	071b      	lsls	r3, r3, #28
 80049dc:	4966      	ldr	r1, [pc, #408]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049e4:	4b64      	ldr	r3, [pc, #400]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ea:	f023 021f 	bic.w	r2, r3, #31
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4960      	ldr	r1, [pc, #384]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	019a      	lsls	r2, r3, #6
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	061b      	lsls	r3, r3, #24
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	071b      	lsls	r3, r3, #28
 8004a1c:	4956      	ldr	r1, [pc, #344]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a24:	4b54      	ldr	r3, [pc, #336]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a53      	ldr	r2, [pc, #332]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a30:	f7fc ff0a 	bl	8001848 <HAL_GetTick>
 8004a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a38:	f7fc ff06 	bl	8001848 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e092      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a4a:	4b4b      	ldr	r3, [pc, #300]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f040 8088 	bne.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a5e:	4b46      	ldr	r3, [pc, #280]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a45      	ldr	r2, [pc, #276]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6a:	f7fc feed 	bl	8001848 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a72:	f7fc fee9 	bl	8001848 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b64      	cmp	r3, #100	; 0x64
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e075      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a84:	4b3c      	ldr	r3, [pc, #240]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a90:	d0ef      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d024      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d120      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aba:	4b2f      	ldr	r3, [pc, #188]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	019a      	lsls	r2, r3, #6
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4927      	ldr	r1, [pc, #156]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ae2:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	4920      	ldr	r1, [pc, #128]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d018      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b10:	d113      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	0e1b      	lsrs	r3, r3, #24
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	019a      	lsls	r2, r3, #6
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	4911      	ldr	r1, [pc, #68]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b46:	f7fc fe7f 	bl	8001848 <HAL_GetTick>
 8004b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b4e:	f7fc fe7b 	bl	8001848 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e007      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6c:	d1ef      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800

08004b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e09d      	b.n	8004cca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9e:	d009      	beq.n	8004bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
 8004ba6:	e005      	b.n	8004bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fc fa82 	bl	80010d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf4:	d902      	bls.n	8004bfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e002      	b.n	8004c02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c0a:	d007      	beq.n	8004c1c <HAL_SPI_Init+0xa0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	ea42 0103 	orr.w	r1, r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	f003 0204 	and.w	r2, r3, #4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c98:	ea42 0103 	orr.w	r1, r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08a      	sub	sp, #40	; 0x28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x26>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e1fb      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x41e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d00:	f7fc fda2 	bl	8001848 <HAL_GetTick>
 8004d04:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d0c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d14:	887b      	ldrh	r3, [r7, #2]
 8004d16:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d1c:	7efb      	ldrb	r3, [r7, #27]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d00e      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x6e>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d28:	d106      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x66>
 8004d32:	7efb      	ldrb	r3, [r7, #27]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d003      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d3e:	e1cd      	b.n	80050dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x80>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x80>
 8004d4c:	887b      	ldrh	r3, [r7, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d58:	e1c0      	b.n	80050dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d003      	beq.n	8004d6e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	887a      	ldrh	r2, [r7, #2]
 8004d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004db0:	d802      	bhi.n	8004db8 <HAL_SPI_TransmitReceive+0xe6>
 8004db2:	8a3b      	ldrh	r3, [r7, #16]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d908      	bls.n	8004dca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	e007      	b.n	8004dda <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d007      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e00:	d97c      	bls.n	8004efc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x13e>
 8004e0a:	8a7b      	ldrh	r3, [r7, #18]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d169      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e34:	e056      	b.n	8004ee4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d11b      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x1aa>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x1aa>
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d113      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d11c      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x1f2>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	b292      	uxth	r2, r2
 8004ea2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec4:	f7fc fcc0 	bl	8001848 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d807      	bhi.n	8004ee4 <HAL_SPI_TransmitReceive+0x212>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d003      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ee2:	e0fb      	b.n	80050dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1a3      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x164>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d19d      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x164>
 8004efa:	e0df      	b.n	80050bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x23a>
 8004f04:	8a7b      	ldrh	r3, [r7, #18]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	f040 80cb 	bne.w	80050a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d912      	bls.n	8004f3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	881a      	ldrh	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	1c9a      	adds	r2, r3, #2
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b02      	subs	r3, #2
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f3a:	e0b2      	b.n	80050a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f62:	e09e      	b.n	80050a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d134      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x30a>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02f      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x30a>
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d12c      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d912      	bls.n	8004fb2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b02      	subs	r3, #2
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb0:	e012      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d148      	bne.n	800507c <HAL_SPI_TransmitReceive+0x3aa>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d042      	beq.n	800507c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d923      	bls.n	800504a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	b292      	uxth	r2, r2
 800500e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b02      	subs	r3, #2
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d81f      	bhi.n	8005078 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	e016      	b.n	8005078 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f103 020c 	add.w	r2, r3, #12
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005078:	2301      	movs	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800507c:	f7fc fbe4 	bl	8001848 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005088:	429a      	cmp	r2, r3
 800508a:	d803      	bhi.n	8005094 <HAL_SPI_TransmitReceive+0x3c2>
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d102      	bne.n	800509a <HAL_SPI_TransmitReceive+0x3c8>
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050a0:	e01c      	b.n	80050dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f af5b 	bne.w	8004f64 <HAL_SPI_TransmitReceive+0x292>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f47f af54 	bne.w	8004f64 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f937 	bl	8005334 <SPI_EndRxTxTransaction>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60
 80050d8:	e000      	b.n	80050dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80050da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005108:	f7fc fb9e 	bl	8001848 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	4413      	add	r3, r2
 8005116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005118:	f7fc fb96 	bl	8001848 <HAL_GetTick>
 800511c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800511e:	4b39      	ldr	r3, [pc, #228]	; (8005204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	015b      	lsls	r3, r3, #5
 8005124:	0d1b      	lsrs	r3, r3, #20
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	fb02 f303 	mul.w	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800512e:	e054      	b.n	80051da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d050      	beq.n	80051da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005138:	f7fc fb86 	bl	8001848 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	429a      	cmp	r2, r3
 8005146:	d902      	bls.n	800514e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d13d      	bne.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800515c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005166:	d111      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005170:	d004      	beq.n	800517c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517a:	d107      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005194:	d10f      	bne.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e017      	b.n	80051fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d19b      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000000 	.word	0x20000000

08005208 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800521a:	f7fc fb15 	bl	8001848 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	4413      	add	r3, r2
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800522a:	f7fc fb0d 	bl	8001848 <HAL_GetTick>
 800522e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005238:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00da      	lsls	r2, r3, #3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	0d1b      	lsrs	r3, r3, #20
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005250:	e060      	b.n	8005314 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005258:	d107      	bne.n	800526a <SPI_WaitFifoStateUntilTimeout+0x62>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d104      	bne.n	800526a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005268:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d050      	beq.n	8005314 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005272:	f7fc fae9 	bl	8001848 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527e:	429a      	cmp	r2, r3
 8005280:	d902      	bls.n	8005288 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d13d      	bne.n	8005304 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005296:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a0:	d111      	bne.n	80052c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d004      	beq.n	80052b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b4:	d107      	bne.n	80052c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ce:	d10f      	bne.n	80052f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e010      	b.n	8005326 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3b01      	subs	r3, #1
 8005312:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d196      	bne.n	8005252 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3728      	adds	r7, #40	; 0x28
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000000 	.word	0x20000000

08005334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ff5b 	bl	8005208 <SPI_WaitFifoStateUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e046      	b.n	80053f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <SPI_EndRxTxTransaction+0xcc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a25      	ldr	r2, [pc, #148]	; (8005404 <SPI_EndRxTxTransaction+0xd0>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0d5b      	lsrs	r3, r3, #21
 8005374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005386:	d112      	bne.n	80053ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff feb0 	bl	80050f8 <SPI_WaitFlagStateUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e023      	b.n	80053f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d0f2      	beq.n	80053ae <SPI_EndRxTxTransaction+0x7a>
 80053c8:	e000      	b.n	80053cc <SPI_EndRxTxTransaction+0x98>
        break;
 80053ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff ff15 	bl	8005208 <SPI_WaitFifoStateUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e000      	b.n	80053f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000000 	.word	0x20000000
 8005404:	165e9f81 	.word	0x165e9f81

08005408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e040      	b.n	800549c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb ff36 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f82c 	bl	80054a4 <UART_SetConfig>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e022      	b.n	800549c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa84 	bl	800596c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fb0b 	bl	8005ab0 <UART_CheckIdleState>
 800549a:	4603      	mov	r3, r0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4ba6      	ldr	r3, [pc, #664]	; (8005768 <UART_SetConfig+0x2c4>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	430a      	orrs	r2, r1
 8005514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a94      	ldr	r2, [pc, #592]	; (800576c <UART_SetConfig+0x2c8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d120      	bne.n	8005562 <UART_SetConfig+0xbe>
 8005520:	4b93      	ldr	r3, [pc, #588]	; (8005770 <UART_SetConfig+0x2cc>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d816      	bhi.n	800555c <UART_SetConfig+0xb8>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x90>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005545 	.word	0x08005545
 8005538:	08005551 	.word	0x08005551
 800553c:	0800554b 	.word	0x0800554b
 8005540:	08005557 	.word	0x08005557
 8005544:	2301      	movs	r3, #1
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e150      	b.n	80057ec <UART_SetConfig+0x348>
 800554a:	2302      	movs	r3, #2
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e14d      	b.n	80057ec <UART_SetConfig+0x348>
 8005550:	2304      	movs	r3, #4
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e14a      	b.n	80057ec <UART_SetConfig+0x348>
 8005556:	2308      	movs	r3, #8
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e147      	b.n	80057ec <UART_SetConfig+0x348>
 800555c:	2310      	movs	r3, #16
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e144      	b.n	80057ec <UART_SetConfig+0x348>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a83      	ldr	r2, [pc, #524]	; (8005774 <UART_SetConfig+0x2d0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d132      	bne.n	80055d2 <UART_SetConfig+0x12e>
 800556c:	4b80      	ldr	r3, [pc, #512]	; (8005770 <UART_SetConfig+0x2cc>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d828      	bhi.n	80055cc <UART_SetConfig+0x128>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0xdc>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	080055b5 	.word	0x080055b5
 8005584:	080055cd 	.word	0x080055cd
 8005588:	080055cd 	.word	0x080055cd
 800558c:	080055cd 	.word	0x080055cd
 8005590:	080055c1 	.word	0x080055c1
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	080055bb 	.word	0x080055bb
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055cd 	.word	0x080055cd
 80055ac:	080055cd 	.word	0x080055cd
 80055b0:	080055c7 	.word	0x080055c7
 80055b4:	2300      	movs	r3, #0
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e118      	b.n	80057ec <UART_SetConfig+0x348>
 80055ba:	2302      	movs	r3, #2
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e115      	b.n	80057ec <UART_SetConfig+0x348>
 80055c0:	2304      	movs	r3, #4
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e112      	b.n	80057ec <UART_SetConfig+0x348>
 80055c6:	2308      	movs	r3, #8
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e10f      	b.n	80057ec <UART_SetConfig+0x348>
 80055cc:	2310      	movs	r3, #16
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e10c      	b.n	80057ec <UART_SetConfig+0x348>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a68      	ldr	r2, [pc, #416]	; (8005778 <UART_SetConfig+0x2d4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d120      	bne.n	800561e <UART_SetConfig+0x17a>
 80055dc:	4b64      	ldr	r3, [pc, #400]	; (8005770 <UART_SetConfig+0x2cc>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055e6:	2b30      	cmp	r3, #48	; 0x30
 80055e8:	d013      	beq.n	8005612 <UART_SetConfig+0x16e>
 80055ea:	2b30      	cmp	r3, #48	; 0x30
 80055ec:	d814      	bhi.n	8005618 <UART_SetConfig+0x174>
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d009      	beq.n	8005606 <UART_SetConfig+0x162>
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d810      	bhi.n	8005618 <UART_SetConfig+0x174>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <UART_SetConfig+0x15c>
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d006      	beq.n	800560c <UART_SetConfig+0x168>
 80055fe:	e00b      	b.n	8005618 <UART_SetConfig+0x174>
 8005600:	2300      	movs	r3, #0
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e0f2      	b.n	80057ec <UART_SetConfig+0x348>
 8005606:	2302      	movs	r3, #2
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e0ef      	b.n	80057ec <UART_SetConfig+0x348>
 800560c:	2304      	movs	r3, #4
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e0ec      	b.n	80057ec <UART_SetConfig+0x348>
 8005612:	2308      	movs	r3, #8
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e0e9      	b.n	80057ec <UART_SetConfig+0x348>
 8005618:	2310      	movs	r3, #16
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e0e6      	b.n	80057ec <UART_SetConfig+0x348>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a56      	ldr	r2, [pc, #344]	; (800577c <UART_SetConfig+0x2d8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d120      	bne.n	800566a <UART_SetConfig+0x1c6>
 8005628:	4b51      	ldr	r3, [pc, #324]	; (8005770 <UART_SetConfig+0x2cc>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005632:	2bc0      	cmp	r3, #192	; 0xc0
 8005634:	d013      	beq.n	800565e <UART_SetConfig+0x1ba>
 8005636:	2bc0      	cmp	r3, #192	; 0xc0
 8005638:	d814      	bhi.n	8005664 <UART_SetConfig+0x1c0>
 800563a:	2b80      	cmp	r3, #128	; 0x80
 800563c:	d009      	beq.n	8005652 <UART_SetConfig+0x1ae>
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d810      	bhi.n	8005664 <UART_SetConfig+0x1c0>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <UART_SetConfig+0x1a8>
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d006      	beq.n	8005658 <UART_SetConfig+0x1b4>
 800564a:	e00b      	b.n	8005664 <UART_SetConfig+0x1c0>
 800564c:	2300      	movs	r3, #0
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e0cc      	b.n	80057ec <UART_SetConfig+0x348>
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e0c9      	b.n	80057ec <UART_SetConfig+0x348>
 8005658:	2304      	movs	r3, #4
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e0c6      	b.n	80057ec <UART_SetConfig+0x348>
 800565e:	2308      	movs	r3, #8
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e0c3      	b.n	80057ec <UART_SetConfig+0x348>
 8005664:	2310      	movs	r3, #16
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e0c0      	b.n	80057ec <UART_SetConfig+0x348>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a44      	ldr	r2, [pc, #272]	; (8005780 <UART_SetConfig+0x2dc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d125      	bne.n	80056c0 <UART_SetConfig+0x21c>
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <UART_SetConfig+0x2cc>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005682:	d017      	beq.n	80056b4 <UART_SetConfig+0x210>
 8005684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005688:	d817      	bhi.n	80056ba <UART_SetConfig+0x216>
 800568a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568e:	d00b      	beq.n	80056a8 <UART_SetConfig+0x204>
 8005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005694:	d811      	bhi.n	80056ba <UART_SetConfig+0x216>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <UART_SetConfig+0x1fe>
 800569a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569e:	d006      	beq.n	80056ae <UART_SetConfig+0x20a>
 80056a0:	e00b      	b.n	80056ba <UART_SetConfig+0x216>
 80056a2:	2300      	movs	r3, #0
 80056a4:	77fb      	strb	r3, [r7, #31]
 80056a6:	e0a1      	b.n	80057ec <UART_SetConfig+0x348>
 80056a8:	2302      	movs	r3, #2
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e09e      	b.n	80057ec <UART_SetConfig+0x348>
 80056ae:	2304      	movs	r3, #4
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e09b      	b.n	80057ec <UART_SetConfig+0x348>
 80056b4:	2308      	movs	r3, #8
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e098      	b.n	80057ec <UART_SetConfig+0x348>
 80056ba:	2310      	movs	r3, #16
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e095      	b.n	80057ec <UART_SetConfig+0x348>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <UART_SetConfig+0x2e0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d125      	bne.n	8005716 <UART_SetConfig+0x272>
 80056ca:	4b29      	ldr	r3, [pc, #164]	; (8005770 <UART_SetConfig+0x2cc>)
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d8:	d017      	beq.n	800570a <UART_SetConfig+0x266>
 80056da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056de:	d817      	bhi.n	8005710 <UART_SetConfig+0x26c>
 80056e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e4:	d00b      	beq.n	80056fe <UART_SetConfig+0x25a>
 80056e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ea:	d811      	bhi.n	8005710 <UART_SetConfig+0x26c>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <UART_SetConfig+0x254>
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f4:	d006      	beq.n	8005704 <UART_SetConfig+0x260>
 80056f6:	e00b      	b.n	8005710 <UART_SetConfig+0x26c>
 80056f8:	2301      	movs	r3, #1
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e076      	b.n	80057ec <UART_SetConfig+0x348>
 80056fe:	2302      	movs	r3, #2
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e073      	b.n	80057ec <UART_SetConfig+0x348>
 8005704:	2304      	movs	r3, #4
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e070      	b.n	80057ec <UART_SetConfig+0x348>
 800570a:	2308      	movs	r3, #8
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e06d      	b.n	80057ec <UART_SetConfig+0x348>
 8005710:	2310      	movs	r3, #16
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e06a      	b.n	80057ec <UART_SetConfig+0x348>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <UART_SetConfig+0x2e4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d138      	bne.n	8005792 <UART_SetConfig+0x2ee>
 8005720:	4b13      	ldr	r3, [pc, #76]	; (8005770 <UART_SetConfig+0x2cc>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800572a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800572e:	d017      	beq.n	8005760 <UART_SetConfig+0x2bc>
 8005730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005734:	d82a      	bhi.n	800578c <UART_SetConfig+0x2e8>
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	d00b      	beq.n	8005754 <UART_SetConfig+0x2b0>
 800573c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005740:	d824      	bhi.n	800578c <UART_SetConfig+0x2e8>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <UART_SetConfig+0x2aa>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	d006      	beq.n	800575a <UART_SetConfig+0x2b6>
 800574c:	e01e      	b.n	800578c <UART_SetConfig+0x2e8>
 800574e:	2300      	movs	r3, #0
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e04b      	b.n	80057ec <UART_SetConfig+0x348>
 8005754:	2302      	movs	r3, #2
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e048      	b.n	80057ec <UART_SetConfig+0x348>
 800575a:	2304      	movs	r3, #4
 800575c:	77fb      	strb	r3, [r7, #31]
 800575e:	e045      	b.n	80057ec <UART_SetConfig+0x348>
 8005760:	2308      	movs	r3, #8
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e042      	b.n	80057ec <UART_SetConfig+0x348>
 8005766:	bf00      	nop
 8005768:	efff69f3 	.word	0xefff69f3
 800576c:	40011000 	.word	0x40011000
 8005770:	40023800 	.word	0x40023800
 8005774:	40004400 	.word	0x40004400
 8005778:	40004800 	.word	0x40004800
 800577c:	40004c00 	.word	0x40004c00
 8005780:	40005000 	.word	0x40005000
 8005784:	40011400 	.word	0x40011400
 8005788:	40007800 	.word	0x40007800
 800578c:	2310      	movs	r3, #16
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e02c      	b.n	80057ec <UART_SetConfig+0x348>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a72      	ldr	r2, [pc, #456]	; (8005960 <UART_SetConfig+0x4bc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d125      	bne.n	80057e8 <UART_SetConfig+0x344>
 800579c:	4b71      	ldr	r3, [pc, #452]	; (8005964 <UART_SetConfig+0x4c0>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057aa:	d017      	beq.n	80057dc <UART_SetConfig+0x338>
 80057ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057b0:	d817      	bhi.n	80057e2 <UART_SetConfig+0x33e>
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	d00b      	beq.n	80057d0 <UART_SetConfig+0x32c>
 80057b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057bc:	d811      	bhi.n	80057e2 <UART_SetConfig+0x33e>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <UART_SetConfig+0x326>
 80057c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c6:	d006      	beq.n	80057d6 <UART_SetConfig+0x332>
 80057c8:	e00b      	b.n	80057e2 <UART_SetConfig+0x33e>
 80057ca:	2300      	movs	r3, #0
 80057cc:	77fb      	strb	r3, [r7, #31]
 80057ce:	e00d      	b.n	80057ec <UART_SetConfig+0x348>
 80057d0:	2302      	movs	r3, #2
 80057d2:	77fb      	strb	r3, [r7, #31]
 80057d4:	e00a      	b.n	80057ec <UART_SetConfig+0x348>
 80057d6:	2304      	movs	r3, #4
 80057d8:	77fb      	strb	r3, [r7, #31]
 80057da:	e007      	b.n	80057ec <UART_SetConfig+0x348>
 80057dc:	2308      	movs	r3, #8
 80057de:	77fb      	strb	r3, [r7, #31]
 80057e0:	e004      	b.n	80057ec <UART_SetConfig+0x348>
 80057e2:	2310      	movs	r3, #16
 80057e4:	77fb      	strb	r3, [r7, #31]
 80057e6:	e001      	b.n	80057ec <UART_SetConfig+0x348>
 80057e8:	2310      	movs	r3, #16
 80057ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f4:	d15b      	bne.n	80058ae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057f6:	7ffb      	ldrb	r3, [r7, #31]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d828      	bhi.n	800584e <UART_SetConfig+0x3aa>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x360>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005829 	.word	0x08005829
 8005808:	08005831 	.word	0x08005831
 800580c:	08005839 	.word	0x08005839
 8005810:	0800584f 	.word	0x0800584f
 8005814:	0800583f 	.word	0x0800583f
 8005818:	0800584f 	.word	0x0800584f
 800581c:	0800584f 	.word	0x0800584f
 8005820:	0800584f 	.word	0x0800584f
 8005824:	08005847 	.word	0x08005847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe fe36 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 800582c:	61b8      	str	r0, [r7, #24]
        break;
 800582e:	e013      	b.n	8005858 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005830:	f7fe fe46 	bl	80044c0 <HAL_RCC_GetPCLK2Freq>
 8005834:	61b8      	str	r0, [r7, #24]
        break;
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005838:	4b4b      	ldr	r3, [pc, #300]	; (8005968 <UART_SetConfig+0x4c4>)
 800583a:	61bb      	str	r3, [r7, #24]
        break;
 800583c:	e00c      	b.n	8005858 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583e:	f7fe fd19 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8005842:	61b8      	str	r0, [r7, #24]
        break;
 8005844:	e008      	b.n	8005858 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584a:	61bb      	str	r3, [r7, #24]
        break;
 800584c:	e004      	b.n	8005858 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	77bb      	strb	r3, [r7, #30]
        break;
 8005856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d074      	beq.n	8005948 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	005a      	lsls	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d916      	bls.n	80058a8 <UART_SetConfig+0x404>
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d212      	bcs.n	80058a8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f023 030f 	bic.w	r3, r3, #15
 800588a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	b29b      	uxth	r3, r3
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	b29a      	uxth	r2, r3
 8005898:	89fb      	ldrh	r3, [r7, #14]
 800589a:	4313      	orrs	r3, r2
 800589c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	89fa      	ldrh	r2, [r7, #14]
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	e04f      	b.n	8005948 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	77bb      	strb	r3, [r7, #30]
 80058ac:	e04c      	b.n	8005948 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ae:	7ffb      	ldrb	r3, [r7, #31]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d828      	bhi.n	8005906 <UART_SetConfig+0x462>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x418>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	08005907 	.word	0x08005907
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	08005907 	.word	0x08005907
 80058d4:	08005907 	.word	0x08005907
 80058d8:	08005907 	.word	0x08005907
 80058dc:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7fe fdda 	bl	8004498 <HAL_RCC_GetPCLK1Freq>
 80058e4:	61b8      	str	r0, [r7, #24]
        break;
 80058e6:	e013      	b.n	8005910 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fe fdea 	bl	80044c0 <HAL_RCC_GetPCLK2Freq>
 80058ec:	61b8      	str	r0, [r7, #24]
        break;
 80058ee:	e00f      	b.n	8005910 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <UART_SetConfig+0x4c4>)
 80058f2:	61bb      	str	r3, [r7, #24]
        break;
 80058f4:	e00c      	b.n	8005910 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fe fcbd 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 80058fa:	61b8      	str	r0, [r7, #24]
        break;
 80058fc:	e008      	b.n	8005910 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	61bb      	str	r3, [r7, #24]
        break;
 8005904:	e004      	b.n	8005910 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	77bb      	strb	r3, [r7, #30]
        break;
 800590e:	bf00      	nop
    }

    if (pclk != 0U)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	085a      	lsrs	r2, r3, #1
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	441a      	add	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b0f      	cmp	r3, #15
 800592e:	d909      	bls.n	8005944 <UART_SetConfig+0x4a0>
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005936:	d205      	bcs.n	8005944 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	b29a      	uxth	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e001      	b.n	8005948 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005954:	7fbb      	ldrb	r3, [r7, #30]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40007c00 	.word	0x40007c00
 8005964:	40023800 	.word	0x40023800
 8005968:	00f42400 	.word	0x00f42400

0800596c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01a      	beq.n	8005a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6a:	d10a      	bne.n	8005a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac0:	f7fb fec2 	bl	8001848 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d10e      	bne.n	8005af2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f81b 	bl	8005b1e <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e011      	b.n	8005b16 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b09c      	sub	sp, #112	; 0x70
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2e:	e0a7      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	f000 80a3 	beq.w	8005c80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3a:	f7fb fe85 	bl	8001848 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d302      	bcc.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d13f      	bne.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b64:	667b      	str	r3, [r7, #100]	; 0x64
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e6      	bne.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	663b      	str	r3, [r7, #96]	; 0x60
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ba2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e068      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d050      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bec:	d148      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e6      	bne.n	8005bf8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c4a:	623a      	str	r2, [r7, #32]
 8005c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	69f9      	ldr	r1, [r7, #28]
 8005c50:	6a3a      	ldr	r2, [r7, #32]
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e010      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f43f af48 	beq.w	8005b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3770      	adds	r7, #112	; 0x70
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cac:	b084      	sub	sp, #16
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	f107 001c 	add.w	r0, r7, #28
 8005cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d126      	bne.n	8005d12 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	4b38      	ldr	r3, [pc, #224]	; (8005db8 <USB_CoreInit+0x10c>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f043 0210 	orr.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fc28 	bl	800755c <USB_CoreReset>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
 8005d10:	e03a      	b.n	8005d88 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d126      	bne.n	8005d66 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <USB_CoreInit+0x10c>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f023 0210 	bic.w	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fbfe 	bl	800755c <USB_CoreReset>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e010      	b.n	8005d88 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fbf2 	bl	800755c <USB_CoreReset>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10b      	bne.n	8005da6 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f043 0206 	orr.w	r2, r3, #6
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db2:	b004      	add	sp, #16
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	ffbdffbf 	.word	0xffbdffbf

08005dbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d165      	bne.n	8005e9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a41      	ldr	r2, [pc, #260]	; (8005ed8 <USB_SetTurnaroundTime+0x11c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d906      	bls.n	8005de6 <USB_SetTurnaroundTime+0x2a>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a40      	ldr	r2, [pc, #256]	; (8005edc <USB_SetTurnaroundTime+0x120>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d202      	bcs.n	8005de6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005de0:	230f      	movs	r3, #15
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e062      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a3c      	ldr	r2, [pc, #240]	; (8005edc <USB_SetTurnaroundTime+0x120>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d306      	bcc.n	8005dfc <USB_SetTurnaroundTime+0x40>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4a3b      	ldr	r2, [pc, #236]	; (8005ee0 <USB_SetTurnaroundTime+0x124>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d202      	bcs.n	8005dfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005df6:	230e      	movs	r3, #14
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	e057      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4a38      	ldr	r2, [pc, #224]	; (8005ee0 <USB_SetTurnaroundTime+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d306      	bcc.n	8005e12 <USB_SetTurnaroundTime+0x56>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4a37      	ldr	r2, [pc, #220]	; (8005ee4 <USB_SetTurnaroundTime+0x128>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d202      	bcs.n	8005e12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e0c:	230d      	movs	r3, #13
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e04c      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4a33      	ldr	r2, [pc, #204]	; (8005ee4 <USB_SetTurnaroundTime+0x128>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d306      	bcc.n	8005e28 <USB_SetTurnaroundTime+0x6c>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4a32      	ldr	r2, [pc, #200]	; (8005ee8 <USB_SetTurnaroundTime+0x12c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d802      	bhi.n	8005e28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e22:	230c      	movs	r3, #12
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e041      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ee8 <USB_SetTurnaroundTime+0x12c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d906      	bls.n	8005e3e <USB_SetTurnaroundTime+0x82>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <USB_SetTurnaroundTime+0x130>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d802      	bhi.n	8005e3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e38:	230b      	movs	r3, #11
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	e036      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <USB_SetTurnaroundTime+0x130>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d906      	bls.n	8005e54 <USB_SetTurnaroundTime+0x98>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <USB_SetTurnaroundTime+0x134>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d802      	bhi.n	8005e54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e4e:	230a      	movs	r3, #10
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e02b      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <USB_SetTurnaroundTime+0x134>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d906      	bls.n	8005e6a <USB_SetTurnaroundTime+0xae>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <USB_SetTurnaroundTime+0x138>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d202      	bcs.n	8005e6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e64:	2309      	movs	r3, #9
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	e020      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <USB_SetTurnaroundTime+0x138>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d306      	bcc.n	8005e80 <USB_SetTurnaroundTime+0xc4>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4a20      	ldr	r2, [pc, #128]	; (8005ef8 <USB_SetTurnaroundTime+0x13c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d802      	bhi.n	8005e80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e015      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <USB_SetTurnaroundTime+0x13c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d906      	bls.n	8005e96 <USB_SetTurnaroundTime+0xda>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <USB_SetTurnaroundTime+0x140>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d202      	bcs.n	8005e96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e90:	2307      	movs	r3, #7
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e00a      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e96:	2306      	movs	r3, #6
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e007      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ea2:	2309      	movs	r3, #9
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e001      	b.n	8005eac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ea8:	2309      	movs	r3, #9
 8005eaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	029b      	lsls	r3, r3, #10
 8005ec0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	00d8acbf 	.word	0x00d8acbf
 8005edc:	00e4e1c0 	.word	0x00e4e1c0
 8005ee0:	00f42400 	.word	0x00f42400
 8005ee4:	01067380 	.word	0x01067380
 8005ee8:	011a499f 	.word	0x011a499f
 8005eec:	01312cff 	.word	0x01312cff
 8005ef0:	014ca43f 	.word	0x014ca43f
 8005ef4:	016e3600 	.word	0x016e3600
 8005ef8:	01a6ab1f 	.word	0x01a6ab1f
 8005efc:	01e84800 	.word	0x01e84800

08005f00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f043 0201 	orr.w	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 0201 	bic.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d115      	bne.n	8005f92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f72:	2001      	movs	r0, #1
 8005f74:	f7fb fc74 	bl	8001860 <HAL_Delay>
      ms++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fa5b 	bl	800743a <USB_GetMode>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d01e      	beq.n	8005fc8 <USB_SetCurrentMode+0x84>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b31      	cmp	r3, #49	; 0x31
 8005f8e:	d9f0      	bls.n	8005f72 <USB_SetCurrentMode+0x2e>
 8005f90:	e01a      	b.n	8005fc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d115      	bne.n	8005fc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f7fb fc5b 	bl	8001860 <HAL_Delay>
      ms++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fa42 	bl	800743a <USB_GetMode>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <USB_SetCurrentMode+0x84>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b31      	cmp	r3, #49	; 0x31
 8005fc0:	d9f0      	bls.n	8005fa4 <USB_SetCurrentMode+0x60>
 8005fc2:	e001      	b.n	8005fc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e005      	b.n	8005fd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b32      	cmp	r3, #50	; 0x32
 8005fcc:	d101      	bne.n	8005fd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fdc:	b084      	sub	sp, #16
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	e009      	b.n	8006010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3340      	adds	r3, #64	; 0x40
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	2200      	movs	r2, #0
 8006008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3301      	adds	r3, #1
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b0e      	cmp	r3, #14
 8006014:	d9f2      	bls.n	8005ffc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11c      	bne.n	8006056 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800602a:	f043 0302 	orr.w	r3, r3, #2
 800602e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e005      	b.n	8006062 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006068:	461a      	mov	r2, r3
 800606a:	2300      	movs	r3, #0
 800606c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	4619      	mov	r1, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	461a      	mov	r2, r3
 800607e:	680b      	ldr	r3, [r1, #0]
 8006080:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10c      	bne.n	80060a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800608e:	2100      	movs	r1, #0
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f975 	bl	8006380 <USB_SetDevSpeed>
 8006096:	e018      	b.n	80060ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006098:	2101      	movs	r1, #1
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f970 	bl	8006380 <USB_SetDevSpeed>
 80060a0:	e013      	b.n	80060ca <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d10c      	bne.n	80060c2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060ae:	2100      	movs	r1, #0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f965 	bl	8006380 <USB_SetDevSpeed>
 80060b6:	e008      	b.n	80060ca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060b8:	2101      	movs	r1, #1
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f960 	bl	8006380 <USB_SetDevSpeed>
 80060c0:	e003      	b.n	80060ca <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060c2:	2103      	movs	r1, #3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f95b 	bl	8006380 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060ca:	2110      	movs	r1, #16
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8f3 	bl	80062b8 <USB_FlushTxFifo>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f91f 	bl	8006320 <USB_FlushRxFifo>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	461a      	mov	r2, r3
 80060f4:	2300      	movs	r3, #0
 80060f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	461a      	mov	r2, r3
 8006100:	2300      	movs	r3, #0
 8006102:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	461a      	mov	r2, r3
 800610c:	2300      	movs	r3, #0
 800610e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	e043      	b.n	800619e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612c:	d118      	bne.n	8006160 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	461a      	mov	r2, r3
 8006142:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e013      	b.n	8006172 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	461a      	mov	r2, r3
 8006158:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e008      	b.n	8006172 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	461a      	mov	r2, r3
 800616e:	2300      	movs	r3, #0
 8006170:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	461a      	mov	r2, r3
 8006180:	2300      	movs	r3, #0
 8006182:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	461a      	mov	r2, r3
 8006192:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006196:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3b7      	bcc.n	8006116 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a6:	2300      	movs	r3, #0
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e043      	b.n	8006234 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c2:	d118      	bne.n	80061f6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	461a      	mov	r2, r3
 80061d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e013      	b.n	8006208 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	e008      	b.n	8006208 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	461a      	mov	r2, r3
 8006204:	2300      	movs	r3, #0
 8006206:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	461a      	mov	r2, r3
 8006216:	2300      	movs	r3, #0
 8006218:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	461a      	mov	r2, r3
 8006228:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800622c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	3301      	adds	r3, #1
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d3b7      	bcc.n	80061ac <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800625c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f043 0210 	orr.w	r2, r3, #16
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <USB_DevInit+0x2d4>)
 8006276:	4313      	orrs	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f043 0208 	orr.w	r2, r3, #8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800628e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d105      	bne.n	80062a0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <USB_DevInit+0x2d8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr
 80062b0:	803c3800 	.word	0x803c3800
 80062b4:	40000004 	.word	0x40000004

080062b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <USB_FlushTxFifo+0x64>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e01b      	b.n	8006310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	daf2      	bge.n	80062c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	019b      	lsls	r3, r3, #6
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a08      	ldr	r2, [pc, #32]	; (800631c <USB_FlushTxFifo+0x64>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d901      	bls.n	8006302 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e006      	b.n	8006310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d0f0      	beq.n	80062f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	00030d40 	.word	0x00030d40

08006320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <USB_FlushRxFifo+0x5c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e018      	b.n	8006370 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	daf2      	bge.n	800632c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2210      	movs	r2, #16
 800634e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a08      	ldr	r2, [pc, #32]	; (800637c <USB_FlushRxFifo+0x5c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d901      	bls.n	8006362 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e006      	b.n	8006370 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b10      	cmp	r3, #16
 800636c:	d0f0      	beq.n	8006350 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	00030d40 	.word	0x00030d40

08006380 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b087      	sub	sp, #28
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0306 	and.w	r3, r3, #6
 80063ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]
 80063d6:	e00a      	b.n	80063ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d002      	beq.n	80063e4 <USB_GetDevSpeed+0x32>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d102      	bne.n	80063ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063e4:	2302      	movs	r3, #2
 80063e6:	75fb      	strb	r3, [r7, #23]
 80063e8:	e001      	b.n	80063ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063ea:	230f      	movs	r3, #15
 80063ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d139      	bne.n	800648c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	2101      	movs	r1, #1
 800642a:	fa01 f303 	lsl.w	r3, r1, r3
 800642e:	b29b      	uxth	r3, r3
 8006430:	68f9      	ldr	r1, [r7, #12]
 8006432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006436:	4313      	orrs	r3, r2
 8006438:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d153      	bne.n	80064f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	791b      	ldrb	r3, [r3, #4]
 800646a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800646c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	059b      	lsls	r3, r3, #22
 8006472:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006474:	431a      	orrs	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	0159      	lsls	r1, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	440b      	add	r3, r1
 800647e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006482:	4619      	mov	r1, r3
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <USB_ActivateEndpoint+0x10c>)
 8006486:	4313      	orrs	r3, r2
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	e035      	b.n	80064f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	68f9      	ldr	r1, [r7, #12]
 80064a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d119      	bne.n	80064f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	791b      	ldrb	r3, [r3, #4]
 80064de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064e0:	430b      	orrs	r3, r1
 80064e2:	431a      	orrs	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	0159      	lsls	r1, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	440b      	add	r3, r1
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	4619      	mov	r1, r3
 80064f2:	4b05      	ldr	r3, [pc, #20]	; (8006508 <USB_ActivateEndpoint+0x10c>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	10008000 	.word	0x10008000

0800650c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	785b      	ldrb	r3, [r3, #1]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d161      	bne.n	80065ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800653a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653e:	d11f      	bne.n	8006580 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800655e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	b29b      	uxth	r3, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a0:	4013      	ands	r3, r2
 80065a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	2101      	movs	r1, #1
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c4:	4013      	ands	r3, r2
 80065c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	0159      	lsls	r1, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	440b      	add	r3, r1
 80065de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e2:	4619      	mov	r1, r3
 80065e4:	4b35      	ldr	r3, [pc, #212]	; (80066bc <USB_DeactivateEndpoint+0x1b0>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]
 80065ea:	e060      	b.n	80066ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006602:	d11f      	bne.n	8006644 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006622:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006642:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	2101      	movs	r1, #1
 8006656:	fa01 f303 	lsl.w	r3, r1, r3
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	43db      	mvns	r3, r3
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006664:	4013      	ands	r3, r2
 8006666:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	2101      	movs	r1, #1
 800667a:	fa01 f303 	lsl.w	r3, r1, r3
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	43db      	mvns	r3, r3
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006688:	4013      	ands	r3, r2
 800668a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	0159      	lsls	r1, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	440b      	add	r3, r1
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	4619      	mov	r1, r3
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <USB_DeactivateEndpoint+0x1b4>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	ec337800 	.word	0xec337800
 80066c0:	eff37800 	.word	0xeff37800

080066c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	; 0x28
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 8163 	bne.w	80069ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d132      	bne.n	8006754 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	0159      	lsls	r1, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	440b      	add	r3, r1
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	4619      	mov	r1, r3
 800670a:	4ba5      	ldr	r3, [pc, #660]	; (80069a0 <USB_EPStartXfer+0x2dc>)
 800670c:	4013      	ands	r3, r2
 800670e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800672e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	0159      	lsls	r1, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	440b      	add	r3, r1
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	4619      	mov	r1, r3
 800674c:	4b95      	ldr	r3, [pc, #596]	; (80069a4 <USB_EPStartXfer+0x2e0>)
 800674e:	4013      	ands	r3, r2
 8006750:	610b      	str	r3, [r1, #16]
 8006752:	e074      	b.n	800683e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	0159      	lsls	r1, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	440b      	add	r3, r1
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	4619      	mov	r1, r3
 8006770:	4b8c      	ldr	r3, [pc, #560]	; (80069a4 <USB_EPStartXfer+0x2e0>)
 8006772:	4013      	ands	r3, r2
 8006774:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	0159      	lsls	r1, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	440b      	add	r3, r1
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	4619      	mov	r1, r3
 8006792:	4b83      	ldr	r3, [pc, #524]	; (80069a0 <USB_EPStartXfer+0x2dc>)
 8006794:	4013      	ands	r3, r2
 8006796:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6999      	ldr	r1, [r3, #24]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	440b      	add	r3, r1
 80067b0:	1e59      	subs	r1, r3, #1
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067bc:	4b7a      	ldr	r3, [pc, #488]	; (80069a8 <USB_EPStartXfer+0x2e4>)
 80067be:	400b      	ands	r3, r1
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	0148      	lsls	r0, r1, #5
 80067c4:	69f9      	ldr	r1, [r7, #28]
 80067c6:	4401      	add	r1, r0
 80067c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067cc:	4313      	orrs	r3, r2
 80067ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	0148      	lsls	r0, r1, #5
 80067ea:	69f9      	ldr	r1, [r7, #28]
 80067ec:	4401      	add	r1, r0
 80067ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067f2:	4313      	orrs	r3, r2
 80067f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	791b      	ldrb	r3, [r3, #4]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d11f      	bne.n	800683e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006818:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800681c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800683c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d14b      	bne.n	80068dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	461a      	mov	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	791b      	ldrb	r3, [r3, #4]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d128      	bne.n	80068ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d110      	bne.n	800689a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e00f      	b.n	80068ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e137      	b.n	8006b4c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	791b      	ldrb	r3, [r3, #4]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d015      	beq.n	8006930 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 811f 	beq.w	8006b4c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	2101      	movs	r1, #1
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	69f9      	ldr	r1, [r7, #28]
 8006926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800692a:	4313      	orrs	r3, r2
 800692c:	634b      	str	r3, [r1, #52]	; 0x34
 800692e:	e10d      	b.n	8006b4c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d110      	bne.n	8006962 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e00f      	b.n	8006982 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6919      	ldr	r1, [r3, #16]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	b298      	uxth	r0, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4603      	mov	r3, r0
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 faea 	bl	8006f70 <USB_WritePacket>
 800699c:	e0d6      	b.n	8006b4c <USB_EPStartXfer+0x488>
 800699e:	bf00      	nop
 80069a0:	e007ffff 	.word	0xe007ffff
 80069a4:	fff80000 	.word	0xfff80000
 80069a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b8:	691a      	ldr	r2, [r3, #16]
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	0159      	lsls	r1, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	4619      	mov	r1, r3
 80069c8:	4b63      	ldr	r3, [pc, #396]	; (8006b58 <USB_EPStartXfer+0x494>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	0159      	lsls	r1, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	440b      	add	r3, r1
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	4619      	mov	r1, r3
 80069ea:	4b5c      	ldr	r3, [pc, #368]	; (8006b5c <USB_EPStartXfer+0x498>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d123      	bne.n	8006a40 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0e:	69b9      	ldr	r1, [r7, #24]
 8006a10:	0148      	lsls	r0, r1, #5
 8006a12:	69f9      	ldr	r1, [r7, #28]
 8006a14:	4401      	add	r1, r0
 8006a16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a3c:	6113      	str	r3, [r2, #16]
 8006a3e:	e037      	b.n	8006ab0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	1e5a      	subs	r2, r3, #1
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	8afa      	ldrh	r2, [r7, #22]
 8006a5c:	fb03 f202 	mul.w	r2, r3, r2
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	8afb      	ldrh	r3, [r7, #22]
 8006a74:	04d9      	lsls	r1, r3, #19
 8006a76:	4b3a      	ldr	r3, [pc, #232]	; (8006b60 <USB_EPStartXfer+0x49c>)
 8006a78:	400b      	ands	r3, r1
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	0148      	lsls	r0, r1, #5
 8006a7e:	69f9      	ldr	r1, [r7, #28]
 8006a80:	4401      	add	r1, r0
 8006a82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a86:	4313      	orrs	r3, r2
 8006a88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa0:	69b9      	ldr	r1, [r7, #24]
 8006aa2:	0148      	lsls	r0, r1, #5
 8006aa4:	69f9      	ldr	r1, [r7, #28]
 8006aa6:	4401      	add	r1, r0
 8006aa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aac:	4313      	orrs	r3, r2
 8006aae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d10d      	bne.n	8006ad2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6919      	ldr	r1, [r3, #16]
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	460a      	mov	r2, r1
 8006ad0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	791b      	ldrb	r3, [r3, #4]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d128      	bne.n	8006b2c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d110      	bne.n	8006b0c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e00f      	b.n	8006b2c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	fff80000 	.word	0xfff80000
 8006b5c:	e007ffff 	.word	0xe007ffff
 8006b60:	1ff80000 	.word	0x1ff80000

08006b64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	f040 80ce 	bne.w	8006d22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d132      	bne.n	8006bf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	0159      	lsls	r1, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	440b      	add	r3, r1
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4b9a      	ldr	r3, [pc, #616]	; (8006e14 <USB_EP0StartXfer+0x2b0>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	0159      	lsls	r1, r3, #5
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	4619      	mov	r1, r3
 8006bec:	4b8a      	ldr	r3, [pc, #552]	; (8006e18 <USB_EP0StartXfer+0x2b4>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	610b      	str	r3, [r1, #16]
 8006bf2:	e04e      	b.n	8006c92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	0159      	lsls	r1, r3, #5
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	440b      	add	r3, r1
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4b81      	ldr	r3, [pc, #516]	; (8006e18 <USB_EP0StartXfer+0x2b4>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	0159      	lsls	r1, r3, #5
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	440b      	add	r3, r1
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	4619      	mov	r1, r3
 8006c32:	4b78      	ldr	r3, [pc, #480]	; (8006e14 <USB_EP0StartXfer+0x2b0>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c82:	6939      	ldr	r1, [r7, #16]
 8006c84:	0148      	lsls	r0, r1, #5
 8006c86:	6979      	ldr	r1, [r7, #20]
 8006c88:	4401      	add	r1, r0
 8006c8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d11e      	bne.n	8006cd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	461a      	mov	r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	e097      	b.n	8006e06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8083 	beq.w	8006e06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f303 	lsl.w	r3, r1, r3
 8006d16:	6979      	ldr	r1, [r7, #20]
 8006d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	634b      	str	r3, [r1, #52]	; 0x34
 8006d20:	e071      	b.n	8006e06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	0159      	lsls	r1, r3, #5
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	440b      	add	r3, r1
 8006d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <USB_EP0StartXfer+0x2b4>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	0159      	lsls	r1, r3, #5
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	440b      	add	r3, r1
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <USB_EP0StartXfer+0x2b0>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db4:	6939      	ldr	r1, [r7, #16]
 8006db6:	0148      	lsls	r0, r1, #5
 8006db8:	6979      	ldr	r1, [r7, #20]
 8006dba:	4401      	add	r1, r0
 8006dbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d10d      	bne.n	8006de6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6919      	ldr	r1, [r3, #16]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	460a      	mov	r2, r1
 8006de4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	e007ffff 	.word	0xe007ffff
 8006e18:	fff80000 	.word	0xfff80000

08006e1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d14a      	bne.n	8006ed0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e52:	f040 8086 	bne.w	8006f62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d902      	bls.n	8006eb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e056      	b.n	8006f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ecc:	d0e7      	beq.n	8006e9e <USB_EPStopXfer+0x82>
 8006ece:	e048      	b.n	8006f62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee8:	d13b      	bne.n	8006f62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d902      	bls.n	8006f48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
          break;
 8006f46:	e00c      	b.n	8006f62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f60:	d0e7      	beq.n	8006f32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b089      	sub	sp, #36	; 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	460b      	mov	r3, r1
 8006f80:	71fb      	strb	r3, [r7, #7]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d123      	bne.n	8006fde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f96:	88bb      	ldrh	r3, [r7, #4]
 8006f98:	3303      	adds	r3, #3
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	e018      	b.n	8006fd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	031a      	lsls	r2, r3, #12
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3e2      	bcc.n	8006fa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3724      	adds	r7, #36	; 0x24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b08b      	sub	sp, #44	; 0x2c
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	b29b      	uxth	r3, r3
 8007008:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	e014      	b.n	8007042 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	601a      	str	r2, [r3, #0]
    pDest++;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	3301      	adds	r3, #1
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	3301      	adds	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	3301      	adds	r3, #1
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	3301      	adds	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	3301      	adds	r3, #1
 8007040:	623b      	str	r3, [r7, #32]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	429a      	cmp	r2, r3
 8007048:	d3e6      	bcc.n	8007018 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800704a:	8bfb      	ldrh	r3, [r7, #30]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01e      	beq.n	800708e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705a:	461a      	mov	r2, r3
 800705c:	f107 0310 	add.w	r3, r7, #16
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	701a      	strb	r2, [r3, #0]
      i++;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	3301      	adds	r3, #1
 800707a:	623b      	str	r3, [r7, #32]
      pDest++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	3b01      	subs	r3, #1
 8007086:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007088:	8bfb      	ldrh	r3, [r7, #30]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1ea      	bne.n	8007064 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007090:	4618      	mov	r0, r3
 8007092:	372c      	adds	r7, #44	; 0x2c
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d12c      	bne.n	8007112 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	db12      	blt.n	80070f0 <USB_EPSetStall+0x54>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00f      	beq.n	80070f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e02b      	b.n	800716a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db12      	blt.n	800714a <USB_EPSetStall+0xae>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00f      	beq.n	800714a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007148:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	785b      	ldrb	r3, [r3, #1]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d128      	bne.n	80071e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d003      	beq.n	80071c4 <USB_EPClearStall+0x4c>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	791b      	ldrb	r3, [r3, #4]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d138      	bne.n	8007236 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	e027      	b.n	8007236 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007204:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d003      	beq.n	8007216 <USB_EPClearStall+0x9e>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d10f      	bne.n	8007236 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007234:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007262:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007266:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007278:	68f9      	ldr	r1, [r7, #12]
 800727a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072be:	f023 0302 	bic.w	r3, r3, #2
 80072c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0c1b      	lsrs	r3, r3, #16
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	b29b      	uxth	r3, r3
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4013      	ands	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073d0:	68bb      	ldr	r3, [r7, #8]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007400:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	b2db      	uxtb	r3, r3
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4013      	ands	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800742c:	68bb      	ldr	r3, [r7, #8]
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	f003 0301 	and.w	r3, r3, #1
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007472:	4619      	mov	r1, r3
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <USB_ActivateSetup+0x44>)
 8007476:	4013      	ands	r3, r2
 8007478:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800748c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	fffff800 	.word	0xfffff800

080074a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	460b      	mov	r3, r1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	333c      	adds	r3, #60	; 0x3c
 80074b6:	3304      	adds	r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <USB_EP0_OutStart+0xb8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d90a      	bls.n	80074da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d4:	d101      	bne.n	80074da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e037      	b.n	800754a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007508:	f043 0318 	orr.w	r3, r3, #24
 800750c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007520:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10f      	bne.n	8007548 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007542:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	4f54300a 	.word	0x4f54300a

0800755c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <USB_CoreReset+0x64>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d901      	bls.n	800757a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e01b      	b.n	80075b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	daf2      	bge.n	8007568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f043 0201 	orr.w	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <USB_CoreReset+0x64>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d901      	bls.n	80075a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e006      	b.n	80075b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d0f0      	beq.n	8007592 <USB_CoreReset+0x36>

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	00030d40 	.word	0x00030d40

080075c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075d4:	f002 fd90 	bl	800a0f8 <malloc>
 80075d8:	4603      	mov	r3, r0
 80075da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32b0      	adds	r2, #176	; 0xb0
 80075ec:	2100      	movs	r1, #0
 80075ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075f2:	2302      	movs	r3, #2
 80075f4:	e0d4      	b.n	80077a0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80075f6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80075fa:	2100      	movs	r1, #0
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f002 fe61 	bl	800a2c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	32b0      	adds	r2, #176	; 0xb0
 800760c:	68f9      	ldr	r1, [r7, #12]
 800760e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	32b0      	adds	r2, #176	; 0xb0
 800761c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d138      	bne.n	80076a0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800762e:	4b5e      	ldr	r3, [pc, #376]	; (80077a8 <USBD_CDC_Init+0x1e4>)
 8007630:	7819      	ldrb	r1, [r3, #0]
 8007632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007636:	2202      	movs	r2, #2
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f002 fbba 	bl	8009db2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800763e:	4b5a      	ldr	r3, [pc, #360]	; (80077a8 <USBD_CDC_Init+0x1e4>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 020f 	and.w	r2, r3, #15
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	2201      	movs	r2, #1
 8007656:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007658:	4b54      	ldr	r3, [pc, #336]	; (80077ac <USBD_CDC_Init+0x1e8>)
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007660:	2202      	movs	r2, #2
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f002 fba5 	bl	8009db2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007668:	4b50      	ldr	r3, [pc, #320]	; (80077ac <USBD_CDC_Init+0x1e8>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 020f 	and.w	r2, r3, #15
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007680:	2201      	movs	r2, #1
 8007682:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007684:	4b4a      	ldr	r3, [pc, #296]	; (80077b0 <USBD_CDC_Init+0x1ec>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f003 020f 	and.w	r2, r3, #15
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	3326      	adds	r3, #38	; 0x26
 800769a:	2210      	movs	r2, #16
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e035      	b.n	800770c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076a0:	4b41      	ldr	r3, [pc, #260]	; (80077a8 <USBD_CDC_Init+0x1e4>)
 80076a2:	7819      	ldrb	r1, [r3, #0]
 80076a4:	2340      	movs	r3, #64	; 0x40
 80076a6:	2202      	movs	r2, #2
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f002 fb82 	bl	8009db2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076ae:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <USBD_CDC_Init+0x1e4>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	3324      	adds	r3, #36	; 0x24
 80076c4:	2201      	movs	r2, #1
 80076c6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076c8:	4b38      	ldr	r3, [pc, #224]	; (80077ac <USBD_CDC_Init+0x1e8>)
 80076ca:	7819      	ldrb	r1, [r3, #0]
 80076cc:	2340      	movs	r3, #64	; 0x40
 80076ce:	2202      	movs	r2, #2
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f002 fb6e 	bl	8009db2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076d6:	4b35      	ldr	r3, [pc, #212]	; (80077ac <USBD_CDC_Init+0x1e8>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 020f 	and.w	r2, r3, #15
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	4613      	mov	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	440b      	add	r3, r1
 80076ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076ee:	2201      	movs	r2, #1
 80076f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076f2:	4b2f      	ldr	r3, [pc, #188]	; (80077b0 <USBD_CDC_Init+0x1ec>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	f003 020f 	and.w	r2, r3, #15
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	3326      	adds	r3, #38	; 0x26
 8007708:	2210      	movs	r2, #16
 800770a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800770c:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <USBD_CDC_Init+0x1ec>)
 800770e:	7819      	ldrb	r1, [r3, #0]
 8007710:	2308      	movs	r3, #8
 8007712:	2203      	movs	r2, #3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f002 fb4c 	bl	8009db2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800771a:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <USBD_CDC_Init+0x1ec>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f003 020f 	and.w	r2, r3, #15
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	3324      	adds	r3, #36	; 0x24
 8007730:	2201      	movs	r2, #1
 8007732:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	33b0      	adds	r3, #176	; 0xb0
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800776a:	2302      	movs	r3, #2
 800776c:	e018      	b.n	80077a0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7c1b      	ldrb	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <USBD_CDC_Init+0x1e8>)
 8007778:	7819      	ldrb	r1, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f002 fc03 	bl	8009f90 <USBD_LL_PrepareReceive>
 800778a:	e008      	b.n	800779e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800778c:	4b07      	ldr	r3, [pc, #28]	; (80077ac <USBD_CDC_Init+0x1e8>)
 800778e:	7819      	ldrb	r1, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007796:	2340      	movs	r3, #64	; 0x40
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f002 fbf9 	bl	8009f90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000093 	.word	0x20000093
 80077ac:	20000094 	.word	0x20000094
 80077b0:	20000095 	.word	0x20000095

080077b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80077c0:	4b3a      	ldr	r3, [pc, #232]	; (80078ac <USBD_CDC_DeInit+0xf8>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 fb19 	bl	8009dfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077cc:	4b37      	ldr	r3, [pc, #220]	; (80078ac <USBD_CDC_DeInit+0xf8>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 020f 	and.w	r2, r3, #15
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	3324      	adds	r3, #36	; 0x24
 80077e2:	2200      	movs	r2, #0
 80077e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80077e6:	4b32      	ldr	r3, [pc, #200]	; (80078b0 <USBD_CDC_DeInit+0xfc>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 fb06 	bl	8009dfe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80077f2:	4b2f      	ldr	r3, [pc, #188]	; (80078b0 <USBD_CDC_DeInit+0xfc>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 020f 	and.w	r2, r3, #15
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800780a:	2200      	movs	r2, #0
 800780c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800780e:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <USBD_CDC_DeInit+0x100>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f002 faf2 	bl	8009dfe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800781a:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <USBD_CDC_DeInit+0x100>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	f003 020f 	and.w	r2, r3, #15
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	3324      	adds	r3, #36	; 0x24
 8007830:	2200      	movs	r2, #0
 8007832:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007834:	4b1f      	ldr	r3, [pc, #124]	; (80078b4 <USBD_CDC_DeInit+0x100>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 020f 	and.w	r2, r3, #15
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	440b      	add	r3, r1
 8007848:	3326      	adds	r3, #38	; 0x26
 800784a:	2200      	movs	r2, #0
 800784c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	32b0      	adds	r2, #176	; 0xb0
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01f      	beq.n	80078a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	33b0      	adds	r3, #176	; 0xb0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	32b0      	adds	r2, #176	; 0xb0
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	4618      	mov	r0, r3
 8007884:	f002 fc40 	bl	800a108 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	32b0      	adds	r2, #176	; 0xb0
 8007892:	2100      	movs	r1, #0
 8007894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000093 	.word	0x20000093
 80078b0:	20000094 	.word	0x20000094
 80078b4:	20000095 	.word	0x20000095

080078b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	32b0      	adds	r2, #176	; 0xb0
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e0bf      	b.n	8007a68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d050      	beq.n	8007996 <USBD_CDC_Setup+0xde>
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	f040 80af 	bne.w	8007a58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d03a      	beq.n	8007978 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	da1b      	bge.n	8007944 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	33b0      	adds	r3, #176	; 0xb0
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007922:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	88d2      	ldrh	r2, [r2, #6]
 8007928:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	88db      	ldrh	r3, [r3, #6]
 800792e:	2b07      	cmp	r3, #7
 8007930:	bf28      	it	cs
 8007932:	2307      	movcs	r3, #7
 8007934:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	89fa      	ldrh	r2, [r7, #14]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fdad 	bl	800949c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007942:	e090      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	785a      	ldrb	r2, [r3, #1]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	2b3f      	cmp	r3, #63	; 0x3f
 8007954:	d803      	bhi.n	800795e <USBD_CDC_Setup+0xa6>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	b2da      	uxtb	r2, r3
 800795c:	e000      	b.n	8007960 <USBD_CDC_Setup+0xa8>
 800795e:	2240      	movs	r2, #64	; 0x40
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007966:	6939      	ldr	r1, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800796e:	461a      	mov	r2, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fdbf 	bl	80094f4 <USBD_CtlPrepareRx>
      break;
 8007976:	e076      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	33b0      	adds	r3, #176	; 0xb0
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	7850      	ldrb	r0, [r2, #1]
 800798e:	2200      	movs	r2, #0
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	4798      	blx	r3
      break;
 8007994:	e067      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b0b      	cmp	r3, #11
 800799c:	d851      	bhi.n	8007a42 <USBD_CDC_Setup+0x18a>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <USBD_CDC_Setup+0xec>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079d5 	.word	0x080079d5
 80079a8:	08007a51 	.word	0x08007a51
 80079ac:	08007a43 	.word	0x08007a43
 80079b0:	08007a43 	.word	0x08007a43
 80079b4:	08007a43 	.word	0x08007a43
 80079b8:	08007a43 	.word	0x08007a43
 80079bc:	08007a43 	.word	0x08007a43
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007a43 	.word	0x08007a43
 80079c8:	08007a43 	.word	0x08007a43
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	08007a29 	.word	0x08007a29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d107      	bne.n	80079f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079e0:	f107 030a 	add.w	r3, r7, #10
 80079e4:	2202      	movs	r2, #2
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fd57 	bl	800949c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ee:	e032      	b.n	8007a56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fce1 	bl	80093ba <USBD_CtlError>
            ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	75fb      	strb	r3, [r7, #23]
          break;
 80079fc:	e02b      	b.n	8007a56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d107      	bne.n	8007a1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a0a:	f107 030d 	add.w	r3, r7, #13
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fd42 	bl	800949c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a18:	e01d      	b.n	8007a56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fccc 	bl	80093ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007a22:	2303      	movs	r3, #3
 8007a24:	75fb      	strb	r3, [r7, #23]
          break;
 8007a26:	e016      	b.n	8007a56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d00f      	beq.n	8007a54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fcbf 	bl	80093ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a40:	e008      	b.n	8007a54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fcb8 	bl	80093ba <USBD_CtlError>
          ret = USBD_FAIL;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a4e:	e002      	b.n	8007a56 <USBD_CDC_Setup+0x19e>
          break;
 8007a50:	bf00      	nop
 8007a52:	e008      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>
          break;
 8007a54:	bf00      	nop
      }
      break;
 8007a56:	e006      	b.n	8007a66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fcad 	bl	80093ba <USBD_CtlError>
      ret = USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	75fb      	strb	r3, [r7, #23]
      break;
 8007a64:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32b0      	adds	r2, #176	; 0xb0
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e065      	b.n	8007b66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32b0      	adds	r2, #176	; 0xb0
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	3318      	adds	r3, #24
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d02f      	beq.n	8007b24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	f003 020f 	and.w	r2, r3, #15
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3318      	adds	r3, #24
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 010f 	and.w	r1, r3, #15
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	440b      	add	r3, r1
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4403      	add	r3, r0
 8007aec:	3348      	adds	r3, #72	; 0x48
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d112      	bne.n	8007b24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3318      	adds	r3, #24
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b16:	78f9      	ldrb	r1, [r7, #3]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f002 fa16 	bl	8009f4e <USBD_LL_Transmit>
 8007b22:	e01f      	b.n	8007b64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	33b0      	adds	r3, #176	; 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d010      	beq.n	8007b64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	33b0      	adds	r3, #176	; 0xb0
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	32b0      	adds	r2, #176	; 0xb0
 8007b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	32b0      	adds	r2, #176	; 0xb0
 8007b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e01a      	b.n	8007bd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f002 fa14 	bl	8009fd2 <USBD_LL_GetRxDataSize>
 8007baa:	4602      	mov	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	33b0      	adds	r3, #176	; 0xb0
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	32b0      	adds	r2, #176	; 0xb0
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e025      	b.n	8007c4c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	33b0      	adds	r3, #176	; 0xb0
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01a      	beq.n	8007c4a <USBD_CDC_EP0_RxReady+0x6c>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c1a:	2bff      	cmp	r3, #255	; 0xff
 8007c1c:	d015      	beq.n	8007c4a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	33b0      	adds	r3, #176	; 0xb0
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c36:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c3e:	b292      	uxth	r2, r2
 8007c40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c5c:	2182      	movs	r1, #130	; 0x82
 8007c5e:	4818      	ldr	r0, [pc, #96]	; (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c60:	f000 fd49 	bl	80086f6 <USBD_GetEpDesc>
 8007c64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c66:	2101      	movs	r1, #1
 8007c68:	4815      	ldr	r0, [pc, #84]	; (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c6a:	f000 fd44 	bl	80086f6 <USBD_GetEpDesc>
 8007c6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c70:	2181      	movs	r1, #129	; 0x81
 8007c72:	4813      	ldr	r0, [pc, #76]	; (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c74:	f000 fd3f 	bl	80086f6 <USBD_GetEpDesc>
 8007c78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2210      	movs	r2, #16
 8007c84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d006      	beq.n	8007c9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c94:	711a      	strb	r2, [r3, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca8:	711a      	strb	r2, [r3, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2243      	movs	r2, #67	; 0x43
 8007cb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000050 	.word	0x20000050

08007cc4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ccc:	2182      	movs	r1, #130	; 0x82
 8007cce:	4818      	ldr	r0, [pc, #96]	; (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cd0:	f000 fd11 	bl	80086f6 <USBD_GetEpDesc>
 8007cd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4815      	ldr	r0, [pc, #84]	; (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cda:	f000 fd0c 	bl	80086f6 <USBD_GetEpDesc>
 8007cde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ce0:	2181      	movs	r1, #129	; 0x81
 8007ce2:	4813      	ldr	r0, [pc, #76]	; (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ce4:	f000 fd07 	bl	80086f6 <USBD_GetEpDesc>
 8007ce8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	711a      	strb	r2, [r3, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f042 0202 	orr.w	r2, r2, #2
 8007d08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d006      	beq.n	8007d1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	711a      	strb	r2, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f042 0202 	orr.w	r2, r2, #2
 8007d1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2243      	movs	r2, #67	; 0x43
 8007d22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d24:	4b02      	ldr	r3, [pc, #8]	; (8007d30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000050 	.word	0x20000050

08007d34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d3c:	2182      	movs	r1, #130	; 0x82
 8007d3e:	4818      	ldr	r0, [pc, #96]	; (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d40:	f000 fcd9 	bl	80086f6 <USBD_GetEpDesc>
 8007d44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d46:	2101      	movs	r1, #1
 8007d48:	4815      	ldr	r0, [pc, #84]	; (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d4a:	f000 fcd4 	bl	80086f6 <USBD_GetEpDesc>
 8007d4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d50:	2181      	movs	r1, #129	; 0x81
 8007d52:	4813      	ldr	r0, [pc, #76]	; (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d54:	f000 fccf 	bl	80086f6 <USBD_GetEpDesc>
 8007d58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2210      	movs	r2, #16
 8007d64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d006      	beq.n	8007d7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d74:	711a      	strb	r2, [r3, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d88:	711a      	strb	r2, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2243      	movs	r2, #67	; 0x43
 8007d92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d94:	4b02      	ldr	r3, [pc, #8]	; (8007da0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000050 	.word	0x20000050

08007da4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	220a      	movs	r2, #10
 8007db0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007db2:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	2000000c 	.word	0x2000000c

08007dc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e009      	b.n	8007dec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	33b0      	adds	r3, #176	; 0xb0
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	32b0      	adds	r2, #176	; 0xb0
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e008      	b.n	8007e30 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	32b0      	adds	r2, #176	; 0xb0
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e004      	b.n	8007e6a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	32b0      	adds	r2, #176	; 0xb0
 8007e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e025      	b.n	8007eea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11f      	bne.n	8007ee8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007eb0:	4b10      	ldr	r3, [pc, #64]	; (8007ef4 <USBD_CDC_TransmitPacket+0x7c>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4403      	add	r3, r0
 8007eca:	3318      	adds	r3, #24
 8007ecc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <USBD_CDC_TransmitPacket+0x7c>)
 8007ed0:	7819      	ldrb	r1, [r3, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f002 f835 	bl	8009f4e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000093 	.word	0x20000093

08007ef8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32b0      	adds	r2, #176	; 0xb0
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32b0      	adds	r2, #176	; 0xb0
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e018      	b.n	8007f58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7c1b      	ldrb	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10a      	bne.n	8007f44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <USBD_CDC_ReceivePacket+0x68>)
 8007f30:	7819      	ldrb	r1, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f002 f827 	bl	8009f90 <USBD_LL_PrepareReceive>
 8007f42:	e008      	b.n	8007f56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f44:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <USBD_CDC_ReceivePacket+0x68>)
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f002 f81d 	bl	8009f90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000094 	.word	0x20000094

08007f64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e01f      	b.n	8007fbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	79fa      	ldrb	r2, [r7, #7]
 8007fae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f001 fe93 	bl	8009cdc <USBD_LL_Init>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e025      	b.n	8008028 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	32ae      	adds	r2, #174	; 0xae
 8007fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00f      	beq.n	8008018 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32ae      	adds	r2, #174	; 0xae
 8008002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	f107 020e 	add.w	r2, r7, #14
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	4602      	mov	r2, r0
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fe9f 	bl	8009d7c <USBD_LL_Start>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	4611      	mov	r1, r2
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	4611      	mov	r1, r2
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 f932 	bl	8009346 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2b02      	cmp	r3, #2
 8008104:	d01a      	beq.n	800813c <USBD_LL_SetupStage+0x72>
 8008106:	2b02      	cmp	r3, #2
 8008108:	d822      	bhi.n	8008150 <USBD_LL_SetupStage+0x86>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <USBD_LL_SetupStage+0x4a>
 800810e:	2b01      	cmp	r3, #1
 8008110:	d00a      	beq.n	8008128 <USBD_LL_SetupStage+0x5e>
 8008112:	e01d      	b.n	8008150 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fb5f 	bl	80087e0 <USBD_StdDevReq>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
      break;
 8008126:	e020      	b.n	800816a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fbc7 	bl	80088c4 <USBD_StdItfReq>
 8008136:	4603      	mov	r3, r0
 8008138:	73fb      	strb	r3, [r7, #15]
      break;
 800813a:	e016      	b.n	800816a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc29 	bl	800899c <USBD_StdEPReq>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]
      break;
 800814e:	e00c      	b.n	800816a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008156:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fe6c 	bl	8009e3c <USBD_LL_StallEP>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
      break;
 8008168:	bf00      	nop
  }

  return ret;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	460b      	mov	r3, r1
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d16e      	bne.n	800826a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008192:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800819a:	2b03      	cmp	r3, #3
 800819c:	f040 8098 	bne.w	80082d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d913      	bls.n	80081d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4293      	cmp	r3, r2
 80081c4:	bf28      	it	cs
 80081c6:	4613      	movcs	r3, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f001 f9ae 	bl	800952e <USBD_CtlContinueRx>
 80081d2:	e07d      	b.n	80082d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d014      	beq.n	800820c <USBD_LL_DataOutStage+0x98>
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d81d      	bhi.n	8008222 <USBD_LL_DataOutStage+0xae>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <USBD_LL_DataOutStage+0x7c>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d003      	beq.n	80081f6 <USBD_LL_DataOutStage+0x82>
 80081ee:	e018      	b.n	8008222 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75bb      	strb	r3, [r7, #22]
            break;
 80081f4:	e018      	b.n	8008228 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fa5e 	bl	80086c2 <USBD_CoreFindIF>
 8008206:	4603      	mov	r3, r0
 8008208:	75bb      	strb	r3, [r7, #22]
            break;
 800820a:	e00d      	b.n	8008228 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008212:	b2db      	uxtb	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fa60 	bl	80086dc <USBD_CoreFindEP>
 800821c:	4603      	mov	r3, r0
 800821e:	75bb      	strb	r3, [r7, #22]
            break;
 8008220:	e002      	b.n	8008228 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	75bb      	strb	r3, [r7, #22]
            break;
 8008226:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008228:	7dbb      	ldrb	r3, [r7, #22]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d119      	bne.n	8008262 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b03      	cmp	r3, #3
 8008238:	d113      	bne.n	8008262 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800823a:	7dba      	ldrb	r2, [r7, #22]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	32ae      	adds	r2, #174	; 0xae
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800824a:	7dba      	ldrb	r2, [r7, #22]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008252:	7dba      	ldrb	r2, [r7, #22]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	32ae      	adds	r2, #174	; 0xae
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f001 f974 	bl	8009550 <USBD_CtlSendStatus>
 8008268:	e032      	b.n	80082d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008270:	b2db      	uxtb	r3, r3
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fa31 	bl	80086dc <USBD_CoreFindEP>
 800827a:	4603      	mov	r3, r0
 800827c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800827e:	7dbb      	ldrb	r3, [r7, #22]
 8008280:	2bff      	cmp	r3, #255	; 0xff
 8008282:	d025      	beq.n	80082d0 <USBD_LL_DataOutStage+0x15c>
 8008284:	7dbb      	ldrb	r3, [r7, #22]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d122      	bne.n	80082d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b03      	cmp	r3, #3
 8008294:	d117      	bne.n	80082c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008296:	7dba      	ldrb	r2, [r7, #22]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	32ae      	adds	r2, #174	; 0xae
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00f      	beq.n	80082c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80082a6:	7dba      	ldrb	r2, [r7, #22]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80082ae:	7dba      	ldrb	r2, [r7, #22]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	32ae      	adds	r2, #174	; 0xae
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	7afa      	ldrb	r2, [r7, #11]
 80082bc:	4611      	mov	r1, r2
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	e000      	b.n	80082d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	460b      	mov	r3, r1
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d16f      	bne.n	80083ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3314      	adds	r3, #20
 80082f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d15a      	bne.n	80083b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	429a      	cmp	r2, r3
 8008308:	d914      	bls.n	8008334 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	461a      	mov	r2, r3
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f001 f8d6 	bl	80094d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008326:	2300      	movs	r3, #0
 8008328:	2200      	movs	r2, #0
 800832a:	2100      	movs	r1, #0
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f001 fe2f 	bl	8009f90 <USBD_LL_PrepareReceive>
 8008332:	e03f      	b.n	80083b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	d11c      	bne.n	800837a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008348:	429a      	cmp	r2, r3
 800834a:	d316      	bcc.n	800837a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008356:	429a      	cmp	r2, r3
 8008358:	d20f      	bcs.n	800837a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800835a:	2200      	movs	r2, #0
 800835c:	2100      	movs	r1, #0
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f001 f8b7 	bl	80094d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800836c:	2300      	movs	r3, #0
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f001 fe0c 	bl	8009f90 <USBD_LL_PrepareReceive>
 8008378:	e01c      	b.n	80083b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b03      	cmp	r3, #3
 8008384:	d10f      	bne.n	80083a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f001 fd47 	bl	8009e3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f001 f8e1 	bl	8009576 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d03a      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fe42 	bl	8008048 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083cc:	e032      	b.n	8008434 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f97f 	bl	80086dc <USBD_CoreFindEP>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	2bff      	cmp	r3, #255	; 0xff
 80083e6:	d025      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d122      	bne.n	8008434 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d11c      	bne.n	8008434 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083fa:	7dfa      	ldrb	r2, [r7, #23]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	32ae      	adds	r2, #174	; 0xae
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d014      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800840a:	7dfa      	ldrb	r2, [r7, #23]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008412:	7dfa      	ldrb	r2, [r7, #23]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	32ae      	adds	r2, #174	; 0xae
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	7afa      	ldrb	r2, [r7, #11]
 8008420:	4611      	mov	r1, r2
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	4798      	blx	r3
 8008426:	4603      	mov	r3, r0
 8008428:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008430:	7dbb      	ldrb	r3, [r7, #22]
 8008432:	e000      	b.n	8008436 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d014      	beq.n	80084a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00e      	beq.n	80084a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6852      	ldr	r2, [r2, #4]
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	4611      	mov	r1, r2
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084a4:	2340      	movs	r3, #64	; 0x40
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 fc81 	bl	8009db2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2240      	movs	r2, #64	; 0x40
 80084bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084c0:	2340      	movs	r3, #64	; 0x40
 80084c2:	2200      	movs	r2, #0
 80084c4:	2180      	movs	r1, #128	; 0x80
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fc73 	bl	8009db2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2240      	movs	r2, #64	; 0x40
 80084d6:	621a      	str	r2, [r3, #32]

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008510:	b2da      	uxtb	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b04      	cmp	r3, #4
 8008540:	d106      	bne.n	8008550 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008548:	b2da      	uxtb	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b03      	cmp	r3, #3
 8008570:	d110      	bne.n	8008594 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	32ae      	adds	r2, #174	; 0xae
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	e01c      	b.n	80085fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d115      	bne.n	80085f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32ae      	adds	r2, #174	; 0xae
 80085d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	32ae      	adds	r2, #174	; 0xae
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	4611      	mov	r1, r2
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	32ae      	adds	r2, #174	; 0xae
 8008618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008620:	2303      	movs	r3, #3
 8008622:	e01c      	b.n	800865e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b03      	cmp	r3, #3
 800862e:	d115      	bne.n	800865c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	32ae      	adds	r2, #174	; 0xae
 800863a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	32ae      	adds	r2, #174	; 0xae
 800864e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	4611      	mov	r1, r2
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00e      	beq.n	80086b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6852      	ldr	r2, [r2, #4]
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	4611      	mov	r1, r2
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	460b      	mov	r3, r1
 8008700:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	885b      	ldrh	r3, [r3, #2]
 8008712:	b29a      	uxth	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	429a      	cmp	r2, r3
 800871c:	d920      	bls.n	8008760 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008726:	e013      	b.n	8008750 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008728:	f107 030a 	add.w	r3, r7, #10
 800872c:	4619      	mov	r1, r3
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f000 f81b 	bl	800876a <USBD_GetNextDesc>
 8008734:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b05      	cmp	r3, #5
 800873c:	d108      	bne.n	8008750 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	789b      	ldrb	r3, [r3, #2]
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	429a      	cmp	r2, r3
 800874a:	d008      	beq.n	800875e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	885b      	ldrh	r3, [r3, #2]
 8008754:	b29a      	uxth	r2, r3
 8008756:	897b      	ldrh	r3, [r7, #10]
 8008758:	429a      	cmp	r2, r3
 800875a:	d8e5      	bhi.n	8008728 <USBD_GetEpDesc+0x32>
 800875c:	e000      	b.n	8008760 <USBD_GetEpDesc+0x6a>
          break;
 800875e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008760:	693b      	ldr	r3, [r7, #16]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	881a      	ldrh	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	4413      	add	r3, r2
 8008784:	b29a      	uxth	r2, r3
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4413      	add	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008796:	68fb      	ldr	r3, [r7, #12]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	3301      	adds	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087c2:	8a3b      	ldrh	r3, [r7, #16]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	b21a      	sxth	r2, r3
 80087c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b21b      	sxth	r3, r3
 80087d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087d2:	89fb      	ldrh	r3, [r7, #14]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087f6:	2b40      	cmp	r3, #64	; 0x40
 80087f8:	d005      	beq.n	8008806 <USBD_StdDevReq+0x26>
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d857      	bhi.n	80088ae <USBD_StdDevReq+0xce>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00f      	beq.n	8008822 <USBD_StdDevReq+0x42>
 8008802:	2b20      	cmp	r3, #32
 8008804:	d153      	bne.n	80088ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	32ae      	adds	r2, #174	; 0xae
 8008810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
      break;
 8008820:	e04a      	b.n	80088b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	2b09      	cmp	r3, #9
 8008828:	d83b      	bhi.n	80088a2 <USBD_StdDevReq+0xc2>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USBD_StdDevReq+0x50>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008885 	.word	0x08008885
 8008834:	08008899 	.word	0x08008899
 8008838:	080088a3 	.word	0x080088a3
 800883c:	0800888f 	.word	0x0800888f
 8008840:	080088a3 	.word	0x080088a3
 8008844:	08008863 	.word	0x08008863
 8008848:	08008859 	.word	0x08008859
 800884c:	080088a3 	.word	0x080088a3
 8008850:	0800887b 	.word	0x0800887b
 8008854:	0800886d 	.word	0x0800886d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa3c 	bl	8008cd8 <USBD_GetDescriptor>
          break;
 8008860:	e024      	b.n	80088ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fbcb 	bl	8009000 <USBD_SetAddress>
          break;
 800886a:	e01f      	b.n	80088ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fc0a 	bl	8009088 <USBD_SetConfig>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
          break;
 8008878:	e018      	b.n	80088ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fcad 	bl	80091dc <USBD_GetConfig>
          break;
 8008882:	e013      	b.n	80088ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fcde 	bl	8009248 <USBD_GetStatus>
          break;
 800888c:	e00e      	b.n	80088ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fd0d 	bl	80092b0 <USBD_SetFeature>
          break;
 8008896:	e009      	b.n	80088ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fd31 	bl	8009302 <USBD_ClrFeature>
          break;
 80088a0:	e004      	b.n	80088ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fd88 	bl	80093ba <USBD_CtlError>
          break;
 80088aa:	bf00      	nop
      }
      break;
 80088ac:	e004      	b.n	80088b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fd82 	bl	80093ba <USBD_CtlError>
      break;
 80088b6:	bf00      	nop
  }

  return ret;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop

080088c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d005      	beq.n	80088ea <USBD_StdItfReq+0x26>
 80088de:	2b40      	cmp	r3, #64	; 0x40
 80088e0:	d852      	bhi.n	8008988 <USBD_StdItfReq+0xc4>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <USBD_StdItfReq+0x26>
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d14e      	bne.n	8008988 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	3b01      	subs	r3, #1
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d840      	bhi.n	800897a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	889b      	ldrh	r3, [r3, #4]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d836      	bhi.n	8008970 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	889b      	ldrh	r3, [r3, #4]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fed9 	bl	80086c2 <USBD_CoreFindIF>
 8008910:	4603      	mov	r3, r0
 8008912:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2bff      	cmp	r3, #255	; 0xff
 8008918:	d01d      	beq.n	8008956 <USBD_StdItfReq+0x92>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11a      	bne.n	8008956 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008920:	7bba      	ldrb	r2, [r7, #14]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	32ae      	adds	r2, #174	; 0xae
 8008926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00f      	beq.n	8008950 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008930:	7bba      	ldrb	r2, [r7, #14]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008938:	7bba      	ldrb	r2, [r7, #14]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	32ae      	adds	r2, #174	; 0xae
 800893e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800894e:	e004      	b.n	800895a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008954:	e001      	b.n	800895a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008956:	2303      	movs	r3, #3
 8008958:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d110      	bne.n	8008984 <USBD_StdItfReq+0xc0>
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10d      	bne.n	8008984 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fdf1 	bl	8009550 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800896e:	e009      	b.n	8008984 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fd21 	bl	80093ba <USBD_CtlError>
          break;
 8008978:	e004      	b.n	8008984 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fd1c 	bl	80093ba <USBD_CtlError>
          break;
 8008982:	e000      	b.n	8008986 <USBD_StdItfReq+0xc2>
          break;
 8008984:	bf00      	nop
      }
      break;
 8008986:	e004      	b.n	8008992 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fd15 	bl	80093ba <USBD_CtlError>
      break;
 8008990:	bf00      	nop
  }

  return ret;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	889b      	ldrh	r3, [r3, #4]
 80089ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d007      	beq.n	80089cc <USBD_StdEPReq+0x30>
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	f200 817f 	bhi.w	8008cc0 <USBD_StdEPReq+0x324>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d02a      	beq.n	8008a1c <USBD_StdEPReq+0x80>
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	f040 817a 	bne.w	8008cc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fe83 	bl	80086dc <USBD_CoreFindEP>
 80089d6:	4603      	mov	r3, r0
 80089d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089da:	7b7b      	ldrb	r3, [r7, #13]
 80089dc:	2bff      	cmp	r3, #255	; 0xff
 80089de:	f000 8174 	beq.w	8008cca <USBD_StdEPReq+0x32e>
 80089e2:	7b7b      	ldrb	r3, [r7, #13]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f040 8170 	bne.w	8008cca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80089ea:	7b7a      	ldrb	r2, [r7, #13]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80089f2:	7b7a      	ldrb	r2, [r7, #13]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	32ae      	adds	r2, #174	; 0xae
 80089f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 8163 	beq.w	8008cca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008a04:	7b7a      	ldrb	r2, [r7, #13]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	32ae      	adds	r2, #174	; 0xae
 8008a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a1a:	e156      	b.n	8008cca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d008      	beq.n	8008a36 <USBD_StdEPReq+0x9a>
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	f300 8145 	bgt.w	8008cb4 <USBD_StdEPReq+0x318>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 809b 	beq.w	8008b66 <USBD_StdEPReq+0x1ca>
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d03c      	beq.n	8008aae <USBD_StdEPReq+0x112>
 8008a34:	e13e      	b.n	8008cb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d002      	beq.n	8008a48 <USBD_StdEPReq+0xac>
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d016      	beq.n	8008a74 <USBD_StdEPReq+0xd8>
 8008a46:	e02c      	b.n	8008aa2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00d      	beq.n	8008a6a <USBD_StdEPReq+0xce>
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b80      	cmp	r3, #128	; 0x80
 8008a52:	d00a      	beq.n	8008a6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f9ef 	bl	8009e3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a5e:	2180      	movs	r1, #128	; 0x80
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f9eb 	bl	8009e3c <USBD_LL_StallEP>
 8008a66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a68:	e020      	b.n	8008aac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fca4 	bl	80093ba <USBD_CtlError>
              break;
 8008a72:	e01b      	b.n	8008aac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	885b      	ldrh	r3, [r3, #2]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10e      	bne.n	8008a9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00b      	beq.n	8008a9a <USBD_StdEPReq+0xfe>
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b80      	cmp	r3, #128	; 0x80
 8008a86:	d008      	beq.n	8008a9a <USBD_StdEPReq+0xfe>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	88db      	ldrh	r3, [r3, #6]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d104      	bne.n	8008a9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f9d1 	bl	8009e3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fd58 	bl	8009550 <USBD_CtlSendStatus>

              break;
 8008aa0:	e004      	b.n	8008aac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc88 	bl	80093ba <USBD_CtlError>
              break;
 8008aaa:	bf00      	nop
          }
          break;
 8008aac:	e107      	b.n	8008cbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d002      	beq.n	8008ac0 <USBD_StdEPReq+0x124>
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d016      	beq.n	8008aec <USBD_StdEPReq+0x150>
 8008abe:	e04b      	b.n	8008b58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <USBD_StdEPReq+0x146>
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d00a      	beq.n	8008ae2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 f9b3 	bl	8009e3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ad6:	2180      	movs	r1, #128	; 0x80
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f9af 	bl	8009e3c <USBD_LL_StallEP>
 8008ade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae0:	e040      	b.n	8008b64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fc68 	bl	80093ba <USBD_CtlError>
              break;
 8008aea:	e03b      	b.n	8008b64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	885b      	ldrh	r3, [r3, #2]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d136      	bne.n	8008b62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d004      	beq.n	8008b08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 f9b9 	bl	8009e7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fd21 	bl	8009550 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff fde2 	bl	80086dc <USBD_CoreFindEP>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b1c:	7b7b      	ldrb	r3, [r7, #13]
 8008b1e:	2bff      	cmp	r3, #255	; 0xff
 8008b20:	d01f      	beq.n	8008b62 <USBD_StdEPReq+0x1c6>
 8008b22:	7b7b      	ldrb	r3, [r7, #13]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11c      	bne.n	8008b62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008b28:	7b7a      	ldrb	r2, [r7, #13]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008b30:	7b7a      	ldrb	r2, [r7, #13]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	32ae      	adds	r2, #174	; 0xae
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d010      	beq.n	8008b62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b40:	7b7a      	ldrb	r2, [r7, #13]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	32ae      	adds	r2, #174	; 0xae
 8008b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	4798      	blx	r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b56:	e004      	b.n	8008b62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fc2d 	bl	80093ba <USBD_CtlError>
              break;
 8008b60:	e000      	b.n	8008b64 <USBD_StdEPReq+0x1c8>
              break;
 8008b62:	bf00      	nop
          }
          break;
 8008b64:	e0ab      	b.n	8008cbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d002      	beq.n	8008b78 <USBD_StdEPReq+0x1dc>
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d032      	beq.n	8008bdc <USBD_StdEPReq+0x240>
 8008b76:	e097      	b.n	8008ca8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <USBD_StdEPReq+0x1f2>
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	2b80      	cmp	r3, #128	; 0x80
 8008b82:	d004      	beq.n	8008b8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fc17 	bl	80093ba <USBD_CtlError>
                break;
 8008b8c:	e091      	b.n	8008cb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	da0b      	bge.n	8008bae <USBD_StdEPReq+0x212>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	3310      	adds	r3, #16
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	4413      	add	r3, r2
 8008baa:	3304      	adds	r3, #4
 8008bac:	e00b      	b.n	8008bc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc61 	bl	800949c <USBD_CtlSendData>
              break;
 8008bda:	e06a      	b.n	8008cb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da11      	bge.n	8008c08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3324      	adds	r3, #36	; 0x24
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d117      	bne.n	8008c2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fbda 	bl	80093ba <USBD_CtlError>
                  break;
 8008c06:	e054      	b.n	8008cb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	f003 020f 	and.w	r2, r3, #15
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	440b      	add	r3, r1
 8008c1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fbc7 	bl	80093ba <USBD_CtlError>
                  break;
 8008c2c:	e041      	b.n	8008cb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	da0b      	bge.n	8008c4e <USBD_StdEPReq+0x2b2>
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	3310      	adds	r3, #16
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4413      	add	r3, r2
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	e00b      	b.n	8008c66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c54:	4613      	mov	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	3304      	adds	r3, #4
 8008c66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <USBD_StdEPReq+0x2d8>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b80      	cmp	r3, #128	; 0x80
 8008c72:	d103      	bne.n	8008c7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e00e      	b.n	8008c9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f919 	bl	8009eb8 <USBD_LL_IsStallEP>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fbfb 	bl	800949c <USBD_CtlSendData>
              break;
 8008ca6:	e004      	b.n	8008cb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fb85 	bl	80093ba <USBD_CtlError>
              break;
 8008cb0:	bf00      	nop
          }
          break;
 8008cb2:	e004      	b.n	8008cbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb7f 	bl	80093ba <USBD_CtlError>
          break;
 8008cbc:	bf00      	nop
      }
      break;
 8008cbe:	e005      	b.n	8008ccc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fb79 	bl	80093ba <USBD_CtlError>
      break;
 8008cc8:	e000      	b.n	8008ccc <USBD_StdEPReq+0x330>
      break;
 8008cca:	bf00      	nop
  }

  return ret;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	2b0e      	cmp	r3, #14
 8008cfa:	f200 8152 	bhi.w	8008fa2 <USBD_GetDescriptor+0x2ca>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <USBD_GetDescriptor+0x2c>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d75 	.word	0x08008d75
 8008d08:	08008d8d 	.word	0x08008d8d
 8008d0c:	08008dcd 	.word	0x08008dcd
 8008d10:	08008fa3 	.word	0x08008fa3
 8008d14:	08008fa3 	.word	0x08008fa3
 8008d18:	08008f43 	.word	0x08008f43
 8008d1c:	08008f6f 	.word	0x08008f6f
 8008d20:	08008fa3 	.word	0x08008fa3
 8008d24:	08008fa3 	.word	0x08008fa3
 8008d28:	08008fa3 	.word	0x08008fa3
 8008d2c:	08008fa3 	.word	0x08008fa3
 8008d30:	08008fa3 	.word	0x08008fa3
 8008d34:	08008fa3 	.word	0x08008fa3
 8008d38:	08008fa3 	.word	0x08008fa3
 8008d3c:	08008d41 	.word	0x08008d41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d62:	e126      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fb27 	bl	80093ba <USBD_CtlError>
        err++;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	72fb      	strb	r3, [r7, #11]
      break;
 8008d72:	e11e      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
      break;
 8008d8a:	e112      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7c1b      	ldrb	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10d      	bne.n	8008db0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	f107 0208 	add.w	r2, r7, #8
 8008da0:	4610      	mov	r0, r2
 8008da2:	4798      	blx	r3
 8008da4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	2202      	movs	r2, #2
 8008dac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dae:	e100      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	f107 0208 	add.w	r2, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	701a      	strb	r2, [r3, #0]
      break;
 8008dca:	e0f2      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	885b      	ldrh	r3, [r3, #2]
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	f200 80ac 	bhi.w	8008f30 <USBD_GetDescriptor+0x258>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <USBD_GetDescriptor+0x108>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008df9 	.word	0x08008df9
 8008de4:	08008e2d 	.word	0x08008e2d
 8008de8:	08008e61 	.word	0x08008e61
 8008dec:	08008e95 	.word	0x08008e95
 8008df0:	08008ec9 	.word	0x08008ec9
 8008df4:	08008efd 	.word	0x08008efd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7c12      	ldrb	r2, [r2, #16]
 8008e10:	f107 0108 	add.w	r1, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e1a:	e091      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 facb 	bl	80093ba <USBD_CtlError>
            err++;
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	3301      	adds	r3, #1
 8008e28:	72fb      	strb	r3, [r7, #11]
          break;
 8008e2a:	e089      	b.n	8008f40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4e:	e077      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fab1 	bl	80093ba <USBD_CtlError>
            err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5e:	e06f      	b.n	8008f40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e82:	e05d      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa97 	bl	80093ba <USBD_CtlError>
            err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
          break;
 8008e92:	e055      	b.n	8008f40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e043      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa7d 	bl	80093ba <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e03b      	b.n	8008f40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e029      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa63 	bl	80093ba <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e021      	b.n	8008f40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e00f      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa49 	bl	80093ba <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e007      	b.n	8008f40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa41 	bl	80093ba <USBD_CtlError>
          err++;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008f3e:	bf00      	nop
      }
      break;
 8008f40:	e037      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7c1b      	ldrb	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f52:	f107 0208 	add.w	r2, r7, #8
 8008f56:	4610      	mov	r0, r2
 8008f58:	4798      	blx	r3
 8008f5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f5c:	e029      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa2a 	bl	80093ba <USBD_CtlError>
        err++;
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f6c:	e021      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7c1b      	ldrb	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10d      	bne.n	8008f92 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	f107 0208 	add.w	r2, r7, #8
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
 8008f86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f90:	e00f      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa10 	bl	80093ba <USBD_CtlError>
        err++;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa0:	e007      	b.n	8008fb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa08 	bl	80093ba <USBD_CtlError>
      err++;
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	3301      	adds	r3, #1
 8008fae:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb0:	bf00      	nop
  }

  if (err != 0U)
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11e      	bne.n	8008ff6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	88db      	ldrh	r3, [r3, #6]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d016      	beq.n	8008fee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008fc0:	893b      	ldrh	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00e      	beq.n	8008fe4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	88da      	ldrh	r2, [r3, #6]
 8008fca:	893b      	ldrh	r3, [r7, #8]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bf28      	it	cs
 8008fd0:	4613      	movcs	r3, r2
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fd6:	893b      	ldrh	r3, [r7, #8]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68f9      	ldr	r1, [r7, #12]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fa5d 	bl	800949c <USBD_CtlSendData>
 8008fe2:	e009      	b.n	8008ff8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f9e7 	bl	80093ba <USBD_CtlError>
 8008fec:	e004      	b.n	8008ff8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 faae 	bl	8009550 <USBD_CtlSendStatus>
 8008ff4:	e000      	b.n	8008ff8 <USBD_GetDescriptor+0x320>
    return;
 8008ff6:	bf00      	nop
  }
}
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop

08009000 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	889b      	ldrh	r3, [r3, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d131      	bne.n	8009076 <USBD_SetAddress+0x76>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d12d      	bne.n	8009076 <USBD_SetAddress+0x76>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	2b7f      	cmp	r3, #127	; 0x7f
 8009020:	d829      	bhi.n	8009076 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d104      	bne.n	8009044 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f9bc 	bl	80093ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009042:	e01d      	b.n	8009080 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7bfa      	ldrb	r2, [r7, #15]
 8009048:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 ff5d 	bl	8009f10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa7a 	bl	8009550 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d004      	beq.n	800906c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2202      	movs	r2, #2
 8009066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	e009      	b.n	8009080 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009074:	e004      	b.n	8009080 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f99e 	bl	80093ba <USBD_CtlError>
  }
}
 800907e:	bf00      	nop
 8009080:	bf00      	nop
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	b2da      	uxtb	r2, r3
 800909c:	4b4e      	ldr	r3, [pc, #312]	; (80091d8 <USBD_SetConfig+0x150>)
 800909e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090a0:	4b4d      	ldr	r3, [pc, #308]	; (80091d8 <USBD_SetConfig+0x150>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d905      	bls.n	80090b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f985 	bl	80093ba <USBD_CtlError>
    return USBD_FAIL;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e08c      	b.n	80091ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d002      	beq.n	80090c6 <USBD_SetConfig+0x3e>
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d029      	beq.n	8009118 <USBD_SetConfig+0x90>
 80090c4:	e075      	b.n	80091b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090c6:	4b44      	ldr	r3, [pc, #272]	; (80091d8 <USBD_SetConfig+0x150>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d020      	beq.n	8009110 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80090ce:	4b42      	ldr	r3, [pc, #264]	; (80091d8 <USBD_SetConfig+0x150>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <USBD_SetConfig+0x150>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7fe ffbd 	bl	800805e <USBD_SetClassConfig>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d008      	beq.n	8009100 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f962 	bl	80093ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090fe:	e065      	b.n	80091cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fa25 	bl	8009550 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2203      	movs	r2, #3
 800910a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800910e:	e05d      	b.n	80091cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa1d 	bl	8009550 <USBD_CtlSendStatus>
      break;
 8009116:	e059      	b.n	80091cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009118:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <USBD_SetConfig+0x150>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d112      	bne.n	8009146 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009128:	4b2b      	ldr	r3, [pc, #172]	; (80091d8 <USBD_SetConfig+0x150>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <USBD_SetConfig+0x150>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fe ffac 	bl	8008096 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa06 	bl	8009550 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009144:	e042      	b.n	80091cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009146:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <USBD_SetConfig+0x150>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d02a      	beq.n	80091aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fe ff9a 	bl	8008096 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009162:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <USBD_SetConfig+0x150>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <USBD_SetConfig+0x150>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fe ff73 	bl	800805e <USBD_SetClassConfig>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00f      	beq.n	80091a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f918 	bl	80093ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7fe ff7f 	bl	8008096 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091a0:	e014      	b.n	80091cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f9d4 	bl	8009550 <USBD_CtlSendStatus>
      break;
 80091a8:	e010      	b.n	80091cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9d0 	bl	8009550 <USBD_CtlSendStatus>
      break;
 80091b0:	e00c      	b.n	80091cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f900 	bl	80093ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <USBD_SetConfig+0x150>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fe ff68 	bl	8008096 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091c6:	2303      	movs	r3, #3
 80091c8:	73fb      	strb	r3, [r7, #15]
      break;
 80091ca:	bf00      	nop
  }

  return ret;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000710 	.word	0x20000710

080091dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88db      	ldrh	r3, [r3, #6]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d004      	beq.n	80091f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f8e2 	bl	80093ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091f6:	e023      	b.n	8009240 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b02      	cmp	r3, #2
 8009202:	dc02      	bgt.n	800920a <USBD_GetConfig+0x2e>
 8009204:	2b00      	cmp	r3, #0
 8009206:	dc03      	bgt.n	8009210 <USBD_GetConfig+0x34>
 8009208:	e015      	b.n	8009236 <USBD_GetConfig+0x5a>
 800920a:	2b03      	cmp	r3, #3
 800920c:	d00b      	beq.n	8009226 <USBD_GetConfig+0x4a>
 800920e:	e012      	b.n	8009236 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3308      	adds	r3, #8
 800921a:	2201      	movs	r2, #1
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f93c 	bl	800949c <USBD_CtlSendData>
        break;
 8009224:	e00c      	b.n	8009240 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3304      	adds	r3, #4
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f934 	bl	800949c <USBD_CtlSendData>
        break;
 8009234:	e004      	b.n	8009240 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8be 	bl	80093ba <USBD_CtlError>
        break;
 800923e:	bf00      	nop
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	2b02      	cmp	r3, #2
 800925e:	d81e      	bhi.n	800929e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	88db      	ldrh	r3, [r3, #6]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d004      	beq.n	8009272 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f8a5 	bl	80093ba <USBD_CtlError>
        break;
 8009270:	e01a      	b.n	80092a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f043 0202 	orr.w	r2, r3, #2
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	330c      	adds	r3, #12
 8009292:	2202      	movs	r2, #2
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f900 	bl	800949c <USBD_CtlSendData>
      break;
 800929c:	e004      	b.n	80092a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f88a 	bl	80093ba <USBD_CtlError>
      break;
 80092a6:	bf00      	nop
  }
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	885b      	ldrh	r3, [r3, #2]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d107      	bne.n	80092d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f940 	bl	8009550 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80092d0:	e013      	b.n	80092fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d10b      	bne.n	80092f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	889b      	ldrh	r3, [r3, #4]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f930 	bl	8009550 <USBD_CtlSendStatus>
}
 80092f0:	e003      	b.n	80092fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f860 	bl	80093ba <USBD_CtlError>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009312:	b2db      	uxtb	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	2b02      	cmp	r3, #2
 8009318:	d80b      	bhi.n	8009332 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d10c      	bne.n	800933c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f910 	bl	8009550 <USBD_CtlSendStatus>
      }
      break;
 8009330:	e004      	b.n	800933c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f840 	bl	80093ba <USBD_CtlError>
      break;
 800933a:	e000      	b.n	800933e <USBD_ClrFeature+0x3c>
      break;
 800933c:	bf00      	nop
  }
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff fa17 	bl	80087a4 <SWAPBYTE>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fa0a 	bl	80087a4 <SWAPBYTE>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3301      	adds	r3, #1
 800939c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7ff f9fd 	bl	80087a4 <SWAPBYTE>
 80093aa:	4603      	mov	r3, r0
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	80da      	strh	r2, [r3, #6]
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093c4:	2180      	movs	r1, #128	; 0x80
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fd38 	bl	8009e3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093cc:	2100      	movs	r1, #0
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fd34 	bl	8009e3c <USBD_LL_StallEP>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d036      	beq.n	8009460 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093f6:	6938      	ldr	r0, [r7, #16]
 80093f8:	f000 f836 	bl	8009468 <USBD_GetLen>
 80093fc:	4603      	mov	r3, r0
 80093fe:	3301      	adds	r3, #1
 8009400:	b29b      	uxth	r3, r3
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	4413      	add	r3, r2
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7812      	ldrb	r2, [r2, #0]
 8009414:	701a      	strb	r2, [r3, #0]
  idx++;
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	3301      	adds	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	2203      	movs	r2, #3
 8009424:	701a      	strb	r2, [r3, #0]
  idx++;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	3301      	adds	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800942c:	e013      	b.n	8009456 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	4413      	add	r3, r2
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3301      	adds	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
    idx++;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
 8009442:	3301      	adds	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	4413      	add	r3, r2
 800944c:	2200      	movs	r2, #0
 800944e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	3301      	adds	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e7      	bne.n	800942e <USBD_GetString+0x52>
 800945e:	e000      	b.n	8009462 <USBD_GetString+0x86>
    return;
 8009460:	bf00      	nop
  }
}
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009478:	e005      	b.n	8009486 <USBD_GetLen+0x1e>
  {
    len++;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	3301      	adds	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	3301      	adds	r3, #1
 8009484:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1f5      	bne.n	800947a <USBD_GetLen+0x12>
  }

  return len;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fd43 	bl	8009f4e <USBD_LL_Transmit>

  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	60f8      	str	r0, [r7, #12]
 80094da:	60b9      	str	r1, [r7, #8]
 80094dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	2100      	movs	r1, #0
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 fd32 	bl	8009f4e <USBD_LL_Transmit>

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2203      	movs	r2, #3
 8009504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	2100      	movs	r1, #0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 fd36 	bl	8009f90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	2100      	movs	r1, #0
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 fd25 	bl	8009f90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2204      	movs	r2, #4
 800955c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009560:	2300      	movs	r3, #0
 8009562:	2200      	movs	r2, #0
 8009564:	2100      	movs	r1, #0
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fcf1 	bl	8009f4e <USBD_LL_Transmit>

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2205      	movs	r2, #5
 8009582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009586:	2300      	movs	r3, #0
 8009588:	2200      	movs	r2, #0
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fcff 	bl	8009f90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095a0:	2200      	movs	r2, #0
 80095a2:	4912      	ldr	r1, [pc, #72]	; (80095ec <MX_USB_DEVICE_Init+0x50>)
 80095a4:	4812      	ldr	r0, [pc, #72]	; (80095f0 <MX_USB_DEVICE_Init+0x54>)
 80095a6:	f7fe fcdd 	bl	8007f64 <USBD_Init>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80095b0:	f7f7 fc9c 	bl	8000eec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095b4:	490f      	ldr	r1, [pc, #60]	; (80095f4 <MX_USB_DEVICE_Init+0x58>)
 80095b6:	480e      	ldr	r0, [pc, #56]	; (80095f0 <MX_USB_DEVICE_Init+0x54>)
 80095b8:	f7fe fd04 	bl	8007fc4 <USBD_RegisterClass>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095c2:	f7f7 fc93 	bl	8000eec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095c6:	490c      	ldr	r1, [pc, #48]	; (80095f8 <MX_USB_DEVICE_Init+0x5c>)
 80095c8:	4809      	ldr	r0, [pc, #36]	; (80095f0 <MX_USB_DEVICE_Init+0x54>)
 80095ca:	f7fe fbfb 	bl	8007dc4 <USBD_CDC_RegisterInterface>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095d4:	f7f7 fc8a 	bl	8000eec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095d8:	4805      	ldr	r0, [pc, #20]	; (80095f0 <MX_USB_DEVICE_Init+0x54>)
 80095da:	f7fe fd29 	bl	8008030 <USBD_Start>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095e4:	f7f7 fc82 	bl	8000eec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095e8:	bf00      	nop
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	200000ac 	.word	0x200000ac
 80095f0:	20000714 	.word	0x20000714
 80095f4:	20000018 	.word	0x20000018
 80095f8:	20000098 	.word	0x20000098

080095fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009600:	2200      	movs	r2, #0
 8009602:	4905      	ldr	r1, [pc, #20]	; (8009618 <CDC_Init_FS+0x1c>)
 8009604:	4805      	ldr	r0, [pc, #20]	; (800961c <CDC_Init_FS+0x20>)
 8009606:	f7fe fbf7 	bl	8007df8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800960a:	4905      	ldr	r1, [pc, #20]	; (8009620 <CDC_Init_FS+0x24>)
 800960c:	4803      	ldr	r0, [pc, #12]	; (800961c <CDC_Init_FS+0x20>)
 800960e:	f7fe fc15 	bl	8007e3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009614:	4618      	mov	r0, r3
 8009616:	bd80      	pop	{r7, pc}
 8009618:	200011f0 	.word	0x200011f0
 800961c:	20000714 	.word	0x20000714
 8009620:	200009f0 	.word	0x200009f0

08009624 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800962a:	4618      	mov	r0, r3
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
 8009640:	4613      	mov	r3, r2
 8009642:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b23      	cmp	r3, #35	; 0x23
 8009648:	d84a      	bhi.n	80096e0 <CDC_Control_FS+0xac>
 800964a:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <CDC_Control_FS+0x1c>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	080096e1 	.word	0x080096e1
 8009654:	080096e1 	.word	0x080096e1
 8009658:	080096e1 	.word	0x080096e1
 800965c:	080096e1 	.word	0x080096e1
 8009660:	080096e1 	.word	0x080096e1
 8009664:	080096e1 	.word	0x080096e1
 8009668:	080096e1 	.word	0x080096e1
 800966c:	080096e1 	.word	0x080096e1
 8009670:	080096e1 	.word	0x080096e1
 8009674:	080096e1 	.word	0x080096e1
 8009678:	080096e1 	.word	0x080096e1
 800967c:	080096e1 	.word	0x080096e1
 8009680:	080096e1 	.word	0x080096e1
 8009684:	080096e1 	.word	0x080096e1
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096e1 	.word	0x080096e1
 8009690:	080096e1 	.word	0x080096e1
 8009694:	080096e1 	.word	0x080096e1
 8009698:	080096e1 	.word	0x080096e1
 800969c:	080096e1 	.word	0x080096e1
 80096a0:	080096e1 	.word	0x080096e1
 80096a4:	080096e1 	.word	0x080096e1
 80096a8:	080096e1 	.word	0x080096e1
 80096ac:	080096e1 	.word	0x080096e1
 80096b0:	080096e1 	.word	0x080096e1
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	080096e1 	.word	0x080096e1
 80096bc:	080096e1 	.word	0x080096e1
 80096c0:	080096e1 	.word	0x080096e1
 80096c4:	080096e1 	.word	0x080096e1
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	080096e1 	.word	0x080096e1
 80096d0:	080096e1 	.word	0x080096e1
 80096d4:	080096e1 	.word	0x080096e1
 80096d8:	080096e1 	.word	0x080096e1
 80096dc:	080096e1 	.word	0x080096e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096e0:	bf00      	nop
  }

  return (USBD_OK);
 80096e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4816      	ldr	r0, [pc, #88]	; (8009758 <CDC_Receive_FS+0x68>)
 80096fe:	f7fe fb9d 	bl	8007e3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009702:	4815      	ldr	r0, [pc, #84]	; (8009758 <CDC_Receive_FS+0x68>)
 8009704:	f7fe fbf8 	bl	8007ef8 <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++)
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	e012      	b.n	8009734 <CDC_Receive_FS+0x44>
  {
	  Buf[i] = toupper(Buf[i]);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	4413      	add	r3, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fdaa 	bl	800a270 <toupper>
 800971c:	4601      	mov	r1, r0
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	4413      	add	r3, r2
 8009724:	b2ca      	uxtb	r2, r1
 8009726:	701a      	strb	r2, [r3, #0]
	  test_enable = 1;
 8009728:	4b0c      	ldr	r3, [pc, #48]	; (800975c <CDC_Receive_FS+0x6c>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	429a      	cmp	r2, r3
 800973c:	d8e7      	bhi.n	800970e <CDC_Receive_FS+0x1e>
  }

  CDC_Transmit_FS(Buf,*Len);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f80a 	bl	8009760 <CDC_Transmit_FS>



  return (USBD_OK);
 800974c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20000714 	.word	0x20000714
 800975c:	20000704 	.word	0x20000704

08009760 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <CDC_Transmit_FS+0x48>)
 8009772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009776:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009782:	2301      	movs	r3, #1
 8009784:	e00b      	b.n	800979e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009786:	887b      	ldrh	r3, [r7, #2]
 8009788:	461a      	mov	r2, r3
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4806      	ldr	r0, [pc, #24]	; (80097a8 <CDC_Transmit_FS+0x48>)
 800978e:	f7fe fb33 	bl	8007df8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009792:	4805      	ldr	r0, [pc, #20]	; (80097a8 <CDC_Transmit_FS+0x48>)
 8009794:	f7fe fb70 	bl	8007e78 <USBD_CDC_TransmitPacket>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000714 	.word	0x20000714

080097ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	6039      	str	r1, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2212      	movs	r2, #18
 80097e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097e2:	4b03      	ldr	r3, [pc, #12]	; (80097f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	200000cc 	.word	0x200000cc

080097f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2204      	movs	r2, #4
 8009804:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009806:	4b03      	ldr	r3, [pc, #12]	; (8009814 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	200000ec 	.word	0x200000ec

08009818 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <USBD_FS_ProductStrDescriptor+0x34>)
 800982e:	4808      	ldr	r0, [pc, #32]	; (8009850 <USBD_FS_ProductStrDescriptor+0x38>)
 8009830:	f7ff fdd4 	bl	80093dc <USBD_GetString>
 8009834:	e004      	b.n	8009840 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4904      	ldr	r1, [pc, #16]	; (800984c <USBD_FS_ProductStrDescriptor+0x34>)
 800983a:	4805      	ldr	r0, [pc, #20]	; (8009850 <USBD_FS_ProductStrDescriptor+0x38>)
 800983c:	f7ff fdce 	bl	80093dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	200019f0 	.word	0x200019f0
 8009850:	0800aad0 	.word	0x0800aad0

08009854 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	4904      	ldr	r1, [pc, #16]	; (8009874 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009864:	4804      	ldr	r0, [pc, #16]	; (8009878 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009866:	f7ff fdb9 	bl	80093dc <USBD_GetString>
  return USBD_StrDesc;
 800986a:	4b02      	ldr	r3, [pc, #8]	; (8009874 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	200019f0 	.word	0x200019f0
 8009878:	0800aae8 	.word	0x0800aae8

0800987c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	221a      	movs	r2, #26
 800988c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800988e:	f000 f855 	bl	800993c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009892:	4b02      	ldr	r3, [pc, #8]	; (800989c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	200000f0 	.word	0x200000f0

080098a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d105      	bne.n	80098be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	4907      	ldr	r1, [pc, #28]	; (80098d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098b6:	4808      	ldr	r0, [pc, #32]	; (80098d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098b8:	f7ff fd90 	bl	80093dc <USBD_GetString>
 80098bc:	e004      	b.n	80098c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	4904      	ldr	r1, [pc, #16]	; (80098d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098c2:	4805      	ldr	r0, [pc, #20]	; (80098d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098c4:	f7ff fd8a 	bl	80093dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80098c8:	4b02      	ldr	r3, [pc, #8]	; (80098d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	200019f0 	.word	0x200019f0
 80098d8:	0800aafc 	.word	0x0800aafc

080098dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	6039      	str	r1, [r7, #0]
 80098e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d105      	bne.n	80098fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	4907      	ldr	r1, [pc, #28]	; (8009910 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098f2:	4808      	ldr	r0, [pc, #32]	; (8009914 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098f4:	f7ff fd72 	bl	80093dc <USBD_GetString>
 80098f8:	e004      	b.n	8009904 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4904      	ldr	r1, [pc, #16]	; (8009910 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098fe:	4805      	ldr	r0, [pc, #20]	; (8009914 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009900:	f7ff fd6c 	bl	80093dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009904:	4b02      	ldr	r3, [pc, #8]	; (8009910 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	200019f0 	.word	0x200019f0
 8009914:	0800ab08 	.word	0x0800ab08

08009918 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	220c      	movs	r2, #12
 8009928:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800992a:	4b03      	ldr	r3, [pc, #12]	; (8009938 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	200000e0 	.word	0x200000e0

0800993c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009942:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <Get_SerialNum+0x44>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009948:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <Get_SerialNum+0x48>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800994e:	4b0e      	ldr	r3, [pc, #56]	; (8009988 <Get_SerialNum+0x4c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009962:	2208      	movs	r2, #8
 8009964:	4909      	ldr	r1, [pc, #36]	; (800998c <Get_SerialNum+0x50>)
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f814 	bl	8009994 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800996c:	2204      	movs	r2, #4
 800996e:	4908      	ldr	r1, [pc, #32]	; (8009990 <Get_SerialNum+0x54>)
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f000 f80f 	bl	8009994 <IntToUnicode>
  }
}
 8009976:	bf00      	nop
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	1ff07a10 	.word	0x1ff07a10
 8009984:	1ff07a14 	.word	0x1ff07a14
 8009988:	1ff07a18 	.word	0x1ff07a18
 800998c:	200000f2 	.word	0x200000f2
 8009990:	20000102 	.word	0x20000102

08009994 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099a6:	2300      	movs	r3, #0
 80099a8:	75fb      	strb	r3, [r7, #23]
 80099aa:	e027      	b.n	80099fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	0f1b      	lsrs	r3, r3, #28
 80099b0:	2b09      	cmp	r3, #9
 80099b2:	d80b      	bhi.n	80099cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0f1b      	lsrs	r3, r3, #28
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4619      	mov	r1, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	440b      	add	r3, r1
 80099c4:	3230      	adds	r2, #48	; 0x30
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]
 80099ca:	e00a      	b.n	80099e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	0f1b      	lsrs	r3, r3, #28
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4619      	mov	r1, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	440b      	add	r3, r1
 80099dc:	3237      	adds	r2, #55	; 0x37
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	3301      	adds	r3, #1
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	3301      	adds	r3, #1
 80099fa:	75fb      	strb	r3, [r7, #23]
 80099fc:	7dfa      	ldrb	r2, [r7, #23]
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d3d3      	bcc.n	80099ac <IntToUnicode+0x18>
  }
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b0aa      	sub	sp, #168	; 0xa8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	609a      	str	r2, [r3, #8]
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a2c:	f107 0314 	add.w	r3, r7, #20
 8009a30:	2280      	movs	r2, #128	; 0x80
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fc45 	bl	800a2c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a42:	d151      	bne.n	8009ae8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009a44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a50:	f107 0314 	add.w	r3, r7, #20
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fa fd47 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009a60:	f7f7 fa44 	bl	8000eec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a64:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a68:	4a21      	ldr	r2, [pc, #132]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8009a70:	4b1f      	ldr	r3, [pc, #124]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	613b      	str	r3, [r7, #16]
 8009a7a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a84:	2302      	movs	r3, #2
 8009a86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a90:	2303      	movs	r3, #3
 8009a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a96:	230a      	movs	r3, #10
 8009a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4814      	ldr	r0, [pc, #80]	; (8009af4 <HAL_PCD_MspInit+0xe0>)
 8009aa4:	f7f8 faa6 	bl	8001ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009aa8:	4b11      	ldr	r3, [pc, #68]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aac:	4a10      	ldr	r2, [pc, #64]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab2:	6353      	str	r3, [r2, #52]	; 0x34
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac4:	4a0a      	ldr	r2, [pc, #40]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009aca:	6453      	str	r3, [r2, #68]	; 0x44
 8009acc:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <HAL_PCD_MspInit+0xdc>)
 8009ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad4:	60bb      	str	r3, [r7, #8]
 8009ad6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2100      	movs	r1, #0
 8009adc:	2043      	movs	r0, #67	; 0x43
 8009ade:	f7f8 fa52 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ae2:	2043      	movs	r0, #67	; 0x43
 8009ae4:	f7f8 fa6b 	bl	8001fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ae8:	bf00      	nop
 8009aea:	37a8      	adds	r7, #168	; 0xa8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	40023800 	.word	0x40023800
 8009af4:	40020000 	.word	0x40020000

08009af8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f7fe fadb 	bl	80080ca <USBD_LL_SetupStage>
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009b2e:	78fa      	ldrb	r2, [r7, #3]
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	4613      	mov	r3, r2
 8009b34:	00db      	lsls	r3, r3, #3
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	440b      	add	r3, r1
 8009b3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	4619      	mov	r1, r3
 8009b46:	f7fe fb15 	bl	8008174 <USBD_LL_DataOutStage>
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009b64:	78fa      	ldrb	r2, [r7, #3]
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	440b      	add	r3, r1
 8009b72:	334c      	adds	r3, #76	; 0x4c
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f7fe fbae 	bl	80082da <USBD_LL_DataInStage>
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fe fce2 	bl	800855e <USBD_LL_SOF>
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009baa:	2301      	movs	r3, #1
 8009bac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
 8009bba:	e008      	b.n	8009bce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d102      	bne.n	8009bca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
 8009bc8:	e001      	b.n	8009bce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009bca:	f7f7 f98f 	bl	8000eec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009bd4:	7bfa      	ldrb	r2, [r7, #15]
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fc82 	bl	80084e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fc2a 	bl	800843e <USBD_LL_Reset>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fc7d 	bl	8008502 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	6812      	ldr	r2, [r2, #0]
 8009c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c28:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <HAL_PCD_SuspendCallback+0x48>)
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	4a03      	ldr	r2, [pc, #12]	; (8009c3c <HAL_PCD_SuspendCallback+0x48>)
 8009c2e:	f043 0306 	orr.w	r3, r3, #6
 8009c32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	e000ed00 	.word	0xe000ed00

08009c40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fc6d 	bl	800852e <USBD_LL_Resume>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c6e:	78fa      	ldrb	r2, [r7, #3]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fcc5 	bl	8008602 <USBD_LL_IsoOUTIncomplete>
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fc81 	bl	800859e <USBD_LL_IsoINIncomplete>
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fcd7 	bl	8008666 <USBD_LL_DevConnected>
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fcd4 	bl	800867c <USBD_LL_DevDisconnected>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d13f      	bne.n	8009d6c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009cec:	4a22      	ldr	r2, [pc, #136]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a20      	ldr	r2, [pc, #128]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009cf8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cfc:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009d04:	4b1c      	ldr	r3, [pc, #112]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d06:	2206      	movs	r2, #6
 8009d08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d10:	4b19      	ldr	r3, [pc, #100]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d16:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d18:	2202      	movs	r2, #2
 8009d1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d1c:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d22:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d28:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009d2e:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d34:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d3a:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d40:	480d      	ldr	r0, [pc, #52]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d42:	f7f8 fc4e 	bl	80025e2 <HAL_PCD_Init>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8009d4c:	f7f7 f8ce 	bl	8000eec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d50:	2180      	movs	r1, #128	; 0x80
 8009d52:	4809      	ldr	r0, [pc, #36]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d54:	f7f9 fec9 	bl	8003aea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d58:	2240      	movs	r2, #64	; 0x40
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4806      	ldr	r0, [pc, #24]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d5e:	f7f9 fe7d 	bl	8003a5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d62:	2280      	movs	r2, #128	; 0x80
 8009d64:	2101      	movs	r1, #1
 8009d66:	4804      	ldr	r0, [pc, #16]	; (8009d78 <USBD_LL_Init+0x9c>)
 8009d68:	f7f9 fe78 	bl	8003a5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20001bf0 	.word	0x20001bf0

08009d7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f8 fd49 	bl	800282a <HAL_PCD_Start>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 f97e 	bl	800a0a0 <USBD_Get_USB_Status>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	4608      	mov	r0, r1
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	70fb      	strb	r3, [r7, #3]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70bb      	strb	r3, [r7, #2]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009dda:	78bb      	ldrb	r3, [r7, #2]
 8009ddc:	883a      	ldrh	r2, [r7, #0]
 8009dde:	78f9      	ldrb	r1, [r7, #3]
 8009de0:	f7f9 fa36 	bl	8003250 <HAL_PCD_EP_Open>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f958 	bl	800a0a0 <USBD_Get_USB_Status>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	460b      	mov	r3, r1
 8009e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7f9 fa7f 	bl	8003320 <HAL_PCD_EP_Close>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 f939 	bl	800a0a0 <USBD_Get_USB_Status>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f9 fb57 	bl	800350e <HAL_PCD_EP_SetStall>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f91a 	bl	800a0a0 <USBD_Get_USB_Status>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e94:	78fa      	ldrb	r2, [r7, #3]
 8009e96:	4611      	mov	r1, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7f9 fb9c 	bl	80035d6 <HAL_PCD_EP_ClrStall>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 f8fb 	bl	800a0a0 <USBD_Get_USB_Status>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009eca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	da0b      	bge.n	8009eec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	4613      	mov	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	333e      	adds	r3, #62	; 0x3e
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	e00b      	b.n	8009f04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	4413      	add	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009f02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f2a:	78fa      	ldrb	r2, [r7, #3]
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7f9 f969 	bl	8003206 <HAL_PCD_SetAddress>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 f8b0 	bl	800a0a0 <USBD_Get_USB_Status>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b086      	sub	sp, #24
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f6c:	7af9      	ldrb	r1, [r7, #11]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f7f9 fa82 	bl	800347a <HAL_PCD_EP_Transmit>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 f88f 	bl	800a0a0 <USBD_Get_USB_Status>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f86:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fae:	7af9      	ldrb	r1, [r7, #11]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	f7f9 f9fe 	bl	80033b4 <HAL_PCD_EP_Receive>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f86e 	bl	800a0a0 <USBD_Get_USB_Status>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7f9 fa2e 	bl	800344a <HAL_PCD_EP_GetRxCount>
 8009fee:	4603      	mov	r3, r0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <HAL_PCDEx_LPM_Callback+0x18>
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d01f      	beq.n	800a04e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a00e:	e03b      	b.n	800a088 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a018:	f000 f83c 	bl	800a094 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a01c:	4b1c      	ldr	r3, [pc, #112]	; (800a090 <HAL_PCDEx_LPM_Callback+0x98>)
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	4a1b      	ldr	r2, [pc, #108]	; (800a090 <HAL_PCDEx_LPM_Callback+0x98>)
 800a022:	f023 0306 	bic.w	r3, r3, #6
 800a026:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6812      	ldr	r2, [r2, #0]
 800a036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a03a:	f023 0301 	bic.w	r3, r3, #1
 800a03e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fa71 	bl	800852e <USBD_LL_Resume>
    break;
 800a04c:	e01c      	b.n	800a088 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6812      	ldr	r2, [r2, #0]
 800a05c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fe fa48 	bl	8008502 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a07a:	4b05      	ldr	r3, [pc, #20]	; (800a090 <HAL_PCDEx_LPM_Callback+0x98>)
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	4a04      	ldr	r2, [pc, #16]	; (800a090 <HAL_PCDEx_LPM_Callback+0x98>)
 800a080:	f043 0306 	orr.w	r3, r3, #6
 800a084:	6113      	str	r3, [r2, #16]
    break;
 800a086:	bf00      	nop
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	e000ed00 	.word	0xe000ed00

0800a094 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a098:	f7f6 fb60 	bl	800075c <SystemClock_Config>
}
 800a09c:	bf00      	nop
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d817      	bhi.n	800a0e4 <USBD_Get_USB_Status+0x44>
 800a0b4:	a201      	add	r2, pc, #4	; (adr r2, 800a0bc <USBD_Get_USB_Status+0x1c>)
 800a0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ba:	bf00      	nop
 800a0bc:	0800a0cd 	.word	0x0800a0cd
 800a0c0:	0800a0d3 	.word	0x0800a0d3
 800a0c4:	0800a0d9 	.word	0x0800a0d9
 800a0c8:	0800a0df 	.word	0x0800a0df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d0:	e00b      	b.n	800a0ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d6:	e008      	b.n	800a0ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
    break;
 800a0dc:	e005      	b.n	800a0ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e2:	e002      	b.n	800a0ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e8:	bf00      	nop
  }
  return usb_status;
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <malloc>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	; (800a104 <malloc+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f000 b82b 	b.w	800a158 <_malloc_r>
 800a102:	bf00      	nop
 800a104:	20000158 	.word	0x20000158

0800a108 <free>:
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <free+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f000 b91d 	b.w	800a34c <_free_r>
 800a112:	bf00      	nop
 800a114:	20000158 	.word	0x20000158

0800a118 <sbrk_aligned>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4e0e      	ldr	r6, [pc, #56]	; (800a154 <sbrk_aligned+0x3c>)
 800a11c:	460c      	mov	r4, r1
 800a11e:	6831      	ldr	r1, [r6, #0]
 800a120:	4605      	mov	r5, r0
 800a122:	b911      	cbnz	r1, 800a12a <sbrk_aligned+0x12>
 800a124:	f000 f8d6 	bl	800a2d4 <_sbrk_r>
 800a128:	6030      	str	r0, [r6, #0]
 800a12a:	4621      	mov	r1, r4
 800a12c:	4628      	mov	r0, r5
 800a12e:	f000 f8d1 	bl	800a2d4 <_sbrk_r>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d00a      	beq.n	800a14c <sbrk_aligned+0x34>
 800a136:	1cc4      	adds	r4, r0, #3
 800a138:	f024 0403 	bic.w	r4, r4, #3
 800a13c:	42a0      	cmp	r0, r4
 800a13e:	d007      	beq.n	800a150 <sbrk_aligned+0x38>
 800a140:	1a21      	subs	r1, r4, r0
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f8c6 	bl	800a2d4 <_sbrk_r>
 800a148:	3001      	adds	r0, #1
 800a14a:	d101      	bne.n	800a150 <sbrk_aligned+0x38>
 800a14c:	f04f 34ff 	mov.w	r4, #4294967295
 800a150:	4620      	mov	r0, r4
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	200020fc 	.word	0x200020fc

0800a158 <_malloc_r>:
 800a158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a15c:	1ccd      	adds	r5, r1, #3
 800a15e:	f025 0503 	bic.w	r5, r5, #3
 800a162:	3508      	adds	r5, #8
 800a164:	2d0c      	cmp	r5, #12
 800a166:	bf38      	it	cc
 800a168:	250c      	movcc	r5, #12
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	4607      	mov	r7, r0
 800a16e:	db01      	blt.n	800a174 <_malloc_r+0x1c>
 800a170:	42a9      	cmp	r1, r5
 800a172:	d905      	bls.n	800a180 <_malloc_r+0x28>
 800a174:	230c      	movs	r3, #12
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	2600      	movs	r6, #0
 800a17a:	4630      	mov	r0, r6
 800a17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a254 <_malloc_r+0xfc>
 800a184:	f000 f868 	bl	800a258 <__malloc_lock>
 800a188:	f8d8 3000 	ldr.w	r3, [r8]
 800a18c:	461c      	mov	r4, r3
 800a18e:	bb5c      	cbnz	r4, 800a1e8 <_malloc_r+0x90>
 800a190:	4629      	mov	r1, r5
 800a192:	4638      	mov	r0, r7
 800a194:	f7ff ffc0 	bl	800a118 <sbrk_aligned>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	4604      	mov	r4, r0
 800a19c:	d155      	bne.n	800a24a <_malloc_r+0xf2>
 800a19e:	f8d8 4000 	ldr.w	r4, [r8]
 800a1a2:	4626      	mov	r6, r4
 800a1a4:	2e00      	cmp	r6, #0
 800a1a6:	d145      	bne.n	800a234 <_malloc_r+0xdc>
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	d048      	beq.n	800a23e <_malloc_r+0xe6>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	eb04 0903 	add.w	r9, r4, r3
 800a1b6:	f000 f88d 	bl	800a2d4 <_sbrk_r>
 800a1ba:	4581      	cmp	r9, r0
 800a1bc:	d13f      	bne.n	800a23e <_malloc_r+0xe6>
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	1a6d      	subs	r5, r5, r1
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	f7ff ffa7 	bl	800a118 <sbrk_aligned>
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d037      	beq.n	800a23e <_malloc_r+0xe6>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	442b      	add	r3, r5
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d038      	beq.n	800a24e <_malloc_r+0xf6>
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	42a2      	cmp	r2, r4
 800a1e0:	d12b      	bne.n	800a23a <_malloc_r+0xe2>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	605a      	str	r2, [r3, #4]
 800a1e6:	e00f      	b.n	800a208 <_malloc_r+0xb0>
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	1b52      	subs	r2, r2, r5
 800a1ec:	d41f      	bmi.n	800a22e <_malloc_r+0xd6>
 800a1ee:	2a0b      	cmp	r2, #11
 800a1f0:	d917      	bls.n	800a222 <_malloc_r+0xca>
 800a1f2:	1961      	adds	r1, r4, r5
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	6025      	str	r5, [r4, #0]
 800a1f8:	bf18      	it	ne
 800a1fa:	6059      	strne	r1, [r3, #4]
 800a1fc:	6863      	ldr	r3, [r4, #4]
 800a1fe:	bf08      	it	eq
 800a200:	f8c8 1000 	streq.w	r1, [r8]
 800a204:	5162      	str	r2, [r4, r5]
 800a206:	604b      	str	r3, [r1, #4]
 800a208:	4638      	mov	r0, r7
 800a20a:	f104 060b 	add.w	r6, r4, #11
 800a20e:	f000 f829 	bl	800a264 <__malloc_unlock>
 800a212:	f026 0607 	bic.w	r6, r6, #7
 800a216:	1d23      	adds	r3, r4, #4
 800a218:	1af2      	subs	r2, r6, r3
 800a21a:	d0ae      	beq.n	800a17a <_malloc_r+0x22>
 800a21c:	1b9b      	subs	r3, r3, r6
 800a21e:	50a3      	str	r3, [r4, r2]
 800a220:	e7ab      	b.n	800a17a <_malloc_r+0x22>
 800a222:	42a3      	cmp	r3, r4
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	d1dd      	bne.n	800a1e4 <_malloc_r+0x8c>
 800a228:	f8c8 2000 	str.w	r2, [r8]
 800a22c:	e7ec      	b.n	800a208 <_malloc_r+0xb0>
 800a22e:	4623      	mov	r3, r4
 800a230:	6864      	ldr	r4, [r4, #4]
 800a232:	e7ac      	b.n	800a18e <_malloc_r+0x36>
 800a234:	4634      	mov	r4, r6
 800a236:	6876      	ldr	r6, [r6, #4]
 800a238:	e7b4      	b.n	800a1a4 <_malloc_r+0x4c>
 800a23a:	4613      	mov	r3, r2
 800a23c:	e7cc      	b.n	800a1d8 <_malloc_r+0x80>
 800a23e:	230c      	movs	r3, #12
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	4638      	mov	r0, r7
 800a244:	f000 f80e 	bl	800a264 <__malloc_unlock>
 800a248:	e797      	b.n	800a17a <_malloc_r+0x22>
 800a24a:	6025      	str	r5, [r4, #0]
 800a24c:	e7dc      	b.n	800a208 <_malloc_r+0xb0>
 800a24e:	605b      	str	r3, [r3, #4]
 800a250:	deff      	udf	#255	; 0xff
 800a252:	bf00      	nop
 800a254:	200020f8 	.word	0x200020f8

0800a258 <__malloc_lock>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__malloc_lock+0x8>)
 800a25a:	f000 b875 	b.w	800a348 <__retarget_lock_acquire_recursive>
 800a25e:	bf00      	nop
 800a260:	2000223c 	.word	0x2000223c

0800a264 <__malloc_unlock>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__malloc_unlock+0x8>)
 800a266:	f000 b870 	b.w	800a34a <__retarget_lock_release_recursive>
 800a26a:	bf00      	nop
 800a26c:	2000223c 	.word	0x2000223c

0800a270 <toupper>:
 800a270:	4b03      	ldr	r3, [pc, #12]	; (800a280 <toupper+0x10>)
 800a272:	5c1b      	ldrb	r3, [r3, r0]
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	bf08      	it	eq
 800a27c:	3820      	subeq	r0, #32
 800a27e:	4770      	bx	lr
 800a280:	0800ab31 	.word	0x0800ab31

0800a284 <siprintf>:
 800a284:	b40e      	push	{r1, r2, r3}
 800a286:	b500      	push	{lr}
 800a288:	b09c      	sub	sp, #112	; 0x70
 800a28a:	ab1d      	add	r3, sp, #116	; 0x74
 800a28c:	9002      	str	r0, [sp, #8]
 800a28e:	9006      	str	r0, [sp, #24]
 800a290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a294:	4809      	ldr	r0, [pc, #36]	; (800a2bc <siprintf+0x38>)
 800a296:	9107      	str	r1, [sp, #28]
 800a298:	9104      	str	r1, [sp, #16]
 800a29a:	4909      	ldr	r1, [pc, #36]	; (800a2c0 <siprintf+0x3c>)
 800a29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a0:	9105      	str	r1, [sp, #20]
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	a902      	add	r1, sp, #8
 800a2a8:	f000 f8f6 	bl	800a498 <_svfiprintf_r>
 800a2ac:	9b02      	ldr	r3, [sp, #8]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
 800a2b2:	b01c      	add	sp, #112	; 0x70
 800a2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b8:	b003      	add	sp, #12
 800a2ba:	4770      	bx	lr
 800a2bc:	20000158 	.word	0x20000158
 800a2c0:	ffff0208 	.word	0xffff0208

0800a2c4 <memset>:
 800a2c4:	4402      	add	r2, r0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d100      	bne.n	800a2ce <memset+0xa>
 800a2cc:	4770      	bx	lr
 800a2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a2d2:	e7f9      	b.n	800a2c8 <memset+0x4>

0800a2d4 <_sbrk_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d06      	ldr	r5, [pc, #24]	; (800a2f0 <_sbrk_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f7 f9f0 	bl	80016c4 <_sbrk>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_sbrk_r+0x1a>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_sbrk_r+0x1a>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20002238 	.word	0x20002238

0800a2f4 <__errno>:
 800a2f4:	4b01      	ldr	r3, [pc, #4]	; (800a2fc <__errno+0x8>)
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000158 	.word	0x20000158

0800a300 <__libc_init_array>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	4d0d      	ldr	r5, [pc, #52]	; (800a338 <__libc_init_array+0x38>)
 800a304:	4c0d      	ldr	r4, [pc, #52]	; (800a33c <__libc_init_array+0x3c>)
 800a306:	1b64      	subs	r4, r4, r5
 800a308:	10a4      	asrs	r4, r4, #2
 800a30a:	2600      	movs	r6, #0
 800a30c:	42a6      	cmp	r6, r4
 800a30e:	d109      	bne.n	800a324 <__libc_init_array+0x24>
 800a310:	4d0b      	ldr	r5, [pc, #44]	; (800a340 <__libc_init_array+0x40>)
 800a312:	4c0c      	ldr	r4, [pc, #48]	; (800a344 <__libc_init_array+0x44>)
 800a314:	f000 fbae 	bl	800aa74 <_init>
 800a318:	1b64      	subs	r4, r4, r5
 800a31a:	10a4      	asrs	r4, r4, #2
 800a31c:	2600      	movs	r6, #0
 800a31e:	42a6      	cmp	r6, r4
 800a320:	d105      	bne.n	800a32e <__libc_init_array+0x2e>
 800a322:	bd70      	pop	{r4, r5, r6, pc}
 800a324:	f855 3b04 	ldr.w	r3, [r5], #4
 800a328:	4798      	blx	r3
 800a32a:	3601      	adds	r6, #1
 800a32c:	e7ee      	b.n	800a30c <__libc_init_array+0xc>
 800a32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a332:	4798      	blx	r3
 800a334:	3601      	adds	r6, #1
 800a336:	e7f2      	b.n	800a31e <__libc_init_array+0x1e>
 800a338:	0800ac6c 	.word	0x0800ac6c
 800a33c:	0800ac6c 	.word	0x0800ac6c
 800a340:	0800ac6c 	.word	0x0800ac6c
 800a344:	0800ac70 	.word	0x0800ac70

0800a348 <__retarget_lock_acquire_recursive>:
 800a348:	4770      	bx	lr

0800a34a <__retarget_lock_release_recursive>:
 800a34a:	4770      	bx	lr

0800a34c <_free_r>:
 800a34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a34e:	2900      	cmp	r1, #0
 800a350:	d044      	beq.n	800a3dc <_free_r+0x90>
 800a352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a356:	9001      	str	r0, [sp, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f1a1 0404 	sub.w	r4, r1, #4
 800a35e:	bfb8      	it	lt
 800a360:	18e4      	addlt	r4, r4, r3
 800a362:	f7ff ff79 	bl	800a258 <__malloc_lock>
 800a366:	4a1e      	ldr	r2, [pc, #120]	; (800a3e0 <_free_r+0x94>)
 800a368:	9801      	ldr	r0, [sp, #4]
 800a36a:	6813      	ldr	r3, [r2, #0]
 800a36c:	b933      	cbnz	r3, 800a37c <_free_r+0x30>
 800a36e:	6063      	str	r3, [r4, #4]
 800a370:	6014      	str	r4, [r2, #0]
 800a372:	b003      	add	sp, #12
 800a374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a378:	f7ff bf74 	b.w	800a264 <__malloc_unlock>
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d908      	bls.n	800a392 <_free_r+0x46>
 800a380:	6825      	ldr	r5, [r4, #0]
 800a382:	1961      	adds	r1, r4, r5
 800a384:	428b      	cmp	r3, r1
 800a386:	bf01      	itttt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	1949      	addeq	r1, r1, r5
 800a38e:	6021      	streq	r1, [r4, #0]
 800a390:	e7ed      	b.n	800a36e <_free_r+0x22>
 800a392:	461a      	mov	r2, r3
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	b10b      	cbz	r3, 800a39c <_free_r+0x50>
 800a398:	42a3      	cmp	r3, r4
 800a39a:	d9fa      	bls.n	800a392 <_free_r+0x46>
 800a39c:	6811      	ldr	r1, [r2, #0]
 800a39e:	1855      	adds	r5, r2, r1
 800a3a0:	42a5      	cmp	r5, r4
 800a3a2:	d10b      	bne.n	800a3bc <_free_r+0x70>
 800a3a4:	6824      	ldr	r4, [r4, #0]
 800a3a6:	4421      	add	r1, r4
 800a3a8:	1854      	adds	r4, r2, r1
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	6011      	str	r1, [r2, #0]
 800a3ae:	d1e0      	bne.n	800a372 <_free_r+0x26>
 800a3b0:	681c      	ldr	r4, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	6053      	str	r3, [r2, #4]
 800a3b6:	440c      	add	r4, r1
 800a3b8:	6014      	str	r4, [r2, #0]
 800a3ba:	e7da      	b.n	800a372 <_free_r+0x26>
 800a3bc:	d902      	bls.n	800a3c4 <_free_r+0x78>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	6003      	str	r3, [r0, #0]
 800a3c2:	e7d6      	b.n	800a372 <_free_r+0x26>
 800a3c4:	6825      	ldr	r5, [r4, #0]
 800a3c6:	1961      	adds	r1, r4, r5
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	bf04      	itt	eq
 800a3cc:	6819      	ldreq	r1, [r3, #0]
 800a3ce:	685b      	ldreq	r3, [r3, #4]
 800a3d0:	6063      	str	r3, [r4, #4]
 800a3d2:	bf04      	itt	eq
 800a3d4:	1949      	addeq	r1, r1, r5
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	6054      	str	r4, [r2, #4]
 800a3da:	e7ca      	b.n	800a372 <_free_r+0x26>
 800a3dc:	b003      	add	sp, #12
 800a3de:	bd30      	pop	{r4, r5, pc}
 800a3e0:	200020f8 	.word	0x200020f8

0800a3e4 <__ssputs_r>:
 800a3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	688e      	ldr	r6, [r1, #8]
 800a3ea:	461f      	mov	r7, r3
 800a3ec:	42be      	cmp	r6, r7
 800a3ee:	680b      	ldr	r3, [r1, #0]
 800a3f0:	4682      	mov	sl, r0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	4690      	mov	r8, r2
 800a3f6:	d82c      	bhi.n	800a452 <__ssputs_r+0x6e>
 800a3f8:	898a      	ldrh	r2, [r1, #12]
 800a3fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3fe:	d026      	beq.n	800a44e <__ssputs_r+0x6a>
 800a400:	6965      	ldr	r5, [r4, #20]
 800a402:	6909      	ldr	r1, [r1, #16]
 800a404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a408:	eba3 0901 	sub.w	r9, r3, r1
 800a40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a410:	1c7b      	adds	r3, r7, #1
 800a412:	444b      	add	r3, r9
 800a414:	106d      	asrs	r5, r5, #1
 800a416:	429d      	cmp	r5, r3
 800a418:	bf38      	it	cc
 800a41a:	461d      	movcc	r5, r3
 800a41c:	0553      	lsls	r3, r2, #21
 800a41e:	d527      	bpl.n	800a470 <__ssputs_r+0x8c>
 800a420:	4629      	mov	r1, r5
 800a422:	f7ff fe99 	bl	800a158 <_malloc_r>
 800a426:	4606      	mov	r6, r0
 800a428:	b360      	cbz	r0, 800a484 <__ssputs_r+0xa0>
 800a42a:	6921      	ldr	r1, [r4, #16]
 800a42c:	464a      	mov	r2, r9
 800a42e:	f000 fadb 	bl	800a9e8 <memcpy>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	6126      	str	r6, [r4, #16]
 800a440:	6165      	str	r5, [r4, #20]
 800a442:	444e      	add	r6, r9
 800a444:	eba5 0509 	sub.w	r5, r5, r9
 800a448:	6026      	str	r6, [r4, #0]
 800a44a:	60a5      	str	r5, [r4, #8]
 800a44c:	463e      	mov	r6, r7
 800a44e:	42be      	cmp	r6, r7
 800a450:	d900      	bls.n	800a454 <__ssputs_r+0x70>
 800a452:	463e      	mov	r6, r7
 800a454:	6820      	ldr	r0, [r4, #0]
 800a456:	4632      	mov	r2, r6
 800a458:	4641      	mov	r1, r8
 800a45a:	f000 faab 	bl	800a9b4 <memmove>
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	1b9b      	subs	r3, r3, r6
 800a462:	60a3      	str	r3, [r4, #8]
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	4433      	add	r3, r6
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	2000      	movs	r0, #0
 800a46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a470:	462a      	mov	r2, r5
 800a472:	f000 fac7 	bl	800aa04 <_realloc_r>
 800a476:	4606      	mov	r6, r0
 800a478:	2800      	cmp	r0, #0
 800a47a:	d1e0      	bne.n	800a43e <__ssputs_r+0x5a>
 800a47c:	6921      	ldr	r1, [r4, #16]
 800a47e:	4650      	mov	r0, sl
 800a480:	f7ff ff64 	bl	800a34c <_free_r>
 800a484:	230c      	movs	r3, #12
 800a486:	f8ca 3000 	str.w	r3, [sl]
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	f04f 30ff 	mov.w	r0, #4294967295
 800a496:	e7e9      	b.n	800a46c <__ssputs_r+0x88>

0800a498 <_svfiprintf_r>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	4698      	mov	r8, r3
 800a49e:	898b      	ldrh	r3, [r1, #12]
 800a4a0:	061b      	lsls	r3, r3, #24
 800a4a2:	b09d      	sub	sp, #116	; 0x74
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	d50e      	bpl.n	800a4ca <_svfiprintf_r+0x32>
 800a4ac:	690b      	ldr	r3, [r1, #16]
 800a4ae:	b963      	cbnz	r3, 800a4ca <_svfiprintf_r+0x32>
 800a4b0:	2140      	movs	r1, #64	; 0x40
 800a4b2:	f7ff fe51 	bl	800a158 <_malloc_r>
 800a4b6:	6028      	str	r0, [r5, #0]
 800a4b8:	6128      	str	r0, [r5, #16]
 800a4ba:	b920      	cbnz	r0, 800a4c6 <_svfiprintf_r+0x2e>
 800a4bc:	230c      	movs	r3, #12
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	e0d0      	b.n	800a668 <_svfiprintf_r+0x1d0>
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	616b      	str	r3, [r5, #20]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ce:	2320      	movs	r3, #32
 800a4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4d8:	2330      	movs	r3, #48	; 0x30
 800a4da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a680 <_svfiprintf_r+0x1e8>
 800a4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4e2:	f04f 0901 	mov.w	r9, #1
 800a4e6:	4623      	mov	r3, r4
 800a4e8:	469a      	mov	sl, r3
 800a4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ee:	b10a      	cbz	r2, 800a4f4 <_svfiprintf_r+0x5c>
 800a4f0:	2a25      	cmp	r2, #37	; 0x25
 800a4f2:	d1f9      	bne.n	800a4e8 <_svfiprintf_r+0x50>
 800a4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4f8:	d00b      	beq.n	800a512 <_svfiprintf_r+0x7a>
 800a4fa:	465b      	mov	r3, fp
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff ff6f 	bl	800a3e4 <__ssputs_r>
 800a506:	3001      	adds	r0, #1
 800a508:	f000 80a9 	beq.w	800a65e <_svfiprintf_r+0x1c6>
 800a50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a50e:	445a      	add	r2, fp
 800a510:	9209      	str	r2, [sp, #36]	; 0x24
 800a512:	f89a 3000 	ldrb.w	r3, [sl]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 80a1 	beq.w	800a65e <_svfiprintf_r+0x1c6>
 800a51c:	2300      	movs	r3, #0
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295
 800a522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a526:	f10a 0a01 	add.w	sl, sl, #1
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	9307      	str	r3, [sp, #28]
 800a52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a532:	931a      	str	r3, [sp, #104]	; 0x68
 800a534:	4654      	mov	r4, sl
 800a536:	2205      	movs	r2, #5
 800a538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53c:	4850      	ldr	r0, [pc, #320]	; (800a680 <_svfiprintf_r+0x1e8>)
 800a53e:	f7f5 fe6f 	bl	8000220 <memchr>
 800a542:	9a04      	ldr	r2, [sp, #16]
 800a544:	b9d8      	cbnz	r0, 800a57e <_svfiprintf_r+0xe6>
 800a546:	06d0      	lsls	r0, r2, #27
 800a548:	bf44      	itt	mi
 800a54a:	2320      	movmi	r3, #32
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a550:	0711      	lsls	r1, r2, #28
 800a552:	bf44      	itt	mi
 800a554:	232b      	movmi	r3, #43	; 0x2b
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55a:	f89a 3000 	ldrb.w	r3, [sl]
 800a55e:	2b2a      	cmp	r3, #42	; 0x2a
 800a560:	d015      	beq.n	800a58e <_svfiprintf_r+0xf6>
 800a562:	9a07      	ldr	r2, [sp, #28]
 800a564:	4654      	mov	r4, sl
 800a566:	2000      	movs	r0, #0
 800a568:	f04f 0c0a 	mov.w	ip, #10
 800a56c:	4621      	mov	r1, r4
 800a56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a572:	3b30      	subs	r3, #48	; 0x30
 800a574:	2b09      	cmp	r3, #9
 800a576:	d94d      	bls.n	800a614 <_svfiprintf_r+0x17c>
 800a578:	b1b0      	cbz	r0, 800a5a8 <_svfiprintf_r+0x110>
 800a57a:	9207      	str	r2, [sp, #28]
 800a57c:	e014      	b.n	800a5a8 <_svfiprintf_r+0x110>
 800a57e:	eba0 0308 	sub.w	r3, r0, r8
 800a582:	fa09 f303 	lsl.w	r3, r9, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	46a2      	mov	sl, r4
 800a58c:	e7d2      	b.n	800a534 <_svfiprintf_r+0x9c>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	1d19      	adds	r1, r3, #4
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfbb      	ittet	lt
 800a59a:	425b      	neglt	r3, r3
 800a59c:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a0:	9307      	strge	r3, [sp, #28]
 800a5a2:	9307      	strlt	r3, [sp, #28]
 800a5a4:	bfb8      	it	lt
 800a5a6:	9204      	strlt	r2, [sp, #16]
 800a5a8:	7823      	ldrb	r3, [r4, #0]
 800a5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ac:	d10c      	bne.n	800a5c8 <_svfiprintf_r+0x130>
 800a5ae:	7863      	ldrb	r3, [r4, #1]
 800a5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b2:	d134      	bne.n	800a61e <_svfiprintf_r+0x186>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	9203      	str	r2, [sp, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bfb8      	it	lt
 800a5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5c4:	3402      	adds	r4, #2
 800a5c6:	9305      	str	r3, [sp, #20]
 800a5c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a690 <_svfiprintf_r+0x1f8>
 800a5cc:	7821      	ldrb	r1, [r4, #0]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f7f5 fe25 	bl	8000220 <memchr>
 800a5d6:	b138      	cbz	r0, 800a5e8 <_svfiprintf_r+0x150>
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	eba0 000a 	sub.w	r0, r0, sl
 800a5de:	2240      	movs	r2, #64	; 0x40
 800a5e0:	4082      	lsls	r2, r0
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	9304      	str	r3, [sp, #16]
 800a5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ec:	4825      	ldr	r0, [pc, #148]	; (800a684 <_svfiprintf_r+0x1ec>)
 800a5ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5f2:	2206      	movs	r2, #6
 800a5f4:	f7f5 fe14 	bl	8000220 <memchr>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d038      	beq.n	800a66e <_svfiprintf_r+0x1d6>
 800a5fc:	4b22      	ldr	r3, [pc, #136]	; (800a688 <_svfiprintf_r+0x1f0>)
 800a5fe:	bb1b      	cbnz	r3, 800a648 <_svfiprintf_r+0x1b0>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	3307      	adds	r3, #7
 800a604:	f023 0307 	bic.w	r3, r3, #7
 800a608:	3308      	adds	r3, #8
 800a60a:	9303      	str	r3, [sp, #12]
 800a60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60e:	4433      	add	r3, r6
 800a610:	9309      	str	r3, [sp, #36]	; 0x24
 800a612:	e768      	b.n	800a4e6 <_svfiprintf_r+0x4e>
 800a614:	fb0c 3202 	mla	r2, ip, r2, r3
 800a618:	460c      	mov	r4, r1
 800a61a:	2001      	movs	r0, #1
 800a61c:	e7a6      	b.n	800a56c <_svfiprintf_r+0xd4>
 800a61e:	2300      	movs	r3, #0
 800a620:	3401      	adds	r4, #1
 800a622:	9305      	str	r3, [sp, #20]
 800a624:	4619      	mov	r1, r3
 800a626:	f04f 0c0a 	mov.w	ip, #10
 800a62a:	4620      	mov	r0, r4
 800a62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a630:	3a30      	subs	r2, #48	; 0x30
 800a632:	2a09      	cmp	r2, #9
 800a634:	d903      	bls.n	800a63e <_svfiprintf_r+0x1a6>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0c6      	beq.n	800a5c8 <_svfiprintf_r+0x130>
 800a63a:	9105      	str	r1, [sp, #20]
 800a63c:	e7c4      	b.n	800a5c8 <_svfiprintf_r+0x130>
 800a63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a642:	4604      	mov	r4, r0
 800a644:	2301      	movs	r3, #1
 800a646:	e7f0      	b.n	800a62a <_svfiprintf_r+0x192>
 800a648:	ab03      	add	r3, sp, #12
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	462a      	mov	r2, r5
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <_svfiprintf_r+0x1f4>)
 800a650:	a904      	add	r1, sp, #16
 800a652:	4638      	mov	r0, r7
 800a654:	f3af 8000 	nop.w
 800a658:	1c42      	adds	r2, r0, #1
 800a65a:	4606      	mov	r6, r0
 800a65c:	d1d6      	bne.n	800a60c <_svfiprintf_r+0x174>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	065b      	lsls	r3, r3, #25
 800a662:	f53f af2d 	bmi.w	800a4c0 <_svfiprintf_r+0x28>
 800a666:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a668:	b01d      	add	sp, #116	; 0x74
 800a66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	462a      	mov	r2, r5
 800a674:	4b05      	ldr	r3, [pc, #20]	; (800a68c <_svfiprintf_r+0x1f4>)
 800a676:	a904      	add	r1, sp, #16
 800a678:	4638      	mov	r0, r7
 800a67a:	f000 f879 	bl	800a770 <_printf_i>
 800a67e:	e7eb      	b.n	800a658 <_svfiprintf_r+0x1c0>
 800a680:	0800ac31 	.word	0x0800ac31
 800a684:	0800ac3b 	.word	0x0800ac3b
 800a688:	00000000 	.word	0x00000000
 800a68c:	0800a3e5 	.word	0x0800a3e5
 800a690:	0800ac37 	.word	0x0800ac37

0800a694 <_printf_common>:
 800a694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a698:	4616      	mov	r6, r2
 800a69a:	4699      	mov	r9, r3
 800a69c:	688a      	ldr	r2, [r1, #8]
 800a69e:	690b      	ldr	r3, [r1, #16]
 800a6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	bfb8      	it	lt
 800a6a8:	4613      	movlt	r3, r2
 800a6aa:	6033      	str	r3, [r6, #0]
 800a6ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	b10a      	cbz	r2, 800a6ba <_printf_common+0x26>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	6033      	str	r3, [r6, #0]
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	0699      	lsls	r1, r3, #26
 800a6be:	bf42      	ittt	mi
 800a6c0:	6833      	ldrmi	r3, [r6, #0]
 800a6c2:	3302      	addmi	r3, #2
 800a6c4:	6033      	strmi	r3, [r6, #0]
 800a6c6:	6825      	ldr	r5, [r4, #0]
 800a6c8:	f015 0506 	ands.w	r5, r5, #6
 800a6cc:	d106      	bne.n	800a6dc <_printf_common+0x48>
 800a6ce:	f104 0a19 	add.w	sl, r4, #25
 800a6d2:	68e3      	ldr	r3, [r4, #12]
 800a6d4:	6832      	ldr	r2, [r6, #0]
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dc26      	bgt.n	800a72a <_printf_common+0x96>
 800a6dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6e0:	1e13      	subs	r3, r2, #0
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	bf18      	it	ne
 800a6e6:	2301      	movne	r3, #1
 800a6e8:	0692      	lsls	r2, r2, #26
 800a6ea:	d42b      	bmi.n	800a744 <_printf_common+0xb0>
 800a6ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	47c0      	blx	r8
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	d01e      	beq.n	800a738 <_printf_common+0xa4>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6922      	ldr	r2, [r4, #16]
 800a6fe:	f003 0306 	and.w	r3, r3, #6
 800a702:	2b04      	cmp	r3, #4
 800a704:	bf02      	ittt	eq
 800a706:	68e5      	ldreq	r5, [r4, #12]
 800a708:	6833      	ldreq	r3, [r6, #0]
 800a70a:	1aed      	subeq	r5, r5, r3
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	bf0c      	ite	eq
 800a710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a714:	2500      	movne	r5, #0
 800a716:	4293      	cmp	r3, r2
 800a718:	bfc4      	itt	gt
 800a71a:	1a9b      	subgt	r3, r3, r2
 800a71c:	18ed      	addgt	r5, r5, r3
 800a71e:	2600      	movs	r6, #0
 800a720:	341a      	adds	r4, #26
 800a722:	42b5      	cmp	r5, r6
 800a724:	d11a      	bne.n	800a75c <_printf_common+0xc8>
 800a726:	2000      	movs	r0, #0
 800a728:	e008      	b.n	800a73c <_printf_common+0xa8>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4652      	mov	r2, sl
 800a72e:	4649      	mov	r1, r9
 800a730:	4638      	mov	r0, r7
 800a732:	47c0      	blx	r8
 800a734:	3001      	adds	r0, #1
 800a736:	d103      	bne.n	800a740 <_printf_common+0xac>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	3501      	adds	r5, #1
 800a742:	e7c6      	b.n	800a6d2 <_printf_common+0x3e>
 800a744:	18e1      	adds	r1, r4, r3
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	2030      	movs	r0, #48	; 0x30
 800a74a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a74e:	4422      	add	r2, r4
 800a750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a758:	3302      	adds	r3, #2
 800a75a:	e7c7      	b.n	800a6ec <_printf_common+0x58>
 800a75c:	2301      	movs	r3, #1
 800a75e:	4622      	mov	r2, r4
 800a760:	4649      	mov	r1, r9
 800a762:	4638      	mov	r0, r7
 800a764:	47c0      	blx	r8
 800a766:	3001      	adds	r0, #1
 800a768:	d0e6      	beq.n	800a738 <_printf_common+0xa4>
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7d9      	b.n	800a722 <_printf_common+0x8e>
	...

0800a770 <_printf_i>:
 800a770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a774:	7e0f      	ldrb	r7, [r1, #24]
 800a776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a778:	2f78      	cmp	r7, #120	; 0x78
 800a77a:	4691      	mov	r9, r2
 800a77c:	4680      	mov	r8, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	469a      	mov	sl, r3
 800a782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a786:	d807      	bhi.n	800a798 <_printf_i+0x28>
 800a788:	2f62      	cmp	r7, #98	; 0x62
 800a78a:	d80a      	bhi.n	800a7a2 <_printf_i+0x32>
 800a78c:	2f00      	cmp	r7, #0
 800a78e:	f000 80d4 	beq.w	800a93a <_printf_i+0x1ca>
 800a792:	2f58      	cmp	r7, #88	; 0x58
 800a794:	f000 80c0 	beq.w	800a918 <_printf_i+0x1a8>
 800a798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a79c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7a0:	e03a      	b.n	800a818 <_printf_i+0xa8>
 800a7a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7a6:	2b15      	cmp	r3, #21
 800a7a8:	d8f6      	bhi.n	800a798 <_printf_i+0x28>
 800a7aa:	a101      	add	r1, pc, #4	; (adr r1, 800a7b0 <_printf_i+0x40>)
 800a7ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a799 	.word	0x0800a799
 800a7bc:	0800a799 	.word	0x0800a799
 800a7c0:	0800a799 	.word	0x0800a799
 800a7c4:	0800a799 	.word	0x0800a799
 800a7c8:	0800a81d 	.word	0x0800a81d
 800a7cc:	0800a799 	.word	0x0800a799
 800a7d0:	0800a799 	.word	0x0800a799
 800a7d4:	0800a799 	.word	0x0800a799
 800a7d8:	0800a799 	.word	0x0800a799
 800a7dc:	0800a921 	.word	0x0800a921
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a8db 	.word	0x0800a8db
 800a7e8:	0800a799 	.word	0x0800a799
 800a7ec:	0800a799 	.word	0x0800a799
 800a7f0:	0800a943 	.word	0x0800a943
 800a7f4:	0800a799 	.word	0x0800a799
 800a7f8:	0800a849 	.word	0x0800a849
 800a7fc:	0800a799 	.word	0x0800a799
 800a800:	0800a799 	.word	0x0800a799
 800a804:	0800a8e3 	.word	0x0800a8e3
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	1d1a      	adds	r2, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	602a      	str	r2, [r5, #0]
 800a810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a818:	2301      	movs	r3, #1
 800a81a:	e09f      	b.n	800a95c <_printf_i+0x1ec>
 800a81c:	6820      	ldr	r0, [r4, #0]
 800a81e:	682b      	ldr	r3, [r5, #0]
 800a820:	0607      	lsls	r7, r0, #24
 800a822:	f103 0104 	add.w	r1, r3, #4
 800a826:	6029      	str	r1, [r5, #0]
 800a828:	d501      	bpl.n	800a82e <_printf_i+0xbe>
 800a82a:	681e      	ldr	r6, [r3, #0]
 800a82c:	e003      	b.n	800a836 <_printf_i+0xc6>
 800a82e:	0646      	lsls	r6, r0, #25
 800a830:	d5fb      	bpl.n	800a82a <_printf_i+0xba>
 800a832:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a836:	2e00      	cmp	r6, #0
 800a838:	da03      	bge.n	800a842 <_printf_i+0xd2>
 800a83a:	232d      	movs	r3, #45	; 0x2d
 800a83c:	4276      	negs	r6, r6
 800a83e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a842:	485a      	ldr	r0, [pc, #360]	; (800a9ac <_printf_i+0x23c>)
 800a844:	230a      	movs	r3, #10
 800a846:	e012      	b.n	800a86e <_printf_i+0xfe>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	6820      	ldr	r0, [r4, #0]
 800a84c:	1d19      	adds	r1, r3, #4
 800a84e:	6029      	str	r1, [r5, #0]
 800a850:	0605      	lsls	r5, r0, #24
 800a852:	d501      	bpl.n	800a858 <_printf_i+0xe8>
 800a854:	681e      	ldr	r6, [r3, #0]
 800a856:	e002      	b.n	800a85e <_printf_i+0xee>
 800a858:	0641      	lsls	r1, r0, #25
 800a85a:	d5fb      	bpl.n	800a854 <_printf_i+0xe4>
 800a85c:	881e      	ldrh	r6, [r3, #0]
 800a85e:	4853      	ldr	r0, [pc, #332]	; (800a9ac <_printf_i+0x23c>)
 800a860:	2f6f      	cmp	r7, #111	; 0x6f
 800a862:	bf0c      	ite	eq
 800a864:	2308      	moveq	r3, #8
 800a866:	230a      	movne	r3, #10
 800a868:	2100      	movs	r1, #0
 800a86a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a86e:	6865      	ldr	r5, [r4, #4]
 800a870:	60a5      	str	r5, [r4, #8]
 800a872:	2d00      	cmp	r5, #0
 800a874:	bfa2      	ittt	ge
 800a876:	6821      	ldrge	r1, [r4, #0]
 800a878:	f021 0104 	bicge.w	r1, r1, #4
 800a87c:	6021      	strge	r1, [r4, #0]
 800a87e:	b90e      	cbnz	r6, 800a884 <_printf_i+0x114>
 800a880:	2d00      	cmp	r5, #0
 800a882:	d04b      	beq.n	800a91c <_printf_i+0x1ac>
 800a884:	4615      	mov	r5, r2
 800a886:	fbb6 f1f3 	udiv	r1, r6, r3
 800a88a:	fb03 6711 	mls	r7, r3, r1, r6
 800a88e:	5dc7      	ldrb	r7, [r0, r7]
 800a890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a894:	4637      	mov	r7, r6
 800a896:	42bb      	cmp	r3, r7
 800a898:	460e      	mov	r6, r1
 800a89a:	d9f4      	bls.n	800a886 <_printf_i+0x116>
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d10b      	bne.n	800a8b8 <_printf_i+0x148>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	07de      	lsls	r6, r3, #31
 800a8a4:	d508      	bpl.n	800a8b8 <_printf_i+0x148>
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	6861      	ldr	r1, [r4, #4]
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	bfde      	ittt	le
 800a8ae:	2330      	movle	r3, #48	; 0x30
 800a8b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8b8:	1b52      	subs	r2, r2, r5
 800a8ba:	6122      	str	r2, [r4, #16]
 800a8bc:	f8cd a000 	str.w	sl, [sp]
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	aa03      	add	r2, sp, #12
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7ff fee4 	bl	800a694 <_printf_common>
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d14a      	bne.n	800a966 <_printf_i+0x1f6>
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	b004      	add	sp, #16
 800a8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	f043 0320 	orr.w	r3, r3, #32
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	4833      	ldr	r0, [pc, #204]	; (800a9b0 <_printf_i+0x240>)
 800a8e4:	2778      	movs	r7, #120	; 0x78
 800a8e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	6829      	ldr	r1, [r5, #0]
 800a8ee:	061f      	lsls	r7, r3, #24
 800a8f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8f4:	d402      	bmi.n	800a8fc <_printf_i+0x18c>
 800a8f6:	065f      	lsls	r7, r3, #25
 800a8f8:	bf48      	it	mi
 800a8fa:	b2b6      	uxthmi	r6, r6
 800a8fc:	07df      	lsls	r7, r3, #31
 800a8fe:	bf48      	it	mi
 800a900:	f043 0320 	orrmi.w	r3, r3, #32
 800a904:	6029      	str	r1, [r5, #0]
 800a906:	bf48      	it	mi
 800a908:	6023      	strmi	r3, [r4, #0]
 800a90a:	b91e      	cbnz	r6, 800a914 <_printf_i+0x1a4>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	f023 0320 	bic.w	r3, r3, #32
 800a912:	6023      	str	r3, [r4, #0]
 800a914:	2310      	movs	r3, #16
 800a916:	e7a7      	b.n	800a868 <_printf_i+0xf8>
 800a918:	4824      	ldr	r0, [pc, #144]	; (800a9ac <_printf_i+0x23c>)
 800a91a:	e7e4      	b.n	800a8e6 <_printf_i+0x176>
 800a91c:	4615      	mov	r5, r2
 800a91e:	e7bd      	b.n	800a89c <_printf_i+0x12c>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	6826      	ldr	r6, [r4, #0]
 800a924:	6961      	ldr	r1, [r4, #20]
 800a926:	1d18      	adds	r0, r3, #4
 800a928:	6028      	str	r0, [r5, #0]
 800a92a:	0635      	lsls	r5, r6, #24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	d501      	bpl.n	800a934 <_printf_i+0x1c4>
 800a930:	6019      	str	r1, [r3, #0]
 800a932:	e002      	b.n	800a93a <_printf_i+0x1ca>
 800a934:	0670      	lsls	r0, r6, #25
 800a936:	d5fb      	bpl.n	800a930 <_printf_i+0x1c0>
 800a938:	8019      	strh	r1, [r3, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	4615      	mov	r5, r2
 800a940:	e7bc      	b.n	800a8bc <_printf_i+0x14c>
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	1d1a      	adds	r2, r3, #4
 800a946:	602a      	str	r2, [r5, #0]
 800a948:	681d      	ldr	r5, [r3, #0]
 800a94a:	6862      	ldr	r2, [r4, #4]
 800a94c:	2100      	movs	r1, #0
 800a94e:	4628      	mov	r0, r5
 800a950:	f7f5 fc66 	bl	8000220 <memchr>
 800a954:	b108      	cbz	r0, 800a95a <_printf_i+0x1ea>
 800a956:	1b40      	subs	r0, r0, r5
 800a958:	6060      	str	r0, [r4, #4]
 800a95a:	6863      	ldr	r3, [r4, #4]
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	2300      	movs	r3, #0
 800a960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a964:	e7aa      	b.n	800a8bc <_printf_i+0x14c>
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	462a      	mov	r2, r5
 800a96a:	4649      	mov	r1, r9
 800a96c:	4640      	mov	r0, r8
 800a96e:	47d0      	blx	sl
 800a970:	3001      	adds	r0, #1
 800a972:	d0ad      	beq.n	800a8d0 <_printf_i+0x160>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	079b      	lsls	r3, r3, #30
 800a978:	d413      	bmi.n	800a9a2 <_printf_i+0x232>
 800a97a:	68e0      	ldr	r0, [r4, #12]
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	4298      	cmp	r0, r3
 800a980:	bfb8      	it	lt
 800a982:	4618      	movlt	r0, r3
 800a984:	e7a6      	b.n	800a8d4 <_printf_i+0x164>
 800a986:	2301      	movs	r3, #1
 800a988:	4632      	mov	r2, r6
 800a98a:	4649      	mov	r1, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	47d0      	blx	sl
 800a990:	3001      	adds	r0, #1
 800a992:	d09d      	beq.n	800a8d0 <_printf_i+0x160>
 800a994:	3501      	adds	r5, #1
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	9903      	ldr	r1, [sp, #12]
 800a99a:	1a5b      	subs	r3, r3, r1
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	dcf2      	bgt.n	800a986 <_printf_i+0x216>
 800a9a0:	e7eb      	b.n	800a97a <_printf_i+0x20a>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	f104 0619 	add.w	r6, r4, #25
 800a9a8:	e7f5      	b.n	800a996 <_printf_i+0x226>
 800a9aa:	bf00      	nop
 800a9ac:	0800ac42 	.word	0x0800ac42
 800a9b0:	0800ac53 	.word	0x0800ac53

0800a9b4 <memmove>:
 800a9b4:	4288      	cmp	r0, r1
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	eb01 0402 	add.w	r4, r1, r2
 800a9bc:	d902      	bls.n	800a9c4 <memmove+0x10>
 800a9be:	4284      	cmp	r4, r0
 800a9c0:	4623      	mov	r3, r4
 800a9c2:	d807      	bhi.n	800a9d4 <memmove+0x20>
 800a9c4:	1e43      	subs	r3, r0, #1
 800a9c6:	42a1      	cmp	r1, r4
 800a9c8:	d008      	beq.n	800a9dc <memmove+0x28>
 800a9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9d2:	e7f8      	b.n	800a9c6 <memmove+0x12>
 800a9d4:	4402      	add	r2, r0
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	428a      	cmp	r2, r1
 800a9da:	d100      	bne.n	800a9de <memmove+0x2a>
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9e6:	e7f7      	b.n	800a9d8 <memmove+0x24>

0800a9e8 <memcpy>:
 800a9e8:	440a      	add	r2, r1
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f0:	d100      	bne.n	800a9f4 <memcpy+0xc>
 800a9f2:	4770      	bx	lr
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9fe:	4291      	cmp	r1, r2
 800aa00:	d1f9      	bne.n	800a9f6 <memcpy+0xe>
 800aa02:	bd10      	pop	{r4, pc}

0800aa04 <_realloc_r>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	b921      	cbnz	r1, 800aa1a <_realloc_r+0x16>
 800aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	4611      	mov	r1, r2
 800aa16:	f7ff bb9f 	b.w	800a158 <_malloc_r>
 800aa1a:	b92a      	cbnz	r2, 800aa28 <_realloc_r+0x24>
 800aa1c:	f7ff fc96 	bl	800a34c <_free_r>
 800aa20:	4625      	mov	r5, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa28:	f000 f81b 	bl	800aa62 <_malloc_usable_size_r>
 800aa2c:	4284      	cmp	r4, r0
 800aa2e:	4607      	mov	r7, r0
 800aa30:	d802      	bhi.n	800aa38 <_realloc_r+0x34>
 800aa32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa36:	d812      	bhi.n	800aa5e <_realloc_r+0x5a>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff fb8c 	bl	800a158 <_malloc_r>
 800aa40:	4605      	mov	r5, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d0ed      	beq.n	800aa22 <_realloc_r+0x1e>
 800aa46:	42bc      	cmp	r4, r7
 800aa48:	4622      	mov	r2, r4
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	bf28      	it	cs
 800aa4e:	463a      	movcs	r2, r7
 800aa50:	f7ff ffca 	bl	800a9e8 <memcpy>
 800aa54:	4631      	mov	r1, r6
 800aa56:	4640      	mov	r0, r8
 800aa58:	f7ff fc78 	bl	800a34c <_free_r>
 800aa5c:	e7e1      	b.n	800aa22 <_realloc_r+0x1e>
 800aa5e:	4635      	mov	r5, r6
 800aa60:	e7df      	b.n	800aa22 <_realloc_r+0x1e>

0800aa62 <_malloc_usable_size_r>:
 800aa62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa66:	1f18      	subs	r0, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bfbc      	itt	lt
 800aa6c:	580b      	ldrlt	r3, [r1, r0]
 800aa6e:	18c0      	addlt	r0, r0, r3
 800aa70:	4770      	bx	lr
	...

0800aa74 <_init>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_fini>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr
