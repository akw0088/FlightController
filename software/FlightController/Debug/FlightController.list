
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b798  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc54  0800bc54  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc54  0800bc54  0001bc54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc5c  0800bc5c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc60  0800bc60  0001bc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800bc64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  2000015c  0800bdc0  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002298  0800bdc0  00022298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a847  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c5d  00000000  00000000  0003aa16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001060  00000000  00000000  0003fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002606c  00000000  00000000  00040c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1af  00000000  00000000  00066c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfe99  00000000  00000000  00083e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e3c  00000000  00000000  00163ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00169b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b960 	.word	0x0800b960

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	0800b960 	.word	0x0800b960

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	4613      	mov	r3, r2
 80005cc:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f924 	bl	800081c <null_ptr_check>
 80005d4:	4603      	mov	r3, r0
 80005d6:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80005d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d11c      	bne.n	800061a <bmp280_get_regs+0x5e>
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d019      	beq.n	800061a <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	789b      	ldrb	r3, [r3, #2]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f4:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685c      	ldr	r4, [r3, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7858      	ldrb	r0, [r3, #1]
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	b29b      	uxth	r3, r3
 8000602:	7bf9      	ldrb	r1, [r7, #15]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	47a0      	blx	r4
 8000608:	4603      	mov	r3, r0
 800060a:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 800060c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000614:	23fc      	movs	r3, #252	; 0xfc
 8000616:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000618:	e001      	b.n	800061e <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800061e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000622:	4618      	mov	r0, r3
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd90      	pop	{r4, r7, pc}

0800062a <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800062a:	b590      	push	{r4, r7, lr}
 800062c:	b089      	sub	sp, #36	; 0x24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4613      	mov	r3, r2
 8000638:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d901      	bls.n	8000644 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000644:	6838      	ldr	r0, [r7, #0]
 8000646:	f000 f8e9 	bl	800081c <null_ptr_check>
 800064a:	4603      	mov	r3, r0
 800064c:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800064e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d14d      	bne.n	80006f2 <bmp280_set_regs+0xc8>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d04a      	beq.n	80006f2 <bmp280_set_regs+0xc8>
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d047      	beq.n	80006f2 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d041      	beq.n	80006ec <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d114      	bne.n	80006a0 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000676:	2300      	movs	r3, #0
 8000678:	76fb      	strb	r3, [r7, #27]
 800067a:	e00d      	b.n	8000698 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800067c:	7efb      	ldrb	r3, [r7, #27]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	7efb      	ldrb	r3, [r7, #27]
 8000686:	68f9      	ldr	r1, [r7, #12]
 8000688:	440b      	add	r3, r1
 800068a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000692:	7efb      	ldrb	r3, [r7, #27]
 8000694:	3301      	adds	r3, #1
 8000696:	76fb      	strb	r3, [r7, #27]
 8000698:	7efa      	ldrb	r2, [r7, #27]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3ed      	bcc.n	800067c <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d90d      	bls.n	80006c2 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f107 0110 	add.w	r1, r7, #16
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f000 f8d4 	bl	800085c <interleave_data>
                temp_len = ((len * 2) - 1);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	83bb      	strh	r3, [r7, #28]
 80006c0:	e001      	b.n	80006c6 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	689c      	ldr	r4, [r3, #8]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	7858      	ldrb	r0, [r3, #1]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	7819      	ldrb	r1, [r3, #0]
 80006d2:	8bbb      	ldrh	r3, [r7, #28]
 80006d4:	f107 0210 	add.w	r2, r7, #16
 80006d8:	47a0      	blx	r4
 80006da:	4603      	mov	r3, r0
 80006dc:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80006de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d008      	beq.n	80006f8 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80006e6:	23fc      	movs	r3, #252	; 0xfc
 80006e8:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006ea:	e005      	b.n	80006f8 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80006ec:	23fd      	movs	r3, #253	; 0xfd
 80006ee:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80006f0:	e002      	b.n	80006f8 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	77fb      	strb	r3, [r7, #31]
 80006f6:	e000      	b.n	80006fa <bmp280_set_regs+0xd0>
        if (len != 0)
 80006f8:	bf00      	nop
    }

    return rslt;
 80006fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}

08000706 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 800070e:	23e0      	movs	r3, #224	; 0xe0
 8000710:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000712:	23b6      	movs	r3, #182	; 0xb6
 8000714:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f880 	bl	800081c <null_ptr_check>
 800071c:	4603      	mov	r3, r0
 800071e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10d      	bne.n	8000744 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000728:	f107 010d 	add.w	r1, r7, #13
 800072c:	f107 000e 	add.w	r0, r7, #14
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2201      	movs	r2, #1
 8000734:	f7ff ff79 	bl	800062a <bmp280_set_regs>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	2002      	movs	r0, #2
 8000742:	4798      	blx	r3
    }

    return rslt;
 8000744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000758:	2305      	movs	r3, #5
 800075a:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f85d 	bl	800081c <null_ptr_check>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d150      	bne.n	8000810 <bmp280_init+0xc0>
    {
        while (try_count)
 800076e:	e02d      	b.n	80007cc <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2201      	movs	r2, #1
 8000776:	20d0      	movs	r0, #208	; 0xd0
 8000778:	f7ff ff20 	bl	80005bc <bmp280_get_regs>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d11a      	bne.n	80007be <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 800078c:	2b56      	cmp	r3, #86	; 0x56
 800078e:	d007      	beq.n	80007a0 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b57      	cmp	r3, #87	; 0x57
 8000796:	d003      	beq.n	80007a0 <bmp280_init+0x50>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b58      	cmp	r3, #88	; 0x58
 800079e:	d10e      	bne.n	80007be <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffb0 	bl	8000706 <bmp280_soft_reset>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d110      	bne.n	80007d4 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f87e 	bl	80008b4 <get_calib_param>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80007bc:	e00a      	b.n	80007d4 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	200a      	movs	r0, #10
 80007c4:	4798      	blx	r3
            --try_count;
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1ce      	bne.n	8000770 <bmp280_init+0x20>
 80007d2:	e000      	b.n	80007d6 <bmp280_init+0x86>
                break;
 80007d4:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d101      	bne.n	80007e0 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80007dc:	23fe      	movs	r3, #254	; 0xfe
 80007de:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80007e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d113      	bne.n	8000810 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000810:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00b      	beq.n	8000842 <null_ptr_check+0x26>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d007      	beq.n	8000842 <null_ptr_check+0x26>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <null_ptr_check+0x26>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d102      	bne.n	8000848 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8000842:	23ff      	movs	r3, #255	; 0xff
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e001      	b.n	800084c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800084c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 800086a:	2301      	movs	r3, #1
 800086c:	75fb      	strb	r3, [r7, #23]
 800086e:	e016      	b.n	800089e <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000870:	7dfb      	ldrb	r3, [r7, #23]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	441a      	add	r2, r3
 8000876:	7dfb      	ldrb	r3, [r7, #23]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	3b01      	subs	r3, #1
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	440b      	add	r3, r1
 8000880:	7812      	ldrb	r2, [r2, #0]
 8000882:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8000884:	7dfb      	ldrb	r3, [r7, #23]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	441a      	add	r2, r3
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4619      	mov	r1, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	440b      	add	r3, r1
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	3301      	adds	r3, #1
 800089c:	75fb      	strb	r3, [r7, #23]
 800089e:	7dfa      	ldrb	r2, [r7, #23]
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3e4      	bcc.n	8000870 <interleave_data+0x14>
    }
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	371c      	adds	r7, #28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ffa3 	bl	800081c <null_ptr_check>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80008dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d17f      	bne.n	80009e4 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80008e4:	f107 010c 	add.w	r1, r7, #12
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2218      	movs	r2, #24
 80008ec:	2088      	movs	r0, #136	; 0x88
 80008ee:	f7ff fe65 	bl	80005bc <bmp280_get_regs>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80008f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d171      	bne.n	80009e4 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8000900:	7b7b      	ldrb	r3, [r7, #13]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21a      	sxth	r2, r3
 8000906:	7b3b      	ldrb	r3, [r7, #12]
 8000908:	b21b      	sxth	r3, r3
 800090a:	4313      	orrs	r3, r2
 800090c:	b21b      	sxth	r3, r3
 800090e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b21a      	sxth	r2, r3
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8000926:	7c7b      	ldrb	r3, [r7, #17]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	7c3b      	ldrb	r3, [r7, #16]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	7cbb      	ldrb	r3, [r7, #18]
 8000940:	b21b      	sxth	r3, r3
 8000942:	4313      	orrs	r3, r2
 8000944:	b21b      	sxth	r3, r3
 8000946:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 800094c:	7d7b      	ldrb	r3, [r7, #21]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	b21a      	sxth	r2, r3
 8000952:	7d3b      	ldrb	r3, [r7, #20]
 8000954:	b21b      	sxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
 8000964:	7dbb      	ldrb	r3, [r7, #22]
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8000970:	7e7b      	ldrb	r3, [r7, #25]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	7e3b      	ldrb	r3, [r7, #24]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8000982:	7efb      	ldrb	r3, [r7, #27]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	b21a      	sxth	r2, r3
 8000988:	7ebb      	ldrb	r3, [r7, #26]
 800098a:	b21b      	sxth	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8000994:	7f7b      	ldrb	r3, [r7, #29]
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	b21a      	sxth	r2, r3
 800099a:	7f3b      	ldrb	r3, [r7, #28]
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 80009a6:	7ffb      	ldrb	r3, [r7, #31]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	7fbb      	ldrb	r3, [r7, #30]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80009b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80009ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009da:	b21b      	sxth	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80009e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <bmp280_read_id_register>:


// BMP280 is SPI1 in the schematic, but CubeIDE has pin33 marked as SPI2
// So, SPI1 means SPI2 here
void bmp280_read_id_register()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	char data[4] = {0};
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]

	data[0] = BMP280_ID_REG;
 80009fa:	23d0      	movs	r3, #208	; 0xd0
 80009fc:	713b      	strb	r3, [r7, #4]
	data[1] = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	717b      	strb	r3, [r7, #5]



  // Read ID register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a08:	4814      	ldr	r0, [pc, #80]	; (8000a5c <bmp280_read_id_register+0x6c>)
 8000a0a:	f002 f807 	bl	8002a1c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, (uint8_t *)data, 1, 100);
 8000a0e:	1d39      	adds	r1, r7, #4
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	2201      	movs	r2, #1
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <bmp280_read_id_register+0x70>)
 8000a16:	f004 fdb4 	bl	8005582 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, (uint8_t *)spi_buf, 1, 100);
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4911      	ldr	r1, [pc, #68]	; (8000a64 <bmp280_read_id_register+0x74>)
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <bmp280_read_id_register+0x70>)
 8000a22:	f004 ff1c 	bl	800585e <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <bmp280_read_id_register+0x6c>)
 8000a2e:	f001 fff5 	bl	8002a1c <HAL_GPIO_WritePin>

  // print out status register, should be 0x58
  uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X\r\n", (unsigned int)spi_buf[0]);
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <bmp280_read_id_register+0x74>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <bmp280_read_id_register+0x78>)
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <bmp280_read_id_register+0x7c>)
 8000a3c:	f00a fb98 	bl	800b170 <siprintf>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <bmp280_read_id_register+0x80>)
 8000a44:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <bmp280_read_id_register+0x80>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <bmp280_read_id_register+0x7c>)
 8000a50:	f009 fdfc 	bl	800a64c <CDC_Transmit_FS>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	200002c0 	.word	0x200002c0
 8000a64:	2000073c 	.word	0x2000073c
 8000a68:	0800b978 	.word	0x0800b978
 8000a6c:	200006b8 	.word	0x200006b8
 8000a70:	20000738 	.word	0x20000738

08000a74 <bmi270_read_id_register>:



void bmi270_read_id_register()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af02      	add	r7, sp, #8
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
//  HAL_SPI_Transmit(&hspi1, (uint8_t *)BMP280_ID_REG, 1, 100);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  // Read ID register
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <bmi270_read_id_register+0x54>)
 8000a80:	f001 ffcc 	bl	8002a1c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)BMI270_ID_REG, (uint8_t *)spi_buf, 2, 100);
 8000a84:	2364      	movs	r3, #100	; 0x64
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2302      	movs	r3, #2
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <bmi270_read_id_register+0x58>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <bmi270_read_id_register+0x5c>)
 8000a90:	f005 f815 	bl	8005abe <HAL_SPI_TransmitReceive>
//  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <bmi270_read_id_register+0x54>)
 8000a9a:	f001 ffbf 	bl	8002a1c <HAL_GPIO_WritePin>

  // print out status register, should be 0x24
  uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X\r\n", (unsigned int)spi_buf[0]);
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <bmi270_read_id_register+0x58>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	490b      	ldr	r1, [pc, #44]	; (8000ad4 <bmi270_read_id_register+0x60>)
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <bmi270_read_id_register+0x64>)
 8000aa8:	f00a fb62 	bl	800b170 <siprintf>
 8000aac:	4603      	mov	r3, r0
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <bmi270_read_id_register+0x68>)
 8000ab0:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <bmi270_read_id_register+0x68>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <bmi270_read_id_register+0x64>)
 8000abc:	f009 fdc6 	bl	800a64c <CDC_Transmit_FS>
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	2000073c 	.word	0x2000073c
 8000ad0:	2000025c 	.word	0x2000025c
 8000ad4:	0800b990 	.word	0x0800b990
 8000ad8:	200006b8 	.word	0x200006b8
 8000adc:	20000738 	.word	0x20000738

08000ae0 <test_bmp280>:

int test_bmp280(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
    int8_t rslt;
    struct bmp280_dev bmp;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <test_bmp280+0x40>)
 8000ae8:	60fb      	str	r3, [r7, #12]

    bmp.dev_id = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	707b      	strb	r3, [r7, #1]
    bmp.read = spi_reg_read;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <test_bmp280+0x44>)
 8000af0:	607b      	str	r3, [r7, #4]
    bmp.write = spi_reg_write;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <test_bmp280+0x48>)
 8000af4:	60bb      	str	r3, [r7, #8]
    bmp.intf = BMP280_SPI_INTF;
 8000af6:	2300      	movs	r3, #0
 8000af8:	70bb      	strb	r3, [r7, #2]
    rslt = bmp280_init(&bmp);
 8000afa:	463b      	mov	r3, r7
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe27 	bl	8000750 <bmp280_init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    print_rslt(" bmp280_init status", rslt);
 8000b08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <test_bmp280+0x4c>)
 8000b10:	f000 f876 	bl	8000c00 <print_rslt>

    return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	; 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000ba5 	.word	0x08000ba5
 8000b28:	08000b49 	.word	0x08000b49
 8000b2c:	0800b9a8 	.word	0x0800b9a8

08000b30 <delay_ms>:


void delay_ms(uint32_t period_ms)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_Delay(period_ms);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f001 fa09 	bl	8001f50 <HAL_Delay>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <spi_reg_write>:


int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	603a      	str	r2, [r7, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	460b      	mov	r3, r1
 8000b58:	71bb      	strb	r3, [r7, #6]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <spi_reg_write+0x54>)
 8000b66:	f001 ff59 	bl	8002a1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg_addr, 1, 100);
 8000b6a:	1db9      	adds	r1, r7, #6
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2201      	movs	r2, #1
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <spi_reg_write+0x58>)
 8000b72:	f004 fd06 	bl	8005582 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)reg_data, length, 100);
 8000b76:	88ba      	ldrh	r2, [r7, #4]
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <spi_reg_write+0x58>)
 8000b7e:	f004 fd00 	bl	8005582 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <spi_reg_write+0x54>)
 8000b8a:	f001 ff47 	bl	8002a1c <HAL_GPIO_WritePin>

    return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	200002c0 	.word	0x200002c0

08000ba4 <spi_reg_read>:


int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	603a      	str	r2, [r7, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <spi_reg_read+0x54>)
 8000bc2:	f001 ff2b 	bl	8002a1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&reg_addr, 1, 100);
 8000bc6:	1db9      	adds	r1, r7, #6
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	2201      	movs	r2, #1
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <spi_reg_read+0x58>)
 8000bce:	f004 fcd8 	bl	8005582 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)reg_data, length, 100);
 8000bd2:	88ba      	ldrh	r2, [r7, #4]
 8000bd4:	2364      	movs	r3, #100	; 0x64
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <spi_reg_read+0x58>)
 8000bda:	f004 fe40 	bl	800585e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <spi_reg_read+0x54>)
 8000be6:	f001 ff19 	bl	8002a1c <HAL_GPIO_WritePin>
    return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	200002c0 	.word	0x200002c0

08000c00 <print_rslt>:


void print_rslt(const char api_name[], int8_t rslt)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMP280_OK)
 8000c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d069      	beq.n	8000ce8 <print_rslt+0xe8>
    {
        sprintf(uart_buf, "%s\t", api_name);
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4936      	ldr	r1, [pc, #216]	; (8000cf0 <print_rslt+0xf0>)
 8000c18:	4836      	ldr	r0, [pc, #216]	; (8000cf4 <print_rslt+0xf4>)
 8000c1a:	f00a faa9 	bl	800b170 <siprintf>
    	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <print_rslt+0xf8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4833      	ldr	r0, [pc, #204]	; (8000cf4 <print_rslt+0xf4>)
 8000c28:	f009 fd10 	bl	800a64c <CDC_Transmit_FS>
        if (rslt == BMP280_E_NULL_PTR)
 8000c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d10e      	bne.n	8000c54 <print_rslt+0x54>
        {
            sprintf(uart_buf, "Error [%d] : Null pointer error\r\n", (int)rslt);
 8000c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	492f      	ldr	r1, [pc, #188]	; (8000cfc <print_rslt+0xfc>)
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <print_rslt+0xf4>)
 8000c40:	f00a fa96 	bl	800b170 <siprintf>
        	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <print_rslt+0xf8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <print_rslt+0xf4>)
 8000c4e:	f009 fcfd 	bl	800a64c <CDC_Transmit_FS>
            /* For more error codes refer "*_defs.h" */
            sprintf(uart_buf, "Error [%d] : Unknown error code\r\n", (int)rslt);
        	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
        }
    }
}
 8000c52:	e049      	b.n	8000ce8 <print_rslt+0xe8>
        else if (rslt == BMP280_E_COMM_FAIL)
 8000c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c58:	f113 0f04 	cmn.w	r3, #4
 8000c5c:	d10e      	bne.n	8000c7c <print_rslt+0x7c>
            sprintf(uart_buf, "Error [%d] : Bus communication failed\r\n", (int)rslt);
 8000c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4926      	ldr	r1, [pc, #152]	; (8000d00 <print_rslt+0x100>)
 8000c66:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <print_rslt+0xf4>)
 8000c68:	f00a fa82 	bl	800b170 <siprintf>
        	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <print_rslt+0xf8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <print_rslt+0xf4>)
 8000c76:	f009 fce9 	bl	800a64c <CDC_Transmit_FS>
}
 8000c7a:	e035      	b.n	8000ce8 <print_rslt+0xe8>
        else if (rslt == BMP280_E_IMPLAUS_TEMP)
 8000c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c80:	f113 0f07 	cmn.w	r3, #7
 8000c84:	d10e      	bne.n	8000ca4 <print_rslt+0xa4>
            sprintf(uart_buf, "Error [%d] : Invalid Temperature\r\n", (int)rslt);
 8000c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	491d      	ldr	r1, [pc, #116]	; (8000d04 <print_rslt+0x104>)
 8000c8e:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <print_rslt+0xf4>)
 8000c90:	f00a fa6e 	bl	800b170 <siprintf>
        	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <print_rslt+0xf8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <print_rslt+0xf4>)
 8000c9e:	f009 fcd5 	bl	800a64c <CDC_Transmit_FS>
}
 8000ca2:	e021      	b.n	8000ce8 <print_rslt+0xe8>
        else if (rslt == BMP280_E_DEV_NOT_FOUND)
 8000ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ca8:	f113 0f02 	cmn.w	r3, #2
 8000cac:	d10e      	bne.n	8000ccc <print_rslt+0xcc>
            sprintf(uart_buf, "Error [%d] : Device not found\r\n", (int)rslt);
 8000cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4914      	ldr	r1, [pc, #80]	; (8000d08 <print_rslt+0x108>)
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <print_rslt+0xf4>)
 8000cb8:	f00a fa5a 	bl	800b170 <siprintf>
        	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <print_rslt+0xf8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <print_rslt+0xf4>)
 8000cc6:	f009 fcc1 	bl	800a64c <CDC_Transmit_FS>
}
 8000cca:	e00d      	b.n	8000ce8 <print_rslt+0xe8>
            sprintf(uart_buf, "Error [%d] : Unknown error code\r\n", (int)rslt);
 8000ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <print_rslt+0x10c>)
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <print_rslt+0xf4>)
 8000cd6:	f00a fa4b 	bl	800b170 <siprintf>
        	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <print_rslt+0xf8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <print_rslt+0xf4>)
 8000ce4:	f009 fcb2 	bl	800a64c <CDC_Transmit_FS>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	0800b9bc 	.word	0x0800b9bc
 8000cf4:	200006b8 	.word	0x200006b8
 8000cf8:	20000738 	.word	0x20000738
 8000cfc:	0800b9c0 	.word	0x0800b9c0
 8000d00:	0800b9e4 	.word	0x0800b9e4
 8000d04:	0800ba0c 	.word	0x0800ba0c
 8000d08:	0800ba30 	.word	0x0800ba30
 8000d0c:	0800ba50 	.word	0x0800ba50

08000d10 <start_bootloader>:


#define	MCU_IRQS	70u

void start_bootloader()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	void (*boot_jump)(void);

	boot_jump = (void (*)(void))(*((uint32_t *)(0x1FFF0000 + 4)));
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <start_bootloader+0x48>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	607b      	str	r3, [r7, #4]

	HAL_RCC_DeInit();
 8000d1c:	f003 fa92 	bl	8004244 <HAL_RCC_DeInit>
	SysTick->CTRL = 0;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <start_bootloader+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <start_bootloader+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <start_bootloader+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d32:	b672      	cpsid	i
}
 8000d34:	bf00      	nop
	__disable_irq();
	SYSCFG->MEMRMP = 0x01;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <start_bootloader+0x50>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]

	__set_MSP(*(uint32_t *)0x1FFF0000);
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <start_bootloader+0x54>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f383 8808 	msr	MSP, r3
}
 8000d48:	bf00      	nop

	boot_jump();
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4798      	blx	r3
	*((unsigned long *)0x2004FFF0) = 0xDEADBEEF; // 320KB STM32F7xx
	__DSB();

	boot_jump();
	*/
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	1fff0004 	.word	0x1fff0004
 8000d5c:	e000e010 	.word	0xe000e010
 8000d60:	40013800 	.word	0x40013800
 8000d64:	1fff0000 	.word	0x1fff0000

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6c:	f001 f893 	bl	8001e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f86c 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f000 fb92 	bl	800149c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000d78:	f009 fb82 	bl	800a480 <MX_USB_DEVICE_Init>

  MX_ADC1_Init();
 8000d7c:	f000 f8d0 	bl	8000f20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d80:	f000 f920 	bl	8000fc4 <MX_ADC2_Init>

  MX_I2C1_Init();
 8000d84:	f000 f970 	bl	8001068 <MX_I2C1_Init>

  MX_SPI1_Init();
 8000d88:	f000 f9ae 	bl	80010e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d8c:	f000 f9ea 	bl	8001164 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000d90:	f000 fa26 	bl	80011e0 <MX_SPI3_Init>

  MX_USART1_UART_Init();
 8000d94:	f000 fac2 	bl	800131c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d98:	f000 faf0 	bl	800137c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d9c:	f000 fb1e 	bl	80013dc <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000da0:	f000 fa5c 	bl	800125c <MX_UART4_Init>
  MX_UART5_Init();
 8000da4:	f000 fa8a 	bl	80012bc <MX_UART5_Init>
  MX_USART6_UART_Init();
 8000da8:	f000 fb48 	bl	800143c <MX_USART6_UART_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dac:	b662      	cpsie	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN 2 */

  __enable_irq();


  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	481f      	ldr	r0, [pc, #124]	; (8000e30 <main+0xc8>)
 8000db4:	f001 fe4b 	bl	8002a4e <HAL_GPIO_TogglePin>



  // CS pin should be default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <main+0xc8>)
 8000dc0:	f001 fe2c 	bl	8002a1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	481a      	ldr	r0, [pc, #104]	; (8000e34 <main+0xcc>)
 8000dca:	f001 fe27 	bl	8002a1c <HAL_GPIO_WritePin>


  // Print something (probably will be too fast to connect and see?)
  uart_buf_len = sprintf(uart_buf, "STM32F7 main()\r\n");
 8000dce:	491a      	ldr	r1, [pc, #104]	; (8000e38 <main+0xd0>)
 8000dd0:	481a      	ldr	r0, [pc, #104]	; (8000e3c <main+0xd4>)
 8000dd2:	f00a f9cd 	bl	800b170 <siprintf>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <main+0xd8>)
 8000dda:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <main+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	4815      	ldr	r0, [pc, #84]	; (8000e3c <main+0xd4>)
 8000de6:	f009 fc31 	bl	800a64c <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  if (test_enable)
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <main+0xdc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00e      	beq.n	8000e10 <main+0xa8>
	  {
		  bmp280_read_id_register();
 8000df2:	f7ff fdfd 	bl	80009f0 <bmp280_read_id_register>
  		  test_bmp280();
 8000df6:	f7ff fe73 	bl	8000ae0 <test_bmp280>
		  bmi270_read_id_register();
 8000dfa:	f7ff fe3b 	bl	8000a74 <bmi270_read_id_register>

		  if (test_enable == '`')
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <main+0xdc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b60      	cmp	r3, #96	; 0x60
 8000e04:	d101      	bne.n	8000e0a <main+0xa2>
		  {
			  start_bootloader();
 8000e06:	f7ff ff83 	bl	8000d10 <start_bootloader>
		  }

		  test_enable = 0;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <main+0xdc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
	  }


	  // blink leds
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <main+0xe0>)
 8000e16:	f001 fe1a 	bl	8002a4e <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8000e1a:	2064      	movs	r0, #100	; 0x64
 8000e1c:	f001 f898 	bl	8001f50 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <main+0xc8>)
 8000e24:	f001 fe13 	bl	8002a4e <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8000e28:	2064      	movs	r0, #100	; 0x64
 8000e2a:	f001 f891 	bl	8001f50 <HAL_Delay>
  	  if (test_enable)
 8000e2e:	e7dc      	b.n	8000dea <main+0x82>
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020000 	.word	0x40020000
 8000e38:	0800baac 	.word	0x0800baac
 8000e3c:	200006b8 	.word	0x200006b8
 8000e40:	20000738 	.word	0x20000738
 8000e44:	2000075c 	.word	0x2000075c
 8000e48:	40020800 	.word	0x40020800

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b094      	sub	sp, #80	; 0x50
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0320 	add.w	r3, r7, #32
 8000e56:	2230      	movs	r2, #48	; 0x30
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00a f9a8 	bl	800b1b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <SystemClock_Config+0xcc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e90:	4a22      	ldr	r2, [pc, #136]	; (8000f1c <SystemClock_Config+0xd0>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <SystemClock_Config+0xd0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ec4:	2360      	movs	r3, #96	; 0x60
 8000ec6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fa95 	bl	8004404 <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee0:	f000 fb7c 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fd24 	bl	800494c <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f0a:	f000 fb67 	bl	80015dc <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	; 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <MX_ADC1_Init+0x9c>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0xa0>)
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f80:	f001 f80a 	bl	8001f98 <HAL_ADC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fb27 	bl	80015dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000fa0:	f001 f83e 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000faa:	f000 fb17 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000178 	.word	0x20000178
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	0f000001 	.word	0x0f000001

08000fc4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_ADC2_Init+0x98>)
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <MX_ADC2_Init+0x9c>)
 8000fda:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_ADC2_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_ADC2_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_ADC2_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_ADC2_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_ADC2_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_ADC2_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_ADC2_Init+0x98>)
 8001004:	4a17      	ldr	r2, [pc, #92]	; (8001064 <MX_ADC2_Init+0xa0>)
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_ADC2_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_ADC2_Init+0x98>)
 8001010:	2201      	movs	r2, #1
 8001012:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_ADC2_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_ADC2_Init+0x98>)
 800101e:	2201      	movs	r2, #1
 8001020:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_ADC2_Init+0x98>)
 8001024:	f000 ffb8 	bl	8001f98 <HAL_ADC_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800102e:	f000 fad5 	bl	80015dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001032:	230c      	movs	r3, #12
 8001034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001036:	2301      	movs	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <MX_ADC2_Init+0x98>)
 8001044:	f000 ffec 	bl	8002020 <HAL_ADC_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800104e:	f000 fac5 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001c0 	.word	0x200001c0
 8001060:	40012100 	.word	0x40012100
 8001064:	0f000001 	.word	0x0f000001

08001068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_I2C1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <MX_I2C1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_I2C1_Init+0x74>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <MX_I2C1_Init+0x7c>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_I2C1_Init+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <MX_I2C1_Init+0x74>)
 80010a4:	f001 fcee 	bl	8002a84 <HAL_I2C_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 fa95 	bl	80015dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <MX_I2C1_Init+0x74>)
 80010b6:	f001 fd75 	bl	8002ba4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f000 fa8c 	bl	80015dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_I2C1_Init+0x74>)
 80010c8:	f001 fdb7 	bl	8002c3a <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 fa83 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000208 	.word	0x20000208
 80010e0:	40005400 	.word	0x40005400
 80010e4:	00303d5b 	.word	0x00303d5b

080010e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_SPI1_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_SPI1_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_SPI1_Init+0x74>)
 80010f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_SPI1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_SPI1_Init+0x74>)
 8001102:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001106:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_SPI1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_SPI1_Init+0x74>)
 8001116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_SPI1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_SPI1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_SPI1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_SPI1_Init+0x74>)
 8001136:	2207      	movs	r2, #7
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_SPI1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_SPI1_Init+0x74>)
 8001142:	2208      	movs	r2, #8
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_SPI1_Init+0x74>)
 8001148:	f004 f970 	bl	800542c <HAL_SPI_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 fa43 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000025c 	.word	0x2000025c
 8001160:	40013000 	.word	0x40013000

08001164 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_SPI2_Init+0x74>)
 800116a:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <MX_SPI2_Init+0x78>)
 800116c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_SPI2_Init+0x74>)
 8001170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_SPI2_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_SPI2_Init+0x74>)
 800117e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001182:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_SPI2_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_SPI2_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_SPI2_Init+0x74>)
 8001192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001196:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_SPI2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011b2:	2207      	movs	r2, #7
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011be:	2208      	movs	r2, #8
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_SPI2_Init+0x74>)
 80011c4:	f004 f932 	bl	800542c <HAL_SPI_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 fa05 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002c0 	.word	0x200002c0
 80011dc:	40003800 	.word	0x40003800

080011e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_SPI3_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <MX_SPI3_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_SPI3_Init+0x74>)
 80011ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_SPI3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_SPI3_Init+0x74>)
 80011fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_SPI3_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_SPI3_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_SPI3_Init+0x74>)
 800120e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001212:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_SPI3_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_SPI3_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_SPI3_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_SPI3_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_SPI3_Init+0x74>)
 800122e:	2207      	movs	r2, #7
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_SPI3_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_SPI3_Init+0x74>)
 800123a:	2208      	movs	r2, #8
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_SPI3_Init+0x74>)
 8001240:	f004 f8f4 	bl	800542c <HAL_SPI_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 f9c7 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000324 	.word	0x20000324
 8001258:	40003c00 	.word	0x40003c00

0800125c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_UART4_Init+0x58>)
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <MX_UART4_Init+0x5c>)
 8001264:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_UART4_Init+0x58>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_UART4_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_UART4_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_UART4_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_UART4_Init+0x58>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_UART4_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_UART4_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_UART4_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_UART4_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_UART4_Init+0x58>)
 80012a0:	f005 f824 	bl	80062ec <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80012aa:	f000 f997 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000388 	.word	0x20000388
 80012b8:	40004c00 	.word	0x40004c00

080012bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_UART5_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_UART5_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_UART5_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_UART5_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_UART5_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_UART5_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_UART5_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_UART5_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_UART5_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_UART5_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_UART5_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_UART5_Init+0x58>)
 8001300:	f004 fff4 	bl	80062ec <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 f967 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000410 	.word	0x20000410
 8001318:	40005000 	.word	0x40005000

0800131c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <MX_USART1_UART_Init+0x5c>)
 8001324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART1_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART1_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART1_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART1_UART_Init+0x58>)
 8001360:	f004 ffc4 	bl	80062ec <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 f937 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000498 	.word	0x20000498
 8001378:	40011000 	.word	0x40011000

0800137c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <MX_USART2_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013c0:	f004 ff94 	bl	80062ec <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f000 f907 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000520 	.word	0x20000520
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART3_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_USART3_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART3_UART_Init+0x58>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART3_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USART3_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART3_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART3_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART3_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART3_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART3_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART3_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART3_UART_Init+0x58>)
 8001420:	f004 ff64 	bl	80062ec <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 f8d7 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200005a8 	.word	0x200005a8
 8001438:	40004800 	.word	0x40004800

0800143c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART6_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART6_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART6_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART6_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART6_UART_Init+0x58>)
 8001480:	f004 ff34 	bl	80062ec <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f000 f8a7 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000630 	.word	0x20000630
 8001498:	40011400 	.word	0x40011400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <MX_GPIO_Init+0x130>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a45      	ldr	r2, [pc, #276]	; (80015cc <MX_GPIO_Init+0x130>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <MX_GPIO_Init+0x130>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	4b40      	ldr	r3, [pc, #256]	; (80015cc <MX_GPIO_Init+0x130>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <MX_GPIO_Init+0x130>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <MX_GPIO_Init+0x130>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <MX_GPIO_Init+0x130>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a39      	ldr	r2, [pc, #228]	; (80015cc <MX_GPIO_Init+0x130>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <MX_GPIO_Init+0x130>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <MX_GPIO_Init+0x130>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a33      	ldr	r2, [pc, #204]	; (80015cc <MX_GPIO_Init+0x130>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <MX_GPIO_Init+0x130>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <MX_GPIO_Init+0x130>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a2d      	ldr	r2, [pc, #180]	; (80015cc <MX_GPIO_Init+0x130>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <MX_GPIO_Init+0x130>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 800152a:	2200      	movs	r2, #0
 800152c:	f24a 3101 	movw	r1, #41729	; 0xa301
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <MX_GPIO_Init+0x134>)
 8001532:	f001 fa73 	bl	8002a1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7188 	mov.w	r1, #272	; 0x110
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <MX_GPIO_Init+0x138>)
 800153e:	f001 fa6d 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001542:	2200      	movs	r2, #0
 8001544:	f649 41c3 	movw	r1, #40131	; 0x9cc3
 8001548:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_GPIO_Init+0x13c>)
 800154a:	f001 fa67 	bl	8002a1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15|LED1_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 LED0_Pin PC0 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 800154e:	f24a 3301 	movw	r3, #41729	; 0xa301
 8001552:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	481a      	ldr	r0, [pc, #104]	; (80015d0 <MX_GPIO_Init+0x134>)
 8001568:	f001 f8bc 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 800156c:	f244 0310 	movw	r3, #16400	; 0x4010
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001572:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4813      	ldr	r0, [pc, #76]	; (80015d0 <MX_GPIO_Init+0x134>)
 8001584:	f001 f8ae 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8001588:	f44f 7388 	mov.w	r3, #272	; 0x110
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_GPIO_Init+0x138>)
 80015a2:	f001 f89f 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB15 LED1_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80015a6:	f649 43c3 	movw	r3, #40131	; 0x9cc3
 80015aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15|LED1_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_GPIO_Init+0x13c>)
 80015c0:	f001 f890 	bl	80026e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_MspInit+0x44>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_MspInit+0x44>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_MspInit+0x44>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_MspInit+0x44>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_MspInit+0x44>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_MspInit+0x44>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <HAL_ADC_MspInit+0xc8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d124      	bne.n	800169c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001686:	2303      	movs	r3, #3
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	481a      	ldr	r0, [pc, #104]	; (8001700 <HAL_ADC_MspInit+0xd0>)
 8001696:	f001 f825 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800169a:	e028      	b.n	80016ee <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_ADC_MspInit+0xd4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d123      	bne.n	80016ee <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_ADC_MspInit+0xcc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d6:	2304      	movs	r3, #4
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_ADC_MspInit+0xd0>)
 80016ea:	f000 fffb 	bl	80026e4 <HAL_GPIO_Init>
}
 80016ee:	bf00      	nop
 80016f0:	3730      	adds	r7, #48	; 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40012000 	.word	0x40012000
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020800 	.word	0x40020800
 8001704:	40012100 	.word	0x40012100

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0aa      	sub	sp, #168	; 0xa8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f009 fd41 	bl	800b1b0 <memset>
  if(hi2c->Instance==I2C1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <HAL_I2C_MspInit+0xb4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d13c      	bne.n	80017b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800173e:	2300      	movs	r3, #0
 8001740:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fb26 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001752:	f7ff ff43 	bl	80015dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_I2C_MspInit+0xb8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_I2C_MspInit+0xb8>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_I2C_MspInit+0xb8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001788:	2304      	movs	r3, #4
 800178a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001792:	4619      	mov	r1, r3
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <HAL_I2C_MspInit+0xbc>)
 8001796:	f000 ffa5 	bl	80026e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_I2C_MspInit+0xb8>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_I2C_MspInit+0xb8>)
 80017a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_I2C_MspInit+0xb8>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	37a8      	adds	r7, #168	; 0xa8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b090      	sub	sp, #64	; 0x40
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a62      	ldr	r2, [pc, #392]	; (8001970 <HAL_SPI_MspInit+0x1a8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d128      	bne.n	800183c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a61      	ldr	r2, [pc, #388]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80017f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a5b      	ldr	r2, [pc, #364]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800181a:	23e0      	movs	r3, #224	; 0xe0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	4850      	ldr	r0, [pc, #320]	; (8001978 <HAL_SPI_MspInit+0x1b0>)
 8001836:	f000 ff55 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800183a:	e094      	b.n	8001966 <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a4e      	ldr	r2, [pc, #312]	; (800197c <HAL_SPI_MspInit+0x1b4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d145      	bne.n	80018d2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b45      	ldr	r3, [pc, #276]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a44      	ldr	r2, [pc, #272]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b42      	ldr	r3, [pc, #264]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a3e      	ldr	r2, [pc, #248]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800188e:	2308      	movs	r3, #8
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800189e:	2305      	movs	r3, #5
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4835      	ldr	r0, [pc, #212]	; (8001980 <HAL_SPI_MspInit+0x1b8>)
 80018aa:	f000 ff1b 	bl	80026e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80018ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018c0:	2305      	movs	r3, #5
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	482e      	ldr	r0, [pc, #184]	; (8001984 <HAL_SPI_MspInit+0x1bc>)
 80018cc:	f000 ff0a 	bl	80026e4 <HAL_GPIO_Init>
}
 80018d0:	e049      	b.n	8001966 <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI3)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <HAL_SPI_MspInit+0x1c0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d144      	bne.n	8001966 <HAL_SPI_MspInit+0x19e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a18      	ldr	r2, [pc, #96]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_SPI_MspInit+0x1ac>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001936:	2306      	movs	r3, #6
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193e:	4619      	mov	r1, r3
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <HAL_SPI_MspInit+0x1b0>)
 8001942:	f000 fecf 	bl	80026e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001946:	2338      	movs	r3, #56	; 0x38
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001956:	2306      	movs	r3, #6
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <HAL_SPI_MspInit+0x1bc>)
 8001962:	f000 febf 	bl	80026e4 <HAL_GPIO_Init>
}
 8001966:	bf00      	nop
 8001968:	3740      	adds	r7, #64	; 0x40
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40013000 	.word	0x40013000
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000
 800197c:	40003800 	.word	0x40003800
 8001980:	40020800 	.word	0x40020800
 8001984:	40020400 	.word	0x40020400
 8001988:	40003c00 	.word	0x40003c00

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0b4      	sub	sp, #208	; 0xd0
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f009 fbff 	bl	800b1b0 <memset>
  if(huart->Instance==UART4)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4ab6      	ldr	r2, [pc, #728]	; (8001c90 <HAL_UART_MspInit+0x304>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d13d      	bne.n	8001a38 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 f9e3 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80019d8:	f7ff fe00 	bl	80015dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019dc:	4bad      	ldr	r3, [pc, #692]	; (8001c94 <HAL_UART_MspInit+0x308>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4aac      	ldr	r2, [pc, #688]	; (8001c94 <HAL_UART_MspInit+0x308>)
 80019e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
 80019e8:	4baa      	ldr	r3, [pc, #680]	; (8001c94 <HAL_UART_MspInit+0x308>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4ba7      	ldr	r3, [pc, #668]	; (8001c94 <HAL_UART_MspInit+0x308>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4aa6      	ldr	r2, [pc, #664]	; (8001c94 <HAL_UART_MspInit+0x308>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4ba4      	ldr	r3, [pc, #656]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a24:	2308      	movs	r3, #8
 8001a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4899      	ldr	r0, [pc, #612]	; (8001c98 <HAL_UART_MspInit+0x30c>)
 8001a32:	f000 fe57 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a36:	e17f      	b.n	8001d38 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==UART5)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a97      	ldr	r2, [pc, #604]	; (8001c9c <HAL_UART_MspInit+0x310>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d15f      	bne.n	8001b02 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f9a0 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001a5e:	f7ff fdbd 	bl	80015dc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a62:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a8b      	ldr	r2, [pc, #556]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
 8001a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	4b86      	ldr	r3, [pc, #536]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a85      	ldr	r2, [pc, #532]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b83      	ldr	r3, [pc, #524]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b7d      	ldr	r3, [pc, #500]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4873      	ldr	r0, [pc, #460]	; (8001ca0 <HAL_UART_MspInit+0x314>)
 8001ad2:	f000 fe07 	bl	80026e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001aee:	2308      	movs	r3, #8
 8001af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001af8:	4619      	mov	r1, r3
 8001afa:	486a      	ldr	r0, [pc, #424]	; (8001ca4 <HAL_UART_MspInit+0x318>)
 8001afc:	f000 fdf2 	bl	80026e4 <HAL_GPIO_Init>
}
 8001b00:	e11a      	b.n	8001d38 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a68      	ldr	r2, [pc, #416]	; (8001ca8 <HAL_UART_MspInit+0x31c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d13c      	bne.n	8001b86 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b10:	2300      	movs	r3, #0
 8001b12:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f93d 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001b24:	f7ff fd5a 	bl	80015dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b28:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	4a59      	ldr	r2, [pc, #356]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	6453      	str	r3, [r2, #68]	; 0x44
 8001b34:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a53      	ldr	r2, [pc, #332]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b51      	ldr	r3, [pc, #324]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b72:	2307      	movs	r3, #7
 8001b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4846      	ldr	r0, [pc, #280]	; (8001c98 <HAL_UART_MspInit+0x30c>)
 8001b80:	f000 fdb0 	bl	80026e4 <HAL_GPIO_Init>
}
 8001b84:	e0d8      	b.n	8001d38 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_UART_MspInit+0x320>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d13b      	bne.n	8001c08 <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 f8fb 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_MspInit+0x220>
      Error_Handler();
 8001ba8:	f7ff fd18 	bl	80015dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bac:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bdc:	230c      	movs	r3, #12
 8001bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4825      	ldr	r0, [pc, #148]	; (8001c98 <HAL_UART_MspInit+0x30c>)
 8001c02:	f000 fd6f 	bl	80026e4 <HAL_GPIO_Init>
}
 8001c06:	e097      	b.n	8001d38 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <HAL_UART_MspInit+0x324>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d150      	bne.n	8001cb4 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f8b8 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_UART_MspInit+0x2a6>
      Error_Handler();
 8001c2e:	f7ff fcd5 	bl	80015dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_UART_MspInit+0x308>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c82:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_UART_MspInit+0x314>)
 8001c8a:	f000 fd2b 	bl	80026e4 <HAL_GPIO_Init>
}
 8001c8e:	e053      	b.n	8001d38 <HAL_UART_MspInit+0x3ac>
 8001c90:	40004c00 	.word	0x40004c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40005000 	.word	0x40005000
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <HAL_UART_MspInit+0x3b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d13c      	bne.n	8001d38 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 f862 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_UART_MspInit+0x352>
      Error_Handler();
 8001cda:	f7ff fc7f 	bl	80015dc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_UART_MspInit+0x3b8>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_UART_MspInit+0x3b8>)
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_UART_MspInit+0x3b8>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_UART_MspInit+0x3b8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <HAL_UART_MspInit+0x3b8>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_UART_MspInit+0x3b8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d0e:	23c0      	movs	r3, #192	; 0xc0
 8001d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d26:	2308      	movs	r3, #8
 8001d28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_UART_MspInit+0x3bc>)
 8001d34:	f000 fcd6 	bl	80026e4 <HAL_GPIO_Init>
}
 8001d38:	bf00      	nop
 8001d3a:	37d0      	adds	r7, #208	; 0xd0
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40011400 	.word	0x40011400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 f8ba 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <OTG_FS_IRQHandler+0x10>)
 8001da6:	f001 f8da 	bl	8002f5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20001c48 	.word	0x20001c48

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d207      	bcs.n	8001df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de4:	f009 f9fc 	bl	800b1e0 <__errno>
 8001de8:	4603      	mov	r3, r0
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	e009      	b.n	8001e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <_sbrk+0x64>)
 8001e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20040000 	.word	0x20040000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	20000760 	.word	0x20000760
 8001e1c:	20002298 	.word	0x20002298

08001e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <SystemInit+0x20>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <SystemInit+0x20>)
 8001e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4a:	490e      	ldr	r1, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e60:	4c0b      	ldr	r4, [pc, #44]	; (8001e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e6e:	f7ff ffd7 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f009 f9bb 	bl	800b1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e76:	f7fe ff77 	bl	8000d68 <main>
  bx  lr    
 8001e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e7c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001e88:	0800bc64 	.word	0x0800bc64
  ldr r2, =_sbss
 8001e8c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001e90:	20002298 	.word	0x20002298

08001e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC_IRQHandler>

08001e96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	f000 fbe0 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea0:	200f      	movs	r0, #15
 8001ea2:	f000 f805 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea6:	f7ff fb9f 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fbfb 	bl	80026ca <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 fbc3 	bl	8002676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000764 	.word	0x20000764

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000764 	.word	0x20000764

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000008 	.word	0x20000008

08001f98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e031      	b.n	8002012 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fb3a 	bl	8001630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_ADC_Init+0x84>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f970 	bl	80022cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
 8002002:	e001      	b.n	8002008 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	ffffeefd 	.word	0xffffeefd

08002020 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1c>
 8002038:	2302      	movs	r3, #2
 800203a:	e136      	b.n	80022aa <HAL_ADC_ConfigChannel+0x28a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b09      	cmp	r3, #9
 800204a:	d93a      	bls.n	80020c2 <HAL_ADC_ConfigChannel+0xa2>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002054:	d035      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68d9      	ldr	r1, [r3, #12]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	3b1e      	subs	r3, #30
 800206c:	2207      	movs	r2, #7
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8d      	ldr	r2, [pc, #564]	; (80022b8 <HAL_ADC_ConfigChannel+0x298>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10a      	bne.n	800209c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	061a      	lsls	r2, r3, #24
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209a:	e035      	b.n	8002108 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68d9      	ldr	r1, [r3, #12]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4403      	add	r3, r0
 80020b4:	3b1e      	subs	r3, #30
 80020b6:	409a      	lsls	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c0:	e022      	b.n	8002108 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6919      	ldr	r1, [r3, #16]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	2207      	movs	r2, #7
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43da      	mvns	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	400a      	ands	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	4603      	mov	r3, r0
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4403      	add	r3, r0
 80020fe:	409a      	lsls	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b06      	cmp	r3, #6
 800210e:	d824      	bhi.n	800215a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3b05      	subs	r3, #5
 8002122:	221f      	movs	r2, #31
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43da      	mvns	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	400a      	ands	r2, r1
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b05      	subs	r3, #5
 800214c:	fa00 f203 	lsl.w	r2, r0, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	635a      	str	r2, [r3, #52]	; 0x34
 8002158:	e04c      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d824      	bhi.n	80021ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	3b23      	subs	r3, #35	; 0x23
 8002174:	221f      	movs	r2, #31
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b23      	subs	r3, #35	; 0x23
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
 80021aa:	e023      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b41      	subs	r3, #65	; 0x41
 80021be:	221f      	movs	r2, #31
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43da      	mvns	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	400a      	ands	r2, r1
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b41      	subs	r3, #65	; 0x41
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_ADC_ConfigChannel+0x29c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1f4>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800220e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002212:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <HAL_ADC_ConfigChannel+0x29c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10f      	bne.n	800223e <HAL_ADC_ConfigChannel+0x21e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b12      	cmp	r3, #18
 8002224:	d10b      	bne.n	800223e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800222c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002230:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_ADC_ConfigChannel+0x29c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d12b      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x280>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_ADC_ConfigChannel+0x298>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d003      	beq.n	800225a <HAL_ADC_ConfigChannel+0x23a>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b11      	cmp	r3, #17
 8002258:	d122      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002260:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002264:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <HAL_ADC_ConfigChannel+0x2a0>)
 800226c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002270:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_ADC_ConfigChannel+0x298>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d111      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9a      	lsrs	r2, r3, #18
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002292:	e002      	b.n	800229a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b01      	subs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f9      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	10000012 	.word	0x10000012
 80022bc:	40012000 	.word	0x40012000
 80022c0:	40012300 	.word	0x40012300
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80022d4:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <ADC_Init+0x1ec>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <ADC_Init+0x1ec>)
 80022da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80022e0:	4b75      	ldr	r3, [pc, #468]	; (80024b8 <ADC_Init+0x1ec>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4973      	ldr	r1, [pc, #460]	; (80024b8 <ADC_Init+0x1ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	021a      	lsls	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	4a58      	ldr	r2, [pc, #352]	; (80024bc <ADC_Init+0x1f0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800236e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6899      	ldr	r1, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	e00f      	b.n	80023c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0202 	bic.w	r2, r2, #2
 80023d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	005a      	lsls	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002402:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	3b01      	subs	r3, #1
 8002420:	035a      	lsls	r2, r3, #13
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e007      	b.n	800243c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	3b01      	subs	r3, #1
 8002458:	051a      	lsls	r2, r3, #20
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247e:	025a      	lsls	r2, r3, #9
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	029a      	lsls	r2, r3, #10
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40012300 	.word	0x40012300
 80024bc:	0f000001 	.word	0x0f000001

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <__NVIC_SetPriorityGrouping+0x40>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x40>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	05fa0000 	.word	0x05fa0000

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f7ff ff8e 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff29 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff3e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff8e 	bl	80025b4 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5d 	bl	8002560 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff31 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e169      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8158 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b01      	cmp	r3, #1
 800272c:	d005      	beq.n	800273a <HAL_GPIO_Init+0x56>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d130      	bne.n	800279c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0201 	and.w	r2, r3, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d017      	beq.n	80027d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d123      	bne.n	800282c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3208      	adds	r2, #8
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80b2 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002886:	4a5b      	ldr	r2, [pc, #364]	; (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae92 	bls.w	8002704 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a60:	887a      	ldrh	r2, [r7, #2]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	041a      	lsls	r2, r3, #16
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43d9      	mvns	r1, r3
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	400b      	ands	r3, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07f      	b.n	8002b96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fe2c 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e006      	b.n	8002b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d104      	bne.n	8002b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_I2C_Init+0x11c>)
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69d9      	ldr	r1, [r3, #28]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	02008000 	.word	0x02008000

08002ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d138      	bne.n	8002c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e032      	b.n	8002c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d139      	bne.n	8002cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e033      	b.n	8002cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2224      	movs	r2, #36	; 0x24
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd4:	b08f      	sub	sp, #60	; 0x3c
 8002cd6:	af0a      	add	r7, sp, #40	; 0x28
 8002cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e116      	b.n	8002f12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f007 fdfe 	bl	800a900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2203      	movs	r2, #3
 8002d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 f86f 	bl	8006e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	687e      	ldr	r6, [r7, #4]
 8002d30:	466d      	mov	r5, sp
 8002d32:	f106 0410 	add.w	r4, r6, #16
 8002d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d46:	1d33      	adds	r3, r6, #4
 8002d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f003 ff20 	bl	8006b90 <USB_CoreInit>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0d7      	b.n	8002f12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 f85d 	bl	8006e28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e04a      	b.n	8002e0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	333d      	adds	r3, #61	; 0x3d
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	333c      	adds	r3, #60	; 0x3c
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	b298      	uxth	r0, r3
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3344      	adds	r3, #68	; 0x44
 8002db0:	4602      	mov	r2, r0
 8002db2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3340      	adds	r3, #64	; 0x40
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3348      	adds	r3, #72	; 0x48
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3354      	adds	r3, #84	; 0x54
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	3301      	adds	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3af      	bcc.n	8002d74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e044      	b.n	8002ea4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3b5      	bcc.n	8002e1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	687e      	ldr	r6, [r7, #4]
 8002eb6:	466d      	mov	r5, sp
 8002eb8:	f106 0410 	add.w	r4, r6, #16
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ecc:	1d33      	adds	r3, r6, #4
 8002ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f003 fff5 	bl	8006ec0 <USB_DevInit>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e014      	b.n	8002f12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f001 f97b 	bl	80041fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f005 f953 	bl	80081b6 <USB_DevDisconnect>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_PCD_Start+0x16>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e012      	b.n	8002f56 <HAL_PCD_Start+0x3c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 ff51 	bl	8006de4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f005 f914 	bl	8008174 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b08d      	sub	sp, #52	; 0x34
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f005 f9d2 	bl	800831e <USB_GetMode>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 84b7 	bne.w	80038f0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 f936 	bl	80081f8 <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 84ad 	beq.w	80038ee <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f005 f923 	bl	80081f8 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d107      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f002 0202 	and.w	r2, r2, #2
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f005 f911 	bl	80081f8 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d161      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0210 	bic.w	r2, r2, #16
 8002fee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	0c5b      	lsrs	r3, r3, #17
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	2b02      	cmp	r3, #2
 800301a:	d124      	bne.n	8003066 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d035      	beq.n	8003094 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6a38      	ldr	r0, [r7, #32]
 800303c:	f004 ff48 	bl	8007ed0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304c:	441a      	add	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800305e:	441a      	add	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	621a      	str	r2, [r3, #32]
 8003064:	e016      	b.n	8003094 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	0c5b      	lsrs	r3, r3, #17
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	2b06      	cmp	r3, #6
 8003070:	d110      	bne.n	8003094 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003078:	2208      	movs	r2, #8
 800307a:	4619      	mov	r1, r3
 800307c:	6a38      	ldr	r0, [r7, #32]
 800307e:	f004 ff27 	bl	8007ed0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800308e:	441a      	add	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0210 	orr.w	r2, r2, #16
 80030a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f005 f8a5 	bl	80081f8 <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030b8:	f040 80a7 	bne.w	800320a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f005 f8aa 	bl	800821e <USB_ReadDevAllOutEpInterrupt>
 80030ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030cc:	e099      	b.n	8003202 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 808e 	beq.w	80031f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f005 f8ce 	bl	8008286 <USB_ReadDevOutEPInterrupt>
 80030ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	2301      	movs	r3, #1
 8003106:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fef0 	bl	8003ef0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	2308      	movs	r3, #8
 800312a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800312c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 ffc6 	bl	80040c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	461a      	mov	r2, r3
 800314c:	2310      	movs	r3, #16
 800314e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d030      	beq.n	80031bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d109      	bne.n	800317a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003178:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d108      	bne.n	80031aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f007 fccf 	bl	800ab48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	2302      	movs	r3, #2
 80031ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	461a      	mov	r2, r3
 80031d4:	2320      	movs	r3, #32
 80031d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	3301      	adds	r3, #1
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f af62 	bne.w	80030ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fff2 	bl	80081f8 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321e:	f040 80db 	bne.w	80033d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f005 f813 	bl	8008252 <USB_ReadDevAllInEpInterrupt>
 800322c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003232:	e0cd      	b.n	80033d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80c2 	beq.w	80033c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f005 f839 	bl	80082c2 <USB_ReadDevInEPInterrupt>
 8003250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d057      	beq.n	800330c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	2201      	movs	r2, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	69f9      	ldr	r1, [r7, #28]
 8003278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800327c:	4013      	ands	r3, r2
 800327e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328c:	461a      	mov	r2, r3
 800328e:	2301      	movs	r3, #1
 8003290:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d132      	bne.n	8003300 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334c      	adds	r3, #76	; 0x4c
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4403      	add	r3, r0
 80032ba:	3348      	adds	r3, #72	; 0x48
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4419      	add	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	334c      	adds	r3, #76	; 0x4c
 80032d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <HAL_PCD_IRQHandler+0x3a2>
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3354      	adds	r3, #84	; 0x54
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f8:	461a      	mov	r2, r3
 80032fa:	2101      	movs	r1, #1
 80032fc:	f005 f842 	bl	8008384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f007 fb99 	bl	800aa3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003322:	461a      	mov	r2, r3
 8003324:	2308      	movs	r3, #8
 8003326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333e:	461a      	mov	r2, r3
 8003340:	2310      	movs	r3, #16
 8003342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	461a      	mov	r2, r3
 800335c:	2340      	movs	r3, #64	; 0x40
 800335e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d023      	beq.n	80033b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800336a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336c:	6a38      	ldr	r0, [r7, #32]
 800336e:	f003 ff15 	bl	800719c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	3338      	adds	r3, #56	; 0x38
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	3304      	adds	r3, #4
 8003384:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	b2db      	uxtb	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f007 fbe6 	bl	800ab6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ac:	461a      	mov	r2, r3
 80033ae:	2302      	movs	r3, #2
 80033b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fd08 	bl	8003dd4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	3301      	adds	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f47f af2e 	bne.w	8003234 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f004 ff0b 	bl	80081f8 <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ec:	d122      	bne.n	8003434 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003408:	2b01      	cmp	r3, #1
 800340a:	d108      	bne.n	800341e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003414:	2100      	movs	r1, #0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f007 fd64 	bl	800aee4 <HAL_PCDEx_LPM_Callback>
 800341c:	e002      	b.n	8003424 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f007 fb84 	bl	800ab2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f004 fedd 	bl	80081f8 <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003448:	d112      	bne.n	8003470 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f007 fb40 	bl	800aae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800346e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f004 febf 	bl	80081f8 <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003484:	d121      	bne.n	80034ca <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003494:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d111      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034ba:	2101      	movs	r1, #1
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f007 fd11 	bl	800aee4 <HAL_PCDEx_LPM_Callback>
 80034c2:	e002      	b.n	80034ca <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f007 fb0b 	bl	800aae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fe92 	bl	80081f8 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	f040 80b7 	bne.w	8003650 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2110      	movs	r1, #16
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fe4d 	bl	800719c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	e046      	b.n	8003596 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	461a      	mov	r2, r3
 8003516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800351a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	440a      	add	r2, r1
 8003532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800353a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800354e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003560:	0151      	lsls	r1, r2, #5
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	440a      	add	r2, r1
 8003566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800356a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800356e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	440a      	add	r2, r1
 8003586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800358a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800358e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	3301      	adds	r3, #1
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	429a      	cmp	r2, r3
 800359e:	d3b3      	bcc.n	8003508 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d016      	beq.n	80035ea <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035cc:	f043 030b 	orr.w	r3, r3, #11
 80035d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e2:	f043 030b 	orr.w	r3, r3, #11
 80035e6:	6453      	str	r3, [r2, #68]	; 0x44
 80035e8:	e015      	b.n	8003616 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	4619      	mov	r1, r3
 80035fa:	f242 032b 	movw	r3, #8235	; 0x202b
 80035fe:	4313      	orrs	r3, r2
 8003600:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003610:	f043 030b 	orr.w	r3, r3, #11
 8003614:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003624:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003628:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800363a:	461a      	mov	r2, r3
 800363c:	f004 fea2 	bl	8008384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800364e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f004 fdcf 	bl	80081f8 <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003664:	d124      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f004 fe66 	bl	800833c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fe0e 	bl	8007296 <USB_GetDevSpeed>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	f001 fb53 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 800368a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	4620      	mov	r0, r4
 8003696:	f003 fb03 	bl	8006ca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f007 f9f7 	bl	800aa8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f004 fd9f 	bl	80081f8 <USB_ReadInterrupts>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d10a      	bne.n	80036da <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f007 f9d4 	bl	800aa72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 0208 	and.w	r2, r2, #8
 80036d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fd8a 	bl	80081f8 <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d122      	bne.n	8003734 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036fa:	2301      	movs	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e014      	b.n	800372a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fb27 	bl	8003d72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	3301      	adds	r3, #1
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	429a      	cmp	r2, r3
 8003732:	d3e5      	bcc.n	8003700 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f004 fd5d 	bl	80081f8 <USB_ReadInterrupts>
 800373e:	4603      	mov	r3, r0
 8003740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003748:	d13b      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800374a:	2301      	movs	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	e02b      	b.n	80037a8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3340      	adds	r3, #64	; 0x40
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d115      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003776:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003778:	2b00      	cmp	r3, #0
 800377a:	da12      	bge.n	80037a2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	333f      	adds	r3, #63	; 0x3f
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fae8 	bl	8003d72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	3301      	adds	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d3ce      	bcc.n	8003750 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fd16 	bl	80081f8 <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d6:	d155      	bne.n	8003884 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d8:	2301      	movs	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	e045      	b.n	800386a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d12e      	bne.n	8003864 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003806:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	da2b      	bge.n	8003864 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003818:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800381c:	429a      	cmp	r2, r3
 800381e:	d121      	bne.n	8003864 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003860:	6053      	str	r3, [r2, #4]
            break;
 8003862:	e007      	b.n	8003874 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	3301      	adds	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	429a      	cmp	r2, r3
 8003872:	d3b4      	bcc.n	80037de <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f004 fcb5 	bl	80081f8 <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d10a      	bne.n	80038b0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f007 f978 	bl	800ab90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fc9f 	bl	80081f8 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d115      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f007 f968 	bl	800abac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	e000      	b.n	80038f0 <HAL_PCD_IRQHandler+0x992>
      return;
 80038ee:	bf00      	nop
    }
  }
}
 80038f0:	3734      	adds	r7, #52	; 0x34
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd90      	pop	{r4, r7, pc}

080038f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_PCD_SetAddress+0x1a>
 800390c:	2302      	movs	r3, #2
 800390e:	e013      	b.n	8003938 <HAL_PCD_SetAddress+0x42>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f004 fbfd 	bl	8008128 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	70fb      	strb	r3, [r7, #3]
 8003952:	460b      	mov	r3, r1
 8003954:	803b      	strh	r3, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800395e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003962:	2b00      	cmp	r3, #0
 8003964:	da0f      	bge.n	8003986 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3338      	adds	r3, #56	; 0x38
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	705a      	strb	r2, [r3, #1]
 8003984:	e00f      	b.n	80039a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039b2:	883a      	ldrh	r2, [r7, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d0:	78bb      	ldrb	r3, [r7, #2]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d102      	bne.n	80039dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_PCD_EP_Open+0xaa>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e00e      	b.n	8003a08 <HAL_PCD_EP_Open+0xc8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68f9      	ldr	r1, [r7, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fc71 	bl	80072e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a06:	7afb      	ldrb	r3, [r7, #11]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da0f      	bge.n	8003a44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3338      	adds	r3, #56	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	705a      	strb	r2, [r3, #1]
 8003a42:	e00f      	b.n	8003a64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	f003 020f 	and.w	r2, r3, #15
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_PCD_EP_Close+0x6e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e00e      	b.n	8003a9c <HAL_PCD_EP_Close+0x8c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 fcaf 	bl	80073f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3304      	adds	r3, #4
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	6979      	ldr	r1, [r7, #20]
 8003b18:	f003 ff96 	bl	8007a48 <USB_EP0StartXfer>
 8003b1c:	e008      	b.n	8003b30 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6979      	ldr	r1, [r7, #20]
 8003b2c:	f003 fd3c 	bl	80075a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b5c:	681b      	ldr	r3, [r3, #0]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	460b      	mov	r3, r1
 8003b78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7a:	7afb      	ldrb	r3, [r7, #11]
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	3338      	adds	r3, #56	; 0x38
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d102      	bne.n	8003bc4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	f003 ff34 	bl	8007a48 <USB_EP0StartXfer>
 8003be0:	e008      	b.n	8003bf4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	f003 fcda 	bl	80075a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 020f 	and.w	r2, r3, #15
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d901      	bls.n	8003c1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e050      	b.n	8003cbe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da0f      	bge.n	8003c44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3338      	adds	r3, #56	; 0x38
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	705a      	strb	r2, [r3, #1]
 8003c42:	e00d      	b.n	8003c60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	3304      	adds	r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_PCD_EP_SetStall+0x82>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e01e      	b.n	8003cbe <HAL_PCD_EP_SetStall+0xc0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f004 f976 	bl	8007f80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	b2d9      	uxtb	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f004 fb68 	bl	8008384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d901      	bls.n	8003ce4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e042      	b.n	8003d6a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da0f      	bge.n	8003d0c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	3338      	adds	r3, #56	; 0x38
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	705a      	strb	r2, [r3, #1]
 8003d0a:	e00f      	b.n	8003d2c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 020f 	and.w	r2, r3, #15
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_PCD_EP_ClrStall+0x86>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e00e      	b.n	8003d6a <HAL_PCD_EP_ClrStall+0xa4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 f97e 	bl	800805c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da0c      	bge.n	8003da0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	3338      	adds	r3, #56	; 0x38
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e00c      	b.n	8003dba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	3304      	adds	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 ff9d 	bl	8007d00 <USB_EPStopXfer>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dca:	7afb      	ldrb	r3, [r7, #11]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3338      	adds	r3, #56	; 0x38
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d901      	bls.n	8003e0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e06c      	b.n	8003ee6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d902      	bls.n	8003e28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3303      	adds	r3, #3
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e30:	e02b      	b.n	8003e8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d902      	bls.n	8003e4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3303      	adds	r3, #3
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6919      	ldr	r1, [r3, #16]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6978      	ldr	r0, [r7, #20]
 8003e6e:	f003 fff1 	bl	8007e54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	441a      	add	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d809      	bhi.n	8003eb4 <PCD_WriteEmptyTxFifo+0xe0>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d203      	bcs.n	8003eb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1be      	bne.n	8003e32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d811      	bhi.n	8003ee4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	6939      	ldr	r1, [r7, #16]
 8003edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	333c      	adds	r3, #60	; 0x3c
 8003f08:	3304      	adds	r3, #4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d17b      	bne.n	800401e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4a61      	ldr	r2, [pc, #388]	; (80040b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	f240 80b9 	bls.w	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80b3 	beq.w	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f52:	461a      	mov	r2, r3
 8003f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f58:	6093      	str	r3, [r2, #8]
 8003f5a:	e0a7      	b.n	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f72:	461a      	mov	r2, r3
 8003f74:	2320      	movs	r3, #32
 8003f76:	6093      	str	r3, [r2, #8]
 8003f78:	e098      	b.n	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f040 8093 	bne.w	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4a4b      	ldr	r2, [pc, #300]	; (80040b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d90f      	bls.n	8003fae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003faa:	6093      	str	r3, [r2, #8]
 8003fac:	e07e      	b.n	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	0159      	lsls	r1, r3, #5
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	440b      	add	r3, r1
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d114      	bne.n	8004010 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	f004 f9c2 	bl	8008384 <USB_EP0_OutStart>
 8004000:	e006      	b.n	8004010 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f006 fcf6 	bl	800aa08 <HAL_PCD_DataOutStageCallback>
 800401c:	e046      	b.n	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4a26      	ldr	r2, [pc, #152]	; (80040bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d124      	bne.n	8004070 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	461a      	mov	r2, r3
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	6093      	str	r3, [r2, #8]
 8004044:	e032      	b.n	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	2320      	movs	r3, #32
 8004060:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f006 fccd 	bl	800aa08 <HAL_PCD_DataOutStageCallback>
 800406e:	e01d      	b.n	80040ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d114      	bne.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004098:	461a      	mov	r2, r3
 800409a:	2100      	movs	r1, #0
 800409c:	f004 f972 	bl	8008384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f006 fcae 	bl	800aa08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	4f54300a 	.word	0x4f54300a
 80040bc:	4f54310a 	.word	0x4f54310a

080040c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	333c      	adds	r3, #60	; 0x3c
 80040d8:	3304      	adds	r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <PCD_EP_OutSetupPacket_int+0x88>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d90e      	bls.n	8004114 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004112:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f006 fc65 	bl	800a9e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <PCD_EP_OutSetupPacket_int+0x88>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d90c      	bls.n	800413c <PCD_EP_OutSetupPacket_int+0x7c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d108      	bne.n	800413c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004134:	461a      	mov	r2, r3
 8004136:	2101      	movs	r1, #1
 8004138:	f004 f924 	bl	8008384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	4f54300a 	.word	0x4f54300a

0800414c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
 8004158:	4613      	mov	r3, r2
 800415a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800416a:	883b      	ldrh	r3, [r7, #0]
 800416c:	0419      	lsls	r1, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	430a      	orrs	r2, r1
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
 8004178:	e028      	b.n	80041cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4413      	add	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]
 800418c:	e00d      	b.n	80041aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	3340      	adds	r3, #64	; 0x40
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	4413      	add	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	3301      	adds	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3ec      	bcc.n	800418e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041b4:	883b      	ldrh	r3, [r7, #0]
 80041b6:	0418      	lsls	r0, r3, #16
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	3b01      	subs	r3, #1
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	4302      	orrs	r2, r0
 80041c4:	3340      	adds	r3, #64	; 0x40
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_PCDEx_ActivateLPM+0x44>)
 800422c:	4313      	orrs	r3, r2
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	10000003 	.word	0x10000003

08004244 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800424a:	f7fd fe75 	bl	8001f38 <HAL_GetTick>
 800424e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004250:	4b66      	ldr	r3, [pc, #408]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a65      	ldr	r2, [pc, #404]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425e:	f7fd fe6b 	bl	8001f38 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004270:	4b5e      	ldr	r3, [pc, #376]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800427c:	4b5b      	ldr	r3, [pc, #364]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a5a      	ldr	r2, [pc, #360]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004288:	f7fd fe56 	bl	8001f38 <HAL_GetTick>
 800428c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800428e:	4b57      	ldr	r3, [pc, #348]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fd fe4f 	bl	8001f38 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e09a      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80042ac:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ee      	bne.n	8004296 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80042b8:	f7fd fe3e 	bl	8001f38 <HAL_GetTick>
 80042bc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80042be:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80042c4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80042c8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd fe34 	bl	8001f38 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e081      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80042de:	4b43      	ldr	r3, [pc, #268]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80042ea:	f7fd fe25 	bl	8001f38 <HAL_GetTick>
 80042ee:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80042f0:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3d      	ldr	r2, [pc, #244]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fe:	f7fd fe1b 	bl	8001f38 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e068      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004310:	4b36      	ldr	r3, [pc, #216]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800431c:	f7fd fe0c 	bl	8001f38 <HAL_GetTick>
 8004320:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004322:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a31      	ldr	r2, [pc, #196]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004328:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800432c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004330:	f7fd fe02 	bl	8001f38 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04f      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800434e:	f7fd fdf3 	bl	8001f38 <HAL_GetTick>
 8004352:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a24      	ldr	r2, [pc, #144]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004362:	f7fd fde9 	bl	8001f38 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	; 0x64
 800436e:	d901      	bls.n	8004374 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e036      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004374:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004382:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <HAL_RCC_DeInit+0x1ac>)
 8004384:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004386:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004388:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_RCC_DeInit+0x1b0>)
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 800438e:	4b17      	ldr	r3, [pc, #92]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <HAL_RCC_DeInit+0x1b0>)
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4a14      	ldr	r2, [pc, #80]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 800439c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a0:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4a11      	ldr	r2, [pc, #68]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80043a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ac:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <HAL_RCC_DeInit+0x1a8>)
 80043c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_RCC_DeInit+0x1b4>)
 80043c8:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <HAL_RCC_DeInit+0x1b8>)
 80043ca:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <HAL_RCC_DeInit+0x1bc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd fd6d 	bl	8001eb0 <HAL_InitTick>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	24003010 	.word	0x24003010
 80043f4:	24003000 	.word	0x24003000
 80043f8:	20000000 	.word	0x20000000
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	20000004 	.word	0x20000004

08004404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e291      	b.n	800493e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b96      	ldr	r3, [pc, #600]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004434:	4b93      	ldr	r3, [pc, #588]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
 8004440:	4b90      	ldr	r3, [pc, #576]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b8d      	ldr	r3, [pc, #564]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x130>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e26b      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x7a>
 8004470:	4b84      	ldr	r3, [pc, #528]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a83      	ldr	r2, [pc, #524]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x9c>
 8004486:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b7c      	ldr	r3, [pc, #496]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7b      	ldr	r2, [pc, #492]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xc0>
 80044aa:	4b76      	ldr	r3, [pc, #472]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a75      	ldr	r2, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd8>
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6e      	ldr	r2, [pc, #440]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6b      	ldr	r2, [pc, #428]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd fd28 	bl	8001f38 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd fd24 	bl	8001f38 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e21f      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe8>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd fd14 	bl	8001f38 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fd10 	bl	8001f38 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e20b      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x110>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d069      	beq.n	8004616 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1df      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e040      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d023      	beq.n	80045e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a38      	ldr	r2, [pc, #224]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fcc6 	bl	8001f38 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b0:	f7fd fcc2 	bl	8001f38 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1bd      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]
 80045e2:	e018      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd fca2 	bl	8001f38 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f8:	f7fd fc9e 	bl	8001f38 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e199      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d038      	beq.n	8004694 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004636:	f7fd fc7f 	bl	8001f38 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7fd fc7b 	bl	8001f38 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e176      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x23a>
 800465c:	e01a      	b.n	8004694 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x280>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466a:	f7fd fc65 	bl	8001f38 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	e00a      	b.n	8004688 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7fd fc61 	bl	8001f38 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d903      	bls.n	8004688 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e15c      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
 8004684:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b91      	ldr	r3, [pc, #580]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ee      	bne.n	8004672 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a4 	beq.w	80047ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b8b      	ldr	r3, [pc, #556]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b88      	ldr	r3, [pc, #544]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a87      	ldr	r2, [pc, #540]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b85      	ldr	r3, [pc, #532]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ca:	4b82      	ldr	r3, [pc, #520]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046d6:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7e      	ldr	r2, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e2:	f7fd fc29 	bl	8001f38 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fd fc25 	bl	8001f38 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e120      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fc:	4b75      	ldr	r3, [pc, #468]	; (80048d4 <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x31a>
 8004710:	4b6f      	ldr	r3, [pc, #444]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e02d      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x33c>
 8004726:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a69      	ldr	r2, [pc, #420]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b67      	ldr	r3, [pc, #412]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a66      	ldr	r2, [pc, #408]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e01c      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d10c      	bne.n	8004762 <HAL_RCC_OscConfig+0x35e>
 8004748:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a60      	ldr	r2, [pc, #384]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	4b5e      	ldr	r3, [pc, #376]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a5d      	ldr	r2, [pc, #372]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	e00b      	b.n	800477a <HAL_RCC_OscConfig+0x376>
 8004762:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a5a      	ldr	r2, [pc, #360]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
 800476e:	4b58      	ldr	r3, [pc, #352]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a57      	ldr	r2, [pc, #348]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004774:	f023 0304 	bic.w	r3, r3, #4
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d015      	beq.n	80047ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004782:	f7fd fbd9 	bl	8001f38 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fd fbd5 	bl	8001f38 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0ce      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a0:	4b4b      	ldr	r3, [pc, #300]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ee      	beq.n	800478a <HAL_RCC_OscConfig+0x386>
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fd fbc3 	bl	8001f38 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fd fbbf 	bl	8001f38 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0b8      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b3c      	ldr	r3, [pc, #240]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80a4 	beq.w	800493c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f4:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d06b      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d149      	bne.n	800489c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fb90 	bl	8001f38 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fd fb8c 	bl	8001f38 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e087      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	4313      	orrs	r3, r2
 8004860:	4a1b      	ldr	r2, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004866:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800486e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd fb60 	bl	8001f38 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fd fb5c 	bl	8001f38 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e057      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x478>
 800489a:	e04f      	b.n	800493c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80048a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd fb46 	bl	8001f38 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd fb42 	bl	8001f38 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e03d      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4ac>
 80048ce:	e035      	b.n	800493c <HAL_RCC_OscConfig+0x538>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_RCC_OscConfig+0x544>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d028      	beq.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d121      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d11a      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800490e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004910:	4293      	cmp	r3, r2
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	3b01      	subs	r3, #1
 8004922:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0d0      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d910      	bls.n	8004994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	4965      	ldr	r1, [pc, #404]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d040      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e073      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4936      	ldr	r1, [pc, #216]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fd fa7a 	bl	8001f38 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fd fa76 	bl	8001f38 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e053      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d210      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 020f 	bic.w	r2, r3, #15
 8004a86:	4922      	ldr	r1, [pc, #136]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f821 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	; (8004b18 <HAL_RCC_ClockConfig+0x1cc>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1d0>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1d4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd f9d6 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023c00 	.word	0x40023c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	0800bb08 	.word	0x0800bb08
 8004b1c:	20000000 	.word	0x20000000
 8004b20:	20000004 	.word	0x20000004

08004b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b094      	sub	sp, #80	; 0x50
 8004b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	2300      	movs	r3, #0
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	2300      	movs	r3, #0
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b3c:	4b79      	ldr	r3, [pc, #484]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d00d      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x40>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	f200 80e1 	bhi.w	8004d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x34>
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b56:	e0db      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b73      	ldr	r3, [pc, #460]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b5c:	e0db      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b5e:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b62:	e0d8      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b64:	4b6f      	ldr	r3, [pc, #444]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d063      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	099b      	lsrs	r3, r3, #6
 8004b80:	2200      	movs	r2, #0
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
 8004b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0159      	lsls	r1, r3, #5
 8004ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba8:	0150      	lsls	r0, r2, #5
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4621      	mov	r1, r4
 8004bb0:	1a51      	subs	r1, r2, r1
 8004bb2:	6139      	str	r1, [r7, #16]
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc8:	4659      	mov	r1, fp
 8004bca:	018b      	lsls	r3, r1, #6
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	018a      	lsls	r2, r1, #6
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8004bdc:	4659      	mov	r1, fp
 8004bde:	eb63 0901 	sbc.w	r9, r3, r1
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bf6:	4690      	mov	r8, r2
 8004bf8:	4699      	mov	r9, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	eb18 0303 	adds.w	r3, r8, r3
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	462b      	mov	r3, r5
 8004c04:	eb49 0303 	adc.w	r3, r9, r3
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c16:	4629      	mov	r1, r5
 8004c18:	024b      	lsls	r3, r1, #9
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c20:	4621      	mov	r1, r4
 8004c22:	024a      	lsls	r2, r1, #9
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c34:	f7fb fb44 	bl	80002c0 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	e058      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c52:	623b      	str	r3, [r7, #32]
 8004c54:	2300      	movs	r3, #0
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	f04f 0000 	mov.w	r0, #0
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	0159      	lsls	r1, r3, #5
 8004c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c6e:	0150      	lsls	r0, r2, #5
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4641      	mov	r1, r8
 8004c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c94:	ebb2 040a 	subs.w	r4, r2, sl
 8004c98:	eb63 050b 	sbc.w	r5, r3, fp
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	00eb      	lsls	r3, r5, #3
 8004ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004caa:	00e2      	lsls	r2, r4, #3
 8004cac:	4614      	mov	r4, r2
 8004cae:	461d      	mov	r5, r3
 8004cb0:	4643      	mov	r3, r8
 8004cb2:	18e3      	adds	r3, r4, r3
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	eb45 0303 	adc.w	r3, r5, r3
 8004cbc:	607b      	str	r3, [r7, #4]
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cca:	4629      	mov	r1, r5
 8004ccc:	028b      	lsls	r3, r1, #10
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	028a      	lsls	r2, r1, #10
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cde:	2200      	movs	r2, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	61fa      	str	r2, [r7, #28]
 8004ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce8:	f7fb faea 	bl	80002c0 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	0c1b      	lsrs	r3, r3, #16
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d0e:	e002      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3750      	adds	r7, #80	; 0x50
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800
 8004d28:	00f42400 	.word	0x00f42400
 8004d2c:	007a1200 	.word	0x007a1200

08004d30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000000 	.word	0x20000000

08004d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d4c:	f7ff fff0 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0a9b      	lsrs	r3, r3, #10
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	0800bb18 	.word	0x0800bb18

08004d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d74:	f7ff ffdc 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	0b5b      	lsrs	r3, r3, #13
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4903      	ldr	r1, [pc, #12]	; (8004d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40023800 	.word	0x40023800
 8004d94:	0800bb18 	.word	0x0800bb18

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d012      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dbc:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4a64      	ldr	r2, [pc, #400]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4960      	ldr	r1, [pc, #384]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d017      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dee:	4b59      	ldr	r3, [pc, #356]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	4955      	ldr	r1, [pc, #340]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e2a:	4b4a      	ldr	r3, [pc, #296]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	4946      	ldr	r1, [pc, #280]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e48:	d101      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 808b 	beq.w	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6413      	str	r3, [r2, #64]	; 0x40
 8004e74:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e80:	4b35      	ldr	r3, [pc, #212]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a34      	ldr	r2, [pc, #208]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd f854 	bl	8001f38 <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e94:	f7fd f850 	bl	8001f38 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e2bc      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb2:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d035      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d02e      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed0:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eda:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee6:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ef8:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d114      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fd f818 	bl	8001f38 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fd f814 	bl	8001f38 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e27e      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ee      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3a:	d111      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004f4a:	400b      	ands	r3, r1
 8004f4c:	4901      	ldr	r1, [pc, #4]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
 8004f52:	e00b      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	0ffffcff 	.word	0x0ffffcff
 8004f60:	4ba4      	ldr	r3, [pc, #656]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4aa3      	ldr	r2, [pc, #652]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f6a:	6093      	str	r3, [r2, #8]
 8004f6c:	4ba1      	ldr	r3, [pc, #644]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	499e      	ldr	r1, [pc, #632]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f8a:	4b9a      	ldr	r3, [pc, #616]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f90:	4a98      	ldr	r2, [pc, #608]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f9a:	4b96      	ldr	r3, [pc, #600]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	4993      	ldr	r1, [pc, #588]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fb8:	4b8e      	ldr	r3, [pc, #568]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	498b      	ldr	r1, [pc, #556]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fda:	4b86      	ldr	r3, [pc, #536]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe8:	4982      	ldr	r1, [pc, #520]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ffc:	4b7d      	ldr	r3, [pc, #500]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500a:	497a      	ldr	r1, [pc, #488]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800501e:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f023 0203 	bic.w	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	4971      	ldr	r1, [pc, #452]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005040:	4b6c      	ldr	r3, [pc, #432]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f023 020c 	bic.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	4969      	ldr	r1, [pc, #420]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005062:	4b64      	ldr	r3, [pc, #400]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	4960      	ldr	r1, [pc, #384]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005084:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005092:	4958      	ldr	r1, [pc, #352]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050a6:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	494f      	ldr	r1, [pc, #316]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050c8:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d6:	4947      	ldr	r1, [pc, #284]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050ea:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	493e      	ldr	r1, [pc, #248]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800510c:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	4936      	ldr	r1, [pc, #216]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800512e:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513c:	492d      	ldr	r1, [pc, #180]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514c:	d101      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516c:	4921      	ldr	r1, [pc, #132]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518e:	4919      	ldr	r1, [pc, #100]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b0:	4910      	ldr	r1, [pc, #64]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d006      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 809d 	beq.w	8005306 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fc feae 	bl	8001f38 <HAL_GetTick>
 80051dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051de:	e00b      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051e0:	f7fc feaa 	bl	8001f38 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d904      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e116      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f8:	4b8b      	ldr	r3, [pc, #556]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ed      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d113      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005218:	4b83      	ldr	r3, [pc, #524]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521e:	0e1b      	lsrs	r3, r3, #24
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	019a      	lsls	r2, r3, #6
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	061b      	lsls	r3, r3, #24
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	071b      	lsls	r3, r3, #28
 8005238:	497b      	ldr	r1, [pc, #492]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005254:	d00a      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800525e:	2b00      	cmp	r3, #0
 8005260:	d024      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d11f      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800526c:	4b6e      	ldr	r3, [pc, #440]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005272:	0f1b      	lsrs	r3, r3, #28
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	019a      	lsls	r2, r3, #6
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	431a      	orrs	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	071b      	lsls	r3, r3, #28
 800528c:	4966      	ldr	r1, [pc, #408]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005294:	4b64      	ldr	r3, [pc, #400]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529a:	f023 021f 	bic.w	r2, r3, #31
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4960      	ldr	r1, [pc, #384]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	019a      	lsls	r2, r3, #6
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	071b      	lsls	r3, r3, #28
 80052cc:	4956      	ldr	r1, [pc, #344]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052d4:	4b54      	ldr	r3, [pc, #336]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a53      	ldr	r2, [pc, #332]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fc fe2a 	bl	8001f38 <HAL_GetTick>
 80052e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052e8:	f7fc fe26 	bl	8001f38 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e092      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052fa:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b01      	cmp	r3, #1
 800530a:	f040 8088 	bne.w	800541e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800530e:	4b46      	ldr	r3, [pc, #280]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a45      	ldr	r2, [pc, #276]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800531a:	f7fc fe0d 	bl	8001f38 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005322:	f7fc fe09 	bl	8001f38 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b64      	cmp	r3, #100	; 0x64
 800532e:	d901      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e075      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005334:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005340:	d0ef      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800535e:	2b00      	cmp	r3, #0
 8005360:	d024      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	2b00      	cmp	r3, #0
 8005368:	d120      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	019a      	lsls	r2, r3, #6
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	4927      	ldr	r1, [pc, #156]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005392:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005398:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	4920      	ldr	r1, [pc, #128]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d018      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x652>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c0:	d113      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	0e1b      	lsrs	r3, r3, #24
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	019a      	lsls	r2, r3, #6
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	041b      	lsls	r3, r3, #16
 80053dc:	431a      	orrs	r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	061b      	lsls	r3, r3, #24
 80053e2:	4911      	ldr	r1, [pc, #68]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053ea:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a0e      	ldr	r2, [pc, #56]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f6:	f7fc fd9f 	bl	8001f38 <HAL_GetTick>
 80053fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053fc:	e008      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053fe:	f7fc fd9b 	bl	8001f38 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	; 0x64
 800540a:	d901      	bls.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e007      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541c:	d1ef      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800

0800542c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e09d      	b.n	800557a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d108      	bne.n	8005458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544e:	d009      	beq.n	8005464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
 8005456:	e005      	b.n	8005464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fc f9a2 	bl	80017c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054a4:	d902      	bls.n	80054ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e002      	b.n	80054b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054ba:	d007      	beq.n	80054cc <HAL_SPI_Init+0xa0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	ea42 0103 	orr.w	r1, r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	f003 0204 	and.w	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005548:	ea42 0103 	orr.w	r1, r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_SPI_Transmit+0x22>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e158      	b.n	8005856 <HAL_SPI_Transmit+0x2d4>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ac:	f7fc fcc4 	bl	8001f38 <HAL_GetTick>
 80055b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
 80055c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055c6:	e13d      	b.n	8005844 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_SPI_Transmit+0x52>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055d8:	e134      	b.n	8005844 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2203      	movs	r2, #3
 80055de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	d10f      	bne.n	8005646 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d007      	beq.n	8005664 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800566c:	d94b      	bls.n	8005706 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0xfa>
 8005676:	8afb      	ldrh	r3, [r7, #22]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d13e      	bne.n	80056fa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	881a      	ldrh	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	1c9a      	adds	r2, r3, #2
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056a0:	e02b      	b.n	80056fa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d112      	bne.n	80056d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d4:	e011      	b.n	80056fa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d6:	f7fc fc2f 	bl	8001f38 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d803      	bhi.n	80056ee <HAL_SPI_Transmit+0x16c>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d102      	bne.n	80056f4 <HAL_SPI_Transmit+0x172>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f8:	e0a4      	b.n	8005844 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ce      	bne.n	80056a2 <HAL_SPI_Transmit+0x120>
 8005704:	e07c      	b.n	8005800 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Transmit+0x192>
 800570e:	8afb      	ldrh	r3, [r7, #22]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d170      	bne.n	80057f6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d912      	bls.n	8005744 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b02      	subs	r3, #2
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005742:	e058      	b.n	80057f6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800576a:	e044      	b.n	80057f6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d12b      	bne.n	80057d2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d912      	bls.n	80057aa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b02      	subs	r3, #2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057a8:	e025      	b.n	80057f6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d0:	e011      	b.n	80057f6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d2:	f7fc fbb1 	bl	8001f38 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d803      	bhi.n	80057ea <HAL_SPI_Transmit+0x268>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d102      	bne.n	80057f0 <HAL_SPI_Transmit+0x26e>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057f4:	e026      	b.n	8005844 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1b5      	bne.n	800576c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fd07 	bl	8006218 <SPI_EndRxTxTransaction>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e000      	b.n	8005844 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005842:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005854:	7ffb      	ldrb	r3, [r7, #31]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587a:	d112      	bne.n	80058a2 <HAL_SPI_Receive+0x44>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10e      	bne.n	80058a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2204      	movs	r2, #4
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	4613      	mov	r3, r2
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f910 	bl	8005abe <HAL_SPI_TransmitReceive>
 800589e:	4603      	mov	r3, r0
 80058a0:	e109      	b.n	8005ab6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_SPI_Receive+0x52>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e102      	b.n	8005ab6 <HAL_SPI_Receive+0x258>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058b8:	f7fc fb3e 	bl	8001f38 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
 80058cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058ce:	e0e9      	b.n	8005aa4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_SPI_Receive+0x7e>
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058e0:	e0e0      	b.n	8005aa4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2204      	movs	r2, #4
 80058e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800592c:	d908      	bls.n	8005940 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	e007      	b.n	8005950 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800594e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005958:	d10f      	bne.n	800597a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005968:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d007      	beq.n	8005998 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a0:	d867      	bhi.n	8005a72 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059a2:	e030      	b.n	8005a06 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d117      	bne.n	80059e2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f103 020c 	add.w	r2, r3, #12
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	7812      	ldrb	r2, [r2, #0]
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059e0:	e011      	b.n	8005a06 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059e2:	f7fc faa9 	bl	8001f38 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d803      	bhi.n	80059fa <HAL_SPI_Receive+0x19c>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_Receive+0x1a2>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a04:	e04e      	b.n	8005aa4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1c8      	bne.n	80059a4 <HAL_SPI_Receive+0x146>
 8005a12:	e034      	b.n	8005a7e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d115      	bne.n	8005a4e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	1c9a      	adds	r2, r3, #2
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005a4c:	e011      	b.n	8005a72 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4e:	f7fc fa73 	bl	8001f38 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d803      	bhi.n	8005a66 <HAL_SPI_Receive+0x208>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d102      	bne.n	8005a6c <HAL_SPI_Receive+0x20e>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a70:	e018      	b.n	8005aa4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ca      	bne.n	8005a14 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fb4c 	bl	8006120 <SPI_EndRxTransaction>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
 8005aa0:	e000      	b.n	8005aa4 <HAL_SPI_Receive+0x246>
  }

error :
 8005aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b08a      	sub	sp, #40	; 0x28
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005acc:	2301      	movs	r3, #1
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_SPI_TransmitReceive+0x26>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e1fb      	b.n	8005edc <HAL_SPI_TransmitReceive+0x41e>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aec:	f7fc fa24 	bl	8001f38 <HAL_GetTick>
 8005af0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005af8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b08:	7efb      	ldrb	r3, [r7, #27]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d00e      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x6e>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b14:	d106      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x66>
 8005b1e:	7efb      	ldrb	r3, [r7, #27]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d003      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b2a:	e1cd      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x80>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x80>
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b44:	e1c0      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d003      	beq.n	8005b5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2205      	movs	r2, #5
 8005b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	887a      	ldrh	r2, [r7, #2]
 8005b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	887a      	ldrh	r2, [r7, #2]
 8005b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	887a      	ldrh	r2, [r7, #2]
 8005b80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	887a      	ldrh	r2, [r7, #2]
 8005b86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b9c:	d802      	bhi.n	8005ba4 <HAL_SPI_TransmitReceive+0xe6>
 8005b9e:	8a3b      	ldrh	r3, [r7, #16]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d908      	bls.n	8005bb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	e007      	b.n	8005bc6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d007      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bec:	d97c      	bls.n	8005ce8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x13e>
 8005bf6:	8a7b      	ldrh	r3, [r7, #18]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d169      	bne.n	8005cd0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c20:	e056      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d11b      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x1aa>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x1aa>
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d113      	bne.n	8005c68 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	881a      	ldrh	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	1c9a      	adds	r2, r3, #2
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d11c      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x1f2>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	b292      	uxth	r2, r2
 8005c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	1c9a      	adds	r2, r3, #2
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cac:	2301      	movs	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cb0:	f7fc f942 	bl	8001f38 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d807      	bhi.n	8005cd0 <HAL_SPI_TransmitReceive+0x212>
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d003      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005cce:	e0fb      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1a3      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x164>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d19d      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x164>
 8005ce6:	e0df      	b.n	8005ea8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x23a>
 8005cf0:	8a7b      	ldrh	r3, [r7, #18]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f040 80cb 	bne.w	8005e8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d912      	bls.n	8005d28 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	881a      	ldrh	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	1c9a      	adds	r2, r3, #2
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b02      	subs	r3, #2
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d26:	e0b2      	b.n	8005e8e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d4e:	e09e      	b.n	8005e8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d134      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x30a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02f      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x30a>
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d12c      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d912      	bls.n	8005d9e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b02      	subs	r3, #2
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d9c:	e012      	b.n	8005dc4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d148      	bne.n	8005e68 <HAL_SPI_TransmitReceive+0x3aa>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d042      	beq.n	8005e68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d923      	bls.n	8005e36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	b292      	uxth	r2, r2
 8005dfa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b02      	subs	r3, #2
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d81f      	bhi.n	8005e64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e32:	605a      	str	r2, [r3, #4]
 8005e34:	e016      	b.n	8005e64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f103 020c 	add.w	r2, r3, #12
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e64:	2301      	movs	r3, #1
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e68:	f7fc f866 	bl	8001f38 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d803      	bhi.n	8005e80 <HAL_SPI_TransmitReceive+0x3c2>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d102      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x3c8>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e8c:	e01c      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f af5b 	bne.w	8005d50 <HAL_SPI_TransmitReceive+0x292>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f47f af54 	bne.w	8005d50 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f9b3 	bl	8006218 <SPI_EndRxTxTransaction>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d006      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60
 8005ec4:	e000      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ef4:	f7fc f820 	bl	8001f38 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f04:	f7fc f818 	bl	8001f38 <HAL_GetTick>
 8005f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f0a:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	015b      	lsls	r3, r3, #5
 8005f10:	0d1b      	lsrs	r3, r3, #20
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1a:	e054      	b.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d050      	beq.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f24:	f7fc f808 	bl	8001f38 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d902      	bls.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d13d      	bne.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d111      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d004      	beq.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f66:	d107      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f80:	d10f      	bne.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e017      	b.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2301      	moveq	r3, #1
 8005fd8:	2300      	movne	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d19b      	bne.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000000 	.word	0x20000000

08005ff4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08a      	sub	sp, #40	; 0x28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006006:	f7fb ff97 	bl	8001f38 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	4413      	add	r3, r2
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006016:	f7fb ff8f 	bl	8001f38 <HAL_GetTick>
 800601a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00da      	lsls	r2, r3, #3
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	0d1b      	lsrs	r3, r3, #20
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800603c:	e060      	b.n	8006100 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006044:	d107      	bne.n	8006056 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006054:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d050      	beq.n	8006100 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800605e:	f7fb ff6b 	bl	8001f38 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	429a      	cmp	r2, r3
 800606c:	d902      	bls.n	8006074 <SPI_WaitFifoStateUntilTimeout+0x80>
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d13d      	bne.n	80060f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006082:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608c:	d111      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006096:	d004      	beq.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d107      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ba:	d10f      	bne.n	80060dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e010      	b.n	8006112 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4013      	ands	r3, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d196      	bne.n	800603e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3728      	adds	r7, #40	; 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000000 	.word	0x20000000

08006120 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006134:	d111      	bne.n	800615a <SPI_EndRxTransaction+0x3a>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613e:	d004      	beq.n	800614a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006148:	d107      	bne.n	800615a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006162:	d112      	bne.n	800618a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff feb8 	bl	8005ee4 <SPI_WaitFlagStateUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d021      	beq.n	80061be <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e03d      	b.n	8006206 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800618a:	4b21      	ldr	r3, [pc, #132]	; (8006210 <SPI_EndRxTransaction+0xf0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a21      	ldr	r2, [pc, #132]	; (8006214 <SPI_EndRxTransaction+0xf4>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	0d5b      	lsrs	r3, r3, #21
 8006196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b80      	cmp	r3, #128	; 0x80
 80061b8:	d0f2      	beq.n	80061a0 <SPI_EndRxTransaction+0x80>
 80061ba:	e000      	b.n	80061be <SPI_EndRxTransaction+0x9e>
        break;
 80061bc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061c6:	d11d      	bne.n	8006204 <SPI_EndRxTransaction+0xe4>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d0:	d004      	beq.n	80061dc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061da:	d113      	bne.n	8006204 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff03 	bl	8005ff4 <SPI_WaitFifoStateUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e000      	b.n	8006206 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000000 	.word	0x20000000
 8006214:	165e9f81 	.word	0x165e9f81

08006218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fedf 	bl	8005ff4 <SPI_WaitFifoStateUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e046      	b.n	80062da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <SPI_EndRxTxTransaction+0xcc>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a25      	ldr	r2, [pc, #148]	; (80062e8 <SPI_EndRxTxTransaction+0xd0>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	0d5b      	lsrs	r3, r3, #21
 8006258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800625c:	fb02 f303 	mul.w	r3, r2, r3
 8006260:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626a:	d112      	bne.n	8006292 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fe34 	bl	8005ee4 <SPI_WaitFlagStateUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006286:	f043 0220 	orr.w	r2, r3, #32
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e023      	b.n	80062da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3b01      	subs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d0f2      	beq.n	8006292 <SPI_EndRxTxTransaction+0x7a>
 80062ac:	e000      	b.n	80062b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80062ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff fe99 	bl	8005ff4 <SPI_WaitFifoStateUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e000      	b.n	80062da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000000 	.word	0x20000000
 80062e8:	165e9f81 	.word	0x165e9f81

080062ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e040      	b.n	8006380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fb fb3c 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f82c 	bl	8006388 <UART_SetConfig>
 8006330:	4603      	mov	r3, r0
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e022      	b.n	8006380 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa84 	bl	8006850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fb0b 	bl	8006994 <UART_CheckIdleState>
 800637e:	4603      	mov	r3, r0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4ba6      	ldr	r3, [pc, #664]	; (800664c <UART_SetConfig+0x2c4>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	6979      	ldr	r1, [r7, #20]
 80063bc:	430b      	orrs	r3, r1
 80063be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a94      	ldr	r2, [pc, #592]	; (8006650 <UART_SetConfig+0x2c8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d120      	bne.n	8006446 <UART_SetConfig+0xbe>
 8006404:	4b93      	ldr	r3, [pc, #588]	; (8006654 <UART_SetConfig+0x2cc>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d816      	bhi.n	8006440 <UART_SetConfig+0xb8>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x90>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	08006435 	.word	0x08006435
 8006420:	0800642f 	.word	0x0800642f
 8006424:	0800643b 	.word	0x0800643b
 8006428:	2301      	movs	r3, #1
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e150      	b.n	80066d0 <UART_SetConfig+0x348>
 800642e:	2302      	movs	r3, #2
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e14d      	b.n	80066d0 <UART_SetConfig+0x348>
 8006434:	2304      	movs	r3, #4
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e14a      	b.n	80066d0 <UART_SetConfig+0x348>
 800643a:	2308      	movs	r3, #8
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e147      	b.n	80066d0 <UART_SetConfig+0x348>
 8006440:	2310      	movs	r3, #16
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e144      	b.n	80066d0 <UART_SetConfig+0x348>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a83      	ldr	r2, [pc, #524]	; (8006658 <UART_SetConfig+0x2d0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d132      	bne.n	80064b6 <UART_SetConfig+0x12e>
 8006450:	4b80      	ldr	r3, [pc, #512]	; (8006654 <UART_SetConfig+0x2cc>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d828      	bhi.n	80064b0 <UART_SetConfig+0x128>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <UART_SetConfig+0xdc>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006499 	.word	0x08006499
 8006468:	080064b1 	.word	0x080064b1
 800646c:	080064b1 	.word	0x080064b1
 8006470:	080064b1 	.word	0x080064b1
 8006474:	080064a5 	.word	0x080064a5
 8006478:	080064b1 	.word	0x080064b1
 800647c:	080064b1 	.word	0x080064b1
 8006480:	080064b1 	.word	0x080064b1
 8006484:	0800649f 	.word	0x0800649f
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064ab 	.word	0x080064ab
 8006498:	2300      	movs	r3, #0
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e118      	b.n	80066d0 <UART_SetConfig+0x348>
 800649e:	2302      	movs	r3, #2
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e115      	b.n	80066d0 <UART_SetConfig+0x348>
 80064a4:	2304      	movs	r3, #4
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e112      	b.n	80066d0 <UART_SetConfig+0x348>
 80064aa:	2308      	movs	r3, #8
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e10f      	b.n	80066d0 <UART_SetConfig+0x348>
 80064b0:	2310      	movs	r3, #16
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e10c      	b.n	80066d0 <UART_SetConfig+0x348>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a68      	ldr	r2, [pc, #416]	; (800665c <UART_SetConfig+0x2d4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d120      	bne.n	8006502 <UART_SetConfig+0x17a>
 80064c0:	4b64      	ldr	r3, [pc, #400]	; (8006654 <UART_SetConfig+0x2cc>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064ca:	2b30      	cmp	r3, #48	; 0x30
 80064cc:	d013      	beq.n	80064f6 <UART_SetConfig+0x16e>
 80064ce:	2b30      	cmp	r3, #48	; 0x30
 80064d0:	d814      	bhi.n	80064fc <UART_SetConfig+0x174>
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d009      	beq.n	80064ea <UART_SetConfig+0x162>
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	d810      	bhi.n	80064fc <UART_SetConfig+0x174>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <UART_SetConfig+0x15c>
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d006      	beq.n	80064f0 <UART_SetConfig+0x168>
 80064e2:	e00b      	b.n	80064fc <UART_SetConfig+0x174>
 80064e4:	2300      	movs	r3, #0
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e0f2      	b.n	80066d0 <UART_SetConfig+0x348>
 80064ea:	2302      	movs	r3, #2
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e0ef      	b.n	80066d0 <UART_SetConfig+0x348>
 80064f0:	2304      	movs	r3, #4
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e0ec      	b.n	80066d0 <UART_SetConfig+0x348>
 80064f6:	2308      	movs	r3, #8
 80064f8:	77fb      	strb	r3, [r7, #31]
 80064fa:	e0e9      	b.n	80066d0 <UART_SetConfig+0x348>
 80064fc:	2310      	movs	r3, #16
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	e0e6      	b.n	80066d0 <UART_SetConfig+0x348>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a56      	ldr	r2, [pc, #344]	; (8006660 <UART_SetConfig+0x2d8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d120      	bne.n	800654e <UART_SetConfig+0x1c6>
 800650c:	4b51      	ldr	r3, [pc, #324]	; (8006654 <UART_SetConfig+0x2cc>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006516:	2bc0      	cmp	r3, #192	; 0xc0
 8006518:	d013      	beq.n	8006542 <UART_SetConfig+0x1ba>
 800651a:	2bc0      	cmp	r3, #192	; 0xc0
 800651c:	d814      	bhi.n	8006548 <UART_SetConfig+0x1c0>
 800651e:	2b80      	cmp	r3, #128	; 0x80
 8006520:	d009      	beq.n	8006536 <UART_SetConfig+0x1ae>
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	d810      	bhi.n	8006548 <UART_SetConfig+0x1c0>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <UART_SetConfig+0x1a8>
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d006      	beq.n	800653c <UART_SetConfig+0x1b4>
 800652e:	e00b      	b.n	8006548 <UART_SetConfig+0x1c0>
 8006530:	2300      	movs	r3, #0
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e0cc      	b.n	80066d0 <UART_SetConfig+0x348>
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e0c9      	b.n	80066d0 <UART_SetConfig+0x348>
 800653c:	2304      	movs	r3, #4
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e0c6      	b.n	80066d0 <UART_SetConfig+0x348>
 8006542:	2308      	movs	r3, #8
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e0c3      	b.n	80066d0 <UART_SetConfig+0x348>
 8006548:	2310      	movs	r3, #16
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e0c0      	b.n	80066d0 <UART_SetConfig+0x348>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a44      	ldr	r2, [pc, #272]	; (8006664 <UART_SetConfig+0x2dc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d125      	bne.n	80065a4 <UART_SetConfig+0x21c>
 8006558:	4b3e      	ldr	r3, [pc, #248]	; (8006654 <UART_SetConfig+0x2cc>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006566:	d017      	beq.n	8006598 <UART_SetConfig+0x210>
 8006568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656c:	d817      	bhi.n	800659e <UART_SetConfig+0x216>
 800656e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006572:	d00b      	beq.n	800658c <UART_SetConfig+0x204>
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d811      	bhi.n	800659e <UART_SetConfig+0x216>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <UART_SetConfig+0x1fe>
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d006      	beq.n	8006592 <UART_SetConfig+0x20a>
 8006584:	e00b      	b.n	800659e <UART_SetConfig+0x216>
 8006586:	2300      	movs	r3, #0
 8006588:	77fb      	strb	r3, [r7, #31]
 800658a:	e0a1      	b.n	80066d0 <UART_SetConfig+0x348>
 800658c:	2302      	movs	r3, #2
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e09e      	b.n	80066d0 <UART_SetConfig+0x348>
 8006592:	2304      	movs	r3, #4
 8006594:	77fb      	strb	r3, [r7, #31]
 8006596:	e09b      	b.n	80066d0 <UART_SetConfig+0x348>
 8006598:	2308      	movs	r3, #8
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e098      	b.n	80066d0 <UART_SetConfig+0x348>
 800659e:	2310      	movs	r3, #16
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e095      	b.n	80066d0 <UART_SetConfig+0x348>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2f      	ldr	r2, [pc, #188]	; (8006668 <UART_SetConfig+0x2e0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d125      	bne.n	80065fa <UART_SetConfig+0x272>
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <UART_SetConfig+0x2cc>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065bc:	d017      	beq.n	80065ee <UART_SetConfig+0x266>
 80065be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065c2:	d817      	bhi.n	80065f4 <UART_SetConfig+0x26c>
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c8:	d00b      	beq.n	80065e2 <UART_SetConfig+0x25a>
 80065ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ce:	d811      	bhi.n	80065f4 <UART_SetConfig+0x26c>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <UART_SetConfig+0x254>
 80065d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d8:	d006      	beq.n	80065e8 <UART_SetConfig+0x260>
 80065da:	e00b      	b.n	80065f4 <UART_SetConfig+0x26c>
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e076      	b.n	80066d0 <UART_SetConfig+0x348>
 80065e2:	2302      	movs	r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e073      	b.n	80066d0 <UART_SetConfig+0x348>
 80065e8:	2304      	movs	r3, #4
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e070      	b.n	80066d0 <UART_SetConfig+0x348>
 80065ee:	2308      	movs	r3, #8
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e06d      	b.n	80066d0 <UART_SetConfig+0x348>
 80065f4:	2310      	movs	r3, #16
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e06a      	b.n	80066d0 <UART_SetConfig+0x348>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1b      	ldr	r2, [pc, #108]	; (800666c <UART_SetConfig+0x2e4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d138      	bne.n	8006676 <UART_SetConfig+0x2ee>
 8006604:	4b13      	ldr	r3, [pc, #76]	; (8006654 <UART_SetConfig+0x2cc>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800660e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006612:	d017      	beq.n	8006644 <UART_SetConfig+0x2bc>
 8006614:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006618:	d82a      	bhi.n	8006670 <UART_SetConfig+0x2e8>
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	d00b      	beq.n	8006638 <UART_SetConfig+0x2b0>
 8006620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006624:	d824      	bhi.n	8006670 <UART_SetConfig+0x2e8>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <UART_SetConfig+0x2aa>
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d006      	beq.n	800663e <UART_SetConfig+0x2b6>
 8006630:	e01e      	b.n	8006670 <UART_SetConfig+0x2e8>
 8006632:	2300      	movs	r3, #0
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e04b      	b.n	80066d0 <UART_SetConfig+0x348>
 8006638:	2302      	movs	r3, #2
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e048      	b.n	80066d0 <UART_SetConfig+0x348>
 800663e:	2304      	movs	r3, #4
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e045      	b.n	80066d0 <UART_SetConfig+0x348>
 8006644:	2308      	movs	r3, #8
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e042      	b.n	80066d0 <UART_SetConfig+0x348>
 800664a:	bf00      	nop
 800664c:	efff69f3 	.word	0xefff69f3
 8006650:	40011000 	.word	0x40011000
 8006654:	40023800 	.word	0x40023800
 8006658:	40004400 	.word	0x40004400
 800665c:	40004800 	.word	0x40004800
 8006660:	40004c00 	.word	0x40004c00
 8006664:	40005000 	.word	0x40005000
 8006668:	40011400 	.word	0x40011400
 800666c:	40007800 	.word	0x40007800
 8006670:	2310      	movs	r3, #16
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e02c      	b.n	80066d0 <UART_SetConfig+0x348>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a72      	ldr	r2, [pc, #456]	; (8006844 <UART_SetConfig+0x4bc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d125      	bne.n	80066cc <UART_SetConfig+0x344>
 8006680:	4b71      	ldr	r3, [pc, #452]	; (8006848 <UART_SetConfig+0x4c0>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800668a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800668e:	d017      	beq.n	80066c0 <UART_SetConfig+0x338>
 8006690:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006694:	d817      	bhi.n	80066c6 <UART_SetConfig+0x33e>
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669a:	d00b      	beq.n	80066b4 <UART_SetConfig+0x32c>
 800669c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a0:	d811      	bhi.n	80066c6 <UART_SetConfig+0x33e>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <UART_SetConfig+0x326>
 80066a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066aa:	d006      	beq.n	80066ba <UART_SetConfig+0x332>
 80066ac:	e00b      	b.n	80066c6 <UART_SetConfig+0x33e>
 80066ae:	2300      	movs	r3, #0
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e00d      	b.n	80066d0 <UART_SetConfig+0x348>
 80066b4:	2302      	movs	r3, #2
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e00a      	b.n	80066d0 <UART_SetConfig+0x348>
 80066ba:	2304      	movs	r3, #4
 80066bc:	77fb      	strb	r3, [r7, #31]
 80066be:	e007      	b.n	80066d0 <UART_SetConfig+0x348>
 80066c0:	2308      	movs	r3, #8
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e004      	b.n	80066d0 <UART_SetConfig+0x348>
 80066c6:	2310      	movs	r3, #16
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e001      	b.n	80066d0 <UART_SetConfig+0x348>
 80066cc:	2310      	movs	r3, #16
 80066ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d8:	d15b      	bne.n	8006792 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066da:	7ffb      	ldrb	r3, [r7, #31]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d828      	bhi.n	8006732 <UART_SetConfig+0x3aa>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <UART_SetConfig+0x360>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800670d 	.word	0x0800670d
 80066ec:	08006715 	.word	0x08006715
 80066f0:	0800671d 	.word	0x0800671d
 80066f4:	08006733 	.word	0x08006733
 80066f8:	08006723 	.word	0x08006723
 80066fc:	08006733 	.word	0x08006733
 8006700:	08006733 	.word	0x08006733
 8006704:	08006733 	.word	0x08006733
 8006708:	0800672b 	.word	0x0800672b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fe fb1c 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 8006710:	61b8      	str	r0, [r7, #24]
        break;
 8006712:	e013      	b.n	800673c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006714:	f7fe fb2c 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 8006718:	61b8      	str	r0, [r7, #24]
        break;
 800671a:	e00f      	b.n	800673c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800671c:	4b4b      	ldr	r3, [pc, #300]	; (800684c <UART_SetConfig+0x4c4>)
 800671e:	61bb      	str	r3, [r7, #24]
        break;
 8006720:	e00c      	b.n	800673c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006722:	f7fe f9ff 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8006726:	61b8      	str	r0, [r7, #24]
        break;
 8006728:	e008      	b.n	800673c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672e:	61bb      	str	r3, [r7, #24]
        break;
 8006730:	e004      	b.n	800673c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	77bb      	strb	r3, [r7, #30]
        break;
 800673a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d074      	beq.n	800682c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	441a      	add	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	fbb2 f3f3 	udiv	r3, r2, r3
 8006756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b0f      	cmp	r3, #15
 800675c:	d916      	bls.n	800678c <UART_SetConfig+0x404>
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006764:	d212      	bcs.n	800678c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f023 030f 	bic.w	r3, r3, #15
 800676e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	b29b      	uxth	r3, r3
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	b29a      	uxth	r2, r3
 800677c:	89fb      	ldrh	r3, [r7, #14]
 800677e:	4313      	orrs	r3, r2
 8006780:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	89fa      	ldrh	r2, [r7, #14]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	e04f      	b.n	800682c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	77bb      	strb	r3, [r7, #30]
 8006790:	e04c      	b.n	800682c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006792:	7ffb      	ldrb	r3, [r7, #31]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d828      	bhi.n	80067ea <UART_SetConfig+0x462>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x418>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067db 	.word	0x080067db
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fe fac0 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61b8      	str	r0, [r7, #24]
        break;
 80067ca:	e013      	b.n	80067f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe fad0 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 80067d0:	61b8      	str	r0, [r7, #24]
        break;
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <UART_SetConfig+0x4c4>)
 80067d6:	61bb      	str	r3, [r7, #24]
        break;
 80067d8:	e00c      	b.n	80067f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fe f9a3 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 80067de:	61b8      	str	r0, [r7, #24]
        break;
 80067e0:	e008      	b.n	80067f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e6:	61bb      	str	r3, [r7, #24]
        break;
 80067e8:	e004      	b.n	80067f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77bb      	strb	r3, [r7, #30]
        break;
 80067f2:	bf00      	nop
    }

    if (pclk != 0U)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d018      	beq.n	800682c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	085a      	lsrs	r2, r3, #1
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	441a      	add	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b0f      	cmp	r3, #15
 8006812:	d909      	bls.n	8006828 <UART_SetConfig+0x4a0>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681a:	d205      	bcs.n	8006828 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	e001      	b.n	800682c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006838:	7fbb      	ldrb	r3, [r7, #30]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40007c00 	.word	0x40007c00
 8006848:	40023800 	.word	0x40023800
 800684c:	00f42400 	.word	0x00f42400

08006850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01a      	beq.n	8006966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694e:	d10a      	bne.n	8006966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af02      	add	r7, sp, #8
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069a4:	f7fb fac8 	bl	8001f38 <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d10e      	bne.n	80069d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f81b 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e011      	b.n	80069fa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b09c      	sub	sp, #112	; 0x70
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a12:	e0a7      	b.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	f000 80a3 	beq.w	8006b64 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fb fa8b 	bl	8001f38 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d13f      	bne.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a48:	667b      	str	r3, [r7, #100]	; 0x64
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e6      	bne.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a86:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e068      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d050      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad0:	d148      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ada:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
 8006afc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b2e:	623a      	str	r2, [r7, #32]
 8006b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	69f9      	ldr	r1, [r7, #28]
 8006b34:	6a3a      	ldr	r2, [r7, #32]
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e010      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69da      	ldr	r2, [r3, #28]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	f43f af48 	beq.w	8006a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3770      	adds	r7, #112	; 0x70
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b90:	b084      	sub	sp, #16
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	f107 001c 	add.w	r0, r7, #28
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d126      	bne.n	8006bf6 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	4b38      	ldr	r3, [pc, #224]	; (8006c9c <USB_CoreInit+0x10c>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f043 0210 	orr.w	r2, r3, #16
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d105      	bne.n	8006bea <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fc28 	bl	8008440 <USB_CoreReset>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
 8006bf4:	e03a      	b.n	8006c6c <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d126      	bne.n	8006c4a <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <USB_CoreInit+0x10c>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f023 0210 	bic.w	r2, r3, #16
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fbfe 	bl	8008440 <USB_CoreReset>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e010      	b.n	8006c6c <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fbf2 	bl	8008440 <USB_CoreReset>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10b      	bne.n	8006c8a <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f043 0206 	orr.w	r2, r3, #6
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c96:	b004      	add	sp, #16
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	ffbdffbf 	.word	0xffbdffbf

08006ca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d165      	bne.n	8006d80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	; (8006dbc <USB_SetTurnaroundTime+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d906      	bls.n	8006cca <USB_SetTurnaroundTime+0x2a>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a40      	ldr	r2, [pc, #256]	; (8006dc0 <USB_SetTurnaroundTime+0x120>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d202      	bcs.n	8006cca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cc4:	230f      	movs	r3, #15
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e062      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a3c      	ldr	r2, [pc, #240]	; (8006dc0 <USB_SetTurnaroundTime+0x120>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d306      	bcc.n	8006ce0 <USB_SetTurnaroundTime+0x40>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a3b      	ldr	r2, [pc, #236]	; (8006dc4 <USB_SetTurnaroundTime+0x124>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d202      	bcs.n	8006ce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cda:	230e      	movs	r3, #14
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e057      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <USB_SetTurnaroundTime+0x124>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d306      	bcc.n	8006cf6 <USB_SetTurnaroundTime+0x56>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4a37      	ldr	r2, [pc, #220]	; (8006dc8 <USB_SetTurnaroundTime+0x128>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d202      	bcs.n	8006cf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cf0:	230d      	movs	r3, #13
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e04c      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a33      	ldr	r2, [pc, #204]	; (8006dc8 <USB_SetTurnaroundTime+0x128>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d306      	bcc.n	8006d0c <USB_SetTurnaroundTime+0x6c>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4a32      	ldr	r2, [pc, #200]	; (8006dcc <USB_SetTurnaroundTime+0x12c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d802      	bhi.n	8006d0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d06:	230c      	movs	r3, #12
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	e041      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <USB_SetTurnaroundTime+0x12c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d906      	bls.n	8006d22 <USB_SetTurnaroundTime+0x82>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4a2e      	ldr	r2, [pc, #184]	; (8006dd0 <USB_SetTurnaroundTime+0x130>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d802      	bhi.n	8006d22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d1c:	230b      	movs	r3, #11
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e036      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <USB_SetTurnaroundTime+0x130>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d906      	bls.n	8006d38 <USB_SetTurnaroundTime+0x98>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4a29      	ldr	r2, [pc, #164]	; (8006dd4 <USB_SetTurnaroundTime+0x134>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d802      	bhi.n	8006d38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d32:	230a      	movs	r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e02b      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <USB_SetTurnaroundTime+0x134>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d906      	bls.n	8006d4e <USB_SetTurnaroundTime+0xae>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <USB_SetTurnaroundTime+0x138>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d202      	bcs.n	8006d4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d48:	2309      	movs	r3, #9
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	e020      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <USB_SetTurnaroundTime+0x138>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d306      	bcc.n	8006d64 <USB_SetTurnaroundTime+0xc4>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <USB_SetTurnaroundTime+0x13c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d802      	bhi.n	8006d64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d5e:	2308      	movs	r3, #8
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e015      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <USB_SetTurnaroundTime+0x13c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d906      	bls.n	8006d7a <USB_SetTurnaroundTime+0xda>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <USB_SetTurnaroundTime+0x140>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d202      	bcs.n	8006d7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d74:	2307      	movs	r3, #7
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e00a      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e007      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d86:	2309      	movs	r3, #9
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e001      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d8c:	2309      	movs	r3, #9
 8006d8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	00d8acbf 	.word	0x00d8acbf
 8006dc0:	00e4e1c0 	.word	0x00e4e1c0
 8006dc4:	00f42400 	.word	0x00f42400
 8006dc8:	01067380 	.word	0x01067380
 8006dcc:	011a499f 	.word	0x011a499f
 8006dd0:	01312cff 	.word	0x01312cff
 8006dd4:	014ca43f 	.word	0x014ca43f
 8006dd8:	016e3600 	.word	0x016e3600
 8006ddc:	01a6ab1f 	.word	0x01a6ab1f
 8006de0:	01e84800 	.word	0x01e84800

08006de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d115      	bne.n	8006e76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e56:	2001      	movs	r0, #1
 8006e58:	f7fb f87a 	bl	8001f50 <HAL_Delay>
      ms++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fa5b 	bl	800831e <USB_GetMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d01e      	beq.n	8006eac <USB_SetCurrentMode+0x84>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b31      	cmp	r3, #49	; 0x31
 8006e72:	d9f0      	bls.n	8006e56 <USB_SetCurrentMode+0x2e>
 8006e74:	e01a      	b.n	8006eac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d115      	bne.n	8006ea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f7fb f861 	bl	8001f50 <HAL_Delay>
      ms++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fa42 	bl	800831e <USB_GetMode>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <USB_SetCurrentMode+0x84>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b31      	cmp	r3, #49	; 0x31
 8006ea4:	d9f0      	bls.n	8006e88 <USB_SetCurrentMode+0x60>
 8006ea6:	e001      	b.n	8006eac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e005      	b.n	8006eb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b32      	cmp	r3, #50	; 0x32
 8006eb0:	d101      	bne.n	8006eb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	e009      	b.n	8006ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3340      	adds	r3, #64	; 0x40
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b0e      	cmp	r3, #14
 8006ef8:	d9f2      	bls.n	8006ee0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11c      	bne.n	8006f3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f0e:	f043 0302 	orr.w	r3, r3, #2
 8006f12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e005      	b.n	8006f46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f60:	461a      	mov	r2, r3
 8006f62:	680b      	ldr	r3, [r1, #0]
 8006f64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d10c      	bne.n	8006f86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f72:	2100      	movs	r1, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f975 	bl	8007264 <USB_SetDevSpeed>
 8006f7a:	e018      	b.n	8006fae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f970 	bl	8007264 <USB_SetDevSpeed>
 8006f84:	e013      	b.n	8006fae <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d10c      	bne.n	8006fa6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f92:	2100      	movs	r1, #0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f965 	bl	8007264 <USB_SetDevSpeed>
 8006f9a:	e008      	b.n	8006fae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f960 	bl	8007264 <USB_SetDevSpeed>
 8006fa4:	e003      	b.n	8006fae <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fa6:	2103      	movs	r1, #3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f95b 	bl	8007264 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fae:	2110      	movs	r1, #16
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8f3 	bl	800719c <USB_FlushTxFifo>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f91f 	bl	8007204 <USB_FlushRxFifo>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	e043      	b.n	8007082 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007010:	d118      	bne.n	8007044 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007024:	461a      	mov	r2, r3
 8007026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e013      	b.n	8007056 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	461a      	mov	r2, r3
 800703c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e008      	b.n	8007056 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007062:	461a      	mov	r2, r3
 8007064:	2300      	movs	r3, #0
 8007066:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	461a      	mov	r2, r3
 8007076:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800707a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	3301      	adds	r3, #1
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	429a      	cmp	r2, r3
 8007088:	d3b7      	bcc.n	8006ffa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	e043      	b.n	8007118 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a6:	d118      	bne.n	80070da <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	461a      	mov	r2, r3
 80070bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e013      	b.n	80070ec <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d0:	461a      	mov	r2, r3
 80070d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	e008      	b.n	80070ec <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	461a      	mov	r2, r3
 80070e8:	2300      	movs	r3, #0
 80070ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	461a      	mov	r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	461a      	mov	r2, r3
 800710c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007110:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3301      	adds	r3, #1
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	429a      	cmp	r2, r3
 800711e:	d3b7      	bcc.n	8007090 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007132:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007140:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	2b00      	cmp	r3, #0
 8007146:	d105      	bne.n	8007154 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	f043 0210 	orr.w	r2, r3, #16
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <USB_DevInit+0x2d4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d105      	bne.n	8007184 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <USB_DevInit+0x2d8>)
 800717e:	4313      	orrs	r3, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007190:	b004      	add	sp, #16
 8007192:	4770      	bx	lr
 8007194:	803c3800 	.word	0x803c3800
 8007198:	40000004 	.word	0x40000004

0800719c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <USB_FlushTxFifo+0x64>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d901      	bls.n	80071bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01b      	b.n	80071f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	daf2      	bge.n	80071aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	019b      	lsls	r3, r3, #6
 80071cc:	f043 0220 	orr.w	r2, r3, #32
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a08      	ldr	r2, [pc, #32]	; (8007200 <USB_FlushTxFifo+0x64>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e006      	b.n	80071f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d0f0      	beq.n	80071d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	00030d40 	.word	0x00030d40

08007204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a11      	ldr	r2, [pc, #68]	; (8007260 <USB_FlushRxFifo+0x5c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d901      	bls.n	8007222 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e018      	b.n	8007254 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	daf2      	bge.n	8007210 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2210      	movs	r2, #16
 8007232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <USB_FlushRxFifo+0x5c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d901      	bls.n	8007246 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e006      	b.n	8007254 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b10      	cmp	r3, #16
 8007250:	d0f0      	beq.n	8007234 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	00030d40 	.word	0x00030d40

08007264 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007284:	4313      	orrs	r3, r2
 8007286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007296:	b480      	push	{r7}
 8007298:	b087      	sub	sp, #28
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0306 	and.w	r3, r3, #6
 80072ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d102      	bne.n	80072bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
 80072ba:	e00a      	b.n	80072d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d002      	beq.n	80072c8 <USB_GetDevSpeed+0x32>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d102      	bne.n	80072ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072c8:	2302      	movs	r3, #2
 80072ca:	75fb      	strb	r3, [r7, #23]
 80072cc:	e001      	b.n	80072d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072ce:	230f      	movs	r3, #15
 80072d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d139      	bne.n	8007370 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	69da      	ldr	r2, [r3, #28]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	f003 030f 	and.w	r3, r3, #15
 800730c:	2101      	movs	r1, #1
 800730e:	fa01 f303 	lsl.w	r3, r1, r3
 8007312:	b29b      	uxth	r3, r3
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800731a:	4313      	orrs	r3, r2
 800731c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d153      	bne.n	80073dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	791b      	ldrb	r3, [r3, #4]
 800734e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007350:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	059b      	lsls	r3, r3, #22
 8007356:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007358:	431a      	orrs	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	0159      	lsls	r1, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	440b      	add	r3, r1
 8007362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007366:	4619      	mov	r1, r3
 8007368:	4b20      	ldr	r3, [pc, #128]	; (80073ec <USB_ActivateEndpoint+0x10c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
 800736e:	e035      	b.n	80073dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	2101      	movs	r1, #1
 8007382:	fa01 f303 	lsl.w	r3, r1, r3
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	68f9      	ldr	r1, [r7, #12]
 800738a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738e:	4313      	orrs	r3, r2
 8007390:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d119      	bne.n	80073dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	791b      	ldrb	r3, [r3, #4]
 80073c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073c4:	430b      	orrs	r3, r1
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	0159      	lsls	r1, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	4619      	mov	r1, r3
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <USB_ActivateEndpoint+0x10c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	10008000 	.word	0x10008000

080073f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d161      	bne.n	80074d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800741e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007422:	d11f      	bne.n	8007464 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007442:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007462:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f303 	lsl.w	r3, r1, r3
 800747a:	b29b      	uxth	r3, r3
 800747c:	43db      	mvns	r3, r3
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007484:	4013      	ands	r3, r2
 8007486:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748e:	69da      	ldr	r2, [r3, #28]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 030f 	and.w	r3, r3, #15
 8007498:	2101      	movs	r1, #1
 800749a:	fa01 f303 	lsl.w	r3, r1, r3
 800749e:	b29b      	uxth	r3, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a8:	4013      	ands	r3, r2
 80074aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	0159      	lsls	r1, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	440b      	add	r3, r1
 80074c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c6:	4619      	mov	r1, r3
 80074c8:	4b35      	ldr	r3, [pc, #212]	; (80075a0 <USB_DeactivateEndpoint+0x1b0>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	600b      	str	r3, [r1, #0]
 80074ce:	e060      	b.n	8007592 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074e6:	d11f      	bne.n	8007528 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007506:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	2101      	movs	r1, #1
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	43db      	mvns	r3, r3
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007548:	4013      	ands	r3, r2
 800754a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007552:	69da      	ldr	r2, [r3, #28]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f003 030f 	and.w	r3, r3, #15
 800755c:	2101      	movs	r1, #1
 800755e:	fa01 f303 	lsl.w	r3, r1, r3
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	43db      	mvns	r3, r3
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800756c:	4013      	ands	r3, r2
 800756e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	0159      	lsls	r1, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	440b      	add	r3, r1
 8007586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758a:	4619      	mov	r1, r3
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <USB_DeactivateEndpoint+0x1b4>)
 800758e:	4013      	ands	r3, r2
 8007590:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	ec337800 	.word	0xec337800
 80075a4:	eff37800 	.word	0xeff37800

080075a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	f040 8163 	bne.w	8007890 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d132      	bne.n	8007638 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	0159      	lsls	r1, r3, #5
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	440b      	add	r3, r1
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	4619      	mov	r1, r3
 80075ee:	4ba5      	ldr	r3, [pc, #660]	; (8007884 <USB_EPStartXfer+0x2dc>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007612:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	0159      	lsls	r1, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	440b      	add	r3, r1
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	4619      	mov	r1, r3
 8007630:	4b95      	ldr	r3, [pc, #596]	; (8007888 <USB_EPStartXfer+0x2e0>)
 8007632:	4013      	ands	r3, r2
 8007634:	610b      	str	r3, [r1, #16]
 8007636:	e074      	b.n	8007722 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	0159      	lsls	r1, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	440b      	add	r3, r1
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	4619      	mov	r1, r3
 8007654:	4b8c      	ldr	r3, [pc, #560]	; (8007888 <USB_EPStartXfer+0x2e0>)
 8007656:	4013      	ands	r3, r2
 8007658:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	0159      	lsls	r1, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	440b      	add	r3, r1
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	4619      	mov	r1, r3
 8007676:	4b83      	ldr	r3, [pc, #524]	; (8007884 <USB_EPStartXfer+0x2dc>)
 8007678:	4013      	ands	r3, r2
 800767a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6999      	ldr	r1, [r3, #24]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	440b      	add	r3, r1
 8007694:	1e59      	subs	r1, r3, #1
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	fbb1 f3f3 	udiv	r3, r1, r3
 800769e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076a0:	4b7a      	ldr	r3, [pc, #488]	; (800788c <USB_EPStartXfer+0x2e4>)
 80076a2:	400b      	ands	r3, r1
 80076a4:	69b9      	ldr	r1, [r7, #24]
 80076a6:	0148      	lsls	r0, r1, #5
 80076a8:	69f9      	ldr	r1, [r7, #28]
 80076aa:	4401      	add	r1, r0
 80076ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076b0:	4313      	orrs	r3, r2
 80076b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ca:	69b9      	ldr	r1, [r7, #24]
 80076cc:	0148      	lsls	r0, r1, #5
 80076ce:	69f9      	ldr	r1, [r7, #28]
 80076d0:	4401      	add	r1, r0
 80076d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076d6:	4313      	orrs	r3, r2
 80076d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	791b      	ldrb	r3, [r3, #4]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d11f      	bne.n	8007722 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007700:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007720:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d14b      	bne.n	80077c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d128      	bne.n	800779e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007758:	2b00      	cmp	r3, #0
 800775a:	d110      	bne.n	800777e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e00f      	b.n	800779e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e137      	b.n	8007a30 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	791b      	ldrb	r3, [r3, #4]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d015      	beq.n	8007814 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 811f 	beq.w	8007a30 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	2101      	movs	r1, #1
 8007804:	fa01 f303 	lsl.w	r3, r1, r3
 8007808:	69f9      	ldr	r1, [r7, #28]
 800780a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780e:	4313      	orrs	r3, r2
 8007810:	634b      	str	r3, [r1, #52]	; 0x34
 8007812:	e10d      	b.n	8007a30 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d110      	bne.n	8007846 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	e00f      	b.n	8007866 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007864:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6919      	ldr	r1, [r3, #16]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	781a      	ldrb	r2, [r3, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	b298      	uxth	r0, r3
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4603      	mov	r3, r0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 faea 	bl	8007e54 <USB_WritePacket>
 8007880:	e0d6      	b.n	8007a30 <USB_EPStartXfer+0x488>
 8007882:	bf00      	nop
 8007884:	e007ffff 	.word	0xe007ffff
 8007888:	fff80000 	.word	0xfff80000
 800788c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	0159      	lsls	r1, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	440b      	add	r3, r1
 80078a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078aa:	4619      	mov	r1, r3
 80078ac:	4b63      	ldr	r3, [pc, #396]	; (8007a3c <USB_EPStartXfer+0x494>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	0159      	lsls	r1, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	440b      	add	r3, r1
 80078c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078cc:	4619      	mov	r1, r3
 80078ce:	4b5c      	ldr	r3, [pc, #368]	; (8007a40 <USB_EPStartXfer+0x498>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d123      	bne.n	8007924 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	0148      	lsls	r0, r1, #5
 80078f6:	69f9      	ldr	r1, [r7, #28]
 80078f8:	4401      	add	r1, r0
 80078fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007920:	6113      	str	r3, [r2, #16]
 8007922:	e037      	b.n	8007994 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4413      	add	r3, r2
 800792e:	1e5a      	subs	r2, r3, #1
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	fbb2 f3f3 	udiv	r3, r2, r3
 8007938:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	8afa      	ldrh	r2, [r7, #22]
 8007940:	fb03 f202 	mul.w	r2, r3, r2
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007954:	691a      	ldr	r2, [r3, #16]
 8007956:	8afb      	ldrh	r3, [r7, #22]
 8007958:	04d9      	lsls	r1, r3, #19
 800795a:	4b3a      	ldr	r3, [pc, #232]	; (8007a44 <USB_EPStartXfer+0x49c>)
 800795c:	400b      	ands	r3, r1
 800795e:	69b9      	ldr	r1, [r7, #24]
 8007960:	0148      	lsls	r0, r1, #5
 8007962:	69f9      	ldr	r1, [r7, #28]
 8007964:	4401      	add	r1, r0
 8007966:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800796a:	4313      	orrs	r3, r2
 800796c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007984:	69b9      	ldr	r1, [r7, #24]
 8007986:	0148      	lsls	r0, r1, #5
 8007988:	69f9      	ldr	r1, [r7, #28]
 800798a:	4401      	add	r1, r0
 800798c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007990:	4313      	orrs	r3, r2
 8007992:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10d      	bne.n	80079b6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6919      	ldr	r1, [r3, #16]
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b2:	460a      	mov	r2, r1
 80079b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	791b      	ldrb	r3, [r3, #4]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d128      	bne.n	8007a10 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e00f      	b.n	8007a10 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	fff80000 	.word	0xfff80000
 8007a40:	e007ffff 	.word	0xe007ffff
 8007a44:	1ff80000 	.word	0x1ff80000

08007a48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	f040 80ce 	bne.w	8007c06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d132      	bne.n	8007ad8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	0159      	lsls	r1, r3, #5
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	440b      	add	r3, r1
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4b9a      	ldr	r3, [pc, #616]	; (8007cf8 <USB_EP0StartXfer+0x2b0>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	0159      	lsls	r1, r3, #5
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	440b      	add	r3, r1
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4b8a      	ldr	r3, [pc, #552]	; (8007cfc <USB_EP0StartXfer+0x2b4>)
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	610b      	str	r3, [r1, #16]
 8007ad6:	e04e      	b.n	8007b76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	0159      	lsls	r1, r3, #5
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	440b      	add	r3, r1
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	4619      	mov	r1, r3
 8007af4:	4b81      	ldr	r3, [pc, #516]	; (8007cfc <USB_EP0StartXfer+0x2b4>)
 8007af6:	4013      	ands	r3, r2
 8007af8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	0159      	lsls	r1, r3, #5
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	4619      	mov	r1, r3
 8007b16:	4b78      	ldr	r3, [pc, #480]	; (8007cf8 <USB_EP0StartXfer+0x2b0>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d903      	bls.n	8007b30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b66:	6939      	ldr	r1, [r7, #16]
 8007b68:	0148      	lsls	r0, r1, #5
 8007b6a:	6979      	ldr	r1, [r7, #20]
 8007b6c:	4401      	add	r1, r0
 8007b6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b72:	4313      	orrs	r3, r2
 8007b74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d11e      	bne.n	8007bba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	461a      	mov	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	0151      	lsls	r1, r2, #5
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	440a      	add	r2, r1
 8007bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	e097      	b.n	8007cea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8083 	beq.w	8007cea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfa:	6979      	ldr	r1, [r7, #20]
 8007bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c00:	4313      	orrs	r3, r2
 8007c02:	634b      	str	r3, [r1, #52]	; 0x34
 8007c04:	e071      	b.n	8007cea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	0159      	lsls	r1, r3, #5
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	440b      	add	r3, r1
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	4619      	mov	r1, r3
 8007c22:	4b36      	ldr	r3, [pc, #216]	; (8007cfc <USB_EP0StartXfer+0x2b4>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	0159      	lsls	r1, r3, #5
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	4619      	mov	r1, r3
 8007c44:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <USB_EP0StartXfer+0x2b0>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c98:	6939      	ldr	r1, [r7, #16]
 8007c9a:	0148      	lsls	r0, r1, #5
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	4401      	add	r1, r0
 8007ca0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d10d      	bne.n	8007cca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6919      	ldr	r1, [r3, #16]
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	e007ffff 	.word	0xe007ffff
 8007cfc:	fff80000 	.word	0xfff80000

08007d00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d14a      	bne.n	8007db4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d36:	f040 8086 	bne.w	8007e46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	7812      	ldrb	r2, [r2, #0]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3301      	adds	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d902      	bls.n	8007d98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
          break;
 8007d96:	e056      	b.n	8007e46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db0:	d0e7      	beq.n	8007d82 <USB_EPStopXfer+0x82>
 8007db2:	e048      	b.n	8007e46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dcc:	d13b      	bne.n	8007e46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007df0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	7812      	ldrb	r2, [r2, #0]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d902      	bls.n	8007e2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2a:	e00c      	b.n	8007e46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e44:	d0e7      	beq.n	8007e16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b089      	sub	sp, #36	; 0x24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	461a      	mov	r2, r3
 8007e62:	460b      	mov	r3, r1
 8007e64:	71fb      	strb	r3, [r7, #7]
 8007e66:	4613      	mov	r3, r2
 8007e68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d123      	bne.n	8007ec2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e7a:	88bb      	ldrh	r3, [r7, #4]
 8007e7c:	3303      	adds	r3, #3
 8007e7e:	089b      	lsrs	r3, r3, #2
 8007e80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	e018      	b.n	8007eba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	031a      	lsls	r2, r3, #12
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e94:	461a      	mov	r2, r3
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d3e2      	bcc.n	8007e88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3724      	adds	r7, #36	; 0x24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b08b      	sub	sp, #44	; 0x2c
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	089b      	lsrs	r3, r3, #2
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	623b      	str	r3, [r7, #32]
 8007efa:	e014      	b.n	8007f26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	3301      	adds	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	3301      	adds	r3, #1
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	3301      	adds	r3, #1
 8007f24:	623b      	str	r3, [r7, #32]
 8007f26:	6a3a      	ldr	r2, [r7, #32]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d3e6      	bcc.n	8007efc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f2e:	8bfb      	ldrh	r3, [r7, #30]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01e      	beq.n	8007f72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f107 0310 	add.w	r3, r7, #16
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	fa22 f303 	lsr.w	r3, r2, r3
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	701a      	strb	r2, [r3, #0]
      i++;
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	3301      	adds	r3, #1
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f66:	8bfb      	ldrh	r3, [r7, #30]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f6c:	8bfb      	ldrh	r3, [r7, #30]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1ea      	bne.n	8007f48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	372c      	adds	r7, #44	; 0x2c
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d12c      	bne.n	8007ff6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	db12      	blt.n	8007fd4 <USB_EPSetStall+0x54>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00f      	beq.n	8007fd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	e02b      	b.n	800804e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	db12      	blt.n	800802e <USB_EPSetStall+0xae>
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800802c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800804c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	785b      	ldrb	r3, [r3, #1]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d128      	bne.n	80080ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008096:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	791b      	ldrb	r3, [r3, #4]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d003      	beq.n	80080a8 <USB_EPClearStall+0x4c>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	791b      	ldrb	r3, [r3, #4]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d138      	bne.n	800811a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e027      	b.n	800811a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	791b      	ldrb	r3, [r3, #4]
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d003      	beq.n	80080fa <USB_EPClearStall+0x9e>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	791b      	ldrb	r3, [r3, #4]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d10f      	bne.n	800811a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008118:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008146:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800814a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800815c:	68f9      	ldr	r1, [r7, #12]
 800815e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008162:	4313      	orrs	r3, r2
 8008164:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a2:	f023 0302 	bic.w	r3, r3, #2
 80081a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081d0:	f023 0303 	bic.w	r3, r3, #3
 80081d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4013      	ands	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008210:	68fb      	ldr	r3, [r7, #12]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	4013      	ands	r3, r2
 8008240:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	0c1b      	lsrs	r3, r3, #16
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	4013      	ands	r3, r2
 8008274:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	b29b      	uxth	r3, r3
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4013      	ands	r3, r2
 80082b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082b4:	68bb      	ldr	r3, [r7, #8]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b087      	sub	sp, #28
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	fa22 f303 	lsr.w	r3, r2, r3
 80082f2:	01db      	lsls	r3, r3, #7
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4013      	ands	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008310:	68bb      	ldr	r3, [r7, #8]
}
 8008312:	4618      	mov	r0, r3
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f003 0301 	and.w	r3, r3, #1
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008356:	4619      	mov	r1, r3
 8008358:	4b09      	ldr	r3, [pc, #36]	; (8008380 <USB_ActivateSetup+0x44>)
 800835a:	4013      	ands	r3, r2
 800835c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800836c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008370:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	fffff800 	.word	0xfffff800

08008384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	460b      	mov	r3, r1
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	333c      	adds	r3, #60	; 0x3c
 800839a:	3304      	adds	r3, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4a26      	ldr	r2, [pc, #152]	; (800843c <USB_EP0_OutStart+0xb8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d90a      	bls.n	80083be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083b8:	d101      	bne.n	80083be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	e037      	b.n	800842e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ec:	f043 0318 	orr.w	r3, r3, #24
 80083f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d10f      	bne.n	800842c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800842a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	4f54300a 	.word	0x4f54300a

08008440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3301      	adds	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a13      	ldr	r2, [pc, #76]	; (80084a4 <USB_CoreReset+0x64>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d901      	bls.n	800845e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e01b      	b.n	8008496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	daf2      	bge.n	800844c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4a09      	ldr	r2, [pc, #36]	; (80084a4 <USB_CoreReset+0x64>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d901      	bls.n	8008488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e006      	b.n	8008496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d0f0      	beq.n	8008476 <USB_CoreReset+0x36>

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	00030d40 	.word	0x00030d40

080084a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084b8:	f002 fd94 	bl	800afe4 <malloc>
 80084bc:	4603      	mov	r3, r0
 80084be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	32b0      	adds	r2, #176	; 0xb0
 80084d0:	2100      	movs	r1, #0
 80084d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0d4      	b.n	8008684 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084da:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80084de:	2100      	movs	r1, #0
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f002 fe65 	bl	800b1b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32b0      	adds	r2, #176	; 0xb0
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	32b0      	adds	r2, #176	; 0xb0
 8008500:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7c1b      	ldrb	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d138      	bne.n	8008584 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008512:	4b5e      	ldr	r3, [pc, #376]	; (800868c <USBD_CDC_Init+0x1e4>)
 8008514:	7819      	ldrb	r1, [r3, #0]
 8008516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851a:	2202      	movs	r2, #2
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f002 fbbe 	bl	800ac9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008522:	4b5a      	ldr	r3, [pc, #360]	; (800868c <USBD_CDC_Init+0x1e4>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 020f 	and.w	r2, r3, #15
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	3324      	adds	r3, #36	; 0x24
 8008538:	2201      	movs	r2, #1
 800853a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800853c:	4b54      	ldr	r3, [pc, #336]	; (8008690 <USBD_CDC_Init+0x1e8>)
 800853e:	7819      	ldrb	r1, [r3, #0]
 8008540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008544:	2202      	movs	r2, #2
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f002 fba9 	bl	800ac9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800854c:	4b50      	ldr	r3, [pc, #320]	; (8008690 <USBD_CDC_Init+0x1e8>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	f003 020f 	and.w	r2, r3, #15
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008564:	2201      	movs	r2, #1
 8008566:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008568:	4b4a      	ldr	r3, [pc, #296]	; (8008694 <USBD_CDC_Init+0x1ec>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f003 020f 	and.w	r2, r3, #15
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	3326      	adds	r3, #38	; 0x26
 800857e:	2210      	movs	r2, #16
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e035      	b.n	80085f0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008584:	4b41      	ldr	r3, [pc, #260]	; (800868c <USBD_CDC_Init+0x1e4>)
 8008586:	7819      	ldrb	r1, [r3, #0]
 8008588:	2340      	movs	r3, #64	; 0x40
 800858a:	2202      	movs	r2, #2
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 fb86 	bl	800ac9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008592:	4b3e      	ldr	r3, [pc, #248]	; (800868c <USBD_CDC_Init+0x1e4>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 020f 	and.w	r2, r3, #15
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	440b      	add	r3, r1
 80085a6:	3324      	adds	r3, #36	; 0x24
 80085a8:	2201      	movs	r2, #1
 80085aa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085ac:	4b38      	ldr	r3, [pc, #224]	; (8008690 <USBD_CDC_Init+0x1e8>)
 80085ae:	7819      	ldrb	r1, [r3, #0]
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	2202      	movs	r2, #2
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f002 fb72 	bl	800ac9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085ba:	4b35      	ldr	r3, [pc, #212]	; (8008690 <USBD_CDC_Init+0x1e8>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	f003 020f 	and.w	r2, r3, #15
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	440b      	add	r3, r1
 80085ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085d2:	2201      	movs	r2, #1
 80085d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <USBD_CDC_Init+0x1ec>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f003 020f 	and.w	r2, r3, #15
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	440b      	add	r3, r1
 80085ea:	3326      	adds	r3, #38	; 0x26
 80085ec:	2210      	movs	r2, #16
 80085ee:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085f0:	4b28      	ldr	r3, [pc, #160]	; (8008694 <USBD_CDC_Init+0x1ec>)
 80085f2:	7819      	ldrb	r1, [r3, #0]
 80085f4:	2308      	movs	r3, #8
 80085f6:	2203      	movs	r2, #3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f002 fb50 	bl	800ac9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085fe:	4b25      	ldr	r3, [pc, #148]	; (8008694 <USBD_CDC_Init+0x1ec>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	f003 020f 	and.w	r2, r3, #15
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	2201      	movs	r2, #1
 8008616:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	33b0      	adds	r3, #176	; 0xb0
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800864e:	2302      	movs	r3, #2
 8008650:	e018      	b.n	8008684 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7c1b      	ldrb	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10a      	bne.n	8008670 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <USBD_CDC_Init+0x1e8>)
 800865c:	7819      	ldrb	r1, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f002 fc07 	bl	800ae7c <USBD_LL_PrepareReceive>
 800866e:	e008      	b.n	8008682 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008670:	4b07      	ldr	r3, [pc, #28]	; (8008690 <USBD_CDC_Init+0x1e8>)
 8008672:	7819      	ldrb	r1, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 fbfd 	bl	800ae7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000093 	.word	0x20000093
 8008690:	20000094 	.word	0x20000094
 8008694:	20000095 	.word	0x20000095

08008698 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086a4:	4b3a      	ldr	r3, [pc, #232]	; (8008790 <USBD_CDC_DeInit+0xf8>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f002 fb1d 	bl	800acea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086b0:	4b37      	ldr	r3, [pc, #220]	; (8008790 <USBD_CDC_DeInit+0xf8>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3324      	adds	r3, #36	; 0x24
 80086c6:	2200      	movs	r2, #0
 80086c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086ca:	4b32      	ldr	r3, [pc, #200]	; (8008794 <USBD_CDC_DeInit+0xfc>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f002 fb0a 	bl	800acea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086d6:	4b2f      	ldr	r3, [pc, #188]	; (8008794 <USBD_CDC_DeInit+0xfc>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	f003 020f 	and.w	r2, r3, #15
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086ee:	2200      	movs	r2, #0
 80086f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086f2:	4b29      	ldr	r3, [pc, #164]	; (8008798 <USBD_CDC_DeInit+0x100>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f002 faf6 	bl	800acea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086fe:	4b26      	ldr	r3, [pc, #152]	; (8008798 <USBD_CDC_DeInit+0x100>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	f003 020f 	and.w	r2, r3, #15
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	2200      	movs	r2, #0
 8008716:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008718:	4b1f      	ldr	r3, [pc, #124]	; (8008798 <USBD_CDC_DeInit+0x100>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	3326      	adds	r3, #38	; 0x26
 800872e:	2200      	movs	r2, #0
 8008730:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	32b0      	adds	r2, #176	; 0xb0
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01f      	beq.n	8008784 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	33b0      	adds	r3, #176	; 0xb0
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32b0      	adds	r2, #176	; 0xb0
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	4618      	mov	r0, r3
 8008768:	f002 fc44 	bl	800aff4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	32b0      	adds	r2, #176	; 0xb0
 8008776:	2100      	movs	r1, #0
 8008778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000093 	.word	0x20000093
 8008794:	20000094 	.word	0x20000094
 8008798:	20000095 	.word	0x20000095

0800879c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	32b0      	adds	r2, #176	; 0xb0
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e0bf      	b.n	800894c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d050      	beq.n	800887a <USBD_CDC_Setup+0xde>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f040 80af 	bne.w	800893c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d03a      	beq.n	800885c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da1b      	bge.n	8008828 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	33b0      	adds	r3, #176	; 0xb0
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008806:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	88d2      	ldrh	r2, [r2, #6]
 800880c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	88db      	ldrh	r3, [r3, #6]
 8008812:	2b07      	cmp	r3, #7
 8008814:	bf28      	it	cs
 8008816:	2307      	movcs	r3, #7
 8008818:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	89fa      	ldrh	r2, [r7, #14]
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fdad 	bl	800a380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008826:	e090      	b.n	800894a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	785a      	ldrb	r2, [r3, #1]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88db      	ldrh	r3, [r3, #6]
 8008836:	2b3f      	cmp	r3, #63	; 0x3f
 8008838:	d803      	bhi.n	8008842 <USBD_CDC_Setup+0xa6>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	88db      	ldrh	r3, [r3, #6]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	e000      	b.n	8008844 <USBD_CDC_Setup+0xa8>
 8008842:	2240      	movs	r2, #64	; 0x40
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800884a:	6939      	ldr	r1, [r7, #16]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008852:	461a      	mov	r2, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 fdbf 	bl	800a3d8 <USBD_CtlPrepareRx>
      break;
 800885a:	e076      	b.n	800894a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	33b0      	adds	r3, #176	; 0xb0
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	7850      	ldrb	r0, [r2, #1]
 8008872:	2200      	movs	r2, #0
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	4798      	blx	r3
      break;
 8008878:	e067      	b.n	800894a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b0b      	cmp	r3, #11
 8008880:	d851      	bhi.n	8008926 <USBD_CDC_Setup+0x18a>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USBD_CDC_Setup+0xec>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088b9 	.word	0x080088b9
 800888c:	08008935 	.word	0x08008935
 8008890:	08008927 	.word	0x08008927
 8008894:	08008927 	.word	0x08008927
 8008898:	08008927 	.word	0x08008927
 800889c:	08008927 	.word	0x08008927
 80088a0:	08008927 	.word	0x08008927
 80088a4:	08008927 	.word	0x08008927
 80088a8:	08008927 	.word	0x08008927
 80088ac:	08008927 	.word	0x08008927
 80088b0:	080088e3 	.word	0x080088e3
 80088b4:	0800890d 	.word	0x0800890d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d107      	bne.n	80088d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088c4:	f107 030a 	add.w	r3, r7, #10
 80088c8:	2202      	movs	r2, #2
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 fd57 	bl	800a380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088d2:	e032      	b.n	800893a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fce1 	bl	800a29e <USBD_CtlError>
            ret = USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	75fb      	strb	r3, [r7, #23]
          break;
 80088e0:	e02b      	b.n	800893a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d107      	bne.n	80088fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088ee:	f107 030d 	add.w	r3, r7, #13
 80088f2:	2201      	movs	r2, #1
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 fd42 	bl	800a380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088fc:	e01d      	b.n	800893a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 fccc 	bl	800a29e <USBD_CtlError>
            ret = USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	75fb      	strb	r3, [r7, #23]
          break;
 800890a:	e016      	b.n	800893a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b03      	cmp	r3, #3
 8008916:	d00f      	beq.n	8008938 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 fcbf 	bl	800a29e <USBD_CtlError>
            ret = USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008924:	e008      	b.n	8008938 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 fcb8 	bl	800a29e <USBD_CtlError>
          ret = USBD_FAIL;
 800892e:	2303      	movs	r3, #3
 8008930:	75fb      	strb	r3, [r7, #23]
          break;
 8008932:	e002      	b.n	800893a <USBD_CDC_Setup+0x19e>
          break;
 8008934:	bf00      	nop
 8008936:	e008      	b.n	800894a <USBD_CDC_Setup+0x1ae>
          break;
 8008938:	bf00      	nop
      }
      break;
 800893a:	e006      	b.n	800894a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fcad 	bl	800a29e <USBD_CtlError>
      ret = USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	75fb      	strb	r3, [r7, #23]
      break;
 8008948:	bf00      	nop
  }

  return (uint8_t)ret;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	32b0      	adds	r2, #176	; 0xb0
 8008972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800897a:	2303      	movs	r3, #3
 800897c:	e065      	b.n	8008a4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	32b0      	adds	r2, #176	; 0xb0
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	f003 020f 	and.w	r2, r3, #15
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	3318      	adds	r3, #24
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d02f      	beq.n	8008a08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	f003 020f 	and.w	r2, r3, #15
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	4613      	mov	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	440b      	add	r3, r1
 80089ba:	3318      	adds	r3, #24
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	f003 010f 	and.w	r1, r3, #15
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	460b      	mov	r3, r1
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	440b      	add	r3, r1
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4403      	add	r3, r0
 80089d0:	3348      	adds	r3, #72	; 0x48
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d112      	bne.n	8008a08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	f003 020f 	and.w	r2, r3, #15
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	3318      	adds	r3, #24
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089fa:	78f9      	ldrb	r1, [r7, #3]
 80089fc:	2300      	movs	r3, #0
 80089fe:	2200      	movs	r2, #0
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 fa1a 	bl	800ae3a <USBD_LL_Transmit>
 8008a06:	e01f      	b.n	8008a48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	33b0      	adds	r3, #176	; 0xb0
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d010      	beq.n	8008a48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	33b0      	adds	r3, #176	; 0xb0
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	32b0      	adds	r2, #176	; 0xb0
 8008a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	32b0      	adds	r2, #176	; 0xb0
 8008a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e01a      	b.n	8008aba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f002 fa18 	bl	800aebe <USBD_LL_GetRxDataSize>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	33b0      	adds	r3, #176	; 0xb0
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	32b0      	adds	r2, #176	; 0xb0
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e025      	b.n	8008b30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	33b0      	adds	r3, #176	; 0xb0
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01a      	beq.n	8008b2e <USBD_CDC_EP0_RxReady+0x6c>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008afe:	2bff      	cmp	r3, #255	; 0xff
 8008b00:	d015      	beq.n	8008b2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	33b0      	adds	r3, #176	; 0xb0
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b22:	b292      	uxth	r2, r2
 8008b24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	22ff      	movs	r2, #255	; 0xff
 8008b2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b40:	2182      	movs	r1, #130	; 0x82
 8008b42:	4818      	ldr	r0, [pc, #96]	; (8008ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b44:	f000 fd49 	bl	80095da <USBD_GetEpDesc>
 8008b48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	4815      	ldr	r0, [pc, #84]	; (8008ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b4e:	f000 fd44 	bl	80095da <USBD_GetEpDesc>
 8008b52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b54:	2181      	movs	r1, #129	; 0x81
 8008b56:	4813      	ldr	r0, [pc, #76]	; (8008ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b58:	f000 fd3f 	bl	80095da <USBD_GetEpDesc>
 8008b5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2210      	movs	r2, #16
 8008b68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d006      	beq.n	8008b7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b78:	711a      	strb	r2, [r3, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d006      	beq.n	8008b92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b8c:	711a      	strb	r2, [r3, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2243      	movs	r2, #67	; 0x43
 8008b96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000050 	.word	0x20000050

08008ba8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bb0:	2182      	movs	r1, #130	; 0x82
 8008bb2:	4818      	ldr	r0, [pc, #96]	; (8008c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bb4:	f000 fd11 	bl	80095da <USBD_GetEpDesc>
 8008bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bba:	2101      	movs	r1, #1
 8008bbc:	4815      	ldr	r0, [pc, #84]	; (8008c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bbe:	f000 fd0c 	bl	80095da <USBD_GetEpDesc>
 8008bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bc4:	2181      	movs	r1, #129	; 0x81
 8008bc6:	4813      	ldr	r0, [pc, #76]	; (8008c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bc8:	f000 fd07 	bl	80095da <USBD_GetEpDesc>
 8008bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d006      	beq.n	8008bee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2200      	movs	r2, #0
 8008be4:	711a      	strb	r2, [r3, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f042 0202 	orr.w	r2, r2, #2
 8008bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	711a      	strb	r2, [r3, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f042 0202 	orr.w	r2, r2, #2
 8008c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2243      	movs	r2, #67	; 0x43
 8008c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000050 	.word	0x20000050

08008c18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c20:	2182      	movs	r1, #130	; 0x82
 8008c22:	4818      	ldr	r0, [pc, #96]	; (8008c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c24:	f000 fcd9 	bl	80095da <USBD_GetEpDesc>
 8008c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4815      	ldr	r0, [pc, #84]	; (8008c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c2e:	f000 fcd4 	bl	80095da <USBD_GetEpDesc>
 8008c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c34:	2181      	movs	r1, #129	; 0x81
 8008c36:	4813      	ldr	r0, [pc, #76]	; (8008c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c38:	f000 fccf 	bl	80095da <USBD_GetEpDesc>
 8008c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2210      	movs	r2, #16
 8008c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d006      	beq.n	8008c5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c58:	711a      	strb	r2, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c6c:	711a      	strb	r2, [r3, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2243      	movs	r2, #67	; 0x43
 8008c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000050 	.word	0x20000050

08008c88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	220a      	movs	r2, #10
 8008c94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c96:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	2000000c 	.word	0x2000000c

08008ca8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e009      	b.n	8008cd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	33b0      	adds	r3, #176	; 0xb0
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	32b0      	adds	r2, #176	; 0xb0
 8008cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e008      	b.n	8008d14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	32b0      	adds	r2, #176	; 0xb0
 8008d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d101      	bne.n	8008d44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e004      	b.n	8008d4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32b0      	adds	r2, #176	; 0xb0
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e025      	b.n	8008dce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d11f      	bne.n	8008dcc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d94:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <USBD_CDC_TransmitPacket+0x7c>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 020f 	and.w	r2, r3, #15
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4403      	add	r3, r0
 8008dae:	3318      	adds	r3, #24
 8008db0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <USBD_CDC_TransmitPacket+0x7c>)
 8008db4:	7819      	ldrb	r1, [r3, #0]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f002 f839 	bl	800ae3a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000093 	.word	0x20000093

08008ddc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	32b0      	adds	r2, #176	; 0xb0
 8008dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	32b0      	adds	r2, #176	; 0xb0
 8008dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e018      	b.n	8008e3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	7c1b      	ldrb	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e12:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <USBD_CDC_ReceivePacket+0x68>)
 8008e14:	7819      	ldrb	r1, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f002 f82b 	bl	800ae7c <USBD_LL_PrepareReceive>
 8008e26:	e008      	b.n	8008e3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e28:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <USBD_CDC_ReceivePacket+0x68>)
 8008e2a:	7819      	ldrb	r1, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e32:	2340      	movs	r3, #64	; 0x40
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f002 f821 	bl	800ae7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20000094 	.word	0x20000094

08008e48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e01f      	b.n	8008ea0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	79fa      	ldrb	r2, [r7, #7]
 8008e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f001 fe97 	bl	800abc8 <USBD_LL_Init>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e025      	b.n	8008f0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32ae      	adds	r2, #174	; 0xae
 8008ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00f      	beq.n	8008efc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32ae      	adds	r2, #174	; 0xae
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	f107 020e 	add.w	r2, r7, #14
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 fea3 	bl	800ac68 <USBD_LL_Start>
 8008f22:	4603      	mov	r3, r0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d009      	beq.n	8008f70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	78fa      	ldrb	r2, [r7, #3]
 8008f94:	4611      	mov	r1, r2
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 f932 	bl	800a22a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fe2:	f003 031f 	and.w	r3, r3, #31
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d01a      	beq.n	8009020 <USBD_LL_SetupStage+0x72>
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d822      	bhi.n	8009034 <USBD_LL_SetupStage+0x86>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <USBD_LL_SetupStage+0x4a>
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d00a      	beq.n	800900c <USBD_LL_SetupStage+0x5e>
 8008ff6:	e01d      	b.n	8009034 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fb5f 	bl	80096c4 <USBD_StdDevReq>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
      break;
 800900a:	e020      	b.n	800904e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fbc7 	bl	80097a8 <USBD_StdItfReq>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e016      	b.n	800904e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fc29 	bl	8009880 <USBD_StdEPReq>
 800902e:	4603      	mov	r3, r0
 8009030:	73fb      	strb	r3, [r7, #15]
      break;
 8009032:	e00c      	b.n	800904e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800903a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800903e:	b2db      	uxtb	r3, r3
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fe70 	bl	800ad28 <USBD_LL_StallEP>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
      break;
 800904c:	bf00      	nop
  }

  return ret;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	460b      	mov	r3, r1
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d16e      	bne.n	800914e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009076:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800907e:	2b03      	cmp	r3, #3
 8009080:	f040 8098 	bne.w	80091b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	429a      	cmp	r2, r3
 800908e:	d913      	bls.n	80090b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	1ad2      	subs	r2, r2, r3
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	bf28      	it	cs
 80090aa:	4613      	movcs	r3, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f001 f9ae 	bl	800a412 <USBD_CtlContinueRx>
 80090b6:	e07d      	b.n	80091b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d014      	beq.n	80090f0 <USBD_LL_DataOutStage+0x98>
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d81d      	bhi.n	8009106 <USBD_LL_DataOutStage+0xae>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <USBD_LL_DataOutStage+0x7c>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d003      	beq.n	80090da <USBD_LL_DataOutStage+0x82>
 80090d2:	e018      	b.n	8009106 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	75bb      	strb	r3, [r7, #22]
            break;
 80090d8:	e018      	b.n	800910c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	4619      	mov	r1, r3
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fa5e 	bl	80095a6 <USBD_CoreFindIF>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75bb      	strb	r3, [r7, #22]
            break;
 80090ee:	e00d      	b.n	800910c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fa60 	bl	80095c0 <USBD_CoreFindEP>
 8009100:	4603      	mov	r3, r0
 8009102:	75bb      	strb	r3, [r7, #22]
            break;
 8009104:	e002      	b.n	800910c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	75bb      	strb	r3, [r7, #22]
            break;
 800910a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800910c:	7dbb      	ldrb	r3, [r7, #22]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d119      	bne.n	8009146 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b03      	cmp	r3, #3
 800911c:	d113      	bne.n	8009146 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800911e:	7dba      	ldrb	r2, [r7, #22]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	32ae      	adds	r2, #174	; 0xae
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800912e:	7dba      	ldrb	r2, [r7, #22]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009136:	7dba      	ldrb	r2, [r7, #22]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	32ae      	adds	r2, #174	; 0xae
 800913c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f001 f974 	bl	800a434 <USBD_CtlSendStatus>
 800914c:	e032      	b.n	80091b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009154:	b2db      	uxtb	r3, r3
 8009156:	4619      	mov	r1, r3
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fa31 	bl	80095c0 <USBD_CoreFindEP>
 800915e:	4603      	mov	r3, r0
 8009160:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009162:	7dbb      	ldrb	r3, [r7, #22]
 8009164:	2bff      	cmp	r3, #255	; 0xff
 8009166:	d025      	beq.n	80091b4 <USBD_LL_DataOutStage+0x15c>
 8009168:	7dbb      	ldrb	r3, [r7, #22]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d122      	bne.n	80091b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b03      	cmp	r3, #3
 8009178:	d117      	bne.n	80091aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800917a:	7dba      	ldrb	r2, [r7, #22]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	32ae      	adds	r2, #174	; 0xae
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00f      	beq.n	80091aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800918a:	7dba      	ldrb	r2, [r7, #22]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009192:	7dba      	ldrb	r2, [r7, #22]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	32ae      	adds	r2, #174	; 0xae
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	7afa      	ldrb	r2, [r7, #11]
 80091a0:	4611      	mov	r1, r2
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	4798      	blx	r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	e000      	b.n	80091b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	460b      	mov	r3, r1
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d16f      	bne.n	80092b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3314      	adds	r3, #20
 80091d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d15a      	bne.n	8009298 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d914      	bls.n	8009218 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	461a      	mov	r2, r3
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f001 f8d6 	bl	800a3b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800920a:	2300      	movs	r3, #0
 800920c:	2200      	movs	r2, #0
 800920e:	2100      	movs	r1, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f001 fe33 	bl	800ae7c <USBD_LL_PrepareReceive>
 8009216:	e03f      	b.n	8009298 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	429a      	cmp	r2, r3
 8009222:	d11c      	bne.n	800925e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800922c:	429a      	cmp	r2, r3
 800922e:	d316      	bcc.n	800925e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800923a:	429a      	cmp	r2, r3
 800923c:	d20f      	bcs.n	800925e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f001 f8b7 	bl	800a3b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009250:	2300      	movs	r3, #0
 8009252:	2200      	movs	r2, #0
 8009254:	2100      	movs	r1, #0
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f001 fe10 	bl	800ae7c <USBD_LL_PrepareReceive>
 800925c:	e01c      	b.n	8009298 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b03      	cmp	r3, #3
 8009268:	d10f      	bne.n	800928a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800928a:	2180      	movs	r1, #128	; 0x80
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f001 fd4b 	bl	800ad28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f001 f8e1 	bl	800a45a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d03a      	beq.n	8009318 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fe42 	bl	8008f2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092b0:	e032      	b.n	8009318 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80092b2:	7afb      	ldrb	r3, [r7, #11]
 80092b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	4619      	mov	r1, r3
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f97f 	bl	80095c0 <USBD_CoreFindEP>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	2bff      	cmp	r3, #255	; 0xff
 80092ca:	d025      	beq.n	8009318 <USBD_LL_DataInStage+0x15a>
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d122      	bne.n	8009318 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d11c      	bne.n	8009318 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092de:	7dfa      	ldrb	r2, [r7, #23]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	32ae      	adds	r2, #174	; 0xae
 80092e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d014      	beq.n	8009318 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092ee:	7dfa      	ldrb	r2, [r7, #23]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092f6:	7dfa      	ldrb	r2, [r7, #23]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	32ae      	adds	r2, #174	; 0xae
 80092fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	7afa      	ldrb	r2, [r7, #11]
 8009304:	4611      	mov	r1, r2
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	4798      	blx	r3
 800930a:	4603      	mov	r3, r0
 800930c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800930e:	7dbb      	ldrb	r3, [r7, #22]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009314:	7dbb      	ldrb	r3, [r7, #22]
 8009316:	e000      	b.n	800931a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d014      	beq.n	8009388 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00e      	beq.n	8009388 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6852      	ldr	r2, [r2, #4]
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	4611      	mov	r1, r2
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009384:	2303      	movs	r3, #3
 8009386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fc85 	bl	800ac9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2240      	movs	r2, #64	; 0x40
 80093a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093a4:	2340      	movs	r3, #64	; 0x40
 80093a6:	2200      	movs	r2, #0
 80093a8:	2180      	movs	r1, #128	; 0x80
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 fc77 	bl	800ac9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2240      	movs	r2, #64	; 0x40
 80093ba:	621a      	str	r2, [r3, #32]

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2204      	movs	r2, #4
 8009400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b04      	cmp	r3, #4
 8009424:	d106      	bne.n	8009434 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800942c:	b2da      	uxtb	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b03      	cmp	r3, #3
 8009454:	d110      	bne.n	8009478 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	32ae      	adds	r2, #174	; 0xae
 8009498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e01c      	b.n	80094de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d115      	bne.n	80094dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32ae      	adds	r2, #174	; 0xae
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	32ae      	adds	r2, #174	; 0xae
 80094ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	4611      	mov	r1, r2
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	460b      	mov	r3, r1
 80094f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	32ae      	adds	r2, #174	; 0xae
 80094fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	e01c      	b.n	8009542 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b03      	cmp	r3, #3
 8009512:	d115      	bne.n	8009540 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	32ae      	adds	r2, #174	; 0xae
 800951e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00b      	beq.n	8009540 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	32ae      	adds	r2, #174	; 0xae
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	4611      	mov	r1, r2
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00e      	beq.n	800959c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6852      	ldr	r2, [r2, #4]
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	4611      	mov	r1, r2
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009598:	2303      	movs	r3, #3
 800959a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	885b      	ldrh	r3, [r3, #2]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	429a      	cmp	r2, r3
 8009600:	d920      	bls.n	8009644 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800960a:	e013      	b.n	8009634 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800960c:	f107 030a 	add.w	r3, r7, #10
 8009610:	4619      	mov	r1, r3
 8009612:	6978      	ldr	r0, [r7, #20]
 8009614:	f000 f81b 	bl	800964e <USBD_GetNextDesc>
 8009618:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	2b05      	cmp	r3, #5
 8009620:	d108      	bne.n	8009634 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	789b      	ldrb	r3, [r3, #2]
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	429a      	cmp	r2, r3
 800962e:	d008      	beq.n	8009642 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	885b      	ldrh	r3, [r3, #2]
 8009638:	b29a      	uxth	r2, r3
 800963a:	897b      	ldrh	r3, [r7, #10]
 800963c:	429a      	cmp	r2, r3
 800963e:	d8e5      	bhi.n	800960c <USBD_GetEpDesc+0x32>
 8009640:	e000      	b.n	8009644 <USBD_GetEpDesc+0x6a>
          break;
 8009642:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009644:	693b      	ldr	r3, [r7, #16]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	881a      	ldrh	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	b29b      	uxth	r3, r3
 8009666:	4413      	add	r3, r2
 8009668:	b29a      	uxth	r2, r3
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4413      	add	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800967a:	68fb      	ldr	r3, [r7, #12]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	3301      	adds	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096a6:	8a3b      	ldrh	r3, [r7, #16]
 80096a8:	021b      	lsls	r3, r3, #8
 80096aa:	b21a      	sxth	r2, r3
 80096ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	b21b      	sxth	r3, r3
 80096b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096b6:	89fb      	ldrh	r3, [r7, #14]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096da:	2b40      	cmp	r3, #64	; 0x40
 80096dc:	d005      	beq.n	80096ea <USBD_StdDevReq+0x26>
 80096de:	2b40      	cmp	r3, #64	; 0x40
 80096e0:	d857      	bhi.n	8009792 <USBD_StdDevReq+0xce>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00f      	beq.n	8009706 <USBD_StdDevReq+0x42>
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d153      	bne.n	8009792 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	32ae      	adds	r2, #174	; 0xae
 80096f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
      break;
 8009704:	e04a      	b.n	800979c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b09      	cmp	r3, #9
 800970c:	d83b      	bhi.n	8009786 <USBD_StdDevReq+0xc2>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <USBD_StdDevReq+0x50>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009769 	.word	0x08009769
 8009718:	0800977d 	.word	0x0800977d
 800971c:	08009787 	.word	0x08009787
 8009720:	08009773 	.word	0x08009773
 8009724:	08009787 	.word	0x08009787
 8009728:	08009747 	.word	0x08009747
 800972c:	0800973d 	.word	0x0800973d
 8009730:	08009787 	.word	0x08009787
 8009734:	0800975f 	.word	0x0800975f
 8009738:	08009751 	.word	0x08009751
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa3c 	bl	8009bbc <USBD_GetDescriptor>
          break;
 8009744:	e024      	b.n	8009790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fbcb 	bl	8009ee4 <USBD_SetAddress>
          break;
 800974e:	e01f      	b.n	8009790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fc0a 	bl	8009f6c <USBD_SetConfig>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]
          break;
 800975c:	e018      	b.n	8009790 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fcad 	bl	800a0c0 <USBD_GetConfig>
          break;
 8009766:	e013      	b.n	8009790 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fcde 	bl	800a12c <USBD_GetStatus>
          break;
 8009770:	e00e      	b.n	8009790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fd0d 	bl	800a194 <USBD_SetFeature>
          break;
 800977a:	e009      	b.n	8009790 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fd31 	bl	800a1e6 <USBD_ClrFeature>
          break;
 8009784:	e004      	b.n	8009790 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fd88 	bl	800a29e <USBD_CtlError>
          break;
 800978e:	bf00      	nop
      }
      break;
 8009790:	e004      	b.n	800979c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fd82 	bl	800a29e <USBD_CtlError>
      break;
 800979a:	bf00      	nop
  }

  return ret;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097be:	2b40      	cmp	r3, #64	; 0x40
 80097c0:	d005      	beq.n	80097ce <USBD_StdItfReq+0x26>
 80097c2:	2b40      	cmp	r3, #64	; 0x40
 80097c4:	d852      	bhi.n	800986c <USBD_StdItfReq+0xc4>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <USBD_StdItfReq+0x26>
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d14e      	bne.n	800986c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d840      	bhi.n	800985e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	889b      	ldrh	r3, [r3, #4]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d836      	bhi.n	8009854 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	889b      	ldrh	r3, [r3, #4]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fed9 	bl	80095a6 <USBD_CoreFindIF>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2bff      	cmp	r3, #255	; 0xff
 80097fc:	d01d      	beq.n	800983a <USBD_StdItfReq+0x92>
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d11a      	bne.n	800983a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009804:	7bba      	ldrb	r2, [r7, #14]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	32ae      	adds	r2, #174	; 0xae
 800980a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00f      	beq.n	8009834 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009814:	7bba      	ldrb	r2, [r7, #14]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800981c:	7bba      	ldrb	r2, [r7, #14]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	32ae      	adds	r2, #174	; 0xae
 8009822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009832:	e004      	b.n	800983e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009834:	2303      	movs	r3, #3
 8009836:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009838:	e001      	b.n	800983e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800983a:	2303      	movs	r3, #3
 800983c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	88db      	ldrh	r3, [r3, #6]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d110      	bne.n	8009868 <USBD_StdItfReq+0xc0>
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10d      	bne.n	8009868 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fdf1 	bl	800a434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009852:	e009      	b.n	8009868 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fd21 	bl	800a29e <USBD_CtlError>
          break;
 800985c:	e004      	b.n	8009868 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fd1c 	bl	800a29e <USBD_CtlError>
          break;
 8009866:	e000      	b.n	800986a <USBD_StdItfReq+0xc2>
          break;
 8009868:	bf00      	nop
      }
      break;
 800986a:	e004      	b.n	8009876 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fd15 	bl	800a29e <USBD_CtlError>
      break;
 8009874:	bf00      	nop
  }

  return ret;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	889b      	ldrh	r3, [r3, #4]
 8009892:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800989c:	2b40      	cmp	r3, #64	; 0x40
 800989e:	d007      	beq.n	80098b0 <USBD_StdEPReq+0x30>
 80098a0:	2b40      	cmp	r3, #64	; 0x40
 80098a2:	f200 817f 	bhi.w	8009ba4 <USBD_StdEPReq+0x324>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02a      	beq.n	8009900 <USBD_StdEPReq+0x80>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	f040 817a 	bne.w	8009ba4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff fe83 	bl	80095c0 <USBD_CoreFindEP>
 80098ba:	4603      	mov	r3, r0
 80098bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098be:	7b7b      	ldrb	r3, [r7, #13]
 80098c0:	2bff      	cmp	r3, #255	; 0xff
 80098c2:	f000 8174 	beq.w	8009bae <USBD_StdEPReq+0x32e>
 80098c6:	7b7b      	ldrb	r3, [r7, #13]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f040 8170 	bne.w	8009bae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098ce:	7b7a      	ldrb	r2, [r7, #13]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098d6:	7b7a      	ldrb	r2, [r7, #13]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	32ae      	adds	r2, #174	; 0xae
 80098dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 8163 	beq.w	8009bae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098e8:	7b7a      	ldrb	r2, [r7, #13]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	32ae      	adds	r2, #174	; 0xae
 80098ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098fe:	e156      	b.n	8009bae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	785b      	ldrb	r3, [r3, #1]
 8009904:	2b03      	cmp	r3, #3
 8009906:	d008      	beq.n	800991a <USBD_StdEPReq+0x9a>
 8009908:	2b03      	cmp	r3, #3
 800990a:	f300 8145 	bgt.w	8009b98 <USBD_StdEPReq+0x318>
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 809b 	beq.w	8009a4a <USBD_StdEPReq+0x1ca>
 8009914:	2b01      	cmp	r3, #1
 8009916:	d03c      	beq.n	8009992 <USBD_StdEPReq+0x112>
 8009918:	e13e      	b.n	8009b98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d002      	beq.n	800992c <USBD_StdEPReq+0xac>
 8009926:	2b03      	cmp	r3, #3
 8009928:	d016      	beq.n	8009958 <USBD_StdEPReq+0xd8>
 800992a:	e02c      	b.n	8009986 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800992c:	7bbb      	ldrb	r3, [r7, #14]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00d      	beq.n	800994e <USBD_StdEPReq+0xce>
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b80      	cmp	r3, #128	; 0x80
 8009936:	d00a      	beq.n	800994e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f9f3 	bl	800ad28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009942:	2180      	movs	r1, #128	; 0x80
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 f9ef 	bl	800ad28 <USBD_LL_StallEP>
 800994a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800994c:	e020      	b.n	8009990 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fca4 	bl	800a29e <USBD_CtlError>
              break;
 8009956:	e01b      	b.n	8009990 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	885b      	ldrh	r3, [r3, #2]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10e      	bne.n	800997e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <USBD_StdEPReq+0xfe>
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b80      	cmp	r3, #128	; 0x80
 800996a:	d008      	beq.n	800997e <USBD_StdEPReq+0xfe>
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	88db      	ldrh	r3, [r3, #6]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 f9d5 	bl	800ad28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fd58 	bl	800a434 <USBD_CtlSendStatus>

              break;
 8009984:	e004      	b.n	8009990 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fc88 	bl	800a29e <USBD_CtlError>
              break;
 800998e:	bf00      	nop
          }
          break;
 8009990:	e107      	b.n	8009ba2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d002      	beq.n	80099a4 <USBD_StdEPReq+0x124>
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d016      	beq.n	80099d0 <USBD_StdEPReq+0x150>
 80099a2:	e04b      	b.n	8009a3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00d      	beq.n	80099c6 <USBD_StdEPReq+0x146>
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	2b80      	cmp	r3, #128	; 0x80
 80099ae:	d00a      	beq.n	80099c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 f9b7 	bl	800ad28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099ba:	2180      	movs	r1, #128	; 0x80
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 f9b3 	bl	800ad28 <USBD_LL_StallEP>
 80099c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099c4:	e040      	b.n	8009a48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fc68 	bl	800a29e <USBD_CtlError>
              break;
 80099ce:	e03b      	b.n	8009a48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	885b      	ldrh	r3, [r3, #2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d136      	bne.n	8009a46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d004      	beq.n	80099ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 f9bd 	bl	800ad66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fd21 	bl	800a434 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fde2 	bl	80095c0 <USBD_CoreFindEP>
 80099fc:	4603      	mov	r3, r0
 80099fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a00:	7b7b      	ldrb	r3, [r7, #13]
 8009a02:	2bff      	cmp	r3, #255	; 0xff
 8009a04:	d01f      	beq.n	8009a46 <USBD_StdEPReq+0x1c6>
 8009a06:	7b7b      	ldrb	r3, [r7, #13]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11c      	bne.n	8009a46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a0c:	7b7a      	ldrb	r2, [r7, #13]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a14:	7b7a      	ldrb	r2, [r7, #13]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	32ae      	adds	r2, #174	; 0xae
 8009a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d010      	beq.n	8009a46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a24:	7b7a      	ldrb	r2, [r7, #13]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	32ae      	adds	r2, #174	; 0xae
 8009a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a3a:	e004      	b.n	8009a46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fc2d 	bl	800a29e <USBD_CtlError>
              break;
 8009a44:	e000      	b.n	8009a48 <USBD_StdEPReq+0x1c8>
              break;
 8009a46:	bf00      	nop
          }
          break;
 8009a48:	e0ab      	b.n	8009ba2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d002      	beq.n	8009a5c <USBD_StdEPReq+0x1dc>
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d032      	beq.n	8009ac0 <USBD_StdEPReq+0x240>
 8009a5a:	e097      	b.n	8009b8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <USBD_StdEPReq+0x1f2>
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d004      	beq.n	8009a72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fc17 	bl	800a29e <USBD_CtlError>
                break;
 8009a70:	e091      	b.n	8009b96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da0b      	bge.n	8009a92 <USBD_StdEPReq+0x212>
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	3310      	adds	r3, #16
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	3304      	adds	r3, #4
 8009a90:	e00b      	b.n	8009aaa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fc61 	bl	800a380 <USBD_CtlSendData>
              break;
 8009abe:	e06a      	b.n	8009b96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	da11      	bge.n	8009aec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	3324      	adds	r3, #36	; 0x24
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d117      	bne.n	8009b12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fbda 	bl	800a29e <USBD_CtlError>
                  break;
 8009aea:	e054      	b.n	8009b96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	f003 020f 	and.w	r2, r3, #15
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	440b      	add	r3, r1
 8009afe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d104      	bne.n	8009b12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fbc7 	bl	800a29e <USBD_CtlError>
                  break;
 8009b10:	e041      	b.n	8009b96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	da0b      	bge.n	8009b32 <USBD_StdEPReq+0x2b2>
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	3310      	adds	r3, #16
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3304      	adds	r3, #4
 8009b30:	e00b      	b.n	8009b4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	4413      	add	r3, r2
 8009b48:	3304      	adds	r3, #4
 8009b4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <USBD_StdEPReq+0x2d8>
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	2b80      	cmp	r3, #128	; 0x80
 8009b56:	d103      	bne.n	8009b60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	e00e      	b.n	8009b7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 f91d 	bl	800ada4 <USBD_LL_IsStallEP>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2201      	movs	r2, #1
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e002      	b.n	8009b7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2202      	movs	r2, #2
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fbfb 	bl	800a380 <USBD_CtlSendData>
              break;
 8009b8a:	e004      	b.n	8009b96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fb85 	bl	800a29e <USBD_CtlError>
              break;
 8009b94:	bf00      	nop
          }
          break;
 8009b96:	e004      	b.n	8009ba2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fb7f 	bl	800a29e <USBD_CtlError>
          break;
 8009ba0:	bf00      	nop
      }
      break;
 8009ba2:	e005      	b.n	8009bb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fb79 	bl	800a29e <USBD_CtlError>
      break;
 8009bac:	e000      	b.n	8009bb0 <USBD_StdEPReq+0x330>
      break;
 8009bae:	bf00      	nop
  }

  return ret;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	885b      	ldrh	r3, [r3, #2]
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b0e      	cmp	r3, #14
 8009bde:	f200 8152 	bhi.w	8009e86 <USBD_GetDescriptor+0x2ca>
 8009be2:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <USBD_GetDescriptor+0x2c>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c59 	.word	0x08009c59
 8009bec:	08009c71 	.word	0x08009c71
 8009bf0:	08009cb1 	.word	0x08009cb1
 8009bf4:	08009e87 	.word	0x08009e87
 8009bf8:	08009e87 	.word	0x08009e87
 8009bfc:	08009e27 	.word	0x08009e27
 8009c00:	08009e53 	.word	0x08009e53
 8009c04:	08009e87 	.word	0x08009e87
 8009c08:	08009e87 	.word	0x08009e87
 8009c0c:	08009e87 	.word	0x08009e87
 8009c10:	08009e87 	.word	0x08009e87
 8009c14:	08009e87 	.word	0x08009e87
 8009c18:	08009e87 	.word	0x08009e87
 8009c1c:	08009e87 	.word	0x08009e87
 8009c20:	08009c25 	.word	0x08009c25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	7c12      	ldrb	r2, [r2, #16]
 8009c3c:	f107 0108 	add.w	r1, r7, #8
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c46:	e126      	b.n	8009e96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fb27 	bl	800a29e <USBD_CtlError>
        err++;
 8009c50:	7afb      	ldrb	r3, [r7, #11]
 8009c52:	3301      	adds	r3, #1
 8009c54:	72fb      	strb	r3, [r7, #11]
      break;
 8009c56:	e11e      	b.n	8009e96 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	7c12      	ldrb	r2, [r2, #16]
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
 8009c6c:	60f8      	str	r0, [r7, #12]
      break;
 8009c6e:	e112      	b.n	8009e96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7c1b      	ldrb	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10d      	bne.n	8009c94 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c80:	f107 0208 	add.w	r2, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	2202      	movs	r2, #2
 8009c90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c92:	e100      	b.n	8009e96 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	f107 0208 	add.w	r2, r7, #8
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	2202      	movs	r2, #2
 8009cac:	701a      	strb	r2, [r3, #0]
      break;
 8009cae:	e0f2      	b.n	8009e96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	885b      	ldrh	r3, [r3, #2]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	f200 80ac 	bhi.w	8009e14 <USBD_GetDescriptor+0x258>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <USBD_GetDescriptor+0x108>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009cdd 	.word	0x08009cdd
 8009cc8:	08009d11 	.word	0x08009d11
 8009ccc:	08009d45 	.word	0x08009d45
 8009cd0:	08009d79 	.word	0x08009d79
 8009cd4:	08009dad 	.word	0x08009dad
 8009cd8:	08009de1 	.word	0x08009de1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	7c12      	ldrb	r2, [r2, #16]
 8009cf4:	f107 0108 	add.w	r1, r7, #8
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cfe:	e091      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 facb 	bl	800a29e <USBD_CtlError>
            err++;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d0e:	e089      	b.n	8009e24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	7c12      	ldrb	r2, [r2, #16]
 8009d28:	f107 0108 	add.w	r1, r7, #8
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d32:	e077      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fab1 	bl	800a29e <USBD_CtlError>
            err++;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	72fb      	strb	r3, [r7, #11]
          break;
 8009d42:	e06f      	b.n	8009e24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00b      	beq.n	8009d68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	7c12      	ldrb	r2, [r2, #16]
 8009d5c:	f107 0108 	add.w	r1, r7, #8
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
 8009d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d66:	e05d      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa97 	bl	800a29e <USBD_CtlError>
            err++;
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	3301      	adds	r3, #1
 8009d74:	72fb      	strb	r3, [r7, #11]
          break;
 8009d76:	e055      	b.n	8009e24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00b      	beq.n	8009d9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	7c12      	ldrb	r2, [r2, #16]
 8009d90:	f107 0108 	add.w	r1, r7, #8
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d9a:	e043      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa7d 	bl	800a29e <USBD_CtlError>
            err++;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	3301      	adds	r3, #1
 8009da8:	72fb      	strb	r3, [r7, #11]
          break;
 8009daa:	e03b      	b.n	8009e24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	7c12      	ldrb	r2, [r2, #16]
 8009dc4:	f107 0108 	add.w	r1, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dce:	e029      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa63 	bl	800a29e <USBD_CtlError>
            err++;
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8009dde:	e021      	b.n	8009e24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00b      	beq.n	8009e04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	7c12      	ldrb	r2, [r2, #16]
 8009df8:	f107 0108 	add.w	r1, r7, #8
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4798      	blx	r3
 8009e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e02:	e00f      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e04:	6839      	ldr	r1, [r7, #0]
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fa49 	bl	800a29e <USBD_CtlError>
            err++;
 8009e0c:	7afb      	ldrb	r3, [r7, #11]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	72fb      	strb	r3, [r7, #11]
          break;
 8009e12:	e007      	b.n	8009e24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fa41 	bl	800a29e <USBD_CtlError>
          err++;
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e22:	bf00      	nop
      }
      break;
 8009e24:	e037      	b.n	8009e96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	7c1b      	ldrb	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e36:	f107 0208 	add.w	r2, r7, #8
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4798      	blx	r3
 8009e3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e40:	e029      	b.n	8009e96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fa2a 	bl	800a29e <USBD_CtlError>
        err++;
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e50:	e021      	b.n	8009e96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	7c1b      	ldrb	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10d      	bne.n	8009e76 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	f107 0208 	add.w	r2, r7, #8
 8009e66:	4610      	mov	r0, r2
 8009e68:	4798      	blx	r3
 8009e6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	2207      	movs	r2, #7
 8009e72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e74:	e00f      	b.n	8009e96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fa10 	bl	800a29e <USBD_CtlError>
        err++;
 8009e7e:	7afb      	ldrb	r3, [r7, #11]
 8009e80:	3301      	adds	r3, #1
 8009e82:	72fb      	strb	r3, [r7, #11]
      break;
 8009e84:	e007      	b.n	8009e96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fa08 	bl	800a29e <USBD_CtlError>
      err++;
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	3301      	adds	r3, #1
 8009e92:	72fb      	strb	r3, [r7, #11]
      break;
 8009e94:	bf00      	nop
  }

  if (err != 0U)
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11e      	bne.n	8009eda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	88db      	ldrh	r3, [r3, #6]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d016      	beq.n	8009ed2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ea4:	893b      	ldrh	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00e      	beq.n	8009ec8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88da      	ldrh	r2, [r3, #6]
 8009eae:	893b      	ldrh	r3, [r7, #8]
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	bf28      	it	cs
 8009eb4:	4613      	movcs	r3, r2
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009eba:	893b      	ldrh	r3, [r7, #8]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	68f9      	ldr	r1, [r7, #12]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fa5d 	bl	800a380 <USBD_CtlSendData>
 8009ec6:	e009      	b.n	8009edc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f9e7 	bl	800a29e <USBD_CtlError>
 8009ed0:	e004      	b.n	8009edc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 faae 	bl	800a434 <USBD_CtlSendStatus>
 8009ed8:	e000      	b.n	8009edc <USBD_GetDescriptor+0x320>
    return;
 8009eda:	bf00      	nop
  }
}
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop

08009ee4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	889b      	ldrh	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d131      	bne.n	8009f5a <USBD_SetAddress+0x76>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	88db      	ldrh	r3, [r3, #6]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d12d      	bne.n	8009f5a <USBD_SetAddress+0x76>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	885b      	ldrh	r3, [r3, #2]
 8009f02:	2b7f      	cmp	r3, #127	; 0x7f
 8009f04:	d829      	bhi.n	8009f5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	885b      	ldrh	r3, [r3, #2]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d104      	bne.n	8009f28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9bc 	bl	800a29e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f26:	e01d      	b.n	8009f64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7bfa      	ldrb	r2, [r7, #15]
 8009f2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 ff61 	bl	800adfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa7a 	bl	800a434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d004      	beq.n	8009f50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2202      	movs	r2, #2
 8009f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4e:	e009      	b.n	8009f64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f58:	e004      	b.n	8009f64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f99e 	bl	800a29e <USBD_CtlError>
  }
}
 8009f62:	bf00      	nop
 8009f64:	bf00      	nop
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	885b      	ldrh	r3, [r3, #2]
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	4b4e      	ldr	r3, [pc, #312]	; (800a0bc <USBD_SetConfig+0x150>)
 8009f82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f84:	4b4d      	ldr	r3, [pc, #308]	; (800a0bc <USBD_SetConfig+0x150>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d905      	bls.n	8009f98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f985 	bl	800a29e <USBD_CtlError>
    return USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e08c      	b.n	800a0b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d002      	beq.n	8009faa <USBD_SetConfig+0x3e>
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d029      	beq.n	8009ffc <USBD_SetConfig+0x90>
 8009fa8:	e075      	b.n	800a096 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009faa:	4b44      	ldr	r3, [pc, #272]	; (800a0bc <USBD_SetConfig+0x150>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d020      	beq.n	8009ff4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009fb2:	4b42      	ldr	r3, [pc, #264]	; (800a0bc <USBD_SetConfig+0x150>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fbc:	4b3f      	ldr	r3, [pc, #252]	; (800a0bc <USBD_SetConfig+0x150>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7fe ffbd 	bl	8008f42 <USBD_SetClassConfig>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d008      	beq.n	8009fe4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f962 	bl	800a29e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fe2:	e065      	b.n	800a0b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fa25 	bl	800a434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2203      	movs	r2, #3
 8009fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ff2:	e05d      	b.n	800a0b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa1d 	bl	800a434 <USBD_CtlSendStatus>
      break;
 8009ffa:	e059      	b.n	800a0b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ffc:	4b2f      	ldr	r3, [pc, #188]	; (800a0bc <USBD_SetConfig+0x150>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d112      	bne.n	800a02a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a00c:	4b2b      	ldr	r3, [pc, #172]	; (800a0bc <USBD_SetConfig+0x150>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	461a      	mov	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a016:	4b29      	ldr	r3, [pc, #164]	; (800a0bc <USBD_SetConfig+0x150>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7fe ffac 	bl	8008f7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa06 	bl	800a434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a028:	e042      	b.n	800a0b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a02a:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <USBD_SetConfig+0x150>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	429a      	cmp	r2, r3
 800a036:	d02a      	beq.n	800a08e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7fe ff9a 	bl	8008f7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a046:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <USBD_SetConfig+0x150>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a050:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <USBD_SetConfig+0x150>)
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7fe ff73 	bl	8008f42 <USBD_SetClassConfig>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00f      	beq.n	800a086 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f918 	bl	800a29e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7fe ff7f 	bl	8008f7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a084:	e014      	b.n	800a0b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f9d4 	bl	800a434 <USBD_CtlSendStatus>
      break;
 800a08c:	e010      	b.n	800a0b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f9d0 	bl	800a434 <USBD_CtlSendStatus>
      break;
 800a094:	e00c      	b.n	800a0b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f900 	bl	800a29e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a09e:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <USBD_SetConfig+0x150>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7fe ff68 	bl	8008f7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ae:	bf00      	nop
  }

  return ret;
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000768 	.word	0x20000768

0800a0c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	88db      	ldrh	r3, [r3, #6]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d004      	beq.n	800a0dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f8e2 	bl	800a29e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0da:	e023      	b.n	800a124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	dc02      	bgt.n	800a0ee <USBD_GetConfig+0x2e>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc03      	bgt.n	800a0f4 <USBD_GetConfig+0x34>
 800a0ec:	e015      	b.n	800a11a <USBD_GetConfig+0x5a>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d00b      	beq.n	800a10a <USBD_GetConfig+0x4a>
 800a0f2:	e012      	b.n	800a11a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	2201      	movs	r2, #1
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f93c 	bl	800a380 <USBD_CtlSendData>
        break;
 800a108:	e00c      	b.n	800a124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3304      	adds	r3, #4
 800a10e:	2201      	movs	r2, #1
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f934 	bl	800a380 <USBD_CtlSendData>
        break;
 800a118:	e004      	b.n	800a124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f8be 	bl	800a29e <USBD_CtlError>
        break;
 800a122:	bf00      	nop
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	2b02      	cmp	r3, #2
 800a142:	d81e      	bhi.n	800a182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	88db      	ldrh	r3, [r3, #6]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d004      	beq.n	800a156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f8a5 	bl	800a29e <USBD_CtlError>
        break;
 800a154:	e01a      	b.n	800a18c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a162:	2b00      	cmp	r3, #0
 800a164:	d005      	beq.n	800a172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f043 0202 	orr.w	r2, r3, #2
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	330c      	adds	r3, #12
 800a176:	2202      	movs	r2, #2
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f900 	bl	800a380 <USBD_CtlSendData>
      break;
 800a180:	e004      	b.n	800a18c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f88a 	bl	800a29e <USBD_CtlError>
      break;
 800a18a:	bf00      	nop
  }
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	885b      	ldrh	r3, [r3, #2]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d107      	bne.n	800a1b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f940 	bl	800a434 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1b4:	e013      	b.n	800a1de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	885b      	ldrh	r3, [r3, #2]
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d10b      	bne.n	800a1d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	889b      	ldrh	r3, [r3, #4]
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f930 	bl	800a434 <USBD_CtlSendStatus>
}
 800a1d4:	e003      	b.n	800a1de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f860 	bl	800a29e <USBD_CtlError>
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d80b      	bhi.n	800a216 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	885b      	ldrh	r3, [r3, #2]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d10c      	bne.n	800a220 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f910 	bl	800a434 <USBD_CtlSendStatus>
      }
      break;
 800a214:	e004      	b.n	800a220 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f840 	bl	800a29e <USBD_CtlError>
      break;
 800a21e:	e000      	b.n	800a222 <USBD_ClrFeature+0x3c>
      break;
 800a220:	bf00      	nop
  }
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3301      	adds	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	781a      	ldrb	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fa17 	bl	8009688 <SWAPBYTE>
 800a25a:	4603      	mov	r3, r0
 800a25c:	461a      	mov	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	3301      	adds	r3, #1
 800a26c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7ff fa0a 	bl	8009688 <SWAPBYTE>
 800a274:	4603      	mov	r3, r0
 800a276:	461a      	mov	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3301      	adds	r3, #1
 800a280:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3301      	adds	r3, #1
 800a286:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff f9fd 	bl	8009688 <SWAPBYTE>
 800a28e:	4603      	mov	r3, r0
 800a290:	461a      	mov	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	80da      	strh	r2, [r3, #6]
}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2a8:	2180      	movs	r1, #128	; 0x80
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fd3c 	bl	800ad28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fd38 	bl	800ad28 <USBD_LL_StallEP>
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d036      	beq.n	800a344 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a2da:	6938      	ldr	r0, [r7, #16]
 800a2dc:	f000 f836 	bl	800a34c <USBD_GetLen>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	005b      	lsls	r3, r3, #1
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	7812      	ldrb	r2, [r2, #0]
 800a2f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	4413      	add	r3, r2
 800a306:	2203      	movs	r2, #3
 800a308:	701a      	strb	r2, [r3, #0]
  idx++;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	3301      	adds	r3, #1
 800a30e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a310:	e013      	b.n	800a33a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	4413      	add	r3, r2
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	7812      	ldrb	r2, [r2, #0]
 800a31c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	3301      	adds	r3, #1
 800a322:	613b      	str	r3, [r7, #16]
    idx++;
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	3301      	adds	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	4413      	add	r3, r2
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]
    idx++;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	3301      	adds	r3, #1
 800a338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e7      	bne.n	800a312 <USBD_GetString+0x52>
 800a342:	e000      	b.n	800a346 <USBD_GetString+0x86>
    return;
 800a344:	bf00      	nop
  }
}
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a35c:	e005      	b.n	800a36a <USBD_GetLen+0x1e>
  {
    len++;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	3301      	adds	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3301      	adds	r3, #1
 800a368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1f5      	bne.n	800a35e <USBD_GetLen+0x12>
  }

  return len;
 800a372:	7bfb      	ldrb	r3, [r7, #15]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2202      	movs	r2, #2
 800a390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 fd47 	bl	800ae3a <USBD_LL_Transmit>

  return USBD_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f000 fd36 	bl	800ae3a <USBD_LL_Transmit>

  return USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2203      	movs	r2, #3
 800a3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	2100      	movs	r1, #0
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fd3a 	bl	800ae7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	2100      	movs	r1, #0
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 fd29 	bl	800ae7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2204      	movs	r2, #4
 800a440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a444:	2300      	movs	r3, #0
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fcf5 	bl	800ae3a <USBD_LL_Transmit>

  return USBD_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b082      	sub	sp, #8
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2205      	movs	r2, #5
 800a466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a46a:	2300      	movs	r3, #0
 800a46c:	2200      	movs	r2, #0
 800a46e:	2100      	movs	r1, #0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fd03 	bl	800ae7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a484:	2200      	movs	r2, #0
 800a486:	4912      	ldr	r1, [pc, #72]	; (800a4d0 <MX_USB_DEVICE_Init+0x50>)
 800a488:	4812      	ldr	r0, [pc, #72]	; (800a4d4 <MX_USB_DEVICE_Init+0x54>)
 800a48a:	f7fe fcdd 	bl	8008e48 <USBD_Init>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a494:	f7f7 f8a2 	bl	80015dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a498:	490f      	ldr	r1, [pc, #60]	; (800a4d8 <MX_USB_DEVICE_Init+0x58>)
 800a49a:	480e      	ldr	r0, [pc, #56]	; (800a4d4 <MX_USB_DEVICE_Init+0x54>)
 800a49c:	f7fe fd04 	bl	8008ea8 <USBD_RegisterClass>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4a6:	f7f7 f899 	bl	80015dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4aa:	490c      	ldr	r1, [pc, #48]	; (800a4dc <MX_USB_DEVICE_Init+0x5c>)
 800a4ac:	4809      	ldr	r0, [pc, #36]	; (800a4d4 <MX_USB_DEVICE_Init+0x54>)
 800a4ae:	f7fe fbfb 	bl	8008ca8 <USBD_CDC_RegisterInterface>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4b8:	f7f7 f890 	bl	80015dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4bc:	4805      	ldr	r0, [pc, #20]	; (800a4d4 <MX_USB_DEVICE_Init+0x54>)
 800a4be:	f7fe fd29 	bl	8008f14 <USBD_Start>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4c8:	f7f7 f888 	bl	80015dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4cc:	bf00      	nop
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	200000ac 	.word	0x200000ac
 800a4d4:	2000076c 	.word	0x2000076c
 800a4d8:	20000018 	.word	0x20000018
 800a4dc:	20000098 	.word	0x20000098

0800a4e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4905      	ldr	r1, [pc, #20]	; (800a4fc <CDC_Init_FS+0x1c>)
 800a4e8:	4805      	ldr	r0, [pc, #20]	; (800a500 <CDC_Init_FS+0x20>)
 800a4ea:	f7fe fbf7 	bl	8008cdc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a4ee:	4905      	ldr	r1, [pc, #20]	; (800a504 <CDC_Init_FS+0x24>)
 800a4f0:	4803      	ldr	r0, [pc, #12]	; (800a500 <CDC_Init_FS+0x20>)
 800a4f2:	f7fe fc15 	bl	8008d20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20001248 	.word	0x20001248
 800a500:	2000076c 	.word	0x2000076c
 800a504:	20000a48 	.word	0x20000a48

0800a508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a508:	b480      	push	{r7}
 800a50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a50c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a50e:	4618      	mov	r0, r3
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
 800a524:	4613      	mov	r3, r2
 800a526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	2b23      	cmp	r3, #35	; 0x23
 800a52c:	d84a      	bhi.n	800a5c4 <CDC_Control_FS+0xac>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <CDC_Control_FS+0x1c>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a5c5 	.word	0x0800a5c5
 800a538:	0800a5c5 	.word	0x0800a5c5
 800a53c:	0800a5c5 	.word	0x0800a5c5
 800a540:	0800a5c5 	.word	0x0800a5c5
 800a544:	0800a5c5 	.word	0x0800a5c5
 800a548:	0800a5c5 	.word	0x0800a5c5
 800a54c:	0800a5c5 	.word	0x0800a5c5
 800a550:	0800a5c5 	.word	0x0800a5c5
 800a554:	0800a5c5 	.word	0x0800a5c5
 800a558:	0800a5c5 	.word	0x0800a5c5
 800a55c:	0800a5c5 	.word	0x0800a5c5
 800a560:	0800a5c5 	.word	0x0800a5c5
 800a564:	0800a5c5 	.word	0x0800a5c5
 800a568:	0800a5c5 	.word	0x0800a5c5
 800a56c:	0800a5c5 	.word	0x0800a5c5
 800a570:	0800a5c5 	.word	0x0800a5c5
 800a574:	0800a5c5 	.word	0x0800a5c5
 800a578:	0800a5c5 	.word	0x0800a5c5
 800a57c:	0800a5c5 	.word	0x0800a5c5
 800a580:	0800a5c5 	.word	0x0800a5c5
 800a584:	0800a5c5 	.word	0x0800a5c5
 800a588:	0800a5c5 	.word	0x0800a5c5
 800a58c:	0800a5c5 	.word	0x0800a5c5
 800a590:	0800a5c5 	.word	0x0800a5c5
 800a594:	0800a5c5 	.word	0x0800a5c5
 800a598:	0800a5c5 	.word	0x0800a5c5
 800a59c:	0800a5c5 	.word	0x0800a5c5
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5c5 	.word	0x0800a5c5
 800a5a8:	0800a5c5 	.word	0x0800a5c5
 800a5ac:	0800a5c5 	.word	0x0800a5c5
 800a5b0:	0800a5c5 	.word	0x0800a5c5
 800a5b4:	0800a5c5 	.word	0x0800a5c5
 800a5b8:	0800a5c5 	.word	0x0800a5c5
 800a5bc:	0800a5c5 	.word	0x0800a5c5
 800a5c0:	0800a5c5 	.word	0x0800a5c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5c4:	bf00      	nop
  }

  return (USBD_OK);
 800a5c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4818      	ldr	r0, [pc, #96]	; (800a644 <CDC_Receive_FS+0x70>)
 800a5e2:	f7fe fb9d 	bl	8008d20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a5e6:	4817      	ldr	r0, [pc, #92]	; (800a644 <CDC_Receive_FS+0x70>)
 800a5e8:	f7fe fbf8 	bl	8008ddc <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e016      	b.n	800a620 <CDC_Receive_FS+0x4c>
  {
	  Buf[i] = toupper(Buf[i]);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fdae 	bl	800b15c <toupper>
 800a600:	4601      	mov	r1, r0
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	4413      	add	r3, r2
 800a608:	b2ca      	uxtb	r2, r1
 800a60a:	701a      	strb	r2, [r3, #0]
	  test_enable = Buf[i];
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <CDC_Receive_FS+0x74>)
 800a618:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3301      	adds	r3, #1
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	429a      	cmp	r2, r3
 800a628:	d8e3      	bhi.n	800a5f2 <CDC_Receive_FS+0x1e>
  }

  CDC_Transmit_FS(Buf,*Len);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f80a 	bl	800a64c <CDC_Transmit_FS>



  return (USBD_OK);
 800a638:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	2000076c 	.word	0x2000076c
 800a648:	2000075c 	.word	0x2000075c

0800a64c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a65c:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <CDC_Transmit_FS+0x48>)
 800a65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a662:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a66e:	2301      	movs	r3, #1
 800a670:	e00b      	b.n	800a68a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a672:	887b      	ldrh	r3, [r7, #2]
 800a674:	461a      	mov	r2, r3
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	4806      	ldr	r0, [pc, #24]	; (800a694 <CDC_Transmit_FS+0x48>)
 800a67a:	f7fe fb2f 	bl	8008cdc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a67e:	4805      	ldr	r0, [pc, #20]	; (800a694 <CDC_Transmit_FS+0x48>)
 800a680:	f7fe fb6c 	bl	8008d5c <USBD_CDC_TransmitPacket>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a688:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	2000076c 	.word	0x2000076c

0800a698 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	371c      	adds	r7, #28
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr
	...

0800a6bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2212      	movs	r2, #18
 800a6cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6ce:	4b03      	ldr	r3, [pc, #12]	; (800a6dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	200000cc 	.word	0x200000cc

0800a6e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2204      	movs	r2, #4
 800a6f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6f2:	4b03      	ldr	r3, [pc, #12]	; (800a700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	200000ec 	.word	0x200000ec

0800a704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d105      	bne.n	800a722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	4907      	ldr	r1, [pc, #28]	; (800a738 <USBD_FS_ProductStrDescriptor+0x34>)
 800a71a:	4808      	ldr	r0, [pc, #32]	; (800a73c <USBD_FS_ProductStrDescriptor+0x38>)
 800a71c:	f7ff fdd0 	bl	800a2c0 <USBD_GetString>
 800a720:	e004      	b.n	800a72c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	4904      	ldr	r1, [pc, #16]	; (800a738 <USBD_FS_ProductStrDescriptor+0x34>)
 800a726:	4805      	ldr	r0, [pc, #20]	; (800a73c <USBD_FS_ProductStrDescriptor+0x38>)
 800a728:	f7ff fdca 	bl	800a2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20001a48 	.word	0x20001a48
 800a73c:	0800bac0 	.word	0x0800bac0

0800a740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	6039      	str	r1, [r7, #0]
 800a74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	4904      	ldr	r1, [pc, #16]	; (800a760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a750:	4804      	ldr	r0, [pc, #16]	; (800a764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a752:	f7ff fdb5 	bl	800a2c0 <USBD_GetString>
  return USBD_StrDesc;
 800a756:	4b02      	ldr	r3, [pc, #8]	; (800a760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20001a48 	.word	0x20001a48
 800a764:	0800bad8 	.word	0x0800bad8

0800a768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	221a      	movs	r2, #26
 800a778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a77a:	f000 f855 	bl	800a828 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a77e:	4b02      	ldr	r3, [pc, #8]	; (800a788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	200000f0 	.word	0x200000f0

0800a78c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	4907      	ldr	r1, [pc, #28]	; (800a7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7a2:	4808      	ldr	r0, [pc, #32]	; (800a7c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7a4:	f7ff fd8c 	bl	800a2c0 <USBD_GetString>
 800a7a8:	e004      	b.n	800a7b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4904      	ldr	r1, [pc, #16]	; (800a7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ae:	4805      	ldr	r0, [pc, #20]	; (800a7c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7b0:	f7ff fd86 	bl	800a2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	; (800a7c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20001a48 	.word	0x20001a48
 800a7c4:	0800baec 	.word	0x0800baec

0800a7c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4907      	ldr	r1, [pc, #28]	; (800a7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7de:	4808      	ldr	r0, [pc, #32]	; (800a800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7e0:	f7ff fd6e 	bl	800a2c0 <USBD_GetString>
 800a7e4:	e004      	b.n	800a7f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4904      	ldr	r1, [pc, #16]	; (800a7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7ec:	f7ff fd68 	bl	800a2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f0:	4b02      	ldr	r3, [pc, #8]	; (800a7fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20001a48 	.word	0x20001a48
 800a800:	0800baf8 	.word	0x0800baf8

0800a804 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	220c      	movs	r2, #12
 800a814:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a816:	4b03      	ldr	r3, [pc, #12]	; (800a824 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	200000e0 	.word	0x200000e0

0800a828 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a82e:	4b0f      	ldr	r3, [pc, #60]	; (800a86c <Get_SerialNum+0x44>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a834:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <Get_SerialNum+0x48>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a83a:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <Get_SerialNum+0x4c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d009      	beq.n	800a862 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a84e:	2208      	movs	r2, #8
 800a850:	4909      	ldr	r1, [pc, #36]	; (800a878 <Get_SerialNum+0x50>)
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 f814 	bl	800a880 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a858:	2204      	movs	r2, #4
 800a85a:	4908      	ldr	r1, [pc, #32]	; (800a87c <Get_SerialNum+0x54>)
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f000 f80f 	bl	800a880 <IntToUnicode>
  }
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	1ff07a10 	.word	0x1ff07a10
 800a870:	1ff07a14 	.word	0x1ff07a14
 800a874:	1ff07a18 	.word	0x1ff07a18
 800a878:	200000f2 	.word	0x200000f2
 800a87c:	20000102 	.word	0x20000102

0800a880 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4613      	mov	r3, r2
 800a88c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a892:	2300      	movs	r3, #0
 800a894:	75fb      	strb	r3, [r7, #23]
 800a896:	e027      	b.n	800a8e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	0f1b      	lsrs	r3, r3, #28
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d80b      	bhi.n	800a8b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	0f1b      	lsrs	r3, r3, #28
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	440b      	add	r3, r1
 800a8b0:	3230      	adds	r2, #48	; 0x30
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	e00a      	b.n	800a8ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	0f1b      	lsrs	r3, r3, #28
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3237      	adds	r2, #55	; 0x37
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	3301      	adds	r3, #1
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	75fb      	strb	r3, [r7, #23]
 800a8e8:	7dfa      	ldrb	r2, [r7, #23]
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d3d3      	bcc.n	800a898 <IntToUnicode+0x18>
  }
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
	...

0800a900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b0aa      	sub	sp, #168	; 0xa8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a908:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	609a      	str	r2, [r3, #8]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	2280      	movs	r2, #128	; 0x80
 800a91e:	2100      	movs	r1, #0
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fc45 	bl	800b1b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a92e:	d151      	bne.n	800a9d4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a934:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a936:	2300      	movs	r3, #0
 800a938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a93c:	f107 0314 	add.w	r3, r7, #20
 800a940:	4618      	mov	r0, r3
 800a942:	f7fa fa29 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a94c:	f7f6 fe46 	bl	80015dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a950:	4b22      	ldr	r3, [pc, #136]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a954:	4a21      	ldr	r2, [pc, #132]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	6313      	str	r3, [r2, #48]	; 0x30
 800a95c:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a968:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a96c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a970:	2302      	movs	r3, #2
 800a972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a976:	2300      	movs	r3, #0
 800a978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a97c:	2303      	movs	r3, #3
 800a97e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a982:	230a      	movs	r3, #10
 800a984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a988:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a98c:	4619      	mov	r1, r3
 800a98e:	4814      	ldr	r0, [pc, #80]	; (800a9e0 <HAL_PCD_MspInit+0xe0>)
 800a990:	f7f7 fea8 	bl	80026e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a994:	4b11      	ldr	r3, [pc, #68]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a998:	4a10      	ldr	r2, [pc, #64]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99e:	6353      	str	r3, [r2, #52]	; 0x34
 800a9a0:	4b0e      	ldr	r3, [pc, #56]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b0:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a9b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9b6:	6453      	str	r3, [r2, #68]	; 0x44
 800a9b8:	4b08      	ldr	r3, [pc, #32]	; (800a9dc <HAL_PCD_MspInit+0xdc>)
 800a9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	2043      	movs	r0, #67	; 0x43
 800a9ca:	f7f7 fe54 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9ce:	2043      	movs	r0, #67	; 0x43
 800a9d0:	f7f7 fe6d 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9d4:	bf00      	nop
 800a9d6:	37a8      	adds	r7, #168	; 0xa8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	40023800 	.word	0x40023800
 800a9e0:	40020000 	.word	0x40020000

0800a9e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f7fe fad7 	bl	8008fae <USBD_LL_SetupStage>
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	4619      	mov	r1, r3
 800aa32:	f7fe fb11 	bl	8009058 <USBD_LL_DataOutStage>
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	460b      	mov	r3, r1
 800aa48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800aa50:	78fa      	ldrb	r2, [r7, #3]
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	4613      	mov	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	334c      	adds	r3, #76	; 0x4c
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	78fb      	ldrb	r3, [r7, #3]
 800aa64:	4619      	mov	r1, r3
 800aa66:	f7fe fbaa 	bl	80091be <USBD_LL_DataInStage>
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe fcde 	bl	8009442 <USBD_LL_SOF>
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa96:	2301      	movs	r3, #1
 800aa98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]
 800aaa6:	e008      	b.n	800aaba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d102      	bne.n	800aab6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aab0:	2301      	movs	r3, #1
 800aab2:	73fb      	strb	r3, [r7, #15]
 800aab4:	e001      	b.n	800aaba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aab6:	f7f6 fd91 	bl	80015dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aac0:	7bfa      	ldrb	r2, [r7, #15]
 800aac2:	4611      	mov	r1, r2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe fc7e 	bl	80093c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe fc26 	bl	8009322 <USBD_LL_Reset>
}
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe fc79 	bl	80093e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	6812      	ldr	r2, [r2, #0]
 800ab02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab14:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <HAL_PCD_SuspendCallback+0x48>)
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	4a03      	ldr	r2, [pc, #12]	; (800ab28 <HAL_PCD_SuspendCallback+0x48>)
 800ab1a:	f043 0306 	orr.w	r3, r3, #6
 800ab1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	e000ed00 	.word	0xe000ed00

0800ab2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fc69 	bl	8009412 <USBD_LL_Resume>
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab5a:	78fa      	ldrb	r2, [r7, #3]
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fcc1 	bl	80094e6 <USBD_LL_IsoOUTIncomplete>
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab7e:	78fa      	ldrb	r2, [r7, #3]
 800ab80:	4611      	mov	r1, r2
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fe fc7d 	bl	8009482 <USBD_LL_IsoINIncomplete>
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fcd3 	bl	800954a <USBD_LL_DevConnected>
}
 800aba4:	bf00      	nop
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fcd0 	bl	8009560 <USBD_LL_DevDisconnected>
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d13f      	bne.n	800ac58 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800abd8:	4a22      	ldr	r2, [pc, #136]	; (800ac64 <USBD_LL_Init+0x9c>)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a20      	ldr	r2, [pc, #128]	; (800ac64 <USBD_LL_Init+0x9c>)
 800abe4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abe8:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <USBD_LL_Init+0x9c>)
 800abea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800abf0:	4b1c      	ldr	r3, [pc, #112]	; (800ac64 <USBD_LL_Init+0x9c>)
 800abf2:	2206      	movs	r2, #6
 800abf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abf6:	4b1b      	ldr	r3, [pc, #108]	; (800ac64 <USBD_LL_Init+0x9c>)
 800abf8:	2202      	movs	r2, #2
 800abfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abfc:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <USBD_LL_Init+0x9c>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac02:	4b18      	ldr	r3, [pc, #96]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac04:	2202      	movs	r2, #2
 800ac06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac08:	4b16      	ldr	r3, [pc, #88]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac0e:	4b15      	ldr	r3, [pc, #84]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac14:	4b13      	ldr	r3, [pc, #76]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ac1a:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac20:	4b10      	ldr	r3, [pc, #64]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac26:	4b0f      	ldr	r3, [pc, #60]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac2c:	480d      	ldr	r0, [pc, #52]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac2e:	f7f8 f850 	bl	8002cd2 <HAL_PCD_Init>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ac38:	f7f6 fcd0 	bl	80015dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac3c:	2180      	movs	r1, #128	; 0x80
 800ac3e:	4809      	ldr	r0, [pc, #36]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac40:	f7f9 facb 	bl	80041da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac44:	2240      	movs	r2, #64	; 0x40
 800ac46:	2100      	movs	r1, #0
 800ac48:	4806      	ldr	r0, [pc, #24]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac4a:	f7f9 fa7f 	bl	800414c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac4e:	2280      	movs	r2, #128	; 0x80
 800ac50:	2101      	movs	r1, #1
 800ac52:	4804      	ldr	r0, [pc, #16]	; (800ac64 <USBD_LL_Init+0x9c>)
 800ac54:	f7f9 fa7a 	bl	800414c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20001c48 	.word	0x20001c48

0800ac68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f8 f94b 	bl	8002f1a <HAL_PCD_Start>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 f97e 	bl	800af8c <USBD_Get_USB_Status>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	4608      	mov	r0, r1
 800aca8:	4611      	mov	r1, r2
 800acaa:	461a      	mov	r2, r3
 800acac:	4603      	mov	r3, r0
 800acae:	70fb      	strb	r3, [r7, #3]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70bb      	strb	r3, [r7, #2]
 800acb4:	4613      	mov	r3, r2
 800acb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800acc6:	78bb      	ldrb	r3, [r7, #2]
 800acc8:	883a      	ldrh	r2, [r7, #0]
 800acca:	78f9      	ldrb	r1, [r7, #3]
 800accc:	f7f8 fe38 	bl	8003940 <HAL_PCD_EP_Open>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f958 	bl	800af8c <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f8 fe81 	bl	8003a10 <HAL_PCD_EP_Close>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f939 	bl	800af8c <USBD_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad42:	78fa      	ldrb	r2, [r7, #3]
 800ad44:	4611      	mov	r1, r2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f8 ff59 	bl	8003bfe <HAL_PCD_EP_SetStall>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f91a 	bl	800af8c <USBD_Get_USB_Status>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7f8 ff9e 	bl	8003cc6 <HAL_PCD_EP_ClrStall>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f8fb 	bl	800af8c <USBD_Get_USB_Status>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da0b      	bge.n	800add8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	4613      	mov	r3, r2
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	333e      	adds	r3, #62	; 0x3e
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	e00b      	b.n	800adf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	4613      	mov	r3, r2
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	440b      	add	r3, r1
 800adea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800adee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7f8 fd6b 	bl	80038f6 <HAL_PCD_SetAddress>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 f8b0 	bl	800af8c <USBD_Get_USB_Status>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b086      	sub	sp, #24
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	607a      	str	r2, [r7, #4]
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	460b      	mov	r3, r1
 800ae48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae58:	7af9      	ldrb	r1, [r7, #11]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f7f8 fe84 	bl	8003b6a <HAL_PCD_EP_Transmit>
 800ae62:	4603      	mov	r3, r0
 800ae64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 f88f 	bl	800af8c <USBD_Get_USB_Status>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	607a      	str	r2, [r7, #4]
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae9a:	7af9      	ldrb	r1, [r7, #11]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	f7f8 fe00 	bl	8003aa4 <HAL_PCD_EP_Receive>
 800aea4:	4603      	mov	r3, r0
 800aea6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 f86e 	bl	800af8c <USBD_Get_USB_Status>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aeb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aed0:	78fa      	ldrb	r2, [r7, #3]
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f8 fe30 	bl	8003b3a <HAL_PCD_EP_GetRxCount>
 800aeda:	4603      	mov	r3, r0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <HAL_PCDEx_LPM_Callback+0x18>
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d01f      	beq.n	800af3a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aefa:	e03b      	b.n	800af74 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800af04:	f000 f83c 	bl	800af80 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af08:	4b1c      	ldr	r3, [pc, #112]	; (800af7c <HAL_PCDEx_LPM_Callback+0x98>)
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	4a1b      	ldr	r2, [pc, #108]	; (800af7c <HAL_PCDEx_LPM_Callback+0x98>)
 800af0e:	f023 0306 	bic.w	r3, r3, #6
 800af12:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af26:	f023 0301 	bic.w	r3, r3, #1
 800af2a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fa6d 	bl	8009412 <USBD_LL_Resume>
    break;
 800af38:	e01c      	b.n	800af74 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fa44 	bl	80093e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d005      	beq.n	800af72 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <HAL_PCDEx_LPM_Callback+0x98>)
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	4a04      	ldr	r2, [pc, #16]	; (800af7c <HAL_PCDEx_LPM_Callback+0x98>)
 800af6c:	f043 0306 	orr.w	r3, r3, #6
 800af70:	6113      	str	r3, [r2, #16]
    break;
 800af72:	bf00      	nop
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	e000ed00 	.word	0xe000ed00

0800af80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af84:	f7f5 ff62 	bl	8000e4c <SystemClock_Config>
}
 800af88:	bf00      	nop
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d817      	bhi.n	800afd0 <USBD_Get_USB_Status+0x44>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <USBD_Get_USB_Status+0x1c>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afbf 	.word	0x0800afbf
 800afb0:	0800afc5 	.word	0x0800afc5
 800afb4:	0800afcb 	.word	0x0800afcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	73fb      	strb	r3, [r7, #15]
    break;
 800afbc:	e00b      	b.n	800afd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afbe:	2303      	movs	r3, #3
 800afc0:	73fb      	strb	r3, [r7, #15]
    break;
 800afc2:	e008      	b.n	800afd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
    break;
 800afc8:	e005      	b.n	800afd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afca:	2303      	movs	r3, #3
 800afcc:	73fb      	strb	r3, [r7, #15]
    break;
 800afce:	e002      	b.n	800afd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afd0:	2303      	movs	r3, #3
 800afd2:	73fb      	strb	r3, [r7, #15]
    break;
 800afd4:	bf00      	nop
  }
  return usb_status;
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <malloc>:
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <malloc+0xc>)
 800afe6:	4601      	mov	r1, r0
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f000 b82b 	b.w	800b044 <_malloc_r>
 800afee:	bf00      	nop
 800aff0:	20000158 	.word	0x20000158

0800aff4 <free>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <free+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f000 b91d 	b.w	800b238 <_free_r>
 800affe:	bf00      	nop
 800b000:	20000158 	.word	0x20000158

0800b004 <sbrk_aligned>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	4e0e      	ldr	r6, [pc, #56]	; (800b040 <sbrk_aligned+0x3c>)
 800b008:	460c      	mov	r4, r1
 800b00a:	6831      	ldr	r1, [r6, #0]
 800b00c:	4605      	mov	r5, r0
 800b00e:	b911      	cbnz	r1, 800b016 <sbrk_aligned+0x12>
 800b010:	f000 f8d6 	bl	800b1c0 <_sbrk_r>
 800b014:	6030      	str	r0, [r6, #0]
 800b016:	4621      	mov	r1, r4
 800b018:	4628      	mov	r0, r5
 800b01a:	f000 f8d1 	bl	800b1c0 <_sbrk_r>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	d00a      	beq.n	800b038 <sbrk_aligned+0x34>
 800b022:	1cc4      	adds	r4, r0, #3
 800b024:	f024 0403 	bic.w	r4, r4, #3
 800b028:	42a0      	cmp	r0, r4
 800b02a:	d007      	beq.n	800b03c <sbrk_aligned+0x38>
 800b02c:	1a21      	subs	r1, r4, r0
 800b02e:	4628      	mov	r0, r5
 800b030:	f000 f8c6 	bl	800b1c0 <_sbrk_r>
 800b034:	3001      	adds	r0, #1
 800b036:	d101      	bne.n	800b03c <sbrk_aligned+0x38>
 800b038:	f04f 34ff 	mov.w	r4, #4294967295
 800b03c:	4620      	mov	r0, r4
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	20002154 	.word	0x20002154

0800b044 <_malloc_r>:
 800b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b048:	1ccd      	adds	r5, r1, #3
 800b04a:	f025 0503 	bic.w	r5, r5, #3
 800b04e:	3508      	adds	r5, #8
 800b050:	2d0c      	cmp	r5, #12
 800b052:	bf38      	it	cc
 800b054:	250c      	movcc	r5, #12
 800b056:	2d00      	cmp	r5, #0
 800b058:	4607      	mov	r7, r0
 800b05a:	db01      	blt.n	800b060 <_malloc_r+0x1c>
 800b05c:	42a9      	cmp	r1, r5
 800b05e:	d905      	bls.n	800b06c <_malloc_r+0x28>
 800b060:	230c      	movs	r3, #12
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	2600      	movs	r6, #0
 800b066:	4630      	mov	r0, r6
 800b068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b140 <_malloc_r+0xfc>
 800b070:	f000 f868 	bl	800b144 <__malloc_lock>
 800b074:	f8d8 3000 	ldr.w	r3, [r8]
 800b078:	461c      	mov	r4, r3
 800b07a:	bb5c      	cbnz	r4, 800b0d4 <_malloc_r+0x90>
 800b07c:	4629      	mov	r1, r5
 800b07e:	4638      	mov	r0, r7
 800b080:	f7ff ffc0 	bl	800b004 <sbrk_aligned>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	4604      	mov	r4, r0
 800b088:	d155      	bne.n	800b136 <_malloc_r+0xf2>
 800b08a:	f8d8 4000 	ldr.w	r4, [r8]
 800b08e:	4626      	mov	r6, r4
 800b090:	2e00      	cmp	r6, #0
 800b092:	d145      	bne.n	800b120 <_malloc_r+0xdc>
 800b094:	2c00      	cmp	r4, #0
 800b096:	d048      	beq.n	800b12a <_malloc_r+0xe6>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	4631      	mov	r1, r6
 800b09c:	4638      	mov	r0, r7
 800b09e:	eb04 0903 	add.w	r9, r4, r3
 800b0a2:	f000 f88d 	bl	800b1c0 <_sbrk_r>
 800b0a6:	4581      	cmp	r9, r0
 800b0a8:	d13f      	bne.n	800b12a <_malloc_r+0xe6>
 800b0aa:	6821      	ldr	r1, [r4, #0]
 800b0ac:	1a6d      	subs	r5, r5, r1
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f7ff ffa7 	bl	800b004 <sbrk_aligned>
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	d037      	beq.n	800b12a <_malloc_r+0xe6>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	442b      	add	r3, r5
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d038      	beq.n	800b13a <_malloc_r+0xf6>
 800b0c8:	685a      	ldr	r2, [r3, #4]
 800b0ca:	42a2      	cmp	r2, r4
 800b0cc:	d12b      	bne.n	800b126 <_malloc_r+0xe2>
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
 800b0d2:	e00f      	b.n	800b0f4 <_malloc_r+0xb0>
 800b0d4:	6822      	ldr	r2, [r4, #0]
 800b0d6:	1b52      	subs	r2, r2, r5
 800b0d8:	d41f      	bmi.n	800b11a <_malloc_r+0xd6>
 800b0da:	2a0b      	cmp	r2, #11
 800b0dc:	d917      	bls.n	800b10e <_malloc_r+0xca>
 800b0de:	1961      	adds	r1, r4, r5
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	6025      	str	r5, [r4, #0]
 800b0e4:	bf18      	it	ne
 800b0e6:	6059      	strne	r1, [r3, #4]
 800b0e8:	6863      	ldr	r3, [r4, #4]
 800b0ea:	bf08      	it	eq
 800b0ec:	f8c8 1000 	streq.w	r1, [r8]
 800b0f0:	5162      	str	r2, [r4, r5]
 800b0f2:	604b      	str	r3, [r1, #4]
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	f104 060b 	add.w	r6, r4, #11
 800b0fa:	f000 f829 	bl	800b150 <__malloc_unlock>
 800b0fe:	f026 0607 	bic.w	r6, r6, #7
 800b102:	1d23      	adds	r3, r4, #4
 800b104:	1af2      	subs	r2, r6, r3
 800b106:	d0ae      	beq.n	800b066 <_malloc_r+0x22>
 800b108:	1b9b      	subs	r3, r3, r6
 800b10a:	50a3      	str	r3, [r4, r2]
 800b10c:	e7ab      	b.n	800b066 <_malloc_r+0x22>
 800b10e:	42a3      	cmp	r3, r4
 800b110:	6862      	ldr	r2, [r4, #4]
 800b112:	d1dd      	bne.n	800b0d0 <_malloc_r+0x8c>
 800b114:	f8c8 2000 	str.w	r2, [r8]
 800b118:	e7ec      	b.n	800b0f4 <_malloc_r+0xb0>
 800b11a:	4623      	mov	r3, r4
 800b11c:	6864      	ldr	r4, [r4, #4]
 800b11e:	e7ac      	b.n	800b07a <_malloc_r+0x36>
 800b120:	4634      	mov	r4, r6
 800b122:	6876      	ldr	r6, [r6, #4]
 800b124:	e7b4      	b.n	800b090 <_malloc_r+0x4c>
 800b126:	4613      	mov	r3, r2
 800b128:	e7cc      	b.n	800b0c4 <_malloc_r+0x80>
 800b12a:	230c      	movs	r3, #12
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	4638      	mov	r0, r7
 800b130:	f000 f80e 	bl	800b150 <__malloc_unlock>
 800b134:	e797      	b.n	800b066 <_malloc_r+0x22>
 800b136:	6025      	str	r5, [r4, #0]
 800b138:	e7dc      	b.n	800b0f4 <_malloc_r+0xb0>
 800b13a:	605b      	str	r3, [r3, #4]
 800b13c:	deff      	udf	#255	; 0xff
 800b13e:	bf00      	nop
 800b140:	20002150 	.word	0x20002150

0800b144 <__malloc_lock>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__malloc_lock+0x8>)
 800b146:	f000 b875 	b.w	800b234 <__retarget_lock_acquire_recursive>
 800b14a:	bf00      	nop
 800b14c:	20002294 	.word	0x20002294

0800b150 <__malloc_unlock>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__malloc_unlock+0x8>)
 800b152:	f000 b870 	b.w	800b236 <__retarget_lock_release_recursive>
 800b156:	bf00      	nop
 800b158:	20002294 	.word	0x20002294

0800b15c <toupper>:
 800b15c:	4b03      	ldr	r3, [pc, #12]	; (800b16c <toupper+0x10>)
 800b15e:	5c1b      	ldrb	r3, [r3, r0]
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	2b02      	cmp	r3, #2
 800b166:	bf08      	it	eq
 800b168:	3820      	subeq	r0, #32
 800b16a:	4770      	bx	lr
 800b16c:	0800bb21 	.word	0x0800bb21

0800b170 <siprintf>:
 800b170:	b40e      	push	{r1, r2, r3}
 800b172:	b500      	push	{lr}
 800b174:	b09c      	sub	sp, #112	; 0x70
 800b176:	ab1d      	add	r3, sp, #116	; 0x74
 800b178:	9002      	str	r0, [sp, #8]
 800b17a:	9006      	str	r0, [sp, #24]
 800b17c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b180:	4809      	ldr	r0, [pc, #36]	; (800b1a8 <siprintf+0x38>)
 800b182:	9107      	str	r1, [sp, #28]
 800b184:	9104      	str	r1, [sp, #16]
 800b186:	4909      	ldr	r1, [pc, #36]	; (800b1ac <siprintf+0x3c>)
 800b188:	f853 2b04 	ldr.w	r2, [r3], #4
 800b18c:	9105      	str	r1, [sp, #20]
 800b18e:	6800      	ldr	r0, [r0, #0]
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	a902      	add	r1, sp, #8
 800b194:	f000 f8f6 	bl	800b384 <_svfiprintf_r>
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
 800b19e:	b01c      	add	sp, #112	; 0x70
 800b1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1a4:	b003      	add	sp, #12
 800b1a6:	4770      	bx	lr
 800b1a8:	20000158 	.word	0x20000158
 800b1ac:	ffff0208 	.word	0xffff0208

0800b1b0 <memset>:
 800b1b0:	4402      	add	r2, r0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d100      	bne.n	800b1ba <memset+0xa>
 800b1b8:	4770      	bx	lr
 800b1ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b1be:	e7f9      	b.n	800b1b4 <memset+0x4>

0800b1c0 <_sbrk_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_sbrk_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f6 fdf2 	bl	8001db4 <_sbrk>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_sbrk_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_sbrk_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20002290 	.word	0x20002290

0800b1e0 <__errno>:
 800b1e0:	4b01      	ldr	r3, [pc, #4]	; (800b1e8 <__errno+0x8>)
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	20000158 	.word	0x20000158

0800b1ec <__libc_init_array>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	4d0d      	ldr	r5, [pc, #52]	; (800b224 <__libc_init_array+0x38>)
 800b1f0:	4c0d      	ldr	r4, [pc, #52]	; (800b228 <__libc_init_array+0x3c>)
 800b1f2:	1b64      	subs	r4, r4, r5
 800b1f4:	10a4      	asrs	r4, r4, #2
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	42a6      	cmp	r6, r4
 800b1fa:	d109      	bne.n	800b210 <__libc_init_array+0x24>
 800b1fc:	4d0b      	ldr	r5, [pc, #44]	; (800b22c <__libc_init_array+0x40>)
 800b1fe:	4c0c      	ldr	r4, [pc, #48]	; (800b230 <__libc_init_array+0x44>)
 800b200:	f000 fbae 	bl	800b960 <_init>
 800b204:	1b64      	subs	r4, r4, r5
 800b206:	10a4      	asrs	r4, r4, #2
 800b208:	2600      	movs	r6, #0
 800b20a:	42a6      	cmp	r6, r4
 800b20c:	d105      	bne.n	800b21a <__libc_init_array+0x2e>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	f855 3b04 	ldr.w	r3, [r5], #4
 800b214:	4798      	blx	r3
 800b216:	3601      	adds	r6, #1
 800b218:	e7ee      	b.n	800b1f8 <__libc_init_array+0xc>
 800b21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21e:	4798      	blx	r3
 800b220:	3601      	adds	r6, #1
 800b222:	e7f2      	b.n	800b20a <__libc_init_array+0x1e>
 800b224:	0800bc5c 	.word	0x0800bc5c
 800b228:	0800bc5c 	.word	0x0800bc5c
 800b22c:	0800bc5c 	.word	0x0800bc5c
 800b230:	0800bc60 	.word	0x0800bc60

0800b234 <__retarget_lock_acquire_recursive>:
 800b234:	4770      	bx	lr

0800b236 <__retarget_lock_release_recursive>:
 800b236:	4770      	bx	lr

0800b238 <_free_r>:
 800b238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b23a:	2900      	cmp	r1, #0
 800b23c:	d044      	beq.n	800b2c8 <_free_r+0x90>
 800b23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b242:	9001      	str	r0, [sp, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	f1a1 0404 	sub.w	r4, r1, #4
 800b24a:	bfb8      	it	lt
 800b24c:	18e4      	addlt	r4, r4, r3
 800b24e:	f7ff ff79 	bl	800b144 <__malloc_lock>
 800b252:	4a1e      	ldr	r2, [pc, #120]	; (800b2cc <_free_r+0x94>)
 800b254:	9801      	ldr	r0, [sp, #4]
 800b256:	6813      	ldr	r3, [r2, #0]
 800b258:	b933      	cbnz	r3, 800b268 <_free_r+0x30>
 800b25a:	6063      	str	r3, [r4, #4]
 800b25c:	6014      	str	r4, [r2, #0]
 800b25e:	b003      	add	sp, #12
 800b260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b264:	f7ff bf74 	b.w	800b150 <__malloc_unlock>
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d908      	bls.n	800b27e <_free_r+0x46>
 800b26c:	6825      	ldr	r5, [r4, #0]
 800b26e:	1961      	adds	r1, r4, r5
 800b270:	428b      	cmp	r3, r1
 800b272:	bf01      	itttt	eq
 800b274:	6819      	ldreq	r1, [r3, #0]
 800b276:	685b      	ldreq	r3, [r3, #4]
 800b278:	1949      	addeq	r1, r1, r5
 800b27a:	6021      	streq	r1, [r4, #0]
 800b27c:	e7ed      	b.n	800b25a <_free_r+0x22>
 800b27e:	461a      	mov	r2, r3
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	b10b      	cbz	r3, 800b288 <_free_r+0x50>
 800b284:	42a3      	cmp	r3, r4
 800b286:	d9fa      	bls.n	800b27e <_free_r+0x46>
 800b288:	6811      	ldr	r1, [r2, #0]
 800b28a:	1855      	adds	r5, r2, r1
 800b28c:	42a5      	cmp	r5, r4
 800b28e:	d10b      	bne.n	800b2a8 <_free_r+0x70>
 800b290:	6824      	ldr	r4, [r4, #0]
 800b292:	4421      	add	r1, r4
 800b294:	1854      	adds	r4, r2, r1
 800b296:	42a3      	cmp	r3, r4
 800b298:	6011      	str	r1, [r2, #0]
 800b29a:	d1e0      	bne.n	800b25e <_free_r+0x26>
 800b29c:	681c      	ldr	r4, [r3, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	6053      	str	r3, [r2, #4]
 800b2a2:	440c      	add	r4, r1
 800b2a4:	6014      	str	r4, [r2, #0]
 800b2a6:	e7da      	b.n	800b25e <_free_r+0x26>
 800b2a8:	d902      	bls.n	800b2b0 <_free_r+0x78>
 800b2aa:	230c      	movs	r3, #12
 800b2ac:	6003      	str	r3, [r0, #0]
 800b2ae:	e7d6      	b.n	800b25e <_free_r+0x26>
 800b2b0:	6825      	ldr	r5, [r4, #0]
 800b2b2:	1961      	adds	r1, r4, r5
 800b2b4:	428b      	cmp	r3, r1
 800b2b6:	bf04      	itt	eq
 800b2b8:	6819      	ldreq	r1, [r3, #0]
 800b2ba:	685b      	ldreq	r3, [r3, #4]
 800b2bc:	6063      	str	r3, [r4, #4]
 800b2be:	bf04      	itt	eq
 800b2c0:	1949      	addeq	r1, r1, r5
 800b2c2:	6021      	streq	r1, [r4, #0]
 800b2c4:	6054      	str	r4, [r2, #4]
 800b2c6:	e7ca      	b.n	800b25e <_free_r+0x26>
 800b2c8:	b003      	add	sp, #12
 800b2ca:	bd30      	pop	{r4, r5, pc}
 800b2cc:	20002150 	.word	0x20002150

0800b2d0 <__ssputs_r>:
 800b2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d4:	688e      	ldr	r6, [r1, #8]
 800b2d6:	461f      	mov	r7, r3
 800b2d8:	42be      	cmp	r6, r7
 800b2da:	680b      	ldr	r3, [r1, #0]
 800b2dc:	4682      	mov	sl, r0
 800b2de:	460c      	mov	r4, r1
 800b2e0:	4690      	mov	r8, r2
 800b2e2:	d82c      	bhi.n	800b33e <__ssputs_r+0x6e>
 800b2e4:	898a      	ldrh	r2, [r1, #12]
 800b2e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2ea:	d026      	beq.n	800b33a <__ssputs_r+0x6a>
 800b2ec:	6965      	ldr	r5, [r4, #20]
 800b2ee:	6909      	ldr	r1, [r1, #16]
 800b2f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2f4:	eba3 0901 	sub.w	r9, r3, r1
 800b2f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2fc:	1c7b      	adds	r3, r7, #1
 800b2fe:	444b      	add	r3, r9
 800b300:	106d      	asrs	r5, r5, #1
 800b302:	429d      	cmp	r5, r3
 800b304:	bf38      	it	cc
 800b306:	461d      	movcc	r5, r3
 800b308:	0553      	lsls	r3, r2, #21
 800b30a:	d527      	bpl.n	800b35c <__ssputs_r+0x8c>
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7ff fe99 	bl	800b044 <_malloc_r>
 800b312:	4606      	mov	r6, r0
 800b314:	b360      	cbz	r0, 800b370 <__ssputs_r+0xa0>
 800b316:	6921      	ldr	r1, [r4, #16]
 800b318:	464a      	mov	r2, r9
 800b31a:	f000 fadb 	bl	800b8d4 <memcpy>
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	6126      	str	r6, [r4, #16]
 800b32c:	6165      	str	r5, [r4, #20]
 800b32e:	444e      	add	r6, r9
 800b330:	eba5 0509 	sub.w	r5, r5, r9
 800b334:	6026      	str	r6, [r4, #0]
 800b336:	60a5      	str	r5, [r4, #8]
 800b338:	463e      	mov	r6, r7
 800b33a:	42be      	cmp	r6, r7
 800b33c:	d900      	bls.n	800b340 <__ssputs_r+0x70>
 800b33e:	463e      	mov	r6, r7
 800b340:	6820      	ldr	r0, [r4, #0]
 800b342:	4632      	mov	r2, r6
 800b344:	4641      	mov	r1, r8
 800b346:	f000 faab 	bl	800b8a0 <memmove>
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	1b9b      	subs	r3, r3, r6
 800b34e:	60a3      	str	r3, [r4, #8]
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	4433      	add	r3, r6
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	2000      	movs	r0, #0
 800b358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35c:	462a      	mov	r2, r5
 800b35e:	f000 fac7 	bl	800b8f0 <_realloc_r>
 800b362:	4606      	mov	r6, r0
 800b364:	2800      	cmp	r0, #0
 800b366:	d1e0      	bne.n	800b32a <__ssputs_r+0x5a>
 800b368:	6921      	ldr	r1, [r4, #16]
 800b36a:	4650      	mov	r0, sl
 800b36c:	f7ff ff64 	bl	800b238 <_free_r>
 800b370:	230c      	movs	r3, #12
 800b372:	f8ca 3000 	str.w	r3, [sl]
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b37c:	81a3      	strh	r3, [r4, #12]
 800b37e:	f04f 30ff 	mov.w	r0, #4294967295
 800b382:	e7e9      	b.n	800b358 <__ssputs_r+0x88>

0800b384 <_svfiprintf_r>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	4698      	mov	r8, r3
 800b38a:	898b      	ldrh	r3, [r1, #12]
 800b38c:	061b      	lsls	r3, r3, #24
 800b38e:	b09d      	sub	sp, #116	; 0x74
 800b390:	4607      	mov	r7, r0
 800b392:	460d      	mov	r5, r1
 800b394:	4614      	mov	r4, r2
 800b396:	d50e      	bpl.n	800b3b6 <_svfiprintf_r+0x32>
 800b398:	690b      	ldr	r3, [r1, #16]
 800b39a:	b963      	cbnz	r3, 800b3b6 <_svfiprintf_r+0x32>
 800b39c:	2140      	movs	r1, #64	; 0x40
 800b39e:	f7ff fe51 	bl	800b044 <_malloc_r>
 800b3a2:	6028      	str	r0, [r5, #0]
 800b3a4:	6128      	str	r0, [r5, #16]
 800b3a6:	b920      	cbnz	r0, 800b3b2 <_svfiprintf_r+0x2e>
 800b3a8:	230c      	movs	r3, #12
 800b3aa:	603b      	str	r3, [r7, #0]
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	e0d0      	b.n	800b554 <_svfiprintf_r+0x1d0>
 800b3b2:	2340      	movs	r3, #64	; 0x40
 800b3b4:	616b      	str	r3, [r5, #20]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ba:	2320      	movs	r3, #32
 800b3bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c4:	2330      	movs	r3, #48	; 0x30
 800b3c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b56c <_svfiprintf_r+0x1e8>
 800b3ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ce:	f04f 0901 	mov.w	r9, #1
 800b3d2:	4623      	mov	r3, r4
 800b3d4:	469a      	mov	sl, r3
 800b3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3da:	b10a      	cbz	r2, 800b3e0 <_svfiprintf_r+0x5c>
 800b3dc:	2a25      	cmp	r2, #37	; 0x25
 800b3de:	d1f9      	bne.n	800b3d4 <_svfiprintf_r+0x50>
 800b3e0:	ebba 0b04 	subs.w	fp, sl, r4
 800b3e4:	d00b      	beq.n	800b3fe <_svfiprintf_r+0x7a>
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff ff6f 	bl	800b2d0 <__ssputs_r>
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f000 80a9 	beq.w	800b54a <_svfiprintf_r+0x1c6>
 800b3f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3fa:	445a      	add	r2, fp
 800b3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 80a1 	beq.w	800b54a <_svfiprintf_r+0x1c6>
 800b408:	2300      	movs	r3, #0
 800b40a:	f04f 32ff 	mov.w	r2, #4294967295
 800b40e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b412:	f10a 0a01 	add.w	sl, sl, #1
 800b416:	9304      	str	r3, [sp, #16]
 800b418:	9307      	str	r3, [sp, #28]
 800b41a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b41e:	931a      	str	r3, [sp, #104]	; 0x68
 800b420:	4654      	mov	r4, sl
 800b422:	2205      	movs	r2, #5
 800b424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b428:	4850      	ldr	r0, [pc, #320]	; (800b56c <_svfiprintf_r+0x1e8>)
 800b42a:	f7f4 fef9 	bl	8000220 <memchr>
 800b42e:	9a04      	ldr	r2, [sp, #16]
 800b430:	b9d8      	cbnz	r0, 800b46a <_svfiprintf_r+0xe6>
 800b432:	06d0      	lsls	r0, r2, #27
 800b434:	bf44      	itt	mi
 800b436:	2320      	movmi	r3, #32
 800b438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43c:	0711      	lsls	r1, r2, #28
 800b43e:	bf44      	itt	mi
 800b440:	232b      	movmi	r3, #43	; 0x2b
 800b442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b446:	f89a 3000 	ldrb.w	r3, [sl]
 800b44a:	2b2a      	cmp	r3, #42	; 0x2a
 800b44c:	d015      	beq.n	800b47a <_svfiprintf_r+0xf6>
 800b44e:	9a07      	ldr	r2, [sp, #28]
 800b450:	4654      	mov	r4, sl
 800b452:	2000      	movs	r0, #0
 800b454:	f04f 0c0a 	mov.w	ip, #10
 800b458:	4621      	mov	r1, r4
 800b45a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b45e:	3b30      	subs	r3, #48	; 0x30
 800b460:	2b09      	cmp	r3, #9
 800b462:	d94d      	bls.n	800b500 <_svfiprintf_r+0x17c>
 800b464:	b1b0      	cbz	r0, 800b494 <_svfiprintf_r+0x110>
 800b466:	9207      	str	r2, [sp, #28]
 800b468:	e014      	b.n	800b494 <_svfiprintf_r+0x110>
 800b46a:	eba0 0308 	sub.w	r3, r0, r8
 800b46e:	fa09 f303 	lsl.w	r3, r9, r3
 800b472:	4313      	orrs	r3, r2
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	46a2      	mov	sl, r4
 800b478:	e7d2      	b.n	800b420 <_svfiprintf_r+0x9c>
 800b47a:	9b03      	ldr	r3, [sp, #12]
 800b47c:	1d19      	adds	r1, r3, #4
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	9103      	str	r1, [sp, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	bfbb      	ittet	lt
 800b486:	425b      	neglt	r3, r3
 800b488:	f042 0202 	orrlt.w	r2, r2, #2
 800b48c:	9307      	strge	r3, [sp, #28]
 800b48e:	9307      	strlt	r3, [sp, #28]
 800b490:	bfb8      	it	lt
 800b492:	9204      	strlt	r2, [sp, #16]
 800b494:	7823      	ldrb	r3, [r4, #0]
 800b496:	2b2e      	cmp	r3, #46	; 0x2e
 800b498:	d10c      	bne.n	800b4b4 <_svfiprintf_r+0x130>
 800b49a:	7863      	ldrb	r3, [r4, #1]
 800b49c:	2b2a      	cmp	r3, #42	; 0x2a
 800b49e:	d134      	bne.n	800b50a <_svfiprintf_r+0x186>
 800b4a0:	9b03      	ldr	r3, [sp, #12]
 800b4a2:	1d1a      	adds	r2, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	9203      	str	r2, [sp, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	bfb8      	it	lt
 800b4ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4b0:	3402      	adds	r4, #2
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b57c <_svfiprintf_r+0x1f8>
 800b4b8:	7821      	ldrb	r1, [r4, #0]
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	4650      	mov	r0, sl
 800b4be:	f7f4 feaf 	bl	8000220 <memchr>
 800b4c2:	b138      	cbz	r0, 800b4d4 <_svfiprintf_r+0x150>
 800b4c4:	9b04      	ldr	r3, [sp, #16]
 800b4c6:	eba0 000a 	sub.w	r0, r0, sl
 800b4ca:	2240      	movs	r2, #64	; 0x40
 800b4cc:	4082      	lsls	r2, r0
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	3401      	adds	r4, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	4825      	ldr	r0, [pc, #148]	; (800b570 <_svfiprintf_r+0x1ec>)
 800b4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4de:	2206      	movs	r2, #6
 800b4e0:	f7f4 fe9e 	bl	8000220 <memchr>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d038      	beq.n	800b55a <_svfiprintf_r+0x1d6>
 800b4e8:	4b22      	ldr	r3, [pc, #136]	; (800b574 <_svfiprintf_r+0x1f0>)
 800b4ea:	bb1b      	cbnz	r3, 800b534 <_svfiprintf_r+0x1b0>
 800b4ec:	9b03      	ldr	r3, [sp, #12]
 800b4ee:	3307      	adds	r3, #7
 800b4f0:	f023 0307 	bic.w	r3, r3, #7
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fa:	4433      	add	r3, r6
 800b4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fe:	e768      	b.n	800b3d2 <_svfiprintf_r+0x4e>
 800b500:	fb0c 3202 	mla	r2, ip, r2, r3
 800b504:	460c      	mov	r4, r1
 800b506:	2001      	movs	r0, #1
 800b508:	e7a6      	b.n	800b458 <_svfiprintf_r+0xd4>
 800b50a:	2300      	movs	r3, #0
 800b50c:	3401      	adds	r4, #1
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	4619      	mov	r1, r3
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4620      	mov	r0, r4
 800b518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51c:	3a30      	subs	r2, #48	; 0x30
 800b51e:	2a09      	cmp	r2, #9
 800b520:	d903      	bls.n	800b52a <_svfiprintf_r+0x1a6>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0c6      	beq.n	800b4b4 <_svfiprintf_r+0x130>
 800b526:	9105      	str	r1, [sp, #20]
 800b528:	e7c4      	b.n	800b4b4 <_svfiprintf_r+0x130>
 800b52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b52e:	4604      	mov	r4, r0
 800b530:	2301      	movs	r3, #1
 800b532:	e7f0      	b.n	800b516 <_svfiprintf_r+0x192>
 800b534:	ab03      	add	r3, sp, #12
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	462a      	mov	r2, r5
 800b53a:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <_svfiprintf_r+0x1f4>)
 800b53c:	a904      	add	r1, sp, #16
 800b53e:	4638      	mov	r0, r7
 800b540:	f3af 8000 	nop.w
 800b544:	1c42      	adds	r2, r0, #1
 800b546:	4606      	mov	r6, r0
 800b548:	d1d6      	bne.n	800b4f8 <_svfiprintf_r+0x174>
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	065b      	lsls	r3, r3, #25
 800b54e:	f53f af2d 	bmi.w	800b3ac <_svfiprintf_r+0x28>
 800b552:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b554:	b01d      	add	sp, #116	; 0x74
 800b556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55a:	ab03      	add	r3, sp, #12
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	462a      	mov	r2, r5
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <_svfiprintf_r+0x1f4>)
 800b562:	a904      	add	r1, sp, #16
 800b564:	4638      	mov	r0, r7
 800b566:	f000 f879 	bl	800b65c <_printf_i>
 800b56a:	e7eb      	b.n	800b544 <_svfiprintf_r+0x1c0>
 800b56c:	0800bc21 	.word	0x0800bc21
 800b570:	0800bc2b 	.word	0x0800bc2b
 800b574:	00000000 	.word	0x00000000
 800b578:	0800b2d1 	.word	0x0800b2d1
 800b57c:	0800bc27 	.word	0x0800bc27

0800b580 <_printf_common>:
 800b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b584:	4616      	mov	r6, r2
 800b586:	4699      	mov	r9, r3
 800b588:	688a      	ldr	r2, [r1, #8]
 800b58a:	690b      	ldr	r3, [r1, #16]
 800b58c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b590:	4293      	cmp	r3, r2
 800b592:	bfb8      	it	lt
 800b594:	4613      	movlt	r3, r2
 800b596:	6033      	str	r3, [r6, #0]
 800b598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b59c:	4607      	mov	r7, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	b10a      	cbz	r2, 800b5a6 <_printf_common+0x26>
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	6033      	str	r3, [r6, #0]
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	0699      	lsls	r1, r3, #26
 800b5aa:	bf42      	ittt	mi
 800b5ac:	6833      	ldrmi	r3, [r6, #0]
 800b5ae:	3302      	addmi	r3, #2
 800b5b0:	6033      	strmi	r3, [r6, #0]
 800b5b2:	6825      	ldr	r5, [r4, #0]
 800b5b4:	f015 0506 	ands.w	r5, r5, #6
 800b5b8:	d106      	bne.n	800b5c8 <_printf_common+0x48>
 800b5ba:	f104 0a19 	add.w	sl, r4, #25
 800b5be:	68e3      	ldr	r3, [r4, #12]
 800b5c0:	6832      	ldr	r2, [r6, #0]
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	dc26      	bgt.n	800b616 <_printf_common+0x96>
 800b5c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5cc:	1e13      	subs	r3, r2, #0
 800b5ce:	6822      	ldr	r2, [r4, #0]
 800b5d0:	bf18      	it	ne
 800b5d2:	2301      	movne	r3, #1
 800b5d4:	0692      	lsls	r2, r2, #26
 800b5d6:	d42b      	bmi.n	800b630 <_printf_common+0xb0>
 800b5d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5dc:	4649      	mov	r1, r9
 800b5de:	4638      	mov	r0, r7
 800b5e0:	47c0      	blx	r8
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	d01e      	beq.n	800b624 <_printf_common+0xa4>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	6922      	ldr	r2, [r4, #16]
 800b5ea:	f003 0306 	and.w	r3, r3, #6
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	bf02      	ittt	eq
 800b5f2:	68e5      	ldreq	r5, [r4, #12]
 800b5f4:	6833      	ldreq	r3, [r6, #0]
 800b5f6:	1aed      	subeq	r5, r5, r3
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	bf0c      	ite	eq
 800b5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b600:	2500      	movne	r5, #0
 800b602:	4293      	cmp	r3, r2
 800b604:	bfc4      	itt	gt
 800b606:	1a9b      	subgt	r3, r3, r2
 800b608:	18ed      	addgt	r5, r5, r3
 800b60a:	2600      	movs	r6, #0
 800b60c:	341a      	adds	r4, #26
 800b60e:	42b5      	cmp	r5, r6
 800b610:	d11a      	bne.n	800b648 <_printf_common+0xc8>
 800b612:	2000      	movs	r0, #0
 800b614:	e008      	b.n	800b628 <_printf_common+0xa8>
 800b616:	2301      	movs	r3, #1
 800b618:	4652      	mov	r2, sl
 800b61a:	4649      	mov	r1, r9
 800b61c:	4638      	mov	r0, r7
 800b61e:	47c0      	blx	r8
 800b620:	3001      	adds	r0, #1
 800b622:	d103      	bne.n	800b62c <_printf_common+0xac>
 800b624:	f04f 30ff 	mov.w	r0, #4294967295
 800b628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62c:	3501      	adds	r5, #1
 800b62e:	e7c6      	b.n	800b5be <_printf_common+0x3e>
 800b630:	18e1      	adds	r1, r4, r3
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	2030      	movs	r0, #48	; 0x30
 800b636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b63a:	4422      	add	r2, r4
 800b63c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b644:	3302      	adds	r3, #2
 800b646:	e7c7      	b.n	800b5d8 <_printf_common+0x58>
 800b648:	2301      	movs	r3, #1
 800b64a:	4622      	mov	r2, r4
 800b64c:	4649      	mov	r1, r9
 800b64e:	4638      	mov	r0, r7
 800b650:	47c0      	blx	r8
 800b652:	3001      	adds	r0, #1
 800b654:	d0e6      	beq.n	800b624 <_printf_common+0xa4>
 800b656:	3601      	adds	r6, #1
 800b658:	e7d9      	b.n	800b60e <_printf_common+0x8e>
	...

0800b65c <_printf_i>:
 800b65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b660:	7e0f      	ldrb	r7, [r1, #24]
 800b662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b664:	2f78      	cmp	r7, #120	; 0x78
 800b666:	4691      	mov	r9, r2
 800b668:	4680      	mov	r8, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	469a      	mov	sl, r3
 800b66e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b672:	d807      	bhi.n	800b684 <_printf_i+0x28>
 800b674:	2f62      	cmp	r7, #98	; 0x62
 800b676:	d80a      	bhi.n	800b68e <_printf_i+0x32>
 800b678:	2f00      	cmp	r7, #0
 800b67a:	f000 80d4 	beq.w	800b826 <_printf_i+0x1ca>
 800b67e:	2f58      	cmp	r7, #88	; 0x58
 800b680:	f000 80c0 	beq.w	800b804 <_printf_i+0x1a8>
 800b684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b68c:	e03a      	b.n	800b704 <_printf_i+0xa8>
 800b68e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b692:	2b15      	cmp	r3, #21
 800b694:	d8f6      	bhi.n	800b684 <_printf_i+0x28>
 800b696:	a101      	add	r1, pc, #4	; (adr r1, 800b69c <_printf_i+0x40>)
 800b698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b69c:	0800b6f5 	.word	0x0800b6f5
 800b6a0:	0800b709 	.word	0x0800b709
 800b6a4:	0800b685 	.word	0x0800b685
 800b6a8:	0800b685 	.word	0x0800b685
 800b6ac:	0800b685 	.word	0x0800b685
 800b6b0:	0800b685 	.word	0x0800b685
 800b6b4:	0800b709 	.word	0x0800b709
 800b6b8:	0800b685 	.word	0x0800b685
 800b6bc:	0800b685 	.word	0x0800b685
 800b6c0:	0800b685 	.word	0x0800b685
 800b6c4:	0800b685 	.word	0x0800b685
 800b6c8:	0800b80d 	.word	0x0800b80d
 800b6cc:	0800b735 	.word	0x0800b735
 800b6d0:	0800b7c7 	.word	0x0800b7c7
 800b6d4:	0800b685 	.word	0x0800b685
 800b6d8:	0800b685 	.word	0x0800b685
 800b6dc:	0800b82f 	.word	0x0800b82f
 800b6e0:	0800b685 	.word	0x0800b685
 800b6e4:	0800b735 	.word	0x0800b735
 800b6e8:	0800b685 	.word	0x0800b685
 800b6ec:	0800b685 	.word	0x0800b685
 800b6f0:	0800b7cf 	.word	0x0800b7cf
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	602a      	str	r2, [r5, #0]
 800b6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b704:	2301      	movs	r3, #1
 800b706:	e09f      	b.n	800b848 <_printf_i+0x1ec>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	682b      	ldr	r3, [r5, #0]
 800b70c:	0607      	lsls	r7, r0, #24
 800b70e:	f103 0104 	add.w	r1, r3, #4
 800b712:	6029      	str	r1, [r5, #0]
 800b714:	d501      	bpl.n	800b71a <_printf_i+0xbe>
 800b716:	681e      	ldr	r6, [r3, #0]
 800b718:	e003      	b.n	800b722 <_printf_i+0xc6>
 800b71a:	0646      	lsls	r6, r0, #25
 800b71c:	d5fb      	bpl.n	800b716 <_printf_i+0xba>
 800b71e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b722:	2e00      	cmp	r6, #0
 800b724:	da03      	bge.n	800b72e <_printf_i+0xd2>
 800b726:	232d      	movs	r3, #45	; 0x2d
 800b728:	4276      	negs	r6, r6
 800b72a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b72e:	485a      	ldr	r0, [pc, #360]	; (800b898 <_printf_i+0x23c>)
 800b730:	230a      	movs	r3, #10
 800b732:	e012      	b.n	800b75a <_printf_i+0xfe>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	6820      	ldr	r0, [r4, #0]
 800b738:	1d19      	adds	r1, r3, #4
 800b73a:	6029      	str	r1, [r5, #0]
 800b73c:	0605      	lsls	r5, r0, #24
 800b73e:	d501      	bpl.n	800b744 <_printf_i+0xe8>
 800b740:	681e      	ldr	r6, [r3, #0]
 800b742:	e002      	b.n	800b74a <_printf_i+0xee>
 800b744:	0641      	lsls	r1, r0, #25
 800b746:	d5fb      	bpl.n	800b740 <_printf_i+0xe4>
 800b748:	881e      	ldrh	r6, [r3, #0]
 800b74a:	4853      	ldr	r0, [pc, #332]	; (800b898 <_printf_i+0x23c>)
 800b74c:	2f6f      	cmp	r7, #111	; 0x6f
 800b74e:	bf0c      	ite	eq
 800b750:	2308      	moveq	r3, #8
 800b752:	230a      	movne	r3, #10
 800b754:	2100      	movs	r1, #0
 800b756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b75a:	6865      	ldr	r5, [r4, #4]
 800b75c:	60a5      	str	r5, [r4, #8]
 800b75e:	2d00      	cmp	r5, #0
 800b760:	bfa2      	ittt	ge
 800b762:	6821      	ldrge	r1, [r4, #0]
 800b764:	f021 0104 	bicge.w	r1, r1, #4
 800b768:	6021      	strge	r1, [r4, #0]
 800b76a:	b90e      	cbnz	r6, 800b770 <_printf_i+0x114>
 800b76c:	2d00      	cmp	r5, #0
 800b76e:	d04b      	beq.n	800b808 <_printf_i+0x1ac>
 800b770:	4615      	mov	r5, r2
 800b772:	fbb6 f1f3 	udiv	r1, r6, r3
 800b776:	fb03 6711 	mls	r7, r3, r1, r6
 800b77a:	5dc7      	ldrb	r7, [r0, r7]
 800b77c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b780:	4637      	mov	r7, r6
 800b782:	42bb      	cmp	r3, r7
 800b784:	460e      	mov	r6, r1
 800b786:	d9f4      	bls.n	800b772 <_printf_i+0x116>
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d10b      	bne.n	800b7a4 <_printf_i+0x148>
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	07de      	lsls	r6, r3, #31
 800b790:	d508      	bpl.n	800b7a4 <_printf_i+0x148>
 800b792:	6923      	ldr	r3, [r4, #16]
 800b794:	6861      	ldr	r1, [r4, #4]
 800b796:	4299      	cmp	r1, r3
 800b798:	bfde      	ittt	le
 800b79a:	2330      	movle	r3, #48	; 0x30
 800b79c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7a4:	1b52      	subs	r2, r2, r5
 800b7a6:	6122      	str	r2, [r4, #16]
 800b7a8:	f8cd a000 	str.w	sl, [sp]
 800b7ac:	464b      	mov	r3, r9
 800b7ae:	aa03      	add	r2, sp, #12
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	f7ff fee4 	bl	800b580 <_printf_common>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d14a      	bne.n	800b852 <_printf_i+0x1f6>
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	b004      	add	sp, #16
 800b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	f043 0320 	orr.w	r3, r3, #32
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	4833      	ldr	r0, [pc, #204]	; (800b89c <_printf_i+0x240>)
 800b7d0:	2778      	movs	r7, #120	; 0x78
 800b7d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	6829      	ldr	r1, [r5, #0]
 800b7da:	061f      	lsls	r7, r3, #24
 800b7dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7e0:	d402      	bmi.n	800b7e8 <_printf_i+0x18c>
 800b7e2:	065f      	lsls	r7, r3, #25
 800b7e4:	bf48      	it	mi
 800b7e6:	b2b6      	uxthmi	r6, r6
 800b7e8:	07df      	lsls	r7, r3, #31
 800b7ea:	bf48      	it	mi
 800b7ec:	f043 0320 	orrmi.w	r3, r3, #32
 800b7f0:	6029      	str	r1, [r5, #0]
 800b7f2:	bf48      	it	mi
 800b7f4:	6023      	strmi	r3, [r4, #0]
 800b7f6:	b91e      	cbnz	r6, 800b800 <_printf_i+0x1a4>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	f023 0320 	bic.w	r3, r3, #32
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	2310      	movs	r3, #16
 800b802:	e7a7      	b.n	800b754 <_printf_i+0xf8>
 800b804:	4824      	ldr	r0, [pc, #144]	; (800b898 <_printf_i+0x23c>)
 800b806:	e7e4      	b.n	800b7d2 <_printf_i+0x176>
 800b808:	4615      	mov	r5, r2
 800b80a:	e7bd      	b.n	800b788 <_printf_i+0x12c>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	6826      	ldr	r6, [r4, #0]
 800b810:	6961      	ldr	r1, [r4, #20]
 800b812:	1d18      	adds	r0, r3, #4
 800b814:	6028      	str	r0, [r5, #0]
 800b816:	0635      	lsls	r5, r6, #24
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	d501      	bpl.n	800b820 <_printf_i+0x1c4>
 800b81c:	6019      	str	r1, [r3, #0]
 800b81e:	e002      	b.n	800b826 <_printf_i+0x1ca>
 800b820:	0670      	lsls	r0, r6, #25
 800b822:	d5fb      	bpl.n	800b81c <_printf_i+0x1c0>
 800b824:	8019      	strh	r1, [r3, #0]
 800b826:	2300      	movs	r3, #0
 800b828:	6123      	str	r3, [r4, #16]
 800b82a:	4615      	mov	r5, r2
 800b82c:	e7bc      	b.n	800b7a8 <_printf_i+0x14c>
 800b82e:	682b      	ldr	r3, [r5, #0]
 800b830:	1d1a      	adds	r2, r3, #4
 800b832:	602a      	str	r2, [r5, #0]
 800b834:	681d      	ldr	r5, [r3, #0]
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	2100      	movs	r1, #0
 800b83a:	4628      	mov	r0, r5
 800b83c:	f7f4 fcf0 	bl	8000220 <memchr>
 800b840:	b108      	cbz	r0, 800b846 <_printf_i+0x1ea>
 800b842:	1b40      	subs	r0, r0, r5
 800b844:	6060      	str	r0, [r4, #4]
 800b846:	6863      	ldr	r3, [r4, #4]
 800b848:	6123      	str	r3, [r4, #16]
 800b84a:	2300      	movs	r3, #0
 800b84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b850:	e7aa      	b.n	800b7a8 <_printf_i+0x14c>
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	462a      	mov	r2, r5
 800b856:	4649      	mov	r1, r9
 800b858:	4640      	mov	r0, r8
 800b85a:	47d0      	blx	sl
 800b85c:	3001      	adds	r0, #1
 800b85e:	d0ad      	beq.n	800b7bc <_printf_i+0x160>
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	079b      	lsls	r3, r3, #30
 800b864:	d413      	bmi.n	800b88e <_printf_i+0x232>
 800b866:	68e0      	ldr	r0, [r4, #12]
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	4298      	cmp	r0, r3
 800b86c:	bfb8      	it	lt
 800b86e:	4618      	movlt	r0, r3
 800b870:	e7a6      	b.n	800b7c0 <_printf_i+0x164>
 800b872:	2301      	movs	r3, #1
 800b874:	4632      	mov	r2, r6
 800b876:	4649      	mov	r1, r9
 800b878:	4640      	mov	r0, r8
 800b87a:	47d0      	blx	sl
 800b87c:	3001      	adds	r0, #1
 800b87e:	d09d      	beq.n	800b7bc <_printf_i+0x160>
 800b880:	3501      	adds	r5, #1
 800b882:	68e3      	ldr	r3, [r4, #12]
 800b884:	9903      	ldr	r1, [sp, #12]
 800b886:	1a5b      	subs	r3, r3, r1
 800b888:	42ab      	cmp	r3, r5
 800b88a:	dcf2      	bgt.n	800b872 <_printf_i+0x216>
 800b88c:	e7eb      	b.n	800b866 <_printf_i+0x20a>
 800b88e:	2500      	movs	r5, #0
 800b890:	f104 0619 	add.w	r6, r4, #25
 800b894:	e7f5      	b.n	800b882 <_printf_i+0x226>
 800b896:	bf00      	nop
 800b898:	0800bc32 	.word	0x0800bc32
 800b89c:	0800bc43 	.word	0x0800bc43

0800b8a0 <memmove>:
 800b8a0:	4288      	cmp	r0, r1
 800b8a2:	b510      	push	{r4, lr}
 800b8a4:	eb01 0402 	add.w	r4, r1, r2
 800b8a8:	d902      	bls.n	800b8b0 <memmove+0x10>
 800b8aa:	4284      	cmp	r4, r0
 800b8ac:	4623      	mov	r3, r4
 800b8ae:	d807      	bhi.n	800b8c0 <memmove+0x20>
 800b8b0:	1e43      	subs	r3, r0, #1
 800b8b2:	42a1      	cmp	r1, r4
 800b8b4:	d008      	beq.n	800b8c8 <memmove+0x28>
 800b8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8be:	e7f8      	b.n	800b8b2 <memmove+0x12>
 800b8c0:	4402      	add	r2, r0
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	428a      	cmp	r2, r1
 800b8c6:	d100      	bne.n	800b8ca <memmove+0x2a>
 800b8c8:	bd10      	pop	{r4, pc}
 800b8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8d2:	e7f7      	b.n	800b8c4 <memmove+0x24>

0800b8d4 <memcpy>:
 800b8d4:	440a      	add	r2, r1
 800b8d6:	4291      	cmp	r1, r2
 800b8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8dc:	d100      	bne.n	800b8e0 <memcpy+0xc>
 800b8de:	4770      	bx	lr
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ea:	4291      	cmp	r1, r2
 800b8ec:	d1f9      	bne.n	800b8e2 <memcpy+0xe>
 800b8ee:	bd10      	pop	{r4, pc}

0800b8f0 <_realloc_r>:
 800b8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	4614      	mov	r4, r2
 800b8f8:	460e      	mov	r6, r1
 800b8fa:	b921      	cbnz	r1, 800b906 <_realloc_r+0x16>
 800b8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	4611      	mov	r1, r2
 800b902:	f7ff bb9f 	b.w	800b044 <_malloc_r>
 800b906:	b92a      	cbnz	r2, 800b914 <_realloc_r+0x24>
 800b908:	f7ff fc96 	bl	800b238 <_free_r>
 800b90c:	4625      	mov	r5, r4
 800b90e:	4628      	mov	r0, r5
 800b910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b914:	f000 f81b 	bl	800b94e <_malloc_usable_size_r>
 800b918:	4284      	cmp	r4, r0
 800b91a:	4607      	mov	r7, r0
 800b91c:	d802      	bhi.n	800b924 <_realloc_r+0x34>
 800b91e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b922:	d812      	bhi.n	800b94a <_realloc_r+0x5a>
 800b924:	4621      	mov	r1, r4
 800b926:	4640      	mov	r0, r8
 800b928:	f7ff fb8c 	bl	800b044 <_malloc_r>
 800b92c:	4605      	mov	r5, r0
 800b92e:	2800      	cmp	r0, #0
 800b930:	d0ed      	beq.n	800b90e <_realloc_r+0x1e>
 800b932:	42bc      	cmp	r4, r7
 800b934:	4622      	mov	r2, r4
 800b936:	4631      	mov	r1, r6
 800b938:	bf28      	it	cs
 800b93a:	463a      	movcs	r2, r7
 800b93c:	f7ff ffca 	bl	800b8d4 <memcpy>
 800b940:	4631      	mov	r1, r6
 800b942:	4640      	mov	r0, r8
 800b944:	f7ff fc78 	bl	800b238 <_free_r>
 800b948:	e7e1      	b.n	800b90e <_realloc_r+0x1e>
 800b94a:	4635      	mov	r5, r6
 800b94c:	e7df      	b.n	800b90e <_realloc_r+0x1e>

0800b94e <_malloc_usable_size_r>:
 800b94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b952:	1f18      	subs	r0, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	bfbc      	itt	lt
 800b958:	580b      	ldrlt	r3, [r1, r0]
 800b95a:	18c0      	addlt	r0, r0, r3
 800b95c:	4770      	bx	lr
	...

0800b960 <_init>:
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b962:	bf00      	nop
 800b964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b966:	bc08      	pop	{r3}
 800b968:	469e      	mov	lr, r3
 800b96a:	4770      	bx	lr

0800b96c <_fini>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	bf00      	nop
 800b970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b972:	bc08      	pop	{r3}
 800b974:	469e      	mov	lr, r3
 800b976:	4770      	bx	lr
