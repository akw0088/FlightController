
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009754  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009934  08009934  00019934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009994  08009994  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800999c  0800999c  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080099a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002094  2000015c  08009b00  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021f0  08009b00  000221f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019436  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003924  00000000  00000000  00039605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8f  00000000  00000000  0003e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ac8  00000000  00000000  0003f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c074  00000000  00000000  00064dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de0e6  00000000  00000000  00080e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005790  00000000  00000000  0015ef1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001646ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000015c 	.word	0x2000015c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800991c 	.word	0x0800991c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000160 	.word	0x20000160
 800021c:	0800991c 	.word	0x0800991c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f001 f845 	bl	80015ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81e 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fb44 	bl	8000bb4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800052c:	f008 fb46 	bl	8008bbc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000530:	f000 f882 	bl	8000638 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000534:	f000 f8d2 	bl	80006dc <MX_ADC2_Init>
  MX_I2C1_Init();
 8000538:	f000 f922 	bl	8000780 <MX_I2C1_Init>
  MX_SPI1_Init();
 800053c:	f000 f960 	bl	8000800 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000540:	f000 faa8 	bl	8000a94 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000544:	f000 fad6 	bl	8000af4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000548:	f000 fb04 	bl	8000b54 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800054c:	f000 f996 	bl	800087c <MX_SPI2_Init>
  MX_UART4_Init();
 8000550:	f000 fa10 	bl	8000974 <MX_UART4_Init>
  MX_UART5_Init();
 8000554:	f000 fa3e 	bl	80009d4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000558:	f000 fa6c 	bl	8000a34 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 800055c:	f000 f9cc 	bl	80008f8 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x44>
	...

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f009 f942 	bl	80097fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005bc:	2303      	movs	r3, #3
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2310      	movs	r3, #16
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 f99b 	bl	8003928 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f8:	f000 fb7c 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fc2a 	bl	8003e70 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 fb67 	bl	8000cf4 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000698:	f001 f80a 	bl	80016b0 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 fb27 	bl	8000cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006a6:	230b      	movs	r3, #11
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006b8:	f001 f83e 	bl	8001738 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 fb17 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000178 	.word	0x20000178
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC2_Init+0x98>)
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <MX_ADC2_Init+0x9c>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ADC2_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC2_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_ADC2_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ADC2_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC2_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_ADC2_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_ADC2_Init+0x98>)
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_ADC2_Init+0xa0>)
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_ADC2_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ADC2_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC2_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_ADC2_Init+0x98>)
 800073c:	f000 ffb8 	bl	80016b0 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 fad5 	bl	8000cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800074a:	230c      	movs	r3, #12
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2301      	movs	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_ADC2_Init+0x98>)
 800075c:	f000 ffec 	bl	8001738 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000766:	f000 fac5 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200001c0 	.word	0x200001c0
 8000778:	40012100 	.word	0x40012100
 800077c:	0f000001 	.word	0x0f000001

08000780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C1_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C1_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007bc:	f001 fcd4 	bl	8002168 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 fa95 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007ce:	f001 fd5b 	bl	8002288 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 fa8c 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007e0:	f001 fd9d 	bl	800231e <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fa83 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000208 	.word	0x20000208
 80007f8:	40005400 	.word	0x40005400
 80007fc:	00303d5b 	.word	0x00303d5b

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_SPI1_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_SPI1_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_SPI1_Init+0x74>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI1_Init+0x74>)
 800081a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800081e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI1_Init+0x74>)
 800082e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000832:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI1_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI1_Init+0x74>)
 800085a:	2208      	movs	r2, #8
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_SPI1_Init+0x74>)
 8000860:	f004 f876 	bl	8004950 <HAL_SPI_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 fa43 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000025c 	.word	0x2000025c
 8000878:	40013000 	.word	0x40013000

0800087c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI2_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI2_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI2_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x74>)
 8000896:	f44f 7240 	mov.w	r2, #768	; 0x300
 800089a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI2_Init+0x74>)
 80008dc:	f004 f838 	bl	8004950 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f000 fa05 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002c0 	.word	0x200002c0
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_SPI3_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_SPI3_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_SPI3_Init+0x74>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_SPI3_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_SPI3_Init+0x74>)
 8000912:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000916:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_SPI3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_SPI3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_SPI3_Init+0x74>)
 8000926:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800092a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_SPI3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_SPI3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_SPI3_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_SPI3_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_SPI3_Init+0x74>)
 8000946:	2207      	movs	r2, #7
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_SPI3_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_SPI3_Init+0x74>)
 8000952:	2208      	movs	r2, #8
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_SPI3_Init+0x74>)
 8000958:	f003 fffa 	bl	8004950 <HAL_SPI_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 f9c7 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000324 	.word	0x20000324
 8000970:	40003c00 	.word	0x40003c00

08000974 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_UART4_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_UART4_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_UART4_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_UART4_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_UART4_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_UART4_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_UART4_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_UART4_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_UART4_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_UART4_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_UART4_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_UART4_Init+0x58>)
 80009b8:	f004 f875 	bl	8004aa6 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f997 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000388 	.word	0x20000388
 80009d0:	40004c00 	.word	0x40004c00

080009d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_UART5_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_UART5_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_UART5_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_UART5_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_UART5_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_UART5_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_UART5_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_UART5_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_UART5_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_UART5_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_UART5_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_UART5_Init+0x58>)
 8000a18:	f004 f845 	bl	8004aa6 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f967 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000410 	.word	0x20000410
 8000a30:	40005000 	.word	0x40005000

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <MX_USART1_UART_Init+0x5c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART1_UART_Init+0x58>)
 8000a78:	f004 f815 	bl	8004aa6 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 f937 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000498 	.word	0x20000498
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_USART2_UART_Init+0x5c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ad8:	f003 ffe5 	bl	8004aa6 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f000 f907 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000520 	.word	0x20000520
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART3_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART3_UART_Init+0x58>)
 8000b38:	f003 ffb5 	bl	8004aa6 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f8d7 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200005a8 	.word	0x200005a8
 8000b50:	40004800 	.word	0x40004800

08000b54 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_USART6_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART6_UART_Init+0x58>)
 8000b98:	f003 ff85 	bl	8004aa6 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f8a7 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000630 	.word	0x20000630
 8000bb0:	40011400 	.word	0x40011400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a45      	ldr	r2, [pc, #276]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	4b40      	ldr	r3, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a3f      	ldr	r2, [pc, #252]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a39      	ldr	r2, [pc, #228]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a33      	ldr	r2, [pc, #204]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0x130>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 8000c42:	2200      	movs	r2, #0
 8000c44:	f24a 3101 	movw	r1, #41729	; 0xa301
 8000c48:	4827      	ldr	r0, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0x134>)
 8000c4a:	f001 fa73 	bl	8002134 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f648 41c3 	movw	r1, #36035	; 0x8cc3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <MX_GPIO_Init+0x138>)
 8000c56:	f001 fa6d 	bl	8002134 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|LED1_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <MX_GPIO_Init+0x13c>)
 8000c62:	f001 fa67 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 LED0_Pin PC0 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 8000c66:	f24a 3301 	movw	r3, #41729	; 0xa301
 8000c6a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <MX_GPIO_Init+0x134>)
 8000c80:	f001 f8bc 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 8000c84:	f244 0310 	movw	r3, #16400	; 0x4010
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_GPIO_Init+0x134>)
 8000c9c:	f001 f8ae 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB15 LED1_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000ca0:	f648 43c3 	movw	r3, #36035	; 0x8cc3
 8000ca4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|LED1_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0x138>)
 8000cba:	f001 f89f 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_GPIO_Init+0x13c>)
 8000cd8:	f001 f890 	bl	8001dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <HAL_ADC_MspInit+0xc8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d124      	bne.n	8000db4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <HAL_ADC_MspInit+0xd0>)
 8000dae:	f001 f825 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000db2:	e028      	b.n	8000e06 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_ADC_MspInit+0xd4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d123      	bne.n	8000e06 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_ADC_MspInit+0xcc>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dee:	2304      	movs	r3, #4
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_ADC_MspInit+0xd0>)
 8000e02:	f000 fffb 	bl	8001dfc <HAL_GPIO_Init>
}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	; 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40012000 	.word	0x40012000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40012100 	.word	0x40012100

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0aa      	sub	sp, #168	; 0xa8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f008 fcdb 	bl	80097fc <memset>
  if(hi2c->Instance==I2C1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <HAL_I2C_MspInit+0xb4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13c      	bne.n	8000eca <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fa2c 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e6a:	f7ff ff43 	bl	8000cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_I2C_MspInit+0xb8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_I2C_MspInit+0xb8>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_I2C_MspInit+0xb8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_I2C_MspInit+0xbc>)
 8000eae:	f000 ffa5 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_I2C_MspInit+0xb8>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_I2C_MspInit+0xb8>)
 8000eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_I2C_MspInit+0xb8>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	37a8      	adds	r7, #168	; 0xa8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a62      	ldr	r2, [pc, #392]	; (8001088 <HAL_SPI_MspInit+0x1a8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d128      	bne.n	8000f54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f02:	4b62      	ldr	r3, [pc, #392]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a61      	ldr	r2, [pc, #388]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b59      	ldr	r3, [pc, #356]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f32:	23f0      	movs	r3, #240	; 0xf0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f42:	2305      	movs	r3, #5
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4850      	ldr	r0, [pc, #320]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000f4e:	f000 ff55 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f52:	e094      	b.n	800107e <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_SPI_MspInit+0x1b4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d145      	bne.n	8000fea <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a4a      	ldr	r2, [pc, #296]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b48      	ldr	r3, [pc, #288]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b45      	ldr	r3, [pc, #276]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a44      	ldr	r2, [pc, #272]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a3e      	ldr	r2, [pc, #248]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4835      	ldr	r0, [pc, #212]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8000fc2:	f000 ff1b 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000fc6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd8:	2305      	movs	r3, #5
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482e      	ldr	r0, [pc, #184]	; (800109c <HAL_SPI_MspInit+0x1bc>)
 8000fe4:	f000 ff0a 	bl	8001dfc <HAL_GPIO_Init>
}
 8000fe8:	e049      	b.n	800107e <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <HAL_SPI_MspInit+0x1c0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d144      	bne.n	800107e <HAL_SPI_MspInit+0x19e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800103c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104e:	2306      	movs	r3, #6
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 800105a:	f000 fecf 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800105e:	2338      	movs	r3, #56	; 0x38
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800106e:	2306      	movs	r3, #6
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <HAL_SPI_MspInit+0x1bc>)
 800107a:	f000 febf 	bl	8001dfc <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3740      	adds	r7, #64	; 0x40
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40013000 	.word	0x40013000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40003800 	.word	0x40003800
 8001098:	40020800 	.word	0x40020800
 800109c:	40020400 	.word	0x40020400
 80010a0:	40003c00 	.word	0x40003c00

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b4      	sub	sp, #208	; 0xd0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fb99 	bl	80097fc <memset>
  if(huart->Instance==UART4)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4ab6      	ldr	r2, [pc, #728]	; (80013a8 <HAL_UART_MspInit+0x304>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d13d      	bne.n	8001150 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80010d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 f8e9 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80010f0:	f7ff fe00 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010f4:	4bad      	ldr	r3, [pc, #692]	; (80013ac <HAL_UART_MspInit+0x308>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4aac      	ldr	r2, [pc, #688]	; (80013ac <HAL_UART_MspInit+0x308>)
 80010fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4baa      	ldr	r3, [pc, #680]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
 800110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4ba7      	ldr	r3, [pc, #668]	; (80013ac <HAL_UART_MspInit+0x308>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4aa6      	ldr	r2, [pc, #664]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4ba4      	ldr	r3, [pc, #656]	; (80013ac <HAL_UART_MspInit+0x308>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001124:	2303      	movs	r3, #3
 8001126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800113c:	2308      	movs	r3, #8
 800113e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001146:	4619      	mov	r1, r3
 8001148:	4899      	ldr	r0, [pc, #612]	; (80013b0 <HAL_UART_MspInit+0x30c>)
 800114a:	f000 fe57 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800114e:	e17f      	b.n	8001450 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==UART5)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a97      	ldr	r2, [pc, #604]	; (80013b4 <HAL_UART_MspInit+0x310>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d15f      	bne.n	800121a <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800115a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f8a6 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001176:	f7ff fdbd 	bl	8000cf4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800117a:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <HAL_UART_MspInit+0x308>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a8b      	ldr	r2, [pc, #556]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b89      	ldr	r3, [pc, #548]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b86      	ldr	r3, [pc, #536]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a85      	ldr	r2, [pc, #532]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b83      	ldr	r3, [pc, #524]	; (80013ac <HAL_UART_MspInit+0x308>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b80      	ldr	r3, [pc, #512]	; (80013ac <HAL_UART_MspInit+0x308>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a7f      	ldr	r2, [pc, #508]	; (80013ac <HAL_UART_MspInit+0x308>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b7d      	ldr	r3, [pc, #500]	; (80013ac <HAL_UART_MspInit+0x308>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011dc:	2308      	movs	r3, #8
 80011de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011e6:	4619      	mov	r1, r3
 80011e8:	4873      	ldr	r0, [pc, #460]	; (80013b8 <HAL_UART_MspInit+0x314>)
 80011ea:	f000 fe07 	bl	8001dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ee:	2304      	movs	r3, #4
 80011f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001206:	2308      	movs	r3, #8
 8001208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001210:	4619      	mov	r1, r3
 8001212:	486a      	ldr	r0, [pc, #424]	; (80013bc <HAL_UART_MspInit+0x318>)
 8001214:	f000 fdf2 	bl	8001dfc <HAL_GPIO_Init>
}
 8001218:	e11a      	b.n	8001450 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <HAL_UART_MspInit+0x31c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d13c      	bne.n	800129e <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001228:	2300      	movs	r3, #0
 800122a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001230:	4618      	mov	r0, r3
 8001232:	f003 f843 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 800123c:	f7ff fd5a 	bl	8000cf4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001240:	4b5a      	ldr	r3, [pc, #360]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	4a59      	ldr	r2, [pc, #356]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6453      	str	r3, [r2, #68]	; 0x44
 800124c:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_UART_MspInit+0x308>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b54      	ldr	r3, [pc, #336]	; (80013ac <HAL_UART_MspInit+0x308>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a53      	ldr	r2, [pc, #332]	; (80013ac <HAL_UART_MspInit+0x308>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001270:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128a:	2307      	movs	r3, #7
 800128c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001294:	4619      	mov	r1, r3
 8001296:	4846      	ldr	r0, [pc, #280]	; (80013b0 <HAL_UART_MspInit+0x30c>)
 8001298:	f000 fdb0 	bl	8001dfc <HAL_GPIO_Init>
}
 800129c:	e0d8      	b.n	8001450 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_UART_MspInit+0x320>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d13b      	bne.n	8001320 <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 f801 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_UART_MspInit+0x220>
      Error_Handler();
 80012c0:	f7ff fd18 	bl	8000cf4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c4:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_UART_MspInit+0x308>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a38      	ldr	r2, [pc, #224]	; (80013ac <HAL_UART_MspInit+0x308>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_UART_MspInit+0x308>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <HAL_UART_MspInit+0x308>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_UART_MspInit+0x308>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_UART_MspInit+0x308>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f4:	230c      	movs	r3, #12
 80012f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130c:	2307      	movs	r3, #7
 800130e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001316:	4619      	mov	r1, r3
 8001318:	4825      	ldr	r0, [pc, #148]	; (80013b0 <HAL_UART_MspInit+0x30c>)
 800131a:	f000 fd6f 	bl	8001dfc <HAL_GPIO_Init>
}
 800131e:	e097      	b.n	8001450 <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <HAL_UART_MspInit+0x324>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d150      	bne.n	80013cc <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001336:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800133a:	4618      	mov	r0, r3
 800133c:	f002 ffbe 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_UART_MspInit+0x2a6>
      Error_Handler();
 8001346:	f7ff fcd5 	bl	8000cf4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_UART_MspInit+0x308>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_UART_MspInit+0x308>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800137a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800137e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0x314>)
 80013a2:	f000 fd2b 	bl	8001dfc <HAL_GPIO_Init>
}
 80013a6:	e053      	b.n	8001450 <HAL_UART_MspInit+0x3ac>
 80013a8:	40004c00 	.word	0x40004c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40005000 	.word	0x40005000
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40004400 	.word	0x40004400
 80013c8:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_UART_MspInit+0x3b4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d13c      	bne.n	8001450 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80013d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 ff68 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0x352>
      Error_Handler();
 80013f2:	f7ff fc7f 	bl	8000cf4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_UART_MspInit+0x3b8>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <HAL_UART_MspInit+0x3b8>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_UART_MspInit+0x3b8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_UART_MspInit+0x3b8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_UART_MspInit+0x3b8>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_UART_MspInit+0x3b8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800143e:	2308      	movs	r3, #8
 8001440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_UART_MspInit+0x3bc>)
 800144c:	f000 fcd6 	bl	8001dfc <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	37d0      	adds	r7, #208	; 0xd0
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40011400 	.word	0x40011400
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f8ba 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <OTG_FS_IRQHandler+0x10>)
 80014be:	f001 f8c0 	bl	8002642 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20001ba0 	.word	0x20001ba0

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f008 f996 	bl	800982c <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20040000 	.word	0x20040000
 800152c:	00000400 	.word	0x00000400
 8001530:	200006b8 	.word	0x200006b8
 8001534:	200021f0 	.word	0x200021f0

08001538 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001586:	f7ff ffd7 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f008 f955 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7fe ffc5 	bl	800051c <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80015a0:	080099a4 	.word	0x080099a4
  ldr r2, =_sbss
 80015a4:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80015a8:	200021f0 	.word	0x200021f0

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>

080015ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b2:	2003      	movs	r0, #3
 80015b4:	f000 fbe0 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b8:	200f      	movs	r0, #15
 80015ba:	f000 f805 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015be:	f7ff fb9f 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fbfb 	bl	8001de2 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 fbc3 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	200006bc 	.word	0x200006bc

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200006bc 	.word	0x200006bc

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e031      	b.n	800172a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fb3a 	bl	8000d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_ADC_Init+0x84>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	f043 0202 	orr.w	r2, r3, #2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f970 	bl	80019e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
 800171a:	e001      	b.n	8001720 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	ffffeefd 	.word	0xffffeefd

08001738 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1c>
 8001750:	2302      	movs	r3, #2
 8001752:	e136      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x28a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d93a      	bls.n	80017da <HAL_ADC_ConfigChannel+0xa2>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800176c:	d035      	beq.n	80017da <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68d9      	ldr	r1, [r3, #12]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	3b1e      	subs	r3, #30
 8001784:	2207      	movs	r2, #7
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a8d      	ldr	r2, [pc, #564]	; (80019d0 <HAL_ADC_ConfigChannel+0x298>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10a      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68d9      	ldr	r1, [r3, #12]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	061a      	lsls	r2, r3, #24
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b2:	e035      	b.n	8001820 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68d9      	ldr	r1, [r3, #12]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4403      	add	r3, r0
 80017cc:	3b1e      	subs	r3, #30
 80017ce:	409a      	lsls	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d8:	e022      	b.n	8001820 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6919      	ldr	r1, [r3, #16]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6919      	ldr	r1, [r3, #16]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4403      	add	r3, r0
 8001816:	409a      	lsls	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b06      	cmp	r3, #6
 8001826:	d824      	bhi.n	8001872 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3b05      	subs	r3, #5
 800183a:	221f      	movs	r2, #31
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43da      	mvns	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	400a      	ands	r2, r1
 8001848:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b05      	subs	r3, #5
 8001864:	fa00 f203 	lsl.w	r2, r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
 8001870:	e04c      	b.n	800190c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d824      	bhi.n	80018c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	3b23      	subs	r3, #35	; 0x23
 800188c:	221f      	movs	r2, #31
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	400a      	ands	r2, r1
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b23      	subs	r3, #35	; 0x23
 80018b6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
 80018c2:	e023      	b.n	800190c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b41      	subs	r3, #65	; 0x41
 80018d6:	221f      	movs	r2, #31
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b41      	subs	r3, #65	; 0x41
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_ADC_ConfigChannel+0x29c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10a      	bne.n	800192c <HAL_ADC_ConfigChannel+0x1f4>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800191e:	d105      	bne.n	800192c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001926:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800192a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <HAL_ADC_ConfigChannel+0x29c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10f      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x21e>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b12      	cmp	r3, #18
 800193c:	d10b      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001944:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001948:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001954:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_ADC_ConfigChannel+0x29c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d12b      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x280>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_ADC_ConfigChannel+0x298>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d003      	beq.n	8001972 <HAL_ADC_ConfigChannel+0x23a>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b11      	cmp	r3, #17
 8001970:	d122      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001978:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800197c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001988:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <HAL_ADC_ConfigChannel+0x298>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d111      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_ADC_ConfigChannel+0x2a4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0c9a      	lsrs	r2, r3, #18
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019aa:	e002      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f9      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	10000012 	.word	0x10000012
 80019d4:	40012000 	.word	0x40012000
 80019d8:	40012300 	.word	0x40012300
 80019dc:	20000000 	.word	0x20000000
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019ec:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <ADC_Init+0x1ec>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <ADC_Init+0x1ec>)
 80019f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <ADC_Init+0x1ec>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4973      	ldr	r1, [pc, #460]	; (8001bd0 <ADC_Init+0x1ec>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	021a      	lsls	r2, r3, #8
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <ADC_Init+0x1f0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d022      	beq.n	8001abe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6899      	ldr	r1, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	e00f      	b.n	8001ade <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0202 	bic.w	r2, r2, #2
 8001aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	005a      	lsls	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01b      	beq.n	8001b44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6859      	ldr	r1, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	3b01      	subs	r3, #1
 8001b38:	035a      	lsls	r2, r3, #13
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	e007      	b.n	8001b54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	051a      	lsls	r2, r3, #20
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b96:	025a      	lsls	r2, r3, #9
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	029a      	lsls	r2, r3, #10
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40012300 	.word	0x40012300
 8001bd4:	0f000001 	.word	0x0f000001

08001bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <__NVIC_SetPriorityGrouping+0x40>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x40>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	05fa0000 	.word	0x05fa0000

08001c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <__NVIC_GetPriorityGrouping+0x18>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 0307 	and.w	r3, r3, #7
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	db0b      	blt.n	8001c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	f003 021f 	and.w	r2, r3, #31
 8001c54:	4907      	ldr	r1, [pc, #28]	; (8001c74 <__NVIC_EnableIRQ+0x38>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff29 	bl	8001bd8 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff3e 	bl	8001c20 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff8e 	bl	8001ccc <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff31 	bl	8001c3c <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa2 	bl	8001d34 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e169      	b.n	80020f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8158 	bne.w	80020ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d005      	beq.n	8001e52 <HAL_GPIO_Init+0x56>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d130      	bne.n	8001eb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0201 	and.w	r2, r3, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d017      	beq.n	8001ef0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80b2 	beq.w	80020ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b60      	ldr	r3, [pc, #384]	; (8002108 <HAL_GPIO_Init+0x30c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a5f      	ldr	r2, [pc, #380]	; (8002108 <HAL_GPIO_Init+0x30c>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_GPIO_Init+0x30c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	; (800210c <HAL_GPIO_Init+0x310>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a52      	ldr	r2, [pc, #328]	; (8002110 <HAL_GPIO_Init+0x314>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02b      	beq.n	8002022 <HAL_GPIO_Init+0x226>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a51      	ldr	r2, [pc, #324]	; (8002114 <HAL_GPIO_Init+0x318>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d025      	beq.n	800201e <HAL_GPIO_Init+0x222>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a50      	ldr	r2, [pc, #320]	; (8002118 <HAL_GPIO_Init+0x31c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01f      	beq.n	800201a <HAL_GPIO_Init+0x21e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4f      	ldr	r2, [pc, #316]	; (800211c <HAL_GPIO_Init+0x320>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x21a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x216>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4d      	ldr	r2, [pc, #308]	; (8002124 <HAL_GPIO_Init+0x328>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x212>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4c      	ldr	r2, [pc, #304]	; (8002128 <HAL_GPIO_Init+0x32c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x20e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_GPIO_Init+0x330>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x20a>
 8002002:	2307      	movs	r3, #7
 8002004:	e00e      	b.n	8002024 <HAL_GPIO_Init+0x228>
 8002006:	2308      	movs	r3, #8
 8002008:	e00c      	b.n	8002024 <HAL_GPIO_Init+0x228>
 800200a:	2306      	movs	r3, #6
 800200c:	e00a      	b.n	8002024 <HAL_GPIO_Init+0x228>
 800200e:	2305      	movs	r3, #5
 8002010:	e008      	b.n	8002024 <HAL_GPIO_Init+0x228>
 8002012:	2304      	movs	r3, #4
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x228>
 8002016:	2303      	movs	r3, #3
 8002018:	e004      	b.n	8002024 <HAL_GPIO_Init+0x228>
 800201a:	2302      	movs	r3, #2
 800201c:	e002      	b.n	8002024 <HAL_GPIO_Init+0x228>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x228>
 8002022:	2300      	movs	r3, #0
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	f002 0203 	and.w	r2, r2, #3
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4093      	lsls	r3, r2
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002034:	4935      	ldr	r1, [pc, #212]	; (800210c <HAL_GPIO_Init+0x310>)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002042:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002066:	4a32      	ldr	r2, [pc, #200]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206c:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_GPIO_Init+0x334>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ba:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_GPIO_Init+0x334>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_GPIO_Init+0x334>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e4:	4a12      	ldr	r2, [pc, #72]	; (8002130 <HAL_GPIO_Init+0x334>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3301      	adds	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b0f      	cmp	r3, #15
 80020f4:	f67f ae92 	bls.w	8001e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40013800 	.word	0x40013800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40021400 	.word	0x40021400
 8002128:	40021800 	.word	0x40021800
 800212c:	40021c00 	.word	0x40021c00
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fe46 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d104      	bne.n	8002202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_I2C_Init+0x11c>)
 800220e:	430b      	orrs	r3, r1
 8002210:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002220:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69d9      	ldr	r1, [r3, #28]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	02008000 	.word	0x02008000

08002288 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b20      	cmp	r3, #32
 800229c:	d138      	bne.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e032      	b.n	8002312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	e000      	b.n	8002312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002310:	2302      	movs	r3, #2
  }
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b20      	cmp	r3, #32
 8002332:	d139      	bne.n	80023a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800233e:	2302      	movs	r3, #2
 8002340:	e033      	b.n	80023aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2224      	movs	r2, #36	; 0x24
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0201 	bic.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002370:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b8:	b08f      	sub	sp, #60	; 0x3c
 80023ba:	af0a      	add	r7, sp, #40	; 0x28
 80023bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e116      	b.n	80025f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 fddc 	bl	8008fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 f8db 	bl	80055c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	687e      	ldr	r6, [r7, #4]
 8002414:	466d      	mov	r5, sp
 8002416:	f106 0410 	add.w	r4, r6, #16
 800241a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002426:	e885 0003 	stmia.w	r5, {r0, r1}
 800242a:	1d33      	adds	r3, r6, #4
 800242c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f002 ff8c 	bl	800534c <USB_CoreInit>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0d7      	b.n	80025f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f003 f8c9 	bl	80055e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e04a      	b.n	80024ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	333d      	adds	r3, #61	; 0x3d
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	b298      	uxth	r0, r3
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3344      	adds	r3, #68	; 0x44
 8002494:	4602      	mov	r2, r0
 8002496:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3340      	adds	r3, #64	; 0x40
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3348      	adds	r3, #72	; 0x48
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	334c      	adds	r3, #76	; 0x4c
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3354      	adds	r3, #84	; 0x54
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	3301      	adds	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d3af      	bcc.n	8002458 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e044      	b.n	8002588 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	3301      	adds	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d3b5      	bcc.n	80024fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	687e      	ldr	r6, [r7, #4]
 800259a:	466d      	mov	r5, sp
 800259c:	f106 0410 	add.w	r4, r6, #16
 80025a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80025b0:	1d33      	adds	r3, r6, #4
 80025b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	f003 f861 	bl	800567c <USB_DevInit>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e014      	b.n	80025f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d102      	bne.n	80025ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f001 f97b 	bl	80038e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f004 f9bf 	bl	8006972 <USB_DevDisconnect>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_PCD_Start+0x16>
 8002610:	2302      	movs	r3, #2
 8002612:	e012      	b.n	800263a <HAL_PCD_Start+0x3c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f002 ffbd 	bl	80055a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 f980 	bl	8006930 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002642:	b590      	push	{r4, r7, lr}
 8002644:	b08d      	sub	sp, #52	; 0x34
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f004 fa3e 	bl	8006ada <USB_GetMode>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	f040 84b7 	bne.w	8002fd4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f004 f9a2 	bl	80069b4 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 84ad 	beq.w	8002fd2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f004 f98f 	bl	80069b4 <USB_ReadInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b02      	cmp	r3, #2
 800269e:	d107      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f002 0202 	and.w	r2, r2, #2
 80026ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 f97d 	bl	80069b4 <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d161      	bne.n	8002788 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0210 	bic.w	r2, r2, #16
 80026d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	0c5b      	lsrs	r3, r3, #17
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d124      	bne.n	800274a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d035      	beq.n	8002778 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	6a38      	ldr	r0, [r7, #32]
 8002720:	f003 ffb4 	bl	800668c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002730:	441a      	add	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002742:	441a      	add	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	621a      	str	r2, [r3, #32]
 8002748:	e016      	b.n	8002778 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	0c5b      	lsrs	r3, r3, #17
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	2b06      	cmp	r3, #6
 8002754:	d110      	bne.n	8002778 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800275c:	2208      	movs	r2, #8
 800275e:	4619      	mov	r1, r3
 8002760:	6a38      	ldr	r0, [r7, #32]
 8002762:	f003 ff93 	bl	800668c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002772:	441a      	add	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0210 	orr.w	r2, r2, #16
 8002786:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f004 f911 	bl	80069b4 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002798:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800279c:	f040 80a7 	bne.w	80028ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 f916 	bl	80069da <USB_ReadDevAllOutEpInterrupt>
 80027ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027b0:	e099      	b.n	80028e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 808e 	beq.w	80028da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 f93a 	bl	8006a42 <USB_ReadDevOutEPInterrupt>
 80027ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e6:	461a      	mov	r2, r3
 80027e8:	2301      	movs	r3, #1
 80027ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fef0 	bl	80035d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280a:	461a      	mov	r2, r3
 800280c:	2308      	movs	r3, #8
 800280e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 ffc6 	bl	80037a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	2310      	movs	r3, #16
 8002832:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d030      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d109      	bne.n	800285e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	3304      	adds	r3, #4
 8002872:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	78db      	ldrb	r3, [r3, #3]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d108      	bne.n	800288e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f006 fcad 	bl	80091e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	461a      	mov	r2, r3
 800289c:	2302      	movs	r3, #2
 800289e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b6:	461a      	mov	r2, r3
 80028b8:	2320      	movs	r3, #32
 80028ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f af62 	bne.w	80027b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 f85e 	bl	80069b4 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002902:	f040 80db 	bne.w	8002abc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 f87f 	bl	8006a0e <USB_ReadDevAllInEpInterrupt>
 8002910:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002916:	e0cd      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80c2 	beq.w	8002aa8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f004 f8a5 	bl	8006a7e <USB_ReadDevInEPInterrupt>
 8002934:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d057      	beq.n	80029f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	2201      	movs	r2, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	69f9      	ldr	r1, [r7, #28]
 800295c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002960:	4013      	ands	r3, r2
 8002962:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002970:	461a      	mov	r2, r3
 8002972:	2301      	movs	r3, #1
 8002974:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d132      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	334c      	adds	r3, #76	; 0x4c
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4403      	add	r3, r0
 800299e:	3348      	adds	r3, #72	; 0x48
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4419      	add	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4403      	add	r3, r0
 80029b2:	334c      	adds	r3, #76	; 0x4c
 80029b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d113      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x3a2>
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3354      	adds	r3, #84	; 0x54
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029dc:	461a      	mov	r2, r3
 80029de:	2101      	movs	r1, #1
 80029e0:	f004 f8ae 	bl	8006b40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f006 fb77 	bl	80090de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	2308      	movs	r3, #8
 8002a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a22:	461a      	mov	r2, r3
 8002a24:	2310      	movs	r3, #16
 8002a26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d023      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a50:	6a38      	ldr	r0, [r7, #32]
 8002a52:	f002 ff81 	bl	8005958 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3338      	adds	r3, #56	; 0x38
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f006 fbc4 	bl	800920c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a90:	461a      	mov	r2, r3
 8002a92:	2302      	movs	r3, #2
 8002a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fd08 	bl	80034b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	3301      	adds	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f47f af2e 	bne.w	8002918 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 ff77 	bl	80069b4 <USB_ReadInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad0:	d122      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d108      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002af8:	2100      	movs	r1, #0
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f006 fd42 	bl	8009584 <HAL_PCDEx_LPM_Callback>
 8002b00:	e002      	b.n	8002b08 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f006 fb62 	bl	80091cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 ff49 	bl	80069b4 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2c:	d112      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f006 fb1e 	bl	8009180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 ff2b 	bl	80069b4 <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b68:	d121      	bne.n	8002bae <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b78:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f006 fcef 	bl	8009584 <HAL_PCDEx_LPM_Callback>
 8002ba6:	e002      	b.n	8002bae <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f006 fae9 	bl	8009180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 fefe 	bl	80069b4 <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	f040 80b7 	bne.w	8002d34 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2110      	movs	r1, #16
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 feb9 	bl	8005958 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bea:	e046      	b.n	8002c7a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c10:	0151      	lsls	r1, r2, #5
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	440a      	add	r2, r1
 8002c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c44:	0151      	lsls	r1, r2, #5
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c64:	0151      	lsls	r1, r2, #5
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	440a      	add	r2, r1
 8002c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	3301      	adds	r3, #1
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d3b3      	bcc.n	8002bec <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d016      	beq.n	8002cce <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb0:	f043 030b 	orr.w	r3, r3, #11
 8002cb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc6:	f043 030b 	orr.w	r3, r3, #11
 8002cca:	6453      	str	r3, [r2, #68]	; 0x44
 8002ccc:	e015      	b.n	8002cfa <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f242 032b 	movw	r3, #8235	; 0x202b
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf4:	f043 030b 	orr.w	r3, r3, #11
 8002cf8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f003 ff0e 	bl	8006b40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fe3b 	bl	80069b4 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d124      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fed2 	bl	8006af8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 fe7a 	bl	8005a52 <USB_GetDevSpeed>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	f001 fa73 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8002d6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f002 fb6f 	bl	800545c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f006 f9d5 	bl	800912e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fe0b 	bl	80069b4 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d10a      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f006 f9b2 	bl	8009112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f002 0208 	and.w	r2, r2, #8
 8002dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fdf6 	bl	80069b4 <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b80      	cmp	r3, #128	; 0x80
 8002dd0:	d122      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dde:	2301      	movs	r3, #1
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	e014      	b.n	8002e0e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fb27 	bl	8003456 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3e5      	bcc.n	8002de4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fdc9 	bl	80069b4 <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e2c:	d13b      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e2e:	2301      	movs	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e02b      	b.n	8002e8c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3340      	adds	r3, #64	; 0x40
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d115      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da12      	bge.n	8002e86 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	333f      	adds	r3, #63	; 0x3f
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fae8 	bl	8003456 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	3301      	adds	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3ce      	bcc.n	8002e34 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fd82 	bl	80069b4 <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eba:	d155      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	e045      	b.n	8002f4e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d12e      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da2b      	bge.n	8002f48 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002efc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d121      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f44:	6053      	str	r3, [r2, #4]
            break;
 8002f46:	e007      	b.n	8002f58 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3b4      	bcc.n	8002ec2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fd21 	bl	80069b4 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d10a      	bne.n	8002f94 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f006 f956 	bl	8009230 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fd0b 	bl	80069b4 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d115      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f006 f946 	bl	800924c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	e000      	b.n	8002fd4 <HAL_PCD_IRQHandler+0x992>
      return;
 8002fd2:	bf00      	nop
    }
  }
}
 8002fd4:	3734      	adds	r7, #52	; 0x34
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}

08002fda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_PCD_SetAddress+0x1a>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e013      	b.n	800301c <HAL_PCD_SetAddress+0x42>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fc69 	bl	80068e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	70fb      	strb	r3, [r7, #3]
 8003036:	460b      	mov	r3, r1
 8003038:	803b      	strh	r3, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003046:	2b00      	cmp	r3, #0
 8003048:	da0f      	bge.n	800306a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	3338      	adds	r3, #56	; 0x38
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	705a      	strb	r2, [r3, #1]
 8003068:	e00f      	b.n	800308a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003096:	883a      	ldrh	r2, [r7, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	78ba      	ldrb	r2, [r7, #2]
 80030a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d102      	bne.n	80030c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_PCD_EP_Open+0xaa>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e00e      	b.n	80030ec <HAL_PCD_EP_Open+0xc8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	4618      	mov	r0, r3
 80030de:	f002 fcdd 	bl	8005a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da0f      	bge.n	8003128 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 020f 	and.w	r2, r3, #15
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3338      	adds	r3, #56	; 0x38
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	705a      	strb	r2, [r3, #1]
 8003126:	e00f      	b.n	8003148 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_PCD_EP_Close+0x6e>
 800315e:	2302      	movs	r3, #2
 8003160:	e00e      	b.n	8003180 <HAL_PCD_EP_Close+0x8c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	4618      	mov	r0, r3
 8003172:	f002 fd1b 	bl	8005bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	460b      	mov	r3, r1
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ca:	7afb      	ldrb	r3, [r7, #11]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	6979      	ldr	r1, [r7, #20]
 80031fc:	f003 f802 	bl	8006204 <USB_EP0StartXfer>
 8003200:	e008      	b.n	8003214 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	f002 fda8 	bl	8005d64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003240:	681b      	ldr	r3, [r3, #0]
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	460b      	mov	r3, r1
 800325c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3338      	adds	r3, #56	; 0x38
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2201      	movs	r2, #1
 800328c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a8:	7afb      	ldrb	r3, [r7, #11]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	f002 ffa0 	bl	8006204 <USB_EP0StartXfer>
 80032c4:	e008      	b.n	80032d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6979      	ldr	r1, [r7, #20]
 80032d4:	f002 fd46 	bl	8005d64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d901      	bls.n	8003300 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e050      	b.n	80033a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da0f      	bge.n	8003328 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	3338      	adds	r3, #56	; 0x38
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	705a      	strb	r2, [r3, #1]
 8003326:	e00d      	b.n	8003344 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	3304      	adds	r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_PCD_EP_SetStall+0x82>
 8003360:	2302      	movs	r3, #2
 8003362:	e01e      	b.n	80033a2 <HAL_PCD_EP_SetStall+0xc0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 f9e2 	bl	800673c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	b2d9      	uxtb	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003392:	461a      	mov	r2, r3
 8003394:	f003 fbd4 	bl	8006b40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d901      	bls.n	80033c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e042      	b.n	800344e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da0f      	bge.n	80033f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3338      	adds	r3, #56	; 0x38
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	705a      	strb	r2, [r3, #1]
 80033ee:	e00f      	b.n	8003410 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_PCD_EP_ClrStall+0x86>
 800342c:	2302      	movs	r3, #2
 800342e:	e00e      	b.n	800344e <HAL_PCD_EP_ClrStall+0xa4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68f9      	ldr	r1, [r7, #12]
 800343e:	4618      	mov	r0, r3
 8003440:	f003 f9ea 	bl	8006818 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	da0c      	bge.n	8003484 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3338      	adds	r3, #56	; 0x38
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e00c      	b.n	800349e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	3304      	adds	r3, #4
 800349c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 f809 	bl	80064bc <USB_EPStopXfer>
 80034aa:	4603      	mov	r3, r0
 80034ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034ae:	7afb      	ldrb	r3, [r7, #11]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	3338      	adds	r3, #56	; 0x38
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d901      	bls.n	80034f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e06c      	b.n	80035ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	429a      	cmp	r2, r3
 8003504:	d902      	bls.n	800350c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	3303      	adds	r3, #3
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003514:	e02b      	b.n	800356e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	429a      	cmp	r2, r3
 800352a:	d902      	bls.n	8003532 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3303      	adds	r3, #3
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6919      	ldr	r1, [r3, #16]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800354a:	b2db      	uxtb	r3, r3
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4603      	mov	r3, r0
 8003550:	6978      	ldr	r0, [r7, #20]
 8003552:	f003 f85d 	bl	8006610 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	441a      	add	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	429a      	cmp	r2, r3
 8003582:	d809      	bhi.n	8003598 <PCD_WriteEmptyTxFifo+0xe0>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a1a      	ldr	r2, [r3, #32]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800358c:	429a      	cmp	r2, r3
 800358e:	d203      	bcs.n	8003598 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1be      	bne.n	8003516 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d811      	bhi.n	80035c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2201      	movs	r2, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	43db      	mvns	r3, r3
 80035be:	6939      	ldr	r1, [r7, #16]
 80035c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c4:	4013      	ands	r3, r2
 80035c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	333c      	adds	r3, #60	; 0x3c
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d17b      	bne.n	8003702 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4a61      	ldr	r2, [pc, #388]	; (800379c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	f240 80b9 	bls.w	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80b3 	beq.w	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	461a      	mov	r2, r3
 8003638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363c:	6093      	str	r3, [r2, #8]
 800363e:	e0a7      	b.n	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	461a      	mov	r2, r3
 8003658:	2320      	movs	r3, #32
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	e098      	b.n	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	f040 8093 	bne.w	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	4a4b      	ldr	r2, [pc, #300]	; (800379c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d90f      	bls.n	8003692 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	e07e      	b.n	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	440b      	add	r3, r1
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	1ad2      	subs	r2, r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d114      	bne.n	80036f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036dc:	461a      	mov	r2, r3
 80036de:	2101      	movs	r1, #1
 80036e0:	f003 fa2e 	bl	8006b40 <USB_EP0_OutStart>
 80036e4:	e006      	b.n	80036f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f005 fcd4 	bl	80090a8 <HAL_PCD_DataOutStageCallback>
 8003700:	e046      	b.n	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d124      	bne.n	8003754 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	461a      	mov	r2, r3
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	6093      	str	r3, [r2, #8]
 8003728:	e032      	b.n	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003740:	461a      	mov	r2, r3
 8003742:	2320      	movs	r3, #32
 8003744:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f005 fcab 	bl	80090a8 <HAL_PCD_DataOutStageCallback>
 8003752:	e01d      	b.n	8003790 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d114      	bne.n	8003784 <PCD_EP_OutXfrComplete_int+0x1b0>
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800377c:	461a      	mov	r2, r3
 800377e:	2100      	movs	r1, #0
 8003780:	f003 f9de 	bl	8006b40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f005 fc8c 	bl	80090a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	4f54300a 	.word	0x4f54300a
 80037a0:	4f54310a 	.word	0x4f54310a

080037a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	333c      	adds	r3, #60	; 0x3c
 80037bc:	3304      	adds	r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <PCD_EP_OutSetupPacket_int+0x88>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d90e      	bls.n	80037f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f005 fc43 	bl	8009084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <PCD_EP_OutSetupPacket_int+0x88>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d90c      	bls.n	8003820 <PCD_EP_OutSetupPacket_int+0x7c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003818:	461a      	mov	r2, r3
 800381a:	2101      	movs	r1, #1
 800381c:	f003 f990 	bl	8006b40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	4f54300a 	.word	0x4f54300a

08003830 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	4613      	mov	r3, r2
 800383e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800384e:	883b      	ldrh	r3, [r7, #0]
 8003850:	0419      	lsls	r1, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	430a      	orrs	r2, r1
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
 800385c:	e028      	b.n	80038b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4413      	add	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e00d      	b.n	800388e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	3340      	adds	r3, #64	; 0x40
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4413      	add	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3301      	adds	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	3b01      	subs	r3, #1
 8003894:	429a      	cmp	r2, r3
 8003896:	d3ec      	bcc.n	8003872 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003898:	883b      	ldrh	r3, [r7, #0]
 800389a:	0418      	lsls	r0, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4302      	orrs	r2, r0
 80038a8:	3340      	adds	r3, #64	; 0x40
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_PCDEx_ActivateLPM+0x44>)
 8003910:	4313      	orrs	r3, r2
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	10000003 	.word	0x10000003

08003928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e291      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8087 	beq.w	8003a5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800394c:	4b96      	ldr	r3, [pc, #600]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b04      	cmp	r3, #4
 8003956:	d00c      	beq.n	8003972 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003958:	4b93      	ldr	r3, [pc, #588]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d112      	bne.n	800398a <HAL_RCC_OscConfig+0x62>
 8003964:	4b90      	ldr	r3, [pc, #576]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003970:	d10b      	bne.n	800398a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4b8d      	ldr	r3, [pc, #564]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x130>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d168      	bne.n	8003a58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e26b      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x7a>
 8003994:	4b84      	ldr	r3, [pc, #528]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a83      	ldr	r2, [pc, #524]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e02e      	b.n	8003a00 <HAL_RCC_OscConfig+0xd8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x9c>
 80039aa:	4b7f      	ldr	r3, [pc, #508]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7e      	ldr	r2, [pc, #504]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b7c      	ldr	r3, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7b      	ldr	r2, [pc, #492]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xd8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0xc0>
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b73      	ldr	r3, [pc, #460]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a72      	ldr	r2, [pc, #456]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xd8>
 80039e8:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6e      	ldr	r2, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b6c      	ldr	r3, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6b      	ldr	r2, [pc, #428]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fe22 	bl	8001650 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd fe1e 	bl	8001650 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e21f      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe8>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fe0e 	bl	8001650 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fe0a 	bl	8001650 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e20b      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x110>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d069      	beq.n	8003b3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a66:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b4d      	ldr	r3, [pc, #308]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x190>
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x17a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1df      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	493d      	ldr	r1, [pc, #244]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	e040      	b.n	8003b3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd fdc0 	bl	8001650 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fd fdbc 	bl	8001650 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1bd      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4929      	ldr	r1, [pc, #164]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
 8003b06:	e018      	b.n	8003b3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fd fd9c 	bl	8001650 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fd fd98 	bl	8001650 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e199      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d038      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fd79 	bl	8001650 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fd fd75 	bl	8001650 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e176      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x23a>
 8003b80:	e01a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <HAL_RCC_OscConfig+0x280>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fd5f 	bl	8001650 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fd fd5b 	bl	8001650 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d903      	bls.n	8003bac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e15c      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
 8003ba8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ee      	bne.n	8003b96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80a4 	beq.w	8003d0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bde:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bee:	4b82      	ldr	r3, [pc, #520]	; (8003df8 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d118      	bne.n	8003c2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x4d0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x4d0>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c06:	f7fd fd23 	bl	8001650 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fd fd1f 	bl	8001650 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e120      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c20:	4b75      	ldr	r3, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x4d0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x31a>
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	e02d      	b.n	8003c9e <HAL_RCC_OscConfig+0x376>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x33c>
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a69      	ldr	r2, [pc, #420]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a66      	ldr	r2, [pc, #408]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70
 8003c62:	e01c      	b.n	8003c9e <HAL_RCC_OscConfig+0x376>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x35e>
 8003c6c:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a60      	ldr	r2, [pc, #384]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	4b5e      	ldr	r3, [pc, #376]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a5d      	ldr	r2, [pc, #372]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	e00b      	b.n	8003c9e <HAL_RCC_OscConfig+0x376>
 8003c86:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a5a      	ldr	r2, [pc, #360]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
 8003c92:	4b58      	ldr	r3, [pc, #352]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a57      	ldr	r2, [pc, #348]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fcd3 	bl	8001650 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fccf 	bl	8001650 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0ce      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ee      	beq.n	8003cae <HAL_RCC_OscConfig+0x386>
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fcbd 	bl	8001650 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fd fcb9 	bl	8001650 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0b8      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ee      	bne.n	8003cda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80a4 	beq.w	8003e60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d18:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d06b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d149      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd fc8a 	bl	8001650 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fc86 	bl	8001650 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e087      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	4313      	orrs	r3, r2
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd fc5a 	bl	8001650 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fd fc56 	bl	8001650 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e057      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x478>
 8003dbe:	e04f      	b.n	8003e60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fc40 	bl	8001650 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fd fc3c 	bl	8001650 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e03d      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_RCC_OscConfig+0x4cc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x4ac>
 8003df2:	e035      	b.n	8003e60 <HAL_RCC_OscConfig+0x538>
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x544>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d028      	beq.n	8003e5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d121      	bne.n	8003e5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11a      	bne.n	8003e5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d111      	bne.n	8003e5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0d0      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d910      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b67      	ldr	r3, [pc, #412]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	4965      	ldr	r1, [pc, #404]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b63      	ldr	r3, [pc, #396]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0b8      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ee8:	4b53      	ldr	r3, [pc, #332]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a52      	ldr	r2, [pc, #328]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b50      	ldr	r3, [pc, #320]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	494d      	ldr	r1, [pc, #308]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d040      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d115      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07f      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e073      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06b      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4936      	ldr	r1, [pc, #216]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fd fb74 	bl	8001650 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7fd fb70 	bl	8001650 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e053      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d210      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b24      	ldr	r3, [pc, #144]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	4922      	ldr	r1, [pc, #136]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4916      	ldr	r1, [pc, #88]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fee:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	490e      	ldr	r1, [pc, #56]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004002:	f000 f821 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490a      	ldr	r1, [pc, #40]	; (800403c <HAL_RCC_ClockConfig+0x1cc>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <HAL_RCC_ClockConfig+0x1d0>)
 800401c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1d4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd fad0 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023c00 	.word	0x40023c00
 8004038:	40023800 	.word	0x40023800
 800403c:	0800997c 	.word	0x0800997c
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b094      	sub	sp, #80	; 0x50
 800404e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	647b      	str	r3, [r7, #68]	; 0x44
 8004054:	2300      	movs	r3, #0
 8004056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004058:	2300      	movs	r3, #0
 800405a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004060:	4b79      	ldr	r3, [pc, #484]	; (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d00d      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x40>
 800406c:	2b08      	cmp	r3, #8
 800406e:	f200 80e1 	bhi.w	8004234 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x34>
 8004076:	2b04      	cmp	r3, #4
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x3a>
 800407a:	e0db      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4b73      	ldr	r3, [pc, #460]	; (800424c <HAL_RCC_GetSysClockFreq+0x204>)
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004080:	e0db      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004082:	4b73      	ldr	r3, [pc, #460]	; (8004250 <HAL_RCC_GetSysClockFreq+0x208>)
 8004084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004086:	e0d8      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004088:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004092:	4b6d      	ldr	r3, [pc, #436]	; (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d063      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b6a      	ldr	r3, [pc, #424]	; (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	2200      	movs	r2, #0
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
 80040b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ba:	4622      	mov	r2, r4
 80040bc:	462b      	mov	r3, r5
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	0159      	lsls	r1, r3, #5
 80040c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040cc:	0150      	lsls	r0, r2, #5
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4621      	mov	r1, r4
 80040d4:	1a51      	subs	r1, r2, r1
 80040d6:	6139      	str	r1, [r7, #16]
 80040d8:	4629      	mov	r1, r5
 80040da:	eb63 0301 	sbc.w	r3, r3, r1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ec:	4659      	mov	r1, fp
 80040ee:	018b      	lsls	r3, r1, #6
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040f6:	4651      	mov	r1, sl
 80040f8:	018a      	lsls	r2, r1, #6
 80040fa:	4651      	mov	r1, sl
 80040fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004100:	4659      	mov	r1, fp
 8004102:	eb63 0901 	sbc.w	r9, r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411a:	4690      	mov	r8, r2
 800411c:	4699      	mov	r9, r3
 800411e:	4623      	mov	r3, r4
 8004120:	eb18 0303 	adds.w	r3, r8, r3
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	462b      	mov	r3, r5
 8004128:	eb49 0303 	adc.w	r3, r9, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800413a:	4629      	mov	r1, r5
 800413c:	024b      	lsls	r3, r1, #9
 800413e:	4621      	mov	r1, r4
 8004140:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004144:	4621      	mov	r1, r4
 8004146:	024a      	lsls	r2, r1, #9
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414e:	2200      	movs	r2, #0
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
 8004152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004158:	f7fc f862 	bl	8000220 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4613      	mov	r3, r2
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004164:	e058      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	4b38      	ldr	r3, [pc, #224]	; (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	2200      	movs	r2, #0
 800416e:	4618      	mov	r0, r3
 8004170:	4611      	mov	r1, r2
 8004172:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	f04f 0000 	mov.w	r0, #0
 8004188:	f04f 0100 	mov.w	r1, #0
 800418c:	0159      	lsls	r1, r3, #5
 800418e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004192:	0150      	lsls	r0, r2, #5
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4641      	mov	r1, r8
 800419a:	ebb2 0a01 	subs.w	sl, r2, r1
 800419e:	4649      	mov	r1, r9
 80041a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041b8:	ebb2 040a 	subs.w	r4, r2, sl
 80041bc:	eb63 050b 	sbc.w	r5, r3, fp
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	00eb      	lsls	r3, r5, #3
 80041ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ce:	00e2      	lsls	r2, r4, #3
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	18e3      	adds	r3, r4, r3
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	464b      	mov	r3, r9
 80041dc:	eb45 0303 	adc.w	r3, r5, r3
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ee:	4629      	mov	r1, r5
 80041f0:	028b      	lsls	r3, r1, #10
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f8:	4621      	mov	r1, r4
 80041fa:	028a      	lsls	r2, r1, #10
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004202:	2200      	movs	r2, #0
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	61fa      	str	r2, [r7, #28]
 8004208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800420c:	f7fc f808 	bl	8000220 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_GetSysClockFreq+0x200>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800422a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004232:	e002      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetSysClockFreq+0x204>)
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800423c:	4618      	mov	r0, r3
 800423e:	3750      	adds	r7, #80	; 0x50
 8004240:	46bd      	mov	sp, r7
 8004242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000000 	.word	0x20000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a9b      	lsrs	r3, r3, #10
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	0800998c 	.word	0x0800998c

08004294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004298:	f7ff ffdc 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0b5b      	lsrs	r3, r3, #13
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	0800998c 	.word	0x0800998c

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d012      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042e0:	4b65      	ldr	r3, [pc, #404]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a64      	ldr	r2, [pc, #400]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042ea:	6093      	str	r3, [r2, #8]
 80042ec:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	4960      	ldr	r1, [pc, #384]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004312:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	4955      	ldr	r1, [pc, #340]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800433e:	2301      	movs	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d017      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800434e:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	4946      	ldr	r1, [pc, #280]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800437a:	2301      	movs	r3, #1
 800437c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 808b 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a39      	ldr	r2, [pc, #228]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
 8004398:	4b37      	ldr	r3, [pc, #220]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a34      	ldr	r2, [pc, #208]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b0:	f7fd f94e 	bl	8001650 <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fd f94a 	bl	8001650 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e2bc      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d6:	4b28      	ldr	r3, [pc, #160]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d035      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d02e      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440a:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004416:	4a18      	ldr	r2, [pc, #96]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d114      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd f912 	bl	8001650 <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd f90e 	bl	8001650 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e27e      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0ee      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445e:	d111      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800446e:	400b      	ands	r3, r1
 8004470:	4901      	ldr	r1, [pc, #4]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
 8004476:	e00b      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004478:	40023800 	.word	0x40023800
 800447c:	40007000 	.word	0x40007000
 8004480:	0ffffcff 	.word	0x0ffffcff
 8004484:	4ba4      	ldr	r3, [pc, #656]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4aa3      	ldr	r2, [pc, #652]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800448a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	4ba1      	ldr	r3, [pc, #644]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449c:	499e      	ldr	r1, [pc, #632]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ae:	4b9a      	ldr	r3, [pc, #616]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b4:	4a98      	ldr	r2, [pc, #608]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044be:	4b96      	ldr	r3, [pc, #600]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4993      	ldr	r1, [pc, #588]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044dc:	4b8e      	ldr	r3, [pc, #568]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	498b      	ldr	r1, [pc, #556]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044fe:	4b86      	ldr	r3, [pc, #536]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	4982      	ldr	r1, [pc, #520]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004520:	4b7d      	ldr	r3, [pc, #500]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452e:	497a      	ldr	r1, [pc, #488]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004542:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	f023 0203 	bic.w	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	4971      	ldr	r1, [pc, #452]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004564:	4b6c      	ldr	r3, [pc, #432]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f023 020c 	bic.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	4969      	ldr	r1, [pc, #420]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004586:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	4960      	ldr	r1, [pc, #384]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045a8:	4b5b      	ldr	r3, [pc, #364]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	4958      	ldr	r1, [pc, #352]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ca:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	494f      	ldr	r1, [pc, #316]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045ec:	4b4a      	ldr	r3, [pc, #296]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fa:	4947      	ldr	r1, [pc, #284]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800460e:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	493e      	ldr	r1, [pc, #248]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	4936      	ldr	r1, [pc, #216]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d011      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004652:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	492d      	ldr	r1, [pc, #180]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004670:	d101      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004690:	4921      	ldr	r1, [pc, #132]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b2:	4919      	ldr	r1, [pc, #100]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d4:	4910      	ldr	r1, [pc, #64]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d006      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 809d 	beq.w	800482a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a08      	ldr	r2, [pc, #32]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fc ffa8 	bl	8001650 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004702:	e00b      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004704:	f7fc ffa4 	bl	8001650 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d904      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e116      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800471c:	4b8b      	ldr	r3, [pc, #556]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ed      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d017      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d113      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800473c:	4b83      	ldr	r3, [pc, #524]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	0e1b      	lsrs	r3, r3, #24
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	019a      	lsls	r2, r3, #6
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	071b      	lsls	r3, r3, #28
 800475c:	497b      	ldr	r1, [pc, #492]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d024      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478e:	d11f      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004790:	4b6e      	ldr	r3, [pc, #440]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004796:	0f1b      	lsrs	r3, r3, #28
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	019a      	lsls	r2, r3, #6
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	431a      	orrs	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	071b      	lsls	r3, r3, #28
 80047b0:	4966      	ldr	r1, [pc, #408]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047b8:	4b64      	ldr	r3, [pc, #400]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047be:	f023 021f 	bic.w	r2, r3, #31
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	4960      	ldr	r1, [pc, #384]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	019a      	lsls	r2, r3, #6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	071b      	lsls	r3, r3, #28
 80047f0:	4956      	ldr	r1, [pc, #344]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f8:	4b54      	ldr	r3, [pc, #336]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a53      	ldr	r2, [pc, #332]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004804:	f7fc ff24 	bl	8001650 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800480c:	f7fc ff20 	bl	8001650 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e092      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800481e:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 8088 	bne.w	8004942 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004832:	4b46      	ldr	r3, [pc, #280]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a45      	ldr	r2, [pc, #276]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483e:	f7fc ff07 	bl	8001650 <HAL_GetTick>
 8004842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004846:	f7fc ff03 	bl	8001650 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b64      	cmp	r3, #100	; 0x64
 8004852:	d901      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e075      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0ef      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	2b00      	cmp	r3, #0
 8004884:	d024      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	2b00      	cmp	r3, #0
 800488c:	d120      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800488e:	4b2f      	ldr	r3, [pc, #188]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	019a      	lsls	r2, r3, #6
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	4927      	ldr	r1, [pc, #156]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048b6:	4b25      	ldr	r3, [pc, #148]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	4920      	ldr	r1, [pc, #128]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d018      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x652>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e4:	d113      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	0e1b      	lsrs	r3, r3, #24
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	019a      	lsls	r2, r3, #6
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	4911      	ldr	r1, [pc, #68]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a0e      	ldr	r2, [pc, #56]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491a:	f7fc fe99 	bl	8001650 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004922:	f7fc fe95 	bl	8001650 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d901      	bls.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e007      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800493c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004940:	d1ef      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40023800 	.word	0x40023800

08004950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e09d      	b.n	8004a9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004972:	d009      	beq.n	8004988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	61da      	str	r2, [r3, #28]
 800497a:	e005      	b.n	8004988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fa9c 	bl	8000ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049c8:	d902      	bls.n	80049d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e002      	b.n	80049d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049de:	d007      	beq.n	80049f0 <HAL_SPI_Init+0xa0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	ea42 0103 	orr.w	r1, r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	f003 0204 	and.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a6c:	ea42 0103 	orr.w	r1, r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e040      	b.n	8004b3a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fc faeb 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2224      	movs	r2, #36	; 0x24
 8004ad2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f82d 	bl	8004b44 <UART_SetConfig>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e022      	b.n	8004b3a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fa85 	bl	800500c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fb0c 	bl	8005150 <UART_CheckIdleState>
 8004b38:	4603      	mov	r3, r0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4ba6      	ldr	r3, [pc, #664]	; (8004e08 <UART_SetConfig+0x2c4>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	6979      	ldr	r1, [r7, #20]
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a94      	ldr	r2, [pc, #592]	; (8004e0c <UART_SetConfig+0x2c8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d120      	bne.n	8004c02 <UART_SetConfig+0xbe>
 8004bc0:	4b93      	ldr	r3, [pc, #588]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d816      	bhi.n	8004bfc <UART_SetConfig+0xb8>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0x90>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004bf1 	.word	0x08004bf1
 8004bdc:	08004beb 	.word	0x08004beb
 8004be0:	08004bf7 	.word	0x08004bf7
 8004be4:	2301      	movs	r3, #1
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e150      	b.n	8004e8c <UART_SetConfig+0x348>
 8004bea:	2302      	movs	r3, #2
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e14d      	b.n	8004e8c <UART_SetConfig+0x348>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e14a      	b.n	8004e8c <UART_SetConfig+0x348>
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e147      	b.n	8004e8c <UART_SetConfig+0x348>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e144      	b.n	8004e8c <UART_SetConfig+0x348>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a83      	ldr	r2, [pc, #524]	; (8004e14 <UART_SetConfig+0x2d0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d132      	bne.n	8004c72 <UART_SetConfig+0x12e>
 8004c0c:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d828      	bhi.n	8004c6c <UART_SetConfig+0x128>
 8004c1a:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <UART_SetConfig+0xdc>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c6d 	.word	0x08004c6d
 8004c2c:	08004c6d 	.word	0x08004c6d
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c6d 	.word	0x08004c6d
 8004c38:	08004c6d 	.word	0x08004c6d
 8004c3c:	08004c6d 	.word	0x08004c6d
 8004c40:	08004c5b 	.word	0x08004c5b
 8004c44:	08004c6d 	.word	0x08004c6d
 8004c48:	08004c6d 	.word	0x08004c6d
 8004c4c:	08004c6d 	.word	0x08004c6d
 8004c50:	08004c67 	.word	0x08004c67
 8004c54:	2300      	movs	r3, #0
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e118      	b.n	8004e8c <UART_SetConfig+0x348>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e115      	b.n	8004e8c <UART_SetConfig+0x348>
 8004c60:	2304      	movs	r3, #4
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e112      	b.n	8004e8c <UART_SetConfig+0x348>
 8004c66:	2308      	movs	r3, #8
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e10f      	b.n	8004e8c <UART_SetConfig+0x348>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e10c      	b.n	8004e8c <UART_SetConfig+0x348>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a68      	ldr	r2, [pc, #416]	; (8004e18 <UART_SetConfig+0x2d4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d120      	bne.n	8004cbe <UART_SetConfig+0x17a>
 8004c7c:	4b64      	ldr	r3, [pc, #400]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c86:	2b30      	cmp	r3, #48	; 0x30
 8004c88:	d013      	beq.n	8004cb2 <UART_SetConfig+0x16e>
 8004c8a:	2b30      	cmp	r3, #48	; 0x30
 8004c8c:	d814      	bhi.n	8004cb8 <UART_SetConfig+0x174>
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d009      	beq.n	8004ca6 <UART_SetConfig+0x162>
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d810      	bhi.n	8004cb8 <UART_SetConfig+0x174>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <UART_SetConfig+0x15c>
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d006      	beq.n	8004cac <UART_SetConfig+0x168>
 8004c9e:	e00b      	b.n	8004cb8 <UART_SetConfig+0x174>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e0f2      	b.n	8004e8c <UART_SetConfig+0x348>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e0ef      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e0ec      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e0e9      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e0e6      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a56      	ldr	r2, [pc, #344]	; (8004e1c <UART_SetConfig+0x2d8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d120      	bne.n	8004d0a <UART_SetConfig+0x1c6>
 8004cc8:	4b51      	ldr	r3, [pc, #324]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd4:	d013      	beq.n	8004cfe <UART_SetConfig+0x1ba>
 8004cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd8:	d814      	bhi.n	8004d04 <UART_SetConfig+0x1c0>
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d009      	beq.n	8004cf2 <UART_SetConfig+0x1ae>
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d810      	bhi.n	8004d04 <UART_SetConfig+0x1c0>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <UART_SetConfig+0x1a8>
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d006      	beq.n	8004cf8 <UART_SetConfig+0x1b4>
 8004cea:	e00b      	b.n	8004d04 <UART_SetConfig+0x1c0>
 8004cec:	2300      	movs	r3, #0
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e0cc      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e0c9      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0c6      	b.n	8004e8c <UART_SetConfig+0x348>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e0c3      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d04:	2310      	movs	r3, #16
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e0c0      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a44      	ldr	r2, [pc, #272]	; (8004e20 <UART_SetConfig+0x2dc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d125      	bne.n	8004d60 <UART_SetConfig+0x21c>
 8004d14:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d22:	d017      	beq.n	8004d54 <UART_SetConfig+0x210>
 8004d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d28:	d817      	bhi.n	8004d5a <UART_SetConfig+0x216>
 8004d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2e:	d00b      	beq.n	8004d48 <UART_SetConfig+0x204>
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d811      	bhi.n	8004d5a <UART_SetConfig+0x216>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <UART_SetConfig+0x1fe>
 8004d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3e:	d006      	beq.n	8004d4e <UART_SetConfig+0x20a>
 8004d40:	e00b      	b.n	8004d5a <UART_SetConfig+0x216>
 8004d42:	2300      	movs	r3, #0
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e0a1      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e09e      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d4e:	2304      	movs	r3, #4
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e09b      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d54:	2308      	movs	r3, #8
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e098      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e095      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <UART_SetConfig+0x2e0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d125      	bne.n	8004db6 <UART_SetConfig+0x272>
 8004d6a:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d78:	d017      	beq.n	8004daa <UART_SetConfig+0x266>
 8004d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d7e:	d817      	bhi.n	8004db0 <UART_SetConfig+0x26c>
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d00b      	beq.n	8004d9e <UART_SetConfig+0x25a>
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	d811      	bhi.n	8004db0 <UART_SetConfig+0x26c>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x254>
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d006      	beq.n	8004da4 <UART_SetConfig+0x260>
 8004d96:	e00b      	b.n	8004db0 <UART_SetConfig+0x26c>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e076      	b.n	8004e8c <UART_SetConfig+0x348>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e073      	b.n	8004e8c <UART_SetConfig+0x348>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e070      	b.n	8004e8c <UART_SetConfig+0x348>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e06d      	b.n	8004e8c <UART_SetConfig+0x348>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e06a      	b.n	8004e8c <UART_SetConfig+0x348>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <UART_SetConfig+0x2e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d138      	bne.n	8004e32 <UART_SetConfig+0x2ee>
 8004dc0:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <UART_SetConfig+0x2cc>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dce:	d017      	beq.n	8004e00 <UART_SetConfig+0x2bc>
 8004dd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd4:	d82a      	bhi.n	8004e2c <UART_SetConfig+0x2e8>
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dda:	d00b      	beq.n	8004df4 <UART_SetConfig+0x2b0>
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de0:	d824      	bhi.n	8004e2c <UART_SetConfig+0x2e8>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <UART_SetConfig+0x2aa>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d006      	beq.n	8004dfa <UART_SetConfig+0x2b6>
 8004dec:	e01e      	b.n	8004e2c <UART_SetConfig+0x2e8>
 8004dee:	2300      	movs	r3, #0
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e04b      	b.n	8004e8c <UART_SetConfig+0x348>
 8004df4:	2302      	movs	r3, #2
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e048      	b.n	8004e8c <UART_SetConfig+0x348>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e045      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e00:	2308      	movs	r3, #8
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e042      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e06:	bf00      	nop
 8004e08:	efff69f3 	.word	0xefff69f3
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40004400 	.word	0x40004400
 8004e18:	40004800 	.word	0x40004800
 8004e1c:	40004c00 	.word	0x40004c00
 8004e20:	40005000 	.word	0x40005000
 8004e24:	40011400 	.word	0x40011400
 8004e28:	40007800 	.word	0x40007800
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e02c      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a72      	ldr	r2, [pc, #456]	; (8005000 <UART_SetConfig+0x4bc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d125      	bne.n	8004e88 <UART_SetConfig+0x344>
 8004e3c:	4b71      	ldr	r3, [pc, #452]	; (8005004 <UART_SetConfig+0x4c0>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e4a:	d017      	beq.n	8004e7c <UART_SetConfig+0x338>
 8004e4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e50:	d817      	bhi.n	8004e82 <UART_SetConfig+0x33e>
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	d00b      	beq.n	8004e70 <UART_SetConfig+0x32c>
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d811      	bhi.n	8004e82 <UART_SetConfig+0x33e>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <UART_SetConfig+0x326>
 8004e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e66:	d006      	beq.n	8004e76 <UART_SetConfig+0x332>
 8004e68:	e00b      	b.n	8004e82 <UART_SetConfig+0x33e>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e00d      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e70:	2302      	movs	r3, #2
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e00a      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e76:	2304      	movs	r3, #4
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e007      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e004      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e82:	2310      	movs	r3, #16
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e001      	b.n	8004e8c <UART_SetConfig+0x348>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d15b      	bne.n	8004f4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e96:	7ffb      	ldrb	r3, [r7, #31]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d828      	bhi.n	8004eee <UART_SetConfig+0x3aa>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0x360>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004ed1 	.word	0x08004ed1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	08004eef 	.word	0x08004eef
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004eef 	.word	0x08004eef
 8004ebc:	08004eef 	.word	0x08004eef
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004ee7 	.word	0x08004ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7ff f9d0 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8004ecc:	61b8      	str	r0, [r7, #24]
        break;
 8004ece:	e013      	b.n	8004ef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed0:	f7ff f9e0 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8004ed4:	61b8      	str	r0, [r7, #24]
        break;
 8004ed6:	e00f      	b.n	8004ef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed8:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <UART_SetConfig+0x4c4>)
 8004eda:	61bb      	str	r3, [r7, #24]
        break;
 8004edc:	e00c      	b.n	8004ef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ede:	f7ff f8b3 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004ee2:	61b8      	str	r0, [r7, #24]
        break;
 8004ee4:	e008      	b.n	8004ef8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	61bb      	str	r3, [r7, #24]
        break;
 8004eec:	e004      	b.n	8004ef8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ef6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d074      	beq.n	8004fe8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	d916      	bls.n	8004f48 <UART_SetConfig+0x404>
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d212      	bcs.n	8004f48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f023 030f 	bic.w	r3, r3, #15
 8004f2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	89fb      	ldrh	r3, [r7, #14]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	89fa      	ldrh	r2, [r7, #14]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	e04f      	b.n	8004fe8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77bb      	strb	r3, [r7, #30]
 8004f4c:	e04c      	b.n	8004fe8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f4e:	7ffb      	ldrb	r3, [r7, #31]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d828      	bhi.n	8004fa6 <UART_SetConfig+0x462>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0x418>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	08004fa7 	.word	0x08004fa7
 8004f6c:	08004f97 	.word	0x08004f97
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fa7 	.word	0x08004fa7
 8004f7c:	08004f9f 	.word	0x08004f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7ff f974 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8004f84:	61b8      	str	r0, [r7, #24]
        break;
 8004f86:	e013      	b.n	8004fb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f88:	f7ff f984 	bl	8004294 <HAL_RCC_GetPCLK2Freq>
 8004f8c:	61b8      	str	r0, [r7, #24]
        break;
 8004f8e:	e00f      	b.n	8004fb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <UART_SetConfig+0x4c4>)
 8004f92:	61bb      	str	r3, [r7, #24]
        break;
 8004f94:	e00c      	b.n	8004fb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f96:	f7ff f857 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8004f9a:	61b8      	str	r0, [r7, #24]
        break;
 8004f9c:	e008      	b.n	8004fb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa2:	61bb      	str	r3, [r7, #24]
        break;
 8004fa4:	e004      	b.n	8004fb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	77bb      	strb	r3, [r7, #30]
        break;
 8004fae:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	085a      	lsrs	r2, r3, #1
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d909      	bls.n	8004fe4 <UART_SetConfig+0x4a0>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d205      	bcs.n	8004fe4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	e001      	b.n	8004fe8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ff4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40007c00 	.word	0x40007c00
 8005004:	40023800 	.word	0x40023800
 8005008:	00f42400 	.word	0x00f42400

0800500c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01a      	beq.n	8005122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510a:	d10a      	bne.n	8005122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af02      	add	r7, sp, #8
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005160:	f7fc fa76 	bl	8001650 <HAL_GetTick>
 8005164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d10e      	bne.n	8005192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f81b 	bl	80051be <UART_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e011      	b.n	80051b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b09c      	sub	sp, #112	; 0x70
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ce:	e0a7      	b.n	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	f000 80a3 	beq.w	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fc fa39 	bl	8001650 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80051ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d13f      	bne.n	8005270 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005204:	667b      	str	r3, [r7, #100]	; 0x64
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800520e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005210:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800521c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005242:	64ba      	str	r2, [r7, #72]	; 0x48
 8005244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e5      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e068      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d050      	beq.n	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528c:	d148      	bne.n	8005320 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005296:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
 80052b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	613b      	str	r3, [r7, #16]
   return(result);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ea:	623a      	str	r2, [r7, #32]
 80052ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	69f9      	ldr	r1, [r7, #28]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e010      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	429a      	cmp	r2, r3
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	429a      	cmp	r2, r3
 800533c:	f43f af48 	beq.w	80051d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3770      	adds	r7, #112	; 0x70
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800534c:	b084      	sub	sp, #16
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	f107 001c 	add.w	r0, r7, #28
 800535a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	2b01      	cmp	r3, #1
 8005362:	d126      	bne.n	80053b2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	4b38      	ldr	r3, [pc, #224]	; (8005458 <USB_CoreInit+0x10c>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f043 0210 	orr.w	r2, r3, #16
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fc28 	bl	8006bfc <USB_CoreReset>
 80053ac:	4603      	mov	r3, r0
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	e03a      	b.n	8005428 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d126      	bne.n	8005406 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	4b23      	ldr	r3, [pc, #140]	; (8005458 <USB_CoreInit+0x10c>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f023 0210 	bic.w	r2, r3, #16
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80053e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d105      	bne.n	80053fa <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fbfe 	bl	8006bfc <USB_CoreReset>
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e010      	b.n	8005428 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 fbf2 	bl	8006bfc <USB_CoreReset>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d10b      	bne.n	8005446 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f043 0206 	orr.w	r2, r3, #6
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005452:	b004      	add	sp, #16
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	ffbdffbf 	.word	0xffbdffbf

0800545c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d165      	bne.n	800553c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a41      	ldr	r2, [pc, #260]	; (8005578 <USB_SetTurnaroundTime+0x11c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d906      	bls.n	8005486 <USB_SetTurnaroundTime+0x2a>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4a40      	ldr	r2, [pc, #256]	; (800557c <USB_SetTurnaroundTime+0x120>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d202      	bcs.n	8005486 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005480:	230f      	movs	r3, #15
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e062      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <USB_SetTurnaroundTime+0x120>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d306      	bcc.n	800549c <USB_SetTurnaroundTime+0x40>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4a3b      	ldr	r2, [pc, #236]	; (8005580 <USB_SetTurnaroundTime+0x124>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d202      	bcs.n	800549c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005496:	230e      	movs	r3, #14
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e057      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a38      	ldr	r2, [pc, #224]	; (8005580 <USB_SetTurnaroundTime+0x124>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d306      	bcc.n	80054b2 <USB_SetTurnaroundTime+0x56>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a37      	ldr	r2, [pc, #220]	; (8005584 <USB_SetTurnaroundTime+0x128>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d202      	bcs.n	80054b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054ac:	230d      	movs	r3, #13
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e04c      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a33      	ldr	r2, [pc, #204]	; (8005584 <USB_SetTurnaroundTime+0x128>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d306      	bcc.n	80054c8 <USB_SetTurnaroundTime+0x6c>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a32      	ldr	r2, [pc, #200]	; (8005588 <USB_SetTurnaroundTime+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d802      	bhi.n	80054c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054c2:	230c      	movs	r3, #12
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e041      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a2f      	ldr	r2, [pc, #188]	; (8005588 <USB_SetTurnaroundTime+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d906      	bls.n	80054de <USB_SetTurnaroundTime+0x82>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a2e      	ldr	r2, [pc, #184]	; (800558c <USB_SetTurnaroundTime+0x130>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d802      	bhi.n	80054de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054d8:	230b      	movs	r3, #11
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e036      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	; (800558c <USB_SetTurnaroundTime+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d906      	bls.n	80054f4 <USB_SetTurnaroundTime+0x98>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4a29      	ldr	r2, [pc, #164]	; (8005590 <USB_SetTurnaroundTime+0x134>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d802      	bhi.n	80054f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ee:	230a      	movs	r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e02b      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a26      	ldr	r2, [pc, #152]	; (8005590 <USB_SetTurnaroundTime+0x134>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d906      	bls.n	800550a <USB_SetTurnaroundTime+0xae>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a25      	ldr	r2, [pc, #148]	; (8005594 <USB_SetTurnaroundTime+0x138>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d202      	bcs.n	800550a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005504:	2309      	movs	r3, #9
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e020      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a21      	ldr	r2, [pc, #132]	; (8005594 <USB_SetTurnaroundTime+0x138>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d306      	bcc.n	8005520 <USB_SetTurnaroundTime+0xc4>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4a20      	ldr	r2, [pc, #128]	; (8005598 <USB_SetTurnaroundTime+0x13c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d802      	bhi.n	8005520 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800551a:	2308      	movs	r3, #8
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e015      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <USB_SetTurnaroundTime+0x13c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d906      	bls.n	8005536 <USB_SetTurnaroundTime+0xda>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <USB_SetTurnaroundTime+0x140>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d202      	bcs.n	8005536 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005530:	2307      	movs	r3, #7
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e00a      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005536:	2306      	movs	r3, #6
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e007      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005542:	2309      	movs	r3, #9
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e001      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005548:	2309      	movs	r3, #9
 800554a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	00d8acbf 	.word	0x00d8acbf
 800557c:	00e4e1c0 	.word	0x00e4e1c0
 8005580:	00f42400 	.word	0x00f42400
 8005584:	01067380 	.word	0x01067380
 8005588:	011a499f 	.word	0x011a499f
 800558c:	01312cff 	.word	0x01312cff
 8005590:	014ca43f 	.word	0x014ca43f
 8005594:	016e3600 	.word	0x016e3600
 8005598:	01a6ab1f 	.word	0x01a6ab1f
 800559c:	01e84800 	.word	0x01e84800

080055a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d115      	bne.n	8005632 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005612:	2001      	movs	r0, #1
 8005614:	f7fc f828 	bl	8001668 <HAL_Delay>
      ms++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 fa5b 	bl	8006ada <USB_GetMode>
 8005624:	4603      	mov	r3, r0
 8005626:	2b01      	cmp	r3, #1
 8005628:	d01e      	beq.n	8005668 <USB_SetCurrentMode+0x84>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b31      	cmp	r3, #49	; 0x31
 800562e:	d9f0      	bls.n	8005612 <USB_SetCurrentMode+0x2e>
 8005630:	e01a      	b.n	8005668 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005644:	2001      	movs	r0, #1
 8005646:	f7fc f80f 	bl	8001668 <HAL_Delay>
      ms++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fa42 	bl	8006ada <USB_GetMode>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <USB_SetCurrentMode+0x84>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b31      	cmp	r3, #49	; 0x31
 8005660:	d9f0      	bls.n	8005644 <USB_SetCurrentMode+0x60>
 8005662:	e001      	b.n	8005668 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e005      	b.n	8005674 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b32      	cmp	r3, #50	; 0x32
 800566c:	d101      	bne.n	8005672 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800567c:	b084      	sub	sp, #16
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800568a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e009      	b.n	80056b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3340      	adds	r3, #64	; 0x40
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	3301      	adds	r3, #1
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b0e      	cmp	r3, #14
 80056b4:	d9f2      	bls.n	800569c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d11c      	bne.n	80056f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e005      	b.n	8005702 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	4619      	mov	r1, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	461a      	mov	r2, r3
 800571e:	680b      	ldr	r3, [r1, #0]
 8005720:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	2b01      	cmp	r3, #1
 8005726:	d10c      	bne.n	8005742 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800572e:	2100      	movs	r1, #0
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f975 	bl	8005a20 <USB_SetDevSpeed>
 8005736:	e018      	b.n	800576a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005738:	2101      	movs	r1, #1
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f970 	bl	8005a20 <USB_SetDevSpeed>
 8005740:	e013      	b.n	800576a <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b03      	cmp	r3, #3
 8005746:	d10c      	bne.n	8005762 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f965 	bl	8005a20 <USB_SetDevSpeed>
 8005756:	e008      	b.n	800576a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f960 	bl	8005a20 <USB_SetDevSpeed>
 8005760:	e003      	b.n	800576a <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005762:	2103      	movs	r1, #3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f95b 	bl	8005a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800576a:	2110      	movs	r1, #16
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8f3 	bl	8005958 <USB_FlushTxFifo>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f91f 	bl	80059c0 <USB_FlushRxFifo>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	461a      	mov	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	461a      	mov	r2, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e043      	b.n	800583e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057cc:	d118      	bne.n	8005800 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e013      	b.n	8005812 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e008      	b.n	8005812 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	3301      	adds	r3, #1
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3b7      	bcc.n	80057b6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e043      	b.n	80058d4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005862:	d118      	bne.n	8005896 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005876:	461a      	mov	r2, r3
 8005878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e013      	b.n	80058a8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	461a      	mov	r2, r3
 800588e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e008      	b.n	80058a8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	2300      	movs	r3, #0
 80058a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	461a      	mov	r2, r3
 80058c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3b7      	bcc.n	800584c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f043 0210 	orr.w	r2, r3, #16
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <USB_DevInit+0x2d4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f043 0208 	orr.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <USB_DevInit+0x2d8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800594c:	b004      	add	sp, #16
 800594e:	4770      	bx	lr
 8005950:	803c3800 	.word	0x803c3800
 8005954:	40000004 	.word	0x40000004

08005958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <USB_FlushTxFifo+0x64>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e01b      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	daf2      	bge.n	8005966 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	019b      	lsls	r3, r3, #6
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <USB_FlushTxFifo+0x64>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e006      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d0f0      	beq.n	8005990 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00030d40 	.word	0x00030d40

080059c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a11      	ldr	r2, [pc, #68]	; (8005a1c <USB_FlushRxFifo+0x5c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e018      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	daf2      	bge.n	80059cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2210      	movs	r2, #16
 80059ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <USB_FlushRxFifo+0x5c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d0f0      	beq.n	80059f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	00030d40 	.word	0x00030d40

08005a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b087      	sub	sp, #28
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0306 	and.w	r3, r3, #6
 8005a6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a72:	2300      	movs	r3, #0
 8005a74:	75fb      	strb	r3, [r7, #23]
 8005a76:	e00a      	b.n	8005a8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d002      	beq.n	8005a84 <USB_GetDevSpeed+0x32>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d102      	bne.n	8005a8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a84:	2302      	movs	r3, #2
 8005a86:	75fb      	strb	r3, [r7, #23]
 8005a88:	e001      	b.n	8005a8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a8a:	230f      	movs	r3, #15
 8005a8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d139      	bne.n	8005b2c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	68f9      	ldr	r1, [r7, #12]
 8005ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d153      	bne.n	8005b98 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	791b      	ldrb	r3, [r3, #4]
 8005b0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	059b      	lsls	r3, r3, #22
 8005b12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	0159      	lsls	r1, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	440b      	add	r3, r1
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	4619      	mov	r1, r3
 8005b24:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <USB_ActivateEndpoint+0x10c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
 8005b2a:	e035      	b.n	8005b98 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d119      	bne.n	8005b98 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b80:	430b      	orrs	r3, r1
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	0159      	lsls	r1, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	440b      	add	r3, r1
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	4619      	mov	r1, r3
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <USB_ActivateEndpoint+0x10c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	10008000 	.word	0x10008000

08005bac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d161      	bne.n	8005c8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bde:	d11f      	bne.n	8005c20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c40:	4013      	ands	r3, r2
 8005c42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c64:	4013      	ands	r3, r2
 8005c66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	0159      	lsls	r1, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	4619      	mov	r1, r3
 8005c84:	4b35      	ldr	r3, [pc, #212]	; (8005d5c <USB_DeactivateEndpoint+0x1b0>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]
 8005c8a:	e060      	b.n	8005d4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca2:	d11f      	bne.n	8005ce4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d04:	4013      	ands	r3, r2
 8005d06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	2101      	movs	r1, #1
 8005d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	43db      	mvns	r3, r3
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d28:	4013      	ands	r3, r2
 8005d2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	0159      	lsls	r1, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	440b      	add	r3, r1
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	4619      	mov	r1, r3
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <USB_DeactivateEndpoint+0x1b4>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	ec337800 	.word	0xec337800
 8005d60:	eff37800 	.word	0xeff37800

08005d64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	f040 8163 	bne.w	800604c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d132      	bne.n	8005df4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	0159      	lsls	r1, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	440b      	add	r3, r1
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	4619      	mov	r1, r3
 8005daa:	4ba5      	ldr	r3, [pc, #660]	; (8006040 <USB_EPStartXfer+0x2dc>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	0159      	lsls	r1, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	4619      	mov	r1, r3
 8005dec:	4b95      	ldr	r3, [pc, #596]	; (8006044 <USB_EPStartXfer+0x2e0>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	610b      	str	r3, [r1, #16]
 8005df2:	e074      	b.n	8005ede <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	0159      	lsls	r1, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	440b      	add	r3, r1
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4b8c      	ldr	r3, [pc, #560]	; (8006044 <USB_EPStartXfer+0x2e0>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	0159      	lsls	r1, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	440b      	add	r3, r1
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	4619      	mov	r1, r3
 8005e32:	4b83      	ldr	r3, [pc, #524]	; (8006040 <USB_EPStartXfer+0x2dc>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	440b      	add	r3, r1
 8005e50:	1e59      	subs	r1, r3, #1
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e5c:	4b7a      	ldr	r3, [pc, #488]	; (8006048 <USB_EPStartXfer+0x2e4>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	69b9      	ldr	r1, [r7, #24]
 8005e62:	0148      	lsls	r0, r1, #5
 8005e64:	69f9      	ldr	r1, [r7, #28]
 8005e66:	4401      	add	r1, r0
 8005e68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	0148      	lsls	r0, r1, #5
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	4401      	add	r1, r0
 8005e8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e92:	4313      	orrs	r3, r2
 8005e94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	791b      	ldrb	r3, [r3, #4]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d11f      	bne.n	8005ede <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ebc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005edc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d14b      	bne.n	8005f7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	791b      	ldrb	r3, [r3, #4]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d128      	bne.n	8005f5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	e00f      	b.n	8005f5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e137      	b.n	80061ec <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d015      	beq.n	8005fd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 811f 	beq.w	80061ec <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	69f9      	ldr	r1, [r7, #28]
 8005fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8005fce:	e10d      	b.n	80061ec <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d110      	bne.n	8006002 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e00f      	b.n	8006022 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006020:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6919      	ldr	r1, [r3, #16]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	b298      	uxth	r0, r3
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 faea 	bl	8006610 <USB_WritePacket>
 800603c:	e0d6      	b.n	80061ec <USB_EPStartXfer+0x488>
 800603e:	bf00      	nop
 8006040:	e007ffff 	.word	0xe007ffff
 8006044:	fff80000 	.word	0xfff80000
 8006048:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	0159      	lsls	r1, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	440b      	add	r3, r1
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	4619      	mov	r1, r3
 8006068:	4b63      	ldr	r3, [pc, #396]	; (80061f8 <USB_EPStartXfer+0x494>)
 800606a:	4013      	ands	r3, r2
 800606c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	0159      	lsls	r1, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	440b      	add	r3, r1
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	4619      	mov	r1, r3
 800608a:	4b5c      	ldr	r3, [pc, #368]	; (80061fc <USB_EPStartXfer+0x498>)
 800608c:	4013      	ands	r3, r2
 800608e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d123      	bne.n	80060e0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ae:	69b9      	ldr	r1, [r7, #24]
 80060b0:	0148      	lsls	r0, r1, #5
 80060b2:	69f9      	ldr	r1, [r7, #28]
 80060b4:	4401      	add	r1, r0
 80060b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060ba:	4313      	orrs	r3, r2
 80060bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060dc:	6113      	str	r3, [r2, #16]
 80060de:	e037      	b.n	8006150 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	1e5a      	subs	r2, r3, #1
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	8afa      	ldrh	r2, [r7, #22]
 80060fc:	fb03 f202 	mul.w	r2, r3, r2
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	04d9      	lsls	r1, r3, #19
 8006116:	4b3a      	ldr	r3, [pc, #232]	; (8006200 <USB_EPStartXfer+0x49c>)
 8006118:	400b      	ands	r3, r1
 800611a:	69b9      	ldr	r1, [r7, #24]
 800611c:	0148      	lsls	r0, r1, #5
 800611e:	69f9      	ldr	r1, [r7, #28]
 8006120:	4401      	add	r1, r0
 8006122:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006126:	4313      	orrs	r3, r2
 8006128:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006140:	69b9      	ldr	r1, [r7, #24]
 8006142:	0148      	lsls	r0, r1, #5
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	4401      	add	r1, r0
 8006148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800614c:	4313      	orrs	r3, r2
 800614e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10d      	bne.n	8006172 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d009      	beq.n	8006172 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6919      	ldr	r1, [r3, #16]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	460a      	mov	r2, r1
 8006170:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	791b      	ldrb	r3, [r3, #4]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d128      	bne.n	80061cc <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006186:	2b00      	cmp	r3, #0
 8006188:	d110      	bne.n	80061ac <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e00f      	b.n	80061cc <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	fff80000 	.word	0xfff80000
 80061fc:	e007ffff 	.word	0xe007ffff
 8006200:	1ff80000 	.word	0x1ff80000

08006204 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b01      	cmp	r3, #1
 8006222:	f040 80ce 	bne.w	80063c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d132      	bne.n	8006294 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	0159      	lsls	r1, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	440b      	add	r3, r1
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	4619      	mov	r1, r3
 800624a:	4b9a      	ldr	r3, [pc, #616]	; (80064b4 <USB_EP0StartXfer+0x2b0>)
 800624c:	4013      	ands	r3, r2
 800624e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800626e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	0159      	lsls	r1, r3, #5
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	440b      	add	r3, r1
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	4619      	mov	r1, r3
 800628c:	4b8a      	ldr	r3, [pc, #552]	; (80064b8 <USB_EP0StartXfer+0x2b4>)
 800628e:	4013      	ands	r3, r2
 8006290:	610b      	str	r3, [r1, #16]
 8006292:	e04e      	b.n	8006332 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	0159      	lsls	r1, r3, #5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	440b      	add	r3, r1
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	4619      	mov	r1, r3
 80062b0:	4b81      	ldr	r3, [pc, #516]	; (80064b8 <USB_EP0StartXfer+0x2b4>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	0159      	lsls	r1, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	440b      	add	r3, r1
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	4619      	mov	r1, r3
 80062d2:	4b78      	ldr	r3, [pc, #480]	; (80064b4 <USB_EP0StartXfer+0x2b0>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d903      	bls.n	80062ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	440a      	add	r2, r1
 8006302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800630a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006322:	6939      	ldr	r1, [r7, #16]
 8006324:	0148      	lsls	r0, r1, #5
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	4401      	add	r1, r0
 800632a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800632e:	4313      	orrs	r3, r2
 8006330:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d11e      	bne.n	8006376 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	e097      	b.n	80064a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	0151      	lsls	r1, r2, #5
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	440a      	add	r2, r1
 800638c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006394:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8083 	beq.w	80064a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	6979      	ldr	r1, [r7, #20]
 80063b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063bc:	4313      	orrs	r3, r2
 80063be:	634b      	str	r3, [r1, #52]	; 0x34
 80063c0:	e071      	b.n	80064a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	0159      	lsls	r1, r3, #5
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	440b      	add	r3, r1
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	4619      	mov	r1, r3
 80063de:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <USB_EP0StartXfer+0x2b4>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	0159      	lsls	r1, r3, #5
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	440b      	add	r3, r1
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	4619      	mov	r1, r3
 8006400:	4b2c      	ldr	r3, [pc, #176]	; (80064b4 <USB_EP0StartXfer+0x2b0>)
 8006402:	4013      	ands	r3, r2
 8006404:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800643c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006454:	6939      	ldr	r1, [r7, #16]
 8006456:	0148      	lsls	r0, r1, #5
 8006458:	6979      	ldr	r1, [r7, #20]
 800645a:	4401      	add	r1, r0
 800645c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006460:	4313      	orrs	r3, r2
 8006462:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10d      	bne.n	8006486 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6919      	ldr	r1, [r3, #16]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	460a      	mov	r2, r1
 8006484:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	e007ffff 	.word	0xe007ffff
 80064b8:	fff80000 	.word	0xfff80000

080064bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d14a      	bne.n	8006570 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f2:	f040 8086 	bne.w	8006602 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006514:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006518:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f242 7210 	movw	r2, #10000	; 0x2710
 800654a:	4293      	cmp	r3, r2
 800654c:	d902      	bls.n	8006554 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
          break;
 8006552:	e056      	b.n	8006602 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800656c:	d0e7      	beq.n	800653e <USB_EPStopXfer+0x82>
 800656e:	e048      	b.n	8006602 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006588:	d13b      	bne.n	8006602 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f242 7210 	movw	r2, #10000	; 0x2710
 80065de:	4293      	cmp	r3, r2
 80065e0:	d902      	bls.n	80065e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
          break;
 80065e6:	e00c      	b.n	8006602 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006600:	d0e7      	beq.n	80065d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006602:	7dfb      	ldrb	r3, [r7, #23]
}
 8006604:	4618      	mov	r0, r3
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006610:	b480      	push	{r7}
 8006612:	b089      	sub	sp, #36	; 0x24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4611      	mov	r1, r2
 800661c:	461a      	mov	r2, r3
 800661e:	460b      	mov	r3, r1
 8006620:	71fb      	strb	r3, [r7, #7]
 8006622:	4613      	mov	r3, r2
 8006624:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800662e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d123      	bne.n	800667e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006636:	88bb      	ldrh	r3, [r7, #4]
 8006638:	3303      	adds	r3, #3
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	e018      	b.n	8006676 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	031a      	lsls	r2, r3, #12
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	4413      	add	r3, r2
 800664c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006650:	461a      	mov	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	3301      	adds	r3, #1
 800665c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3301      	adds	r3, #1
 8006662:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	3301      	adds	r3, #1
 8006668:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3301      	adds	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	3301      	adds	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d3e2      	bcc.n	8006644 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3724      	adds	r7, #36	; 0x24
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800668c:	b480      	push	{r7}
 800668e:	b08b      	sub	sp, #44	; 0x2c
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	089b      	lsrs	r3, r3, #2
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	623b      	str	r3, [r7, #32]
 80066b6:	e014      	b.n	80066e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	3301      	adds	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	3301      	adds	r3, #1
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	3301      	adds	r3, #1
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	3301      	adds	r3, #1
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	3301      	adds	r3, #1
 80066e0:	623b      	str	r3, [r7, #32]
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d3e6      	bcc.n	80066b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066ea:	8bfb      	ldrh	r3, [r7, #30]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01e      	beq.n	800672e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066fa:	461a      	mov	r2, r3
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	fa22 f303 	lsr.w	r3, r2, r3
 8006710:	b2da      	uxtb	r2, r3
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	701a      	strb	r2, [r3, #0]
      i++;
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	3301      	adds	r3, #1
 800671a:	623b      	str	r3, [r7, #32]
      pDest++;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	3301      	adds	r3, #1
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006722:	8bfb      	ldrh	r3, [r7, #30]
 8006724:	3b01      	subs	r3, #1
 8006726:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006728:	8bfb      	ldrh	r3, [r7, #30]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ea      	bne.n	8006704 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006730:	4618      	mov	r0, r3
 8006732:	372c      	adds	r7, #44	; 0x2c
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d12c      	bne.n	80067b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	db12      	blt.n	8006790 <USB_EPSetStall+0x54>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00f      	beq.n	8006790 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800678e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	e02b      	b.n	800680a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	db12      	blt.n	80067ea <USB_EPSetStall+0xae>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00f      	beq.n	80067ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006808:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d128      	bne.n	8006886 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006852:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	791b      	ldrb	r3, [r3, #4]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d003      	beq.n	8006864 <USB_EPClearStall+0x4c>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	791b      	ldrb	r3, [r3, #4]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d138      	bne.n	80068d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e027      	b.n	80068d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d003      	beq.n	80068b6 <USB_EPClearStall+0x9e>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	791b      	ldrb	r3, [r3, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d10f      	bne.n	80068d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006902:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006906:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006918:	68f9      	ldr	r1, [r7, #12]
 800691a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800691e:	4313      	orrs	r3, r2
 8006920:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695e:	f023 0302 	bic.w	r3, r3, #2
 8006962:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800698c:	f023 0303 	bic.w	r3, r3, #3
 8006990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4013      	ands	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069cc:	68fb      	ldr	r3, [r7, #12]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	0c1b      	lsrs	r3, r3, #16
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	b29b      	uxth	r3, r3
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a70:	68bb      	ldr	r3, [r7, #8]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b087      	sub	sp, #28
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006aae:	01db      	lsls	r3, r3, #7
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006acc:	68bb      	ldr	r3, [r7, #8]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	4619      	mov	r1, r3
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <USB_ActivateSetup+0x44>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	fffff800 	.word	0xfffff800

08006b40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	333c      	adds	r3, #60	; 0x3c
 8006b56:	3304      	adds	r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4a26      	ldr	r2, [pc, #152]	; (8006bf8 <USB_EP0_OutStart+0xb8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d90a      	bls.n	8006b7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b74:	d101      	bne.n	8006b7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e037      	b.n	8006bea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	461a      	mov	r2, r3
 8006b82:	2300      	movs	r3, #0
 8006b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba8:	f043 0318 	orr.w	r3, r3, #24
 8006bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006bc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10f      	bne.n	8006be8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	4f54300a 	.word	0x4f54300a

08006bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <USB_CoreReset+0x64>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e01b      	b.n	8006c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	daf2      	bge.n	8006c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f043 0201 	orr.w	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <USB_CoreReset+0x64>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e006      	b.n	8006c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d0f0      	beq.n	8006c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	00030d40 	.word	0x00030d40

08006c64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c74:	f002 fd06 	bl	8009684 <malloc>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e0d4      	b.n	8006e40 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c96:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f002 fdad 	bl	80097fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	32b0      	adds	r2, #176	; 0xb0
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	32b0      	adds	r2, #176	; 0xb0
 8006cbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7c1b      	ldrb	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d138      	bne.n	8006d40 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cce:	4b5e      	ldr	r3, [pc, #376]	; (8006e48 <USBD_CDC_Init+0x1e4>)
 8006cd0:	7819      	ldrb	r1, [r3, #0]
 8006cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 fb30 	bl	800933e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cde:	4b5a      	ldr	r3, [pc, #360]	; (8006e48 <USBD_CDC_Init+0x1e4>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f003 020f 	and.w	r2, r3, #15
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3324      	adds	r3, #36	; 0x24
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cf8:	4b54      	ldr	r3, [pc, #336]	; (8006e4c <USBD_CDC_Init+0x1e8>)
 8006cfa:	7819      	ldrb	r1, [r3, #0]
 8006cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d00:	2202      	movs	r2, #2
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f002 fb1b 	bl	800933e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d08:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <USBD_CDC_Init+0x1e8>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d20:	2201      	movs	r2, #1
 8006d22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d24:	4b4a      	ldr	r3, [pc, #296]	; (8006e50 <USBD_CDC_Init+0x1ec>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3326      	adds	r3, #38	; 0x26
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	e035      	b.n	8006dac <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d40:	4b41      	ldr	r3, [pc, #260]	; (8006e48 <USBD_CDC_Init+0x1e4>)
 8006d42:	7819      	ldrb	r1, [r3, #0]
 8006d44:	2340      	movs	r3, #64	; 0x40
 8006d46:	2202      	movs	r2, #2
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f002 faf8 	bl	800933e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d4e:	4b3e      	ldr	r3, [pc, #248]	; (8006e48 <USBD_CDC_Init+0x1e4>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 020f 	and.w	r2, r3, #15
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3324      	adds	r3, #36	; 0x24
 8006d64:	2201      	movs	r2, #1
 8006d66:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d68:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <USBD_CDC_Init+0x1e8>)
 8006d6a:	7819      	ldrb	r1, [r3, #0]
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	2202      	movs	r2, #2
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f002 fae4 	bl	800933e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d76:	4b35      	ldr	r3, [pc, #212]	; (8006e4c <USBD_CDC_Init+0x1e8>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4613      	mov	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d8e:	2201      	movs	r2, #1
 8006d90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d92:	4b2f      	ldr	r3, [pc, #188]	; (8006e50 <USBD_CDC_Init+0x1ec>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 020f 	and.w	r2, r3, #15
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	3326      	adds	r3, #38	; 0x26
 8006da8:	2210      	movs	r2, #16
 8006daa:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dac:	4b28      	ldr	r3, [pc, #160]	; (8006e50 <USBD_CDC_Init+0x1ec>)
 8006dae:	7819      	ldrb	r1, [r3, #0]
 8006db0:	2308      	movs	r3, #8
 8006db2:	2203      	movs	r2, #3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f002 fac2 	bl	800933e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006dba:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <USBD_CDC_Init+0x1ec>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f003 020f 	and.w	r2, r3, #15
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	3324      	adds	r3, #36	; 0x24
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	33b0      	adds	r3, #176	; 0xb0
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e018      	b.n	8006e40 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7c1b      	ldrb	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <USBD_CDC_Init+0x1e8>)
 8006e18:	7819      	ldrb	r1, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 fb79 	bl	800951c <USBD_LL_PrepareReceive>
 8006e2a:	e008      	b.n	8006e3e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <USBD_CDC_Init+0x1e8>)
 8006e2e:	7819      	ldrb	r1, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e36:	2340      	movs	r3, #64	; 0x40
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 fb6f 	bl	800951c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20000093 	.word	0x20000093
 8006e4c:	20000094 	.word	0x20000094
 8006e50:	20000095 	.word	0x20000095

08006e54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e60:	4b3a      	ldr	r3, [pc, #232]	; (8006f4c <USBD_CDC_DeInit+0xf8>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f002 fa8f 	bl	800938a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e6c:	4b37      	ldr	r3, [pc, #220]	; (8006f4c <USBD_CDC_DeInit+0xf8>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	3324      	adds	r3, #36	; 0x24
 8006e82:	2200      	movs	r2, #0
 8006e84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e86:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <USBD_CDC_DeInit+0xfc>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f002 fa7c 	bl	800938a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <USBD_CDC_DeInit+0xfc>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f003 020f 	and.w	r2, r3, #15
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eaa:	2200      	movs	r2, #0
 8006eac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006eae:	4b29      	ldr	r3, [pc, #164]	; (8006f54 <USBD_CDC_DeInit+0x100>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f002 fa68 	bl	800938a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006eba:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <USBD_CDC_DeInit+0x100>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f003 020f 	and.w	r2, r3, #15
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	3324      	adds	r3, #36	; 0x24
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ed4:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <USBD_CDC_DeInit+0x100>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3326      	adds	r3, #38	; 0x26
 8006eea:	2200      	movs	r2, #0
 8006eec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	32b0      	adds	r2, #176	; 0xb0
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01f      	beq.n	8006f40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	33b0      	adds	r3, #176	; 0xb0
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32b0      	adds	r2, #176	; 0xb0
 8006f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f002 fbb6 	bl	8009694 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32b0      	adds	r2, #176	; 0xb0
 8006f32:	2100      	movs	r1, #0
 8006f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000093 	.word	0x20000093
 8006f50:	20000094 	.word	0x20000094
 8006f54:	20000095 	.word	0x20000095

08006f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32b0      	adds	r2, #176	; 0xb0
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e0bf      	b.n	8007108 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d050      	beq.n	8007036 <USBD_CDC_Setup+0xde>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	f040 80af 	bne.w	80070f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d03a      	beq.n	8007018 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b25b      	sxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	da1b      	bge.n	8006fe4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	33b0      	adds	r3, #176	; 0xb0
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006fc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	88d2      	ldrh	r2, [r2, #6]
 8006fc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	88db      	ldrh	r3, [r3, #6]
 8006fce:	2b07      	cmp	r3, #7
 8006fd0:	bf28      	it	cs
 8006fd2:	2307      	movcs	r3, #7
 8006fd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	89fa      	ldrh	r2, [r7, #14]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fd6d 	bl	8008abc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006fe2:	e090      	b.n	8007106 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	785a      	ldrb	r2, [r3, #1]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	88db      	ldrh	r3, [r3, #6]
 8006ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8006ff4:	d803      	bhi.n	8006ffe <USBD_CDC_Setup+0xa6>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	88db      	ldrh	r3, [r3, #6]
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	e000      	b.n	8007000 <USBD_CDC_Setup+0xa8>
 8006ffe:	2240      	movs	r2, #64	; 0x40
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007006:	6939      	ldr	r1, [r7, #16]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800700e:	461a      	mov	r2, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 fd7f 	bl	8008b14 <USBD_CtlPrepareRx>
      break;
 8007016:	e076      	b.n	8007106 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	33b0      	adds	r3, #176	; 0xb0
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	7850      	ldrb	r0, [r2, #1]
 800702e:	2200      	movs	r2, #0
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	4798      	blx	r3
      break;
 8007034:	e067      	b.n	8007106 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	2b0b      	cmp	r3, #11
 800703c:	d851      	bhi.n	80070e2 <USBD_CDC_Setup+0x18a>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_CDC_Setup+0xec>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007075 	.word	0x08007075
 8007048:	080070f1 	.word	0x080070f1
 800704c:	080070e3 	.word	0x080070e3
 8007050:	080070e3 	.word	0x080070e3
 8007054:	080070e3 	.word	0x080070e3
 8007058:	080070e3 	.word	0x080070e3
 800705c:	080070e3 	.word	0x080070e3
 8007060:	080070e3 	.word	0x080070e3
 8007064:	080070e3 	.word	0x080070e3
 8007068:	080070e3 	.word	0x080070e3
 800706c:	0800709f 	.word	0x0800709f
 8007070:	080070c9 	.word	0x080070c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b03      	cmp	r3, #3
 800707e:	d107      	bne.n	8007090 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007080:	f107 030a 	add.w	r3, r7, #10
 8007084:	2202      	movs	r2, #2
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fd17 	bl	8008abc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800708e:	e032      	b.n	80070f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fca1 	bl	80089da <USBD_CtlError>
            ret = USBD_FAIL;
 8007098:	2303      	movs	r3, #3
 800709a:	75fb      	strb	r3, [r7, #23]
          break;
 800709c:	e02b      	b.n	80070f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d107      	bne.n	80070ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070aa:	f107 030d 	add.w	r3, r7, #13
 80070ae:	2201      	movs	r2, #1
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fd02 	bl	8008abc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070b8:	e01d      	b.n	80070f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fc8c 	bl	80089da <USBD_CtlError>
            ret = USBD_FAIL;
 80070c2:	2303      	movs	r3, #3
 80070c4:	75fb      	strb	r3, [r7, #23]
          break;
 80070c6:	e016      	b.n	80070f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d00f      	beq.n	80070f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fc7f 	bl	80089da <USBD_CtlError>
            ret = USBD_FAIL;
 80070dc:	2303      	movs	r3, #3
 80070de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070e0:	e008      	b.n	80070f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fc78 	bl	80089da <USBD_CtlError>
          ret = USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	75fb      	strb	r3, [r7, #23]
          break;
 80070ee:	e002      	b.n	80070f6 <USBD_CDC_Setup+0x19e>
          break;
 80070f0:	bf00      	nop
 80070f2:	e008      	b.n	8007106 <USBD_CDC_Setup+0x1ae>
          break;
 80070f4:	bf00      	nop
      }
      break;
 80070f6:	e006      	b.n	8007106 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fc6d 	bl	80089da <USBD_CtlError>
      ret = USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	75fb      	strb	r3, [r7, #23]
      break;
 8007104:	bf00      	nop
  }

  return (uint8_t)ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32b0      	adds	r2, #176	; 0xb0
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007136:	2303      	movs	r3, #3
 8007138:	e065      	b.n	8007206 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	32b0      	adds	r2, #176	; 0xb0
 8007144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3318      	adds	r3, #24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02f      	beq.n	80071c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	f003 020f 	and.w	r2, r3, #15
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	3318      	adds	r3, #24
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	f003 010f 	and.w	r1, r3, #15
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	460b      	mov	r3, r1
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	440b      	add	r3, r1
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4403      	add	r3, r0
 800718c:	3348      	adds	r3, #72	; 0x48
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	fbb2 f1f3 	udiv	r1, r2, r3
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800719a:	2b00      	cmp	r3, #0
 800719c:	d112      	bne.n	80071c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	3318      	adds	r3, #24
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071b6:	78f9      	ldrb	r1, [r7, #3]
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f002 f98c 	bl	80094da <USBD_LL_Transmit>
 80071c2:	e01f      	b.n	8007204 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	33b0      	adds	r3, #176	; 0xb0
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d010      	beq.n	8007204 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	33b0      	adds	r3, #176	; 0xb0
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007200:	78fa      	ldrb	r2, [r7, #3]
 8007202:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	32b0      	adds	r2, #176	; 0xb0
 8007224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	32b0      	adds	r2, #176	; 0xb0
 8007234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	e01a      	b.n	8007276 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f002 f98a 	bl	800955e <USBD_LL_GetRxDataSize>
 800724a:	4602      	mov	r2, r0
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	33b0      	adds	r3, #176	; 0xb0
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007270:	4611      	mov	r1, r2
 8007272:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	32b0      	adds	r2, #176	; 0xb0
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e025      	b.n	80072ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	33b0      	adds	r3, #176	; 0xb0
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01a      	beq.n	80072ea <USBD_CDC_EP0_RxReady+0x6c>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072ba:	2bff      	cmp	r3, #255	; 0xff
 80072bc:	d015      	beq.n	80072ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	33b0      	adds	r3, #176	; 0xb0
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80072d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072de:	b292      	uxth	r2, r2
 80072e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072fc:	2182      	movs	r1, #130	; 0x82
 80072fe:	4818      	ldr	r0, [pc, #96]	; (8007360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007300:	f000 fd09 	bl	8007d16 <USBD_GetEpDesc>
 8007304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007306:	2101      	movs	r1, #1
 8007308:	4815      	ldr	r0, [pc, #84]	; (8007360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800730a:	f000 fd04 	bl	8007d16 <USBD_GetEpDesc>
 800730e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007310:	2181      	movs	r1, #129	; 0x81
 8007312:	4813      	ldr	r0, [pc, #76]	; (8007360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007314:	f000 fcff 	bl	8007d16 <USBD_GetEpDesc>
 8007318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2210      	movs	r2, #16
 8007324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	2200      	movs	r2, #0
 8007330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007334:	711a      	strb	r2, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007348:	711a      	strb	r2, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2243      	movs	r2, #67	; 0x43
 8007352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000050 	.word	0x20000050

08007364 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800736c:	2182      	movs	r1, #130	; 0x82
 800736e:	4818      	ldr	r0, [pc, #96]	; (80073d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007370:	f000 fcd1 	bl	8007d16 <USBD_GetEpDesc>
 8007374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007376:	2101      	movs	r1, #1
 8007378:	4815      	ldr	r0, [pc, #84]	; (80073d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800737a:	f000 fccc 	bl	8007d16 <USBD_GetEpDesc>
 800737e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007380:	2181      	movs	r1, #129	; 0x81
 8007382:	4813      	ldr	r0, [pc, #76]	; (80073d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007384:	f000 fcc7 	bl	8007d16 <USBD_GetEpDesc>
 8007388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2210      	movs	r2, #16
 8007394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d006      	beq.n	80073aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2200      	movs	r2, #0
 80073a0:	711a      	strb	r2, [r3, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f042 0202 	orr.w	r2, r2, #2
 80073a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d006      	beq.n	80073be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	711a      	strb	r2, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f042 0202 	orr.w	r2, r2, #2
 80073bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2243      	movs	r2, #67	; 0x43
 80073c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000050 	.word	0x20000050

080073d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073dc:	2182      	movs	r1, #130	; 0x82
 80073de:	4818      	ldr	r0, [pc, #96]	; (8007440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073e0:	f000 fc99 	bl	8007d16 <USBD_GetEpDesc>
 80073e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073e6:	2101      	movs	r1, #1
 80073e8:	4815      	ldr	r0, [pc, #84]	; (8007440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073ea:	f000 fc94 	bl	8007d16 <USBD_GetEpDesc>
 80073ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073f0:	2181      	movs	r1, #129	; 0x81
 80073f2:	4813      	ldr	r0, [pc, #76]	; (8007440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073f4:	f000 fc8f 	bl	8007d16 <USBD_GetEpDesc>
 80073f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2210      	movs	r2, #16
 8007404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d006      	beq.n	800741a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2200      	movs	r2, #0
 8007410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007414:	711a      	strb	r2, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d006      	beq.n	800742e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007428:	711a      	strb	r2, [r3, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2243      	movs	r2, #67	; 0x43
 8007432:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007434:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000050 	.word	0x20000050

08007444 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	220a      	movs	r2, #10
 8007450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007452:	4b03      	ldr	r3, [pc, #12]	; (8007460 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	2000000c 	.word	0x2000000c

08007464 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007474:	2303      	movs	r3, #3
 8007476:	e009      	b.n	800748c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	33b0      	adds	r3, #176	; 0xb0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	32b0      	adds	r2, #176	; 0xb0
 80074ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e008      	b.n	80074d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	32b0      	adds	r2, #176	; 0xb0
 80074f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e004      	b.n	800750a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	32b0      	adds	r2, #176	; 0xb0
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	32b0      	adds	r2, #176	; 0xb0
 800753a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007542:	2303      	movs	r3, #3
 8007544:	e018      	b.n	8007578 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7c1b      	ldrb	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <USBD_CDC_ReceivePacket+0x68>)
 8007550:	7819      	ldrb	r1, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 ffdd 	bl	800951c <USBD_LL_PrepareReceive>
 8007562:	e008      	b.n	8007576 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007564:	4b06      	ldr	r3, [pc, #24]	; (8007580 <USBD_CDC_ReceivePacket+0x68>)
 8007566:	7819      	ldrb	r1, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800756e:	2340      	movs	r3, #64	; 0x40
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 ffd3 	bl	800951c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20000094 	.word	0x20000094

08007584 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	e01f      	b.n	80075dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	79fa      	ldrb	r2, [r7, #7]
 80075ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f001 fe49 	bl	8009268 <USBD_LL_Init>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e025      	b.n	8007648 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	32ae      	adds	r2, #174	; 0xae
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00f      	beq.n	8007638 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32ae      	adds	r2, #174	; 0xae
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	f107 020e 	add.w	r2, r7, #14
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	4602      	mov	r2, r0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fe55 	bl	8009308 <USBD_LL_Start>
 800765e:	4603      	mov	r3, r0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d009      	beq.n	80076ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	4611      	mov	r1, r2
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	4611      	mov	r1, r2
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f932 	bl	8008966 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800771e:	f003 031f 	and.w	r3, r3, #31
 8007722:	2b02      	cmp	r3, #2
 8007724:	d01a      	beq.n	800775c <USBD_LL_SetupStage+0x72>
 8007726:	2b02      	cmp	r3, #2
 8007728:	d822      	bhi.n	8007770 <USBD_LL_SetupStage+0x86>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <USBD_LL_SetupStage+0x4a>
 800772e:	2b01      	cmp	r3, #1
 8007730:	d00a      	beq.n	8007748 <USBD_LL_SetupStage+0x5e>
 8007732:	e01d      	b.n	8007770 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb5f 	bl	8007e00 <USBD_StdDevReq>
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]
      break;
 8007746:	e020      	b.n	800778a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fbc7 	bl	8007ee4 <USBD_StdItfReq>
 8007756:	4603      	mov	r3, r0
 8007758:	73fb      	strb	r3, [r7, #15]
      break;
 800775a:	e016      	b.n	800778a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc29 	bl	8007fbc <USBD_StdEPReq>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]
      break;
 800776e:	e00c      	b.n	800778a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800777a:	b2db      	uxtb	r3, r3
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fe22 	bl	80093c8 <USBD_LL_StallEP>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]
      break;
 8007788:	bf00      	nop
  }

  return ret;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	460b      	mov	r3, r1
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d16e      	bne.n	800788a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	f040 8098 	bne.w	80078f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d913      	bls.n	80077f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	1ad2      	subs	r2, r2, r3
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bf28      	it	cs
 80077e6:	4613      	movcs	r3, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f001 f9ae 	bl	8008b4e <USBD_CtlContinueRx>
 80077f2:	e07d      	b.n	80078f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d014      	beq.n	800782c <USBD_LL_DataOutStage+0x98>
 8007802:	2b02      	cmp	r3, #2
 8007804:	d81d      	bhi.n	8007842 <USBD_LL_DataOutStage+0xae>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <USBD_LL_DataOutStage+0x7c>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d003      	beq.n	8007816 <USBD_LL_DataOutStage+0x82>
 800780e:	e018      	b.n	8007842 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	75bb      	strb	r3, [r7, #22]
            break;
 8007814:	e018      	b.n	8007848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800781c:	b2db      	uxtb	r3, r3
 800781e:	4619      	mov	r1, r3
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fa5e 	bl	8007ce2 <USBD_CoreFindIF>
 8007826:	4603      	mov	r3, r0
 8007828:	75bb      	strb	r3, [r7, #22]
            break;
 800782a:	e00d      	b.n	8007848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007832:	b2db      	uxtb	r3, r3
 8007834:	4619      	mov	r1, r3
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fa60 	bl	8007cfc <USBD_CoreFindEP>
 800783c:	4603      	mov	r3, r0
 800783e:	75bb      	strb	r3, [r7, #22]
            break;
 8007840:	e002      	b.n	8007848 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	75bb      	strb	r3, [r7, #22]
            break;
 8007846:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007848:	7dbb      	ldrb	r3, [r7, #22]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d119      	bne.n	8007882 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d113      	bne.n	8007882 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800785a:	7dba      	ldrb	r2, [r7, #22]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	32ae      	adds	r2, #174	; 0xae
 8007860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800786a:	7dba      	ldrb	r2, [r7, #22]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007872:	7dba      	ldrb	r2, [r7, #22]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	32ae      	adds	r2, #174	; 0xae
 8007878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f001 f974 	bl	8008b70 <USBD_CtlSendStatus>
 8007888:	e032      	b.n	80078f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800788a:	7afb      	ldrb	r3, [r7, #11]
 800788c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007890:	b2db      	uxtb	r3, r3
 8007892:	4619      	mov	r1, r3
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fa31 	bl	8007cfc <USBD_CoreFindEP>
 800789a:	4603      	mov	r3, r0
 800789c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800789e:	7dbb      	ldrb	r3, [r7, #22]
 80078a0:	2bff      	cmp	r3, #255	; 0xff
 80078a2:	d025      	beq.n	80078f0 <USBD_LL_DataOutStage+0x15c>
 80078a4:	7dbb      	ldrb	r3, [r7, #22]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d122      	bne.n	80078f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d117      	bne.n	80078e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80078b6:	7dba      	ldrb	r2, [r7, #22]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	32ae      	adds	r2, #174	; 0xae
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00f      	beq.n	80078e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80078c6:	7dba      	ldrb	r2, [r7, #22]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80078ce:	7dba      	ldrb	r2, [r7, #22]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	32ae      	adds	r2, #174	; 0xae
 80078d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	7afa      	ldrb	r2, [r7, #11]
 80078dc:	4611      	mov	r1, r2
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	4798      	blx	r3
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	e000      	b.n	80078f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b086      	sub	sp, #24
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	460b      	mov	r3, r1
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d16f      	bne.n	80079ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3314      	adds	r3, #20
 8007912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800791a:	2b02      	cmp	r3, #2
 800791c:	d15a      	bne.n	80079d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	429a      	cmp	r2, r3
 8007928:	d914      	bls.n	8007954 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	1ad2      	subs	r2, r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	461a      	mov	r2, r3
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f001 f8d6 	bl	8008af2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007946:	2300      	movs	r3, #0
 8007948:	2200      	movs	r2, #0
 800794a:	2100      	movs	r1, #0
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f001 fde5 	bl	800951c <USBD_LL_PrepareReceive>
 8007952:	e03f      	b.n	80079d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d11c      	bne.n	800799a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007968:	429a      	cmp	r2, r3
 800796a:	d316      	bcc.n	800799a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007976:	429a      	cmp	r2, r3
 8007978:	d20f      	bcs.n	800799a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800797a:	2200      	movs	r2, #0
 800797c:	2100      	movs	r1, #0
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f001 f8b7 	bl	8008af2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800798c:	2300      	movs	r3, #0
 800798e:	2200      	movs	r2, #0
 8007990:	2100      	movs	r1, #0
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f001 fdc2 	bl	800951c <USBD_LL_PrepareReceive>
 8007998:	e01c      	b.n	80079d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d10f      	bne.n	80079c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f001 fcfd 	bl	80093c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f001 f8e1 	bl	8008b96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d03a      	beq.n	8007a54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff fe42 	bl	8007668 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079ec:	e032      	b.n	8007a54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	4619      	mov	r1, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f97f 	bl	8007cfc <USBD_CoreFindEP>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2bff      	cmp	r3, #255	; 0xff
 8007a06:	d025      	beq.n	8007a54 <USBD_LL_DataInStage+0x15a>
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d122      	bne.n	8007a54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d11c      	bne.n	8007a54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007a1a:	7dfa      	ldrb	r2, [r7, #23]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	32ae      	adds	r2, #174	; 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d014      	beq.n	8007a54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007a2a:	7dfa      	ldrb	r2, [r7, #23]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007a32:	7dfa      	ldrb	r2, [r7, #23]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	32ae      	adds	r2, #174	; 0xae
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	7afa      	ldrb	r2, [r7, #11]
 8007a40:	4611      	mov	r1, r2
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	4798      	blx	r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a4a:	7dbb      	ldrb	r3, [r7, #22]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a50:	7dbb      	ldrb	r3, [r7, #22]
 8007a52:	e000      	b.n	8007a56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d014      	beq.n	8007ac4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00e      	beq.n	8007ac4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6852      	ldr	r2, [r2, #4]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 fc37 	bl	800933e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2240      	movs	r2, #64	; 0x40
 8007adc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ae0:	2340      	movs	r3, #64	; 0x40
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fc29 	bl	800933e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2240      	movs	r2, #64	; 0x40
 8007af6:	621a      	str	r2, [r3, #32]

  return ret;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d106      	bne.n	8007b70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d110      	bne.n	8007bb4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	32ae      	adds	r2, #174	; 0xae
 8007bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e01c      	b.n	8007c1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d115      	bne.n	8007c18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	32ae      	adds	r2, #174	; 0xae
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	32ae      	adds	r2, #174	; 0xae
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	32ae      	adds	r2, #174	; 0xae
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e01c      	b.n	8007c7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d115      	bne.n	8007c7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	32ae      	adds	r2, #174	; 0xae
 8007c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	32ae      	adds	r2, #174	; 0xae
 8007c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	4611      	mov	r1, r2
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6852      	ldr	r2, [r2, #4]
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	4611      	mov	r1, r2
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b086      	sub	sp, #24
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	885b      	ldrh	r3, [r3, #2]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d920      	bls.n	8007d80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d46:	e013      	b.n	8007d70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d48:	f107 030a 	add.w	r3, r7, #10
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6978      	ldr	r0, [r7, #20]
 8007d50:	f000 f81b 	bl	8007d8a <USBD_GetNextDesc>
 8007d54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d108      	bne.n	8007d70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	789b      	ldrb	r3, [r3, #2]
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d008      	beq.n	8007d7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	885b      	ldrh	r3, [r3, #2]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	897b      	ldrh	r3, [r7, #10]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d8e5      	bhi.n	8007d48 <USBD_GetEpDesc+0x32>
 8007d7c:	e000      	b.n	8007d80 <USBD_GetEpDesc+0x6a>
          break;
 8007d7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d80:	693b      	ldr	r3, [r7, #16]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	881a      	ldrh	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	4413      	add	r3, r2
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007de2:	8a3b      	ldrh	r3, [r7, #16]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	b21a      	sxth	r2, r3
 8007de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b21b      	sxth	r3, r3
 8007df0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007df2:	89fb      	ldrh	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d005      	beq.n	8007e26 <USBD_StdDevReq+0x26>
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d857      	bhi.n	8007ece <USBD_StdDevReq+0xce>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00f      	beq.n	8007e42 <USBD_StdDevReq+0x42>
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d153      	bne.n	8007ece <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	32ae      	adds	r2, #174	; 0xae
 8007e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e40:	e04a      	b.n	8007ed8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	d83b      	bhi.n	8007ec2 <USBD_StdDevReq+0xc2>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <USBD_StdDevReq+0x50>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007ec3 	.word	0x08007ec3
 8007e5c:	08007eaf 	.word	0x08007eaf
 8007e60:	08007ec3 	.word	0x08007ec3
 8007e64:	08007e83 	.word	0x08007e83
 8007e68:	08007e79 	.word	0x08007e79
 8007e6c:	08007ec3 	.word	0x08007ec3
 8007e70:	08007e9b 	.word	0x08007e9b
 8007e74:	08007e8d 	.word	0x08007e8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa3c 	bl	80082f8 <USBD_GetDescriptor>
          break;
 8007e80:	e024      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fbcb 	bl	8008620 <USBD_SetAddress>
          break;
 8007e8a:	e01f      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc0a 	bl	80086a8 <USBD_SetConfig>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
          break;
 8007e98:	e018      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fcad 	bl	80087fc <USBD_GetConfig>
          break;
 8007ea2:	e013      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fcde 	bl	8008868 <USBD_GetStatus>
          break;
 8007eac:	e00e      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fd0d 	bl	80088d0 <USBD_SetFeature>
          break;
 8007eb6:	e009      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fd31 	bl	8008922 <USBD_ClrFeature>
          break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fd88 	bl	80089da <USBD_CtlError>
          break;
 8007eca:	bf00      	nop
      }
      break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fd82 	bl	80089da <USBD_CtlError>
      break;
 8007ed6:	bf00      	nop
  }

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop

08007ee4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d005      	beq.n	8007f0a <USBD_StdItfReq+0x26>
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d852      	bhi.n	8007fa8 <USBD_StdItfReq+0xc4>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <USBD_StdItfReq+0x26>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d14e      	bne.n	8007fa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d840      	bhi.n	8007f9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	889b      	ldrh	r3, [r3, #4]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d836      	bhi.n	8007f90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	889b      	ldrh	r3, [r3, #4]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fed9 	bl	8007ce2 <USBD_CoreFindIF>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2bff      	cmp	r3, #255	; 0xff
 8007f38:	d01d      	beq.n	8007f76 <USBD_StdItfReq+0x92>
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11a      	bne.n	8007f76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f40:	7bba      	ldrb	r2, [r7, #14]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32ae      	adds	r2, #174	; 0xae
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00f      	beq.n	8007f70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f50:	7bba      	ldrb	r2, [r7, #14]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f58:	7bba      	ldrb	r2, [r7, #14]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32ae      	adds	r2, #174	; 0xae
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f6e:	e004      	b.n	8007f7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f74:	e001      	b.n	8007f7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f76:	2303      	movs	r3, #3
 8007f78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	88db      	ldrh	r3, [r3, #6]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d110      	bne.n	8007fa4 <USBD_StdItfReq+0xc0>
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10d      	bne.n	8007fa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fdf1 	bl	8008b70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f8e:	e009      	b.n	8007fa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fd21 	bl	80089da <USBD_CtlError>
          break;
 8007f98:	e004      	b.n	8007fa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fd1c 	bl	80089da <USBD_CtlError>
          break;
 8007fa2:	e000      	b.n	8007fa6 <USBD_StdItfReq+0xc2>
          break;
 8007fa4:	bf00      	nop
      }
      break;
 8007fa6:	e004      	b.n	8007fb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fd15 	bl	80089da <USBD_CtlError>
      break;
 8007fb0:	bf00      	nop
  }

  return ret;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd8:	2b40      	cmp	r3, #64	; 0x40
 8007fda:	d007      	beq.n	8007fec <USBD_StdEPReq+0x30>
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	f200 817f 	bhi.w	80082e0 <USBD_StdEPReq+0x324>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d02a      	beq.n	800803c <USBD_StdEPReq+0x80>
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	f040 817a 	bne.w	80082e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff fe83 	bl	8007cfc <USBD_CoreFindEP>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ffa:	7b7b      	ldrb	r3, [r7, #13]
 8007ffc:	2bff      	cmp	r3, #255	; 0xff
 8007ffe:	f000 8174 	beq.w	80082ea <USBD_StdEPReq+0x32e>
 8008002:	7b7b      	ldrb	r3, [r7, #13]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f040 8170 	bne.w	80082ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800800a:	7b7a      	ldrb	r2, [r7, #13]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008012:	7b7a      	ldrb	r2, [r7, #13]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	32ae      	adds	r2, #174	; 0xae
 8008018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 8163 	beq.w	80082ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008024:	7b7a      	ldrb	r2, [r7, #13]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32ae      	adds	r2, #174	; 0xae
 800802a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800803a:	e156      	b.n	80082ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	2b03      	cmp	r3, #3
 8008042:	d008      	beq.n	8008056 <USBD_StdEPReq+0x9a>
 8008044:	2b03      	cmp	r3, #3
 8008046:	f300 8145 	bgt.w	80082d4 <USBD_StdEPReq+0x318>
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 809b 	beq.w	8008186 <USBD_StdEPReq+0x1ca>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d03c      	beq.n	80080ce <USBD_StdEPReq+0x112>
 8008054:	e13e      	b.n	80082d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d002      	beq.n	8008068 <USBD_StdEPReq+0xac>
 8008062:	2b03      	cmp	r3, #3
 8008064:	d016      	beq.n	8008094 <USBD_StdEPReq+0xd8>
 8008066:	e02c      	b.n	80080c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00d      	beq.n	800808a <USBD_StdEPReq+0xce>
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b80      	cmp	r3, #128	; 0x80
 8008072:	d00a      	beq.n	800808a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f9a5 	bl	80093c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800807e:	2180      	movs	r1, #128	; 0x80
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f9a1 	bl	80093c8 <USBD_LL_StallEP>
 8008086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008088:	e020      	b.n	80080cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fca4 	bl	80089da <USBD_CtlError>
              break;
 8008092:	e01b      	b.n	80080cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	885b      	ldrh	r3, [r3, #2]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10e      	bne.n	80080ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00b      	beq.n	80080ba <USBD_StdEPReq+0xfe>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	d008      	beq.n	80080ba <USBD_StdEPReq+0xfe>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	88db      	ldrh	r3, [r3, #6]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f987 	bl	80093c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fd58 	bl	8008b70 <USBD_CtlSendStatus>

              break;
 80080c0:	e004      	b.n	80080cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fc88 	bl	80089da <USBD_CtlError>
              break;
 80080ca:	bf00      	nop
          }
          break;
 80080cc:	e107      	b.n	80082de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d002      	beq.n	80080e0 <USBD_StdEPReq+0x124>
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d016      	beq.n	800810c <USBD_StdEPReq+0x150>
 80080de:	e04b      	b.n	8008178 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00d      	beq.n	8008102 <USBD_StdEPReq+0x146>
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	2b80      	cmp	r3, #128	; 0x80
 80080ea:	d00a      	beq.n	8008102 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 f969 	bl	80093c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 f965 	bl	80093c8 <USBD_LL_StallEP>
 80080fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008100:	e040      	b.n	8008184 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc68 	bl	80089da <USBD_CtlError>
              break;
 800810a:	e03b      	b.n	8008184 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	885b      	ldrh	r3, [r3, #2]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d136      	bne.n	8008182 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f96f 	bl	8009406 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fd21 	bl	8008b70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fde2 	bl	8007cfc <USBD_CoreFindEP>
 8008138:	4603      	mov	r3, r0
 800813a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800813c:	7b7b      	ldrb	r3, [r7, #13]
 800813e:	2bff      	cmp	r3, #255	; 0xff
 8008140:	d01f      	beq.n	8008182 <USBD_StdEPReq+0x1c6>
 8008142:	7b7b      	ldrb	r3, [r7, #13]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d11c      	bne.n	8008182 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008148:	7b7a      	ldrb	r2, [r7, #13]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008150:	7b7a      	ldrb	r2, [r7, #13]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32ae      	adds	r2, #174	; 0xae
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d010      	beq.n	8008182 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008160:	7b7a      	ldrb	r2, [r7, #13]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32ae      	adds	r2, #174	; 0xae
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008176:	e004      	b.n	8008182 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fc2d 	bl	80089da <USBD_CtlError>
              break;
 8008180:	e000      	b.n	8008184 <USBD_StdEPReq+0x1c8>
              break;
 8008182:	bf00      	nop
          }
          break;
 8008184:	e0ab      	b.n	80082de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d002      	beq.n	8008198 <USBD_StdEPReq+0x1dc>
 8008192:	2b03      	cmp	r3, #3
 8008194:	d032      	beq.n	80081fc <USBD_StdEPReq+0x240>
 8008196:	e097      	b.n	80082c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <USBD_StdEPReq+0x1f2>
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b80      	cmp	r3, #128	; 0x80
 80081a2:	d004      	beq.n	80081ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fc17 	bl	80089da <USBD_CtlError>
                break;
 80081ac:	e091      	b.n	80082d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	da0b      	bge.n	80081ce <USBD_StdEPReq+0x212>
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	3310      	adds	r3, #16
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	3304      	adds	r3, #4
 80081cc:	e00b      	b.n	80081e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d4:	4613      	mov	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	3304      	adds	r3, #4
 80081e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2202      	movs	r2, #2
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fc61 	bl	8008abc <USBD_CtlSendData>
              break;
 80081fa:	e06a      	b.n	80082d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008200:	2b00      	cmp	r3, #0
 8008202:	da11      	bge.n	8008228 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d117      	bne.n	800824e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fbda 	bl	80089da <USBD_CtlError>
                  break;
 8008226:	e054      	b.n	80082d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	f003 020f 	and.w	r2, r3, #15
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fbc7 	bl	80089da <USBD_CtlError>
                  break;
 800824c:	e041      	b.n	80082d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800824e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da0b      	bge.n	800826e <USBD_StdEPReq+0x2b2>
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	3310      	adds	r3, #16
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	3304      	adds	r3, #4
 800826c:	e00b      	b.n	8008286 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	4413      	add	r3, r2
 8008284:	3304      	adds	r3, #4
 8008286:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <USBD_StdEPReq+0x2d8>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d103      	bne.n	800829c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e00e      	b.n	80082ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f8cf 	bl	8009444 <USBD_LL_IsStallEP>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e002      	b.n	80082ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2202      	movs	r2, #2
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbfb 	bl	8008abc <USBD_CtlSendData>
              break;
 80082c6:	e004      	b.n	80082d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb85 	bl	80089da <USBD_CtlError>
              break;
 80082d0:	bf00      	nop
          }
          break;
 80082d2:	e004      	b.n	80082de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fb7f 	bl	80089da <USBD_CtlError>
          break;
 80082dc:	bf00      	nop
      }
      break;
 80082de:	e005      	b.n	80082ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fb79 	bl	80089da <USBD_CtlError>
      break;
 80082e8:	e000      	b.n	80082ec <USBD_StdEPReq+0x330>
      break;
 80082ea:	bf00      	nop
  }

  return ret;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	885b      	ldrh	r3, [r3, #2]
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	2b0e      	cmp	r3, #14
 800831a:	f200 8152 	bhi.w	80085c2 <USBD_GetDescriptor+0x2ca>
 800831e:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <USBD_GetDescriptor+0x2c>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008395 	.word	0x08008395
 8008328:	080083ad 	.word	0x080083ad
 800832c:	080083ed 	.word	0x080083ed
 8008330:	080085c3 	.word	0x080085c3
 8008334:	080085c3 	.word	0x080085c3
 8008338:	08008563 	.word	0x08008563
 800833c:	0800858f 	.word	0x0800858f
 8008340:	080085c3 	.word	0x080085c3
 8008344:	080085c3 	.word	0x080085c3
 8008348:	080085c3 	.word	0x080085c3
 800834c:	080085c3 	.word	0x080085c3
 8008350:	080085c3 	.word	0x080085c3
 8008354:	080085c3 	.word	0x080085c3
 8008358:	080085c3 	.word	0x080085c3
 800835c:	08008361 	.word	0x08008361
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	7c12      	ldrb	r2, [r2, #16]
 8008378:	f107 0108 	add.w	r1, r7, #8
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008382:	e126      	b.n	80085d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fb27 	bl	80089da <USBD_CtlError>
        err++;
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	3301      	adds	r3, #1
 8008390:	72fb      	strb	r3, [r7, #11]
      break;
 8008392:	e11e      	b.n	80085d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7c12      	ldrb	r2, [r2, #16]
 80083a0:	f107 0108 	add.w	r1, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
      break;
 80083aa:	e112      	b.n	80085d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7c1b      	ldrb	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10d      	bne.n	80083d0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083bc:	f107 0208 	add.w	r2, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	2202      	movs	r2, #2
 80083cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083ce:	e100      	b.n	80085d2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	f107 0208 	add.w	r2, r7, #8
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
 80083e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	2202      	movs	r2, #2
 80083e8:	701a      	strb	r2, [r3, #0]
      break;
 80083ea:	e0f2      	b.n	80085d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	885b      	ldrh	r3, [r3, #2]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	f200 80ac 	bhi.w	8008550 <USBD_GetDescriptor+0x258>
 80083f8:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <USBD_GetDescriptor+0x108>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	08008419 	.word	0x08008419
 8008404:	0800844d 	.word	0x0800844d
 8008408:	08008481 	.word	0x08008481
 800840c:	080084b5 	.word	0x080084b5
 8008410:	080084e9 	.word	0x080084e9
 8008414:	0800851d 	.word	0x0800851d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7c12      	ldrb	r2, [r2, #16]
 8008430:	f107 0108 	add.w	r1, r7, #8
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843a:	e091      	b.n	8008560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 facb 	bl	80089da <USBD_CtlError>
            err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
          break;
 800844a:	e089      	b.n	8008560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	7c12      	ldrb	r2, [r2, #16]
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846e:	e077      	b.n	8008560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fab1 	bl	80089da <USBD_CtlError>
            err++;
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	3301      	adds	r3, #1
 800847c:	72fb      	strb	r3, [r7, #11]
          break;
 800847e:	e06f      	b.n	8008560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00b      	beq.n	80084a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	7c12      	ldrb	r2, [r2, #16]
 8008498:	f107 0108 	add.w	r1, r7, #8
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
 80084a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a2:	e05d      	b.n	8008560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa97 	bl	80089da <USBD_CtlError>
            err++;
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	3301      	adds	r3, #1
 80084b0:	72fb      	strb	r3, [r7, #11]
          break;
 80084b2:	e055      	b.n	8008560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	7c12      	ldrb	r2, [r2, #16]
 80084cc:	f107 0108 	add.w	r1, r7, #8
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084d6:	e043      	b.n	8008560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa7d 	bl	80089da <USBD_CtlError>
            err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
          break;
 80084e6:	e03b      	b.n	8008560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7c12      	ldrb	r2, [r2, #16]
 8008500:	f107 0108 	add.w	r1, r7, #8
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850a:	e029      	b.n	8008560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa63 	bl	80089da <USBD_CtlError>
            err++;
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	3301      	adds	r3, #1
 8008518:	72fb      	strb	r3, [r7, #11]
          break;
 800851a:	e021      	b.n	8008560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7c12      	ldrb	r2, [r2, #16]
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800853e:	e00f      	b.n	8008560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa49 	bl	80089da <USBD_CtlError>
            err++;
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	3301      	adds	r3, #1
 800854c:	72fb      	strb	r3, [r7, #11]
          break;
 800854e:	e007      	b.n	8008560 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa41 	bl	80089da <USBD_CtlError>
          err++;
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	3301      	adds	r3, #1
 800855c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800855e:	bf00      	nop
      }
      break;
 8008560:	e037      	b.n	80085d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7c1b      	ldrb	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d109      	bne.n	800857e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008572:	f107 0208 	add.w	r2, r7, #8
 8008576:	4610      	mov	r0, r2
 8008578:	4798      	blx	r3
 800857a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800857c:	e029      	b.n	80085d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fa2a 	bl	80089da <USBD_CtlError>
        err++;
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	3301      	adds	r3, #1
 800858a:	72fb      	strb	r3, [r7, #11]
      break;
 800858c:	e021      	b.n	80085d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7c1b      	ldrb	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10d      	bne.n	80085b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	f107 0208 	add.w	r2, r7, #8
 80085a2:	4610      	mov	r0, r2
 80085a4:	4798      	blx	r3
 80085a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3301      	adds	r3, #1
 80085ac:	2207      	movs	r2, #7
 80085ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085b0:	e00f      	b.n	80085d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa10 	bl	80089da <USBD_CtlError>
        err++;
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	3301      	adds	r3, #1
 80085be:	72fb      	strb	r3, [r7, #11]
      break;
 80085c0:	e007      	b.n	80085d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa08 	bl	80089da <USBD_CtlError>
      err++;
 80085ca:	7afb      	ldrb	r3, [r7, #11]
 80085cc:	3301      	adds	r3, #1
 80085ce:	72fb      	strb	r3, [r7, #11]
      break;
 80085d0:	bf00      	nop
  }

  if (err != 0U)
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d11e      	bne.n	8008616 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	88db      	ldrh	r3, [r3, #6]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d016      	beq.n	800860e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80085e0:	893b      	ldrh	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00e      	beq.n	8008604 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88da      	ldrh	r2, [r3, #6]
 80085ea:	893b      	ldrh	r3, [r7, #8]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	bf28      	it	cs
 80085f0:	4613      	movcs	r3, r2
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085f6:	893b      	ldrh	r3, [r7, #8]
 80085f8:	461a      	mov	r2, r3
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa5d 	bl	8008abc <USBD_CtlSendData>
 8008602:	e009      	b.n	8008618 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9e7 	bl	80089da <USBD_CtlError>
 800860c:	e004      	b.n	8008618 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 faae 	bl	8008b70 <USBD_CtlSendStatus>
 8008614:	e000      	b.n	8008618 <USBD_GetDescriptor+0x320>
    return;
 8008616:	bf00      	nop
  }
}
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	889b      	ldrh	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d131      	bne.n	8008696 <USBD_SetAddress+0x76>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d12d      	bne.n	8008696 <USBD_SetAddress+0x76>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	2b7f      	cmp	r3, #127	; 0x7f
 8008640:	d829      	bhi.n	8008696 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	885b      	ldrh	r3, [r3, #2]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800864c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d104      	bne.n	8008664 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9bc 	bl	80089da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	e01d      	b.n	80086a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7bfa      	ldrb	r2, [r7, #15]
 8008668:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 ff13 	bl	800949c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa7a 	bl	8008b70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2202      	movs	r2, #2
 8008686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	e009      	b.n	80086a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008694:	e004      	b.n	80086a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f99e 	bl	80089da <USBD_CtlError>
  }
}
 800869e:	bf00      	nop
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	4b4e      	ldr	r3, [pc, #312]	; (80087f8 <USBD_SetConfig+0x150>)
 80086be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086c0:	4b4d      	ldr	r3, [pc, #308]	; (80087f8 <USBD_SetConfig+0x150>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d905      	bls.n	80086d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f985 	bl	80089da <USBD_CtlError>
    return USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e08c      	b.n	80087ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d002      	beq.n	80086e6 <USBD_SetConfig+0x3e>
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d029      	beq.n	8008738 <USBD_SetConfig+0x90>
 80086e4:	e075      	b.n	80087d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086e6:	4b44      	ldr	r3, [pc, #272]	; (80087f8 <USBD_SetConfig+0x150>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d020      	beq.n	8008730 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086ee:	4b42      	ldr	r3, [pc, #264]	; (80087f8 <USBD_SetConfig+0x150>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086f8:	4b3f      	ldr	r3, [pc, #252]	; (80087f8 <USBD_SetConfig+0x150>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fe ffbd 	bl	800767e <USBD_SetClassConfig>
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f962 	bl	80089da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800871e:	e065      	b.n	80087ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa25 	bl	8008b70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2203      	movs	r2, #3
 800872a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800872e:	e05d      	b.n	80087ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fa1d 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 8008736:	e059      	b.n	80087ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008738:	4b2f      	ldr	r3, [pc, #188]	; (80087f8 <USBD_SetConfig+0x150>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d112      	bne.n	8008766 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008748:	4b2b      	ldr	r3, [pc, #172]	; (80087f8 <USBD_SetConfig+0x150>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008752:	4b29      	ldr	r3, [pc, #164]	; (80087f8 <USBD_SetConfig+0x150>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7fe ffac 	bl	80076b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa06 	bl	8008b70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008764:	e042      	b.n	80087ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008766:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <USBD_SetConfig+0x150>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d02a      	beq.n	80087ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fe ff9a 	bl	80076b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008782:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <USBD_SetConfig+0x150>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800878c:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <USBD_SetConfig+0x150>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fe ff73 	bl	800767e <USBD_SetClassConfig>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00f      	beq.n	80087c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f918 	bl	80089da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7fe ff7f 	bl	80076b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087c0:	e014      	b.n	80087ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9d4 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 80087c8:	e010      	b.n	80087ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f9d0 	bl	8008b70 <USBD_CtlSendStatus>
      break;
 80087d0:	e00c      	b.n	80087ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f900 	bl	80089da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <USBD_SetConfig+0x150>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fe ff68 	bl	80076b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	73fb      	strb	r3, [r7, #15]
      break;
 80087ea:	bf00      	nop
  }

  return ret;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200006c0 	.word	0x200006c0

080087fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d004      	beq.n	8008818 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f8e2 	bl	80089da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008816:	e023      	b.n	8008860 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	dc02      	bgt.n	800882a <USBD_GetConfig+0x2e>
 8008824:	2b00      	cmp	r3, #0
 8008826:	dc03      	bgt.n	8008830 <USBD_GetConfig+0x34>
 8008828:	e015      	b.n	8008856 <USBD_GetConfig+0x5a>
 800882a:	2b03      	cmp	r3, #3
 800882c:	d00b      	beq.n	8008846 <USBD_GetConfig+0x4a>
 800882e:	e012      	b.n	8008856 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3308      	adds	r3, #8
 800883a:	2201      	movs	r2, #1
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f93c 	bl	8008abc <USBD_CtlSendData>
        break;
 8008844:	e00c      	b.n	8008860 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3304      	adds	r3, #4
 800884a:	2201      	movs	r2, #1
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f934 	bl	8008abc <USBD_CtlSendData>
        break;
 8008854:	e004      	b.n	8008860 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f8be 	bl	80089da <USBD_CtlError>
        break;
 800885e:	bf00      	nop
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008878:	b2db      	uxtb	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	2b02      	cmp	r3, #2
 800887e:	d81e      	bhi.n	80088be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	88db      	ldrh	r3, [r3, #6]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d004      	beq.n	8008892 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8a5 	bl	80089da <USBD_CtlError>
        break;
 8008890:	e01a      	b.n	80088c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f043 0202 	orr.w	r2, r3, #2
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	330c      	adds	r3, #12
 80088b2:	2202      	movs	r2, #2
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f900 	bl	8008abc <USBD_CtlSendData>
      break;
 80088bc:	e004      	b.n	80088c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f88a 	bl	80089da <USBD_CtlError>
      break;
 80088c6:	bf00      	nop
  }
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	885b      	ldrh	r3, [r3, #2]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d107      	bne.n	80088f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f940 	bl	8008b70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088f0:	e013      	b.n	800891a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d10b      	bne.n	8008912 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	889b      	ldrh	r3, [r3, #4]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	b2da      	uxtb	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f930 	bl	8008b70 <USBD_CtlSendStatus>
}
 8008910:	e003      	b.n	800891a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f860 	bl	80089da <USBD_CtlError>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008932:	b2db      	uxtb	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	2b02      	cmp	r3, #2
 8008938:	d80b      	bhi.n	8008952 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d10c      	bne.n	800895c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f910 	bl	8008b70 <USBD_CtlSendStatus>
      }
      break;
 8008950:	e004      	b.n	800895c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f840 	bl	80089da <USBD_CtlError>
      break;
 800895a:	e000      	b.n	800895e <USBD_ClrFeature+0x3c>
      break;
 800895c:	bf00      	nop
  }
}
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3301      	adds	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3301      	adds	r3, #1
 800898e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f7ff fa17 	bl	8007dc4 <SWAPBYTE>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3301      	adds	r3, #1
 80089a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff fa0a 	bl	8007dc4 <SWAPBYTE>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff f9fd 	bl	8007dc4 <SWAPBYTE>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	80da      	strh	r2, [r3, #6]
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089e4:	2180      	movs	r1, #128	; 0x80
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fcee 	bl	80093c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089ec:	2100      	movs	r1, #0
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fcea 	bl	80093c8 <USBD_LL_StallEP>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d036      	beq.n	8008a80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a16:	6938      	ldr	r0, [r7, #16]
 8008a18:	f000 f836 	bl	8008a88 <USBD_GetLen>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	3301      	adds	r3, #1
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	4413      	add	r3, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	2203      	movs	r2, #3
 8008a44:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a4c:	e013      	b.n	8008a76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4413      	add	r3, r2
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
    idx++;
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	3301      	adds	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	3301      	adds	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e7      	bne.n	8008a4e <USBD_GetString+0x52>
 8008a7e:	e000      	b.n	8008a82 <USBD_GetString+0x86>
    return;
 8008a80:	bf00      	nop
  }
}
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a98:	e005      	b.n	8008aa6 <USBD_GetLen+0x1e>
  {
    len++;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f5      	bne.n	8008a9a <USBD_GetLen+0x12>
  }

  return len;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fcf9 	bl	80094da <USBD_LL_Transmit>

  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	2100      	movs	r1, #0
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fce8 	bl	80094da <USBD_LL_Transmit>

  return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2203      	movs	r2, #3
 8008b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fcec 	bl	800951c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	2100      	movs	r1, #0
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fcdb 	bl	800951c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b80:	2300      	movs	r3, #0
 8008b82:	2200      	movs	r2, #0
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fca7 	bl	80094da <USBD_LL_Transmit>

  return USBD_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2205      	movs	r2, #5
 8008ba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fcb5 	bl	800951c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4912      	ldr	r1, [pc, #72]	; (8008c0c <MX_USB_DEVICE_Init+0x50>)
 8008bc4:	4812      	ldr	r0, [pc, #72]	; (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bc6:	f7fe fcdd 	bl	8007584 <USBD_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bd0:	f7f8 f890 	bl	8000cf4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bd4:	490f      	ldr	r1, [pc, #60]	; (8008c14 <MX_USB_DEVICE_Init+0x58>)
 8008bd6:	480e      	ldr	r0, [pc, #56]	; (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bd8:	f7fe fd04 	bl	80075e4 <USBD_RegisterClass>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008be2:	f7f8 f887 	bl	8000cf4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008be6:	490c      	ldr	r1, [pc, #48]	; (8008c18 <MX_USB_DEVICE_Init+0x5c>)
 8008be8:	4809      	ldr	r0, [pc, #36]	; (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bea:	f7fe fc3b 	bl	8007464 <USBD_CDC_RegisterInterface>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bf4:	f7f8 f87e 	bl	8000cf4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bf8:	4805      	ldr	r0, [pc, #20]	; (8008c10 <MX_USB_DEVICE_Init+0x54>)
 8008bfa:	f7fe fd29 	bl	8007650 <USBD_Start>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c04:	f7f8 f876 	bl	8000cf4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c08:	bf00      	nop
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200000ac 	.word	0x200000ac
 8008c10:	200006c4 	.word	0x200006c4
 8008c14:	20000018 	.word	0x20000018
 8008c18:	20000098 	.word	0x20000098

08008c1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c20:	2200      	movs	r2, #0
 8008c22:	4905      	ldr	r1, [pc, #20]	; (8008c38 <CDC_Init_FS+0x1c>)
 8008c24:	4805      	ldr	r0, [pc, #20]	; (8008c3c <CDC_Init_FS+0x20>)
 8008c26:	f7fe fc37 	bl	8007498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c2a:	4905      	ldr	r1, [pc, #20]	; (8008c40 <CDC_Init_FS+0x24>)
 8008c2c:	4803      	ldr	r0, [pc, #12]	; (8008c3c <CDC_Init_FS+0x20>)
 8008c2e:	f7fe fc55 	bl	80074dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	200011a0 	.word	0x200011a0
 8008c3c:	200006c4 	.word	0x200006c4
 8008c40:	200009a0 	.word	0x200009a0

08008c44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	2b23      	cmp	r3, #35	; 0x23
 8008c68:	d84a      	bhi.n	8008d00 <CDC_Control_FS+0xac>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <CDC_Control_FS+0x1c>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008d01 	.word	0x08008d01
 8008c74:	08008d01 	.word	0x08008d01
 8008c78:	08008d01 	.word	0x08008d01
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d01 	.word	0x08008d01
 8008c84:	08008d01 	.word	0x08008d01
 8008c88:	08008d01 	.word	0x08008d01
 8008c8c:	08008d01 	.word	0x08008d01
 8008c90:	08008d01 	.word	0x08008d01
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008d01 	.word	0x08008d01
 8008c9c:	08008d01 	.word	0x08008d01
 8008ca0:	08008d01 	.word	0x08008d01
 8008ca4:	08008d01 	.word	0x08008d01
 8008ca8:	08008d01 	.word	0x08008d01
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	08008d01 	.word	0x08008d01
 8008cb8:	08008d01 	.word	0x08008d01
 8008cbc:	08008d01 	.word	0x08008d01
 8008cc0:	08008d01 	.word	0x08008d01
 8008cc4:	08008d01 	.word	0x08008d01
 8008cc8:	08008d01 	.word	0x08008d01
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d01 	.word	0x08008d01
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d01 	.word	0x08008d01
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d01 	.word	0x08008d01
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d01 	.word	0x08008d01
 8008cf0:	08008d01 	.word	0x08008d01
 8008cf4:	08008d01 	.word	0x08008d01
 8008cf8:	08008d01 	.word	0x08008d01
 8008cfc:	08008d01 	.word	0x08008d01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d00:	bf00      	nop
  }

  return (USBD_OK);
 8008d02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4805      	ldr	r0, [pc, #20]	; (8008d34 <CDC_Receive_FS+0x24>)
 8008d1e:	f7fe fbdd 	bl	80074dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d22:	4804      	ldr	r0, [pc, #16]	; (8008d34 <CDC_Receive_FS+0x24>)
 8008d24:	f7fe fbf8 	bl	8007518 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	200006c4 	.word	0x200006c4

08008d38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2212      	movs	r2, #18
 8008d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200000cc 	.word	0x200000cc

08008d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d92:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	200000ec 	.word	0x200000ec

08008da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dbc:	f7ff fe1e 	bl	80089fc <USBD_GetString>
 8008dc0:	e004      	b.n	8008dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dc6:	4805      	ldr	r0, [pc, #20]	; (8008ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc8:	f7ff fe18 	bl	80089fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200019a0 	.word	0x200019a0
 8008ddc:	08009934 	.word	0x08009934

08008de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	4904      	ldr	r1, [pc, #16]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008df0:	4804      	ldr	r0, [pc, #16]	; (8008e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008df2:	f7ff fe03 	bl	80089fc <USBD_GetString>
  return USBD_StrDesc;
 8008df6:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	200019a0 	.word	0x200019a0
 8008e04:	0800994c 	.word	0x0800994c

08008e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	221a      	movs	r2, #26
 8008e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e1a:	f000 f855 	bl	8008ec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e1e:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200000f0 	.word	0x200000f0

08008e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e38:	79fb      	ldrb	r3, [r7, #7]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4907      	ldr	r1, [pc, #28]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e42:	4808      	ldr	r0, [pc, #32]	; (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e44:	f7ff fdda 	bl	80089fc <USBD_GetString>
 8008e48:	e004      	b.n	8008e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4904      	ldr	r1, [pc, #16]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e50:	f7ff fdd4 	bl	80089fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200019a0 	.word	0x200019a0
 8008e64:	08009960 	.word	0x08009960

08008e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4907      	ldr	r1, [pc, #28]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e7e:	4808      	ldr	r0, [pc, #32]	; (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e80:	f7ff fdbc 	bl	80089fc <USBD_GetString>
 8008e84:	e004      	b.n	8008e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4904      	ldr	r1, [pc, #16]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e8c:	f7ff fdb6 	bl	80089fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e90:	4b02      	ldr	r3, [pc, #8]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200019a0 	.word	0x200019a0
 8008ea0:	0800996c 	.word	0x0800996c

08008ea4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	220c      	movs	r2, #12
 8008eb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008eb6:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	200000e0 	.word	0x200000e0

08008ec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <Get_SerialNum+0x44>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <Get_SerialNum+0x48>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eda:	4b0e      	ldr	r3, [pc, #56]	; (8008f14 <Get_SerialNum+0x4c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d009      	beq.n	8008f02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eee:	2208      	movs	r2, #8
 8008ef0:	4909      	ldr	r1, [pc, #36]	; (8008f18 <Get_SerialNum+0x50>)
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f814 	bl	8008f20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ef8:	2204      	movs	r2, #4
 8008efa:	4908      	ldr	r1, [pc, #32]	; (8008f1c <Get_SerialNum+0x54>)
 8008efc:	68b8      	ldr	r0, [r7, #8]
 8008efe:	f000 f80f 	bl	8008f20 <IntToUnicode>
  }
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	1ff07a10 	.word	0x1ff07a10
 8008f10:	1ff07a14 	.word	0x1ff07a14
 8008f14:	1ff07a18 	.word	0x1ff07a18
 8008f18:	200000f2 	.word	0x200000f2
 8008f1c:	20000102 	.word	0x20000102

08008f20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]
 8008f36:	e027      	b.n	8008f88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	0f1b      	lsrs	r3, r3, #28
 8008f3c:	2b09      	cmp	r3, #9
 8008f3e:	d80b      	bhi.n	8008f58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	0f1b      	lsrs	r3, r3, #28
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	440b      	add	r3, r1
 8008f50:	3230      	adds	r2, #48	; 0x30
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e00a      	b.n	8008f6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	0f1b      	lsrs	r3, r3, #28
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	4619      	mov	r1, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	440b      	add	r3, r1
 8008f68:	3237      	adds	r2, #55	; 0x37
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	3301      	adds	r3, #1
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	3301      	adds	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
 8008f88:	7dfa      	ldrb	r2, [r7, #23]
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d3d3      	bcc.n	8008f38 <IntToUnicode+0x18>
  }
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b0aa      	sub	sp, #168	; 0xa8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	609a      	str	r2, [r3, #8]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008fb8:	f107 0314 	add.w	r3, r7, #20
 8008fbc:	2280      	movs	r2, #128	; 0x80
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fc1b 	bl	80097fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fce:	d151      	bne.n	8009074 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008fd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fd4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fb f96b 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008fec:	f7f7 fe82 	bl	8000cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <HAL_PCD_MspInit+0xdc>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff4:	4a21      	ldr	r2, [pc, #132]	; (800907c <HAL_PCD_MspInit+0xdc>)
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8008ffc:	4b1f      	ldr	r3, [pc, #124]	; (800907c <HAL_PCD_MspInit+0xdc>)
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009008:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800900c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009010:	2302      	movs	r3, #2
 8009012:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009016:	2300      	movs	r3, #0
 8009018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800901c:	2303      	movs	r3, #3
 800901e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009022:	230a      	movs	r3, #10
 8009024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009028:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800902c:	4619      	mov	r1, r3
 800902e:	4814      	ldr	r0, [pc, #80]	; (8009080 <HAL_PCD_MspInit+0xe0>)
 8009030:	f7f8 fee4 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009034:	4b11      	ldr	r3, [pc, #68]	; (800907c <HAL_PCD_MspInit+0xdc>)
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	4a10      	ldr	r2, [pc, #64]	; (800907c <HAL_PCD_MspInit+0xdc>)
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	6353      	str	r3, [r2, #52]	; 0x34
 8009040:	4b0e      	ldr	r3, [pc, #56]	; (800907c <HAL_PCD_MspInit+0xdc>)
 8009042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4b0b      	ldr	r3, [pc, #44]	; (800907c <HAL_PCD_MspInit+0xdc>)
 800904e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <HAL_PCD_MspInit+0xdc>)
 8009052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009056:	6453      	str	r3, [r2, #68]	; 0x44
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <HAL_PCD_MspInit+0xdc>)
 800905a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009064:	2200      	movs	r2, #0
 8009066:	2100      	movs	r1, #0
 8009068:	2043      	movs	r0, #67	; 0x43
 800906a:	f7f8 fe90 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800906e:	2043      	movs	r0, #67	; 0x43
 8009070:	f7f8 fea9 	bl	8001dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009074:	bf00      	nop
 8009076:	37a8      	adds	r7, #168	; 0xa8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	40023800 	.word	0x40023800
 8009080:	40020000 	.word	0x40020000

08009084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fb25 	bl	80076ea <USBD_LL_SetupStage>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f7fe fb5f 	bl	8007794 <USBD_LL_DataOutStage>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4613      	mov	r3, r2
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	4413      	add	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	334c      	adds	r3, #76	; 0x4c
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	4619      	mov	r1, r3
 8009106:	f7fe fbf8 	bl	80078fa <USBD_LL_DataInStage>
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009120:	4618      	mov	r0, r3
 8009122:	f7fe fd2c 	bl	8007b7e <USBD_LL_SOF>
}
 8009126:	bf00      	nop
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009136:	2301      	movs	r3, #1
 8009138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
 8009146:	e008      	b.n	800915a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d102      	bne.n	8009156 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
 8009154:	e001      	b.n	800915a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009156:	f7f7 fdcd 	bl	8000cf4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009160:	7bfa      	ldrb	r2, [r7, #15]
 8009162:	4611      	mov	r1, r2
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fccc 	bl	8007b02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fc74 	bl	8007a5e <USBD_LL_Reset>
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fcc7 	bl	8007b22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6812      	ldr	r2, [r2, #0]
 80091a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091b4:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <HAL_PCD_SuspendCallback+0x48>)
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	4a03      	ldr	r2, [pc, #12]	; (80091c8 <HAL_PCD_SuspendCallback+0x48>)
 80091ba:	f043 0306 	orr.w	r3, r3, #6
 80091be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	e000ed00 	.word	0xe000ed00

080091cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fcb7 	bl	8007b4e <USBD_LL_Resume>
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fd0f 	bl	8007c22 <USBD_LL_IsoOUTIncomplete>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800921e:	78fa      	ldrb	r2, [r7, #3]
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fccb 	bl	8007bbe <USBD_LL_IsoINIncomplete>
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fd21 	bl	8007c86 <USBD_LL_DevConnected>
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fd1e 	bl	8007c9c <USBD_LL_DevDisconnected>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d13f      	bne.n	80092f8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009278:	4a22      	ldr	r2, [pc, #136]	; (8009304 <USBD_LL_Init+0x9c>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a20      	ldr	r2, [pc, #128]	; (8009304 <USBD_LL_Init+0x9c>)
 8009284:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009288:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <USBD_LL_Init+0x9c>)
 800928a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800928e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009290:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <USBD_LL_Init+0x9c>)
 8009292:	2206      	movs	r2, #6
 8009294:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009296:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <USBD_LL_Init+0x9c>)
 8009298:	2202      	movs	r2, #2
 800929a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800929c:	4b19      	ldr	r3, [pc, #100]	; (8009304 <USBD_LL_Init+0x9c>)
 800929e:	2200      	movs	r2, #0
 80092a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092a2:	4b18      	ldr	r3, [pc, #96]	; (8009304 <USBD_LL_Init+0x9c>)
 80092a4:	2202      	movs	r2, #2
 80092a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092a8:	4b16      	ldr	r3, [pc, #88]	; (8009304 <USBD_LL_Init+0x9c>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80092ae:	4b15      	ldr	r3, [pc, #84]	; (8009304 <USBD_LL_Init+0x9c>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80092b4:	4b13      	ldr	r3, [pc, #76]	; (8009304 <USBD_LL_Init+0x9c>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80092ba:	4b12      	ldr	r3, [pc, #72]	; (8009304 <USBD_LL_Init+0x9c>)
 80092bc:	2200      	movs	r2, #0
 80092be:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80092c0:	4b10      	ldr	r3, [pc, #64]	; (8009304 <USBD_LL_Init+0x9c>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80092c6:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <USBD_LL_Init+0x9c>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80092cc:	480d      	ldr	r0, [pc, #52]	; (8009304 <USBD_LL_Init+0x9c>)
 80092ce:	f7f9 f872 	bl	80023b6 <HAL_PCD_Init>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80092d8:	f7f7 fd0c 	bl	8000cf4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092dc:	2180      	movs	r1, #128	; 0x80
 80092de:	4809      	ldr	r0, [pc, #36]	; (8009304 <USBD_LL_Init+0x9c>)
 80092e0:	f7fa faed 	bl	80038be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092e4:	2240      	movs	r2, #64	; 0x40
 80092e6:	2100      	movs	r1, #0
 80092e8:	4806      	ldr	r0, [pc, #24]	; (8009304 <USBD_LL_Init+0x9c>)
 80092ea:	f7fa faa1 	bl	8003830 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092ee:	2280      	movs	r2, #128	; 0x80
 80092f0:	2101      	movs	r1, #1
 80092f2:	4804      	ldr	r0, [pc, #16]	; (8009304 <USBD_LL_Init+0x9c>)
 80092f4:	f7fa fa9c 	bl	8003830 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20001ba0 	.word	0x20001ba0

08009308 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800931e:	4618      	mov	r0, r3
 8009320:	f7f9 f96d 	bl	80025fe <HAL_PCD_Start>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 f97e 	bl	800962c <USBD_Get_USB_Status>
 8009330:	4603      	mov	r3, r0
 8009332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009334:	7bbb      	ldrb	r3, [r7, #14]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	461a      	mov	r2, r3
 800934c:	4603      	mov	r3, r0
 800934e:	70fb      	strb	r3, [r7, #3]
 8009350:	460b      	mov	r3, r1
 8009352:	70bb      	strb	r3, [r7, #2]
 8009354:	4613      	mov	r3, r2
 8009356:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009366:	78bb      	ldrb	r3, [r7, #2]
 8009368:	883a      	ldrh	r2, [r7, #0]
 800936a:	78f9      	ldrb	r1, [r7, #3]
 800936c:	f7f9 fe5a 	bl	8003024 <HAL_PCD_EP_Open>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f958 	bl	800962c <USBD_Get_USB_Status>
 800937c:	4603      	mov	r3, r0
 800937e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009380:	7bbb      	ldrb	r3, [r7, #14]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7f9 fea3 	bl	80030f4 <HAL_PCD_EP_Close>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f939 	bl	800962c <USBD_Get_USB_Status>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093be:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093e2:	78fa      	ldrb	r2, [r7, #3]
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f9 ff7b 	bl	80032e2 <HAL_PCD_EP_SetStall>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f91a 	bl	800962c <USBD_Get_USB_Status>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009420:	78fa      	ldrb	r2, [r7, #3]
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f7f9 ffc0 	bl	80033aa <HAL_PCD_EP_ClrStall>
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f8fb 	bl	800962c <USBD_Get_USB_Status>
 8009436:	4603      	mov	r3, r0
 8009438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943a:	7bbb      	ldrb	r3, [r7, #14]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009456:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800945c:	2b00      	cmp	r3, #0
 800945e:	da0b      	bge.n	8009478 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	4613      	mov	r3, r2
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	333e      	adds	r3, #62	; 0x3e
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	e00b      	b.n	8009490 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	4613      	mov	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800948e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f9 fd8d 	bl	8002fda <HAL_PCD_SetAddress>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f8b0 	bl	800962c <USBD_Get_USB_Status>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
 80094e6:	460b      	mov	r3, r1
 80094e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094f8:	7af9      	ldrb	r1, [r7, #11]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	f7f9 fea6 	bl	800324e <HAL_PCD_EP_Transmit>
 8009502:	4603      	mov	r3, r0
 8009504:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	4618      	mov	r0, r3
 800950a:	f000 f88f 	bl	800962c <USBD_Get_USB_Status>
 800950e:	4603      	mov	r3, r0
 8009510:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009512:	7dbb      	ldrb	r3, [r7, #22]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	603b      	str	r3, [r7, #0]
 8009528:	460b      	mov	r3, r1
 800952a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800953a:	7af9      	ldrb	r1, [r7, #11]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	f7f9 fe22 	bl	8003188 <HAL_PCD_EP_Receive>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f86e 	bl	800962c <USBD_Get_USB_Status>
 8009550:	4603      	mov	r3, r0
 8009552:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009554:	7dbb      	ldrb	r3, [r7, #22]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	4611      	mov	r1, r2
 8009574:	4618      	mov	r0, r3
 8009576:	f7f9 fe52 	bl	800321e <HAL_PCD_EP_GetRxCount>
 800957a:	4603      	mov	r3, r0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <HAL_PCDEx_LPM_Callback+0x18>
 8009596:	2b01      	cmp	r3, #1
 8009598:	d01f      	beq.n	80095da <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800959a:	e03b      	b.n	8009614 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80095a4:	f000 f83c 	bl	8009620 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095a8:	4b1c      	ldr	r3, [pc, #112]	; (800961c <HAL_PCDEx_LPM_Callback+0x98>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	4a1b      	ldr	r2, [pc, #108]	; (800961c <HAL_PCDEx_LPM_Callback+0x98>)
 80095ae:	f023 0306 	bic.w	r3, r3, #6
 80095b2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6812      	ldr	r2, [r2, #0]
 80095c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fabb 	bl	8007b4e <USBD_LL_Resume>
    break;
 80095d8:	e01c      	b.n	8009614 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6812      	ldr	r2, [r2, #0]
 80095e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095ec:	f043 0301 	orr.w	r3, r3, #1
 80095f0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fa92 	bl	8007b22 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <HAL_PCDEx_LPM_Callback+0x98>)
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	4a04      	ldr	r2, [pc, #16]	; (800961c <HAL_PCDEx_LPM_Callback+0x98>)
 800960c:	f043 0306 	orr.w	r3, r3, #6
 8009610:	6113      	str	r3, [r2, #16]
    break;
 8009612:	bf00      	nop
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed00 	.word	0xe000ed00

08009620 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009624:	f7f6 ff9e 	bl	8000564 <SystemClock_Config>
}
 8009628:	bf00      	nop
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d817      	bhi.n	8009670 <USBD_Get_USB_Status+0x44>
 8009640:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <USBD_Get_USB_Status+0x1c>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009659 	.word	0x08009659
 800964c:	0800965f 	.word	0x0800965f
 8009650:	08009665 	.word	0x08009665
 8009654:	0800966b 	.word	0x0800966b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
    break;
 800965c:	e00b      	b.n	8009676 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800965e:	2303      	movs	r3, #3
 8009660:	73fb      	strb	r3, [r7, #15]
    break;
 8009662:	e008      	b.n	8009676 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009664:	2301      	movs	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
    break;
 8009668:	e005      	b.n	8009676 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	73fb      	strb	r3, [r7, #15]
    break;
 800966e:	e002      	b.n	8009676 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009670:	2303      	movs	r3, #3
 8009672:	73fb      	strb	r3, [r7, #15]
    break;
 8009674:	bf00      	nop
  }
  return usb_status;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <malloc>:
 8009684:	4b02      	ldr	r3, [pc, #8]	; (8009690 <malloc+0xc>)
 8009686:	4601      	mov	r1, r0
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	f000 b82b 	b.w	80096e4 <_malloc_r>
 800968e:	bf00      	nop
 8009690:	20000158 	.word	0x20000158

08009694 <free>:
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <free+0xc>)
 8009696:	4601      	mov	r1, r0
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f000 b8f3 	b.w	8009884 <_free_r>
 800969e:	bf00      	nop
 80096a0:	20000158 	.word	0x20000158

080096a4 <sbrk_aligned>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	4e0e      	ldr	r6, [pc, #56]	; (80096e0 <sbrk_aligned+0x3c>)
 80096a8:	460c      	mov	r4, r1
 80096aa:	6831      	ldr	r1, [r6, #0]
 80096ac:	4605      	mov	r5, r0
 80096ae:	b911      	cbnz	r1, 80096b6 <sbrk_aligned+0x12>
 80096b0:	f000 f8ac 	bl	800980c <_sbrk_r>
 80096b4:	6030      	str	r0, [r6, #0]
 80096b6:	4621      	mov	r1, r4
 80096b8:	4628      	mov	r0, r5
 80096ba:	f000 f8a7 	bl	800980c <_sbrk_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	d00a      	beq.n	80096d8 <sbrk_aligned+0x34>
 80096c2:	1cc4      	adds	r4, r0, #3
 80096c4:	f024 0403 	bic.w	r4, r4, #3
 80096c8:	42a0      	cmp	r0, r4
 80096ca:	d007      	beq.n	80096dc <sbrk_aligned+0x38>
 80096cc:	1a21      	subs	r1, r4, r0
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 f89c 	bl	800980c <_sbrk_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d101      	bne.n	80096dc <sbrk_aligned+0x38>
 80096d8:	f04f 34ff 	mov.w	r4, #4294967295
 80096dc:	4620      	mov	r0, r4
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	200020ac 	.word	0x200020ac

080096e4 <_malloc_r>:
 80096e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e8:	1ccd      	adds	r5, r1, #3
 80096ea:	f025 0503 	bic.w	r5, r5, #3
 80096ee:	3508      	adds	r5, #8
 80096f0:	2d0c      	cmp	r5, #12
 80096f2:	bf38      	it	cc
 80096f4:	250c      	movcc	r5, #12
 80096f6:	2d00      	cmp	r5, #0
 80096f8:	4607      	mov	r7, r0
 80096fa:	db01      	blt.n	8009700 <_malloc_r+0x1c>
 80096fc:	42a9      	cmp	r1, r5
 80096fe:	d905      	bls.n	800970c <_malloc_r+0x28>
 8009700:	230c      	movs	r3, #12
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	2600      	movs	r6, #0
 8009706:	4630      	mov	r0, r6
 8009708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097e0 <_malloc_r+0xfc>
 8009710:	f000 f868 	bl	80097e4 <__malloc_lock>
 8009714:	f8d8 3000 	ldr.w	r3, [r8]
 8009718:	461c      	mov	r4, r3
 800971a:	bb5c      	cbnz	r4, 8009774 <_malloc_r+0x90>
 800971c:	4629      	mov	r1, r5
 800971e:	4638      	mov	r0, r7
 8009720:	f7ff ffc0 	bl	80096a4 <sbrk_aligned>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	4604      	mov	r4, r0
 8009728:	d155      	bne.n	80097d6 <_malloc_r+0xf2>
 800972a:	f8d8 4000 	ldr.w	r4, [r8]
 800972e:	4626      	mov	r6, r4
 8009730:	2e00      	cmp	r6, #0
 8009732:	d145      	bne.n	80097c0 <_malloc_r+0xdc>
 8009734:	2c00      	cmp	r4, #0
 8009736:	d048      	beq.n	80097ca <_malloc_r+0xe6>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	4631      	mov	r1, r6
 800973c:	4638      	mov	r0, r7
 800973e:	eb04 0903 	add.w	r9, r4, r3
 8009742:	f000 f863 	bl	800980c <_sbrk_r>
 8009746:	4581      	cmp	r9, r0
 8009748:	d13f      	bne.n	80097ca <_malloc_r+0xe6>
 800974a:	6821      	ldr	r1, [r4, #0]
 800974c:	1a6d      	subs	r5, r5, r1
 800974e:	4629      	mov	r1, r5
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff ffa7 	bl	80096a4 <sbrk_aligned>
 8009756:	3001      	adds	r0, #1
 8009758:	d037      	beq.n	80097ca <_malloc_r+0xe6>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	442b      	add	r3, r5
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	f8d8 3000 	ldr.w	r3, [r8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d038      	beq.n	80097da <_malloc_r+0xf6>
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	42a2      	cmp	r2, r4
 800976c:	d12b      	bne.n	80097c6 <_malloc_r+0xe2>
 800976e:	2200      	movs	r2, #0
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	e00f      	b.n	8009794 <_malloc_r+0xb0>
 8009774:	6822      	ldr	r2, [r4, #0]
 8009776:	1b52      	subs	r2, r2, r5
 8009778:	d41f      	bmi.n	80097ba <_malloc_r+0xd6>
 800977a:	2a0b      	cmp	r2, #11
 800977c:	d917      	bls.n	80097ae <_malloc_r+0xca>
 800977e:	1961      	adds	r1, r4, r5
 8009780:	42a3      	cmp	r3, r4
 8009782:	6025      	str	r5, [r4, #0]
 8009784:	bf18      	it	ne
 8009786:	6059      	strne	r1, [r3, #4]
 8009788:	6863      	ldr	r3, [r4, #4]
 800978a:	bf08      	it	eq
 800978c:	f8c8 1000 	streq.w	r1, [r8]
 8009790:	5162      	str	r2, [r4, r5]
 8009792:	604b      	str	r3, [r1, #4]
 8009794:	4638      	mov	r0, r7
 8009796:	f104 060b 	add.w	r6, r4, #11
 800979a:	f000 f829 	bl	80097f0 <__malloc_unlock>
 800979e:	f026 0607 	bic.w	r6, r6, #7
 80097a2:	1d23      	adds	r3, r4, #4
 80097a4:	1af2      	subs	r2, r6, r3
 80097a6:	d0ae      	beq.n	8009706 <_malloc_r+0x22>
 80097a8:	1b9b      	subs	r3, r3, r6
 80097aa:	50a3      	str	r3, [r4, r2]
 80097ac:	e7ab      	b.n	8009706 <_malloc_r+0x22>
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	d1dd      	bne.n	8009770 <_malloc_r+0x8c>
 80097b4:	f8c8 2000 	str.w	r2, [r8]
 80097b8:	e7ec      	b.n	8009794 <_malloc_r+0xb0>
 80097ba:	4623      	mov	r3, r4
 80097bc:	6864      	ldr	r4, [r4, #4]
 80097be:	e7ac      	b.n	800971a <_malloc_r+0x36>
 80097c0:	4634      	mov	r4, r6
 80097c2:	6876      	ldr	r6, [r6, #4]
 80097c4:	e7b4      	b.n	8009730 <_malloc_r+0x4c>
 80097c6:	4613      	mov	r3, r2
 80097c8:	e7cc      	b.n	8009764 <_malloc_r+0x80>
 80097ca:	230c      	movs	r3, #12
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4638      	mov	r0, r7
 80097d0:	f000 f80e 	bl	80097f0 <__malloc_unlock>
 80097d4:	e797      	b.n	8009706 <_malloc_r+0x22>
 80097d6:	6025      	str	r5, [r4, #0]
 80097d8:	e7dc      	b.n	8009794 <_malloc_r+0xb0>
 80097da:	605b      	str	r3, [r3, #4]
 80097dc:	deff      	udf	#255	; 0xff
 80097de:	bf00      	nop
 80097e0:	200020a8 	.word	0x200020a8

080097e4 <__malloc_lock>:
 80097e4:	4801      	ldr	r0, [pc, #4]	; (80097ec <__malloc_lock+0x8>)
 80097e6:	f000 b84b 	b.w	8009880 <__retarget_lock_acquire_recursive>
 80097ea:	bf00      	nop
 80097ec:	200021ec 	.word	0x200021ec

080097f0 <__malloc_unlock>:
 80097f0:	4801      	ldr	r0, [pc, #4]	; (80097f8 <__malloc_unlock+0x8>)
 80097f2:	f000 b846 	b.w	8009882 <__retarget_lock_release_recursive>
 80097f6:	bf00      	nop
 80097f8:	200021ec 	.word	0x200021ec

080097fc <memset>:
 80097fc:	4402      	add	r2, r0
 80097fe:	4603      	mov	r3, r0
 8009800:	4293      	cmp	r3, r2
 8009802:	d100      	bne.n	8009806 <memset+0xa>
 8009804:	4770      	bx	lr
 8009806:	f803 1b01 	strb.w	r1, [r3], #1
 800980a:	e7f9      	b.n	8009800 <memset+0x4>

0800980c <_sbrk_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d06      	ldr	r5, [pc, #24]	; (8009828 <_sbrk_r+0x1c>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7f7 fe58 	bl	80014cc <_sbrk>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_sbrk_r+0x1a>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_sbrk_r+0x1a>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200021e8 	.word	0x200021e8

0800982c <__errno>:
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <__errno+0x8>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000158 	.word	0x20000158

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	; (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	; (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	; (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	; (800987c <__libc_init_array+0x44>)
 800984c:	f000 f866 	bl	800991c <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	0800999c 	.word	0x0800999c
 8009874:	0800999c 	.word	0x0800999c
 8009878:	0800999c 	.word	0x0800999c
 800987c:	080099a0 	.word	0x080099a0

08009880 <__retarget_lock_acquire_recursive>:
 8009880:	4770      	bx	lr

08009882 <__retarget_lock_release_recursive>:
 8009882:	4770      	bx	lr

08009884 <_free_r>:
 8009884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009886:	2900      	cmp	r1, #0
 8009888:	d044      	beq.n	8009914 <_free_r+0x90>
 800988a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800988e:	9001      	str	r0, [sp, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f1a1 0404 	sub.w	r4, r1, #4
 8009896:	bfb8      	it	lt
 8009898:	18e4      	addlt	r4, r4, r3
 800989a:	f7ff ffa3 	bl	80097e4 <__malloc_lock>
 800989e:	4a1e      	ldr	r2, [pc, #120]	; (8009918 <_free_r+0x94>)
 80098a0:	9801      	ldr	r0, [sp, #4]
 80098a2:	6813      	ldr	r3, [r2, #0]
 80098a4:	b933      	cbnz	r3, 80098b4 <_free_r+0x30>
 80098a6:	6063      	str	r3, [r4, #4]
 80098a8:	6014      	str	r4, [r2, #0]
 80098aa:	b003      	add	sp, #12
 80098ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098b0:	f7ff bf9e 	b.w	80097f0 <__malloc_unlock>
 80098b4:	42a3      	cmp	r3, r4
 80098b6:	d908      	bls.n	80098ca <_free_r+0x46>
 80098b8:	6825      	ldr	r5, [r4, #0]
 80098ba:	1961      	adds	r1, r4, r5
 80098bc:	428b      	cmp	r3, r1
 80098be:	bf01      	itttt	eq
 80098c0:	6819      	ldreq	r1, [r3, #0]
 80098c2:	685b      	ldreq	r3, [r3, #4]
 80098c4:	1949      	addeq	r1, r1, r5
 80098c6:	6021      	streq	r1, [r4, #0]
 80098c8:	e7ed      	b.n	80098a6 <_free_r+0x22>
 80098ca:	461a      	mov	r2, r3
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	b10b      	cbz	r3, 80098d4 <_free_r+0x50>
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	d9fa      	bls.n	80098ca <_free_r+0x46>
 80098d4:	6811      	ldr	r1, [r2, #0]
 80098d6:	1855      	adds	r5, r2, r1
 80098d8:	42a5      	cmp	r5, r4
 80098da:	d10b      	bne.n	80098f4 <_free_r+0x70>
 80098dc:	6824      	ldr	r4, [r4, #0]
 80098de:	4421      	add	r1, r4
 80098e0:	1854      	adds	r4, r2, r1
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	6011      	str	r1, [r2, #0]
 80098e6:	d1e0      	bne.n	80098aa <_free_r+0x26>
 80098e8:	681c      	ldr	r4, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	6053      	str	r3, [r2, #4]
 80098ee:	440c      	add	r4, r1
 80098f0:	6014      	str	r4, [r2, #0]
 80098f2:	e7da      	b.n	80098aa <_free_r+0x26>
 80098f4:	d902      	bls.n	80098fc <_free_r+0x78>
 80098f6:	230c      	movs	r3, #12
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	e7d6      	b.n	80098aa <_free_r+0x26>
 80098fc:	6825      	ldr	r5, [r4, #0]
 80098fe:	1961      	adds	r1, r4, r5
 8009900:	428b      	cmp	r3, r1
 8009902:	bf04      	itt	eq
 8009904:	6819      	ldreq	r1, [r3, #0]
 8009906:	685b      	ldreq	r3, [r3, #4]
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	bf04      	itt	eq
 800990c:	1949      	addeq	r1, r1, r5
 800990e:	6021      	streq	r1, [r4, #0]
 8009910:	6054      	str	r4, [r2, #4]
 8009912:	e7ca      	b.n	80098aa <_free_r+0x26>
 8009914:	b003      	add	sp, #12
 8009916:	bd30      	pop	{r4, r5, pc}
 8009918:	200020a8 	.word	0x200020a8

0800991c <_init>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	bf00      	nop
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr

08009928 <_fini>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	bf00      	nop
 800992c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992e:	bc08      	pop	{r3}
 8009930:	469e      	mov	lr, r3
 8009932:	4770      	bx	lr
