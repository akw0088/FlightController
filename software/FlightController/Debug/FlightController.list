
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e818  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800e9f8  0800e9f8  0001e9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efe4  0800efe4  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800efe4  0800efe4  0001efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efec  0800efec  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efec  0800efec  0001efec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eff0  0800eff0  0001eff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800eff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002284  20000178  0800f16c  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023fc  0800f16c  000223fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e057  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000462d  00000000  00000000  0003e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00042870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129a  00000000  00000000  000440a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026872  00000000  00000000  0004533a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023491  00000000  00000000  0006bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1be7  00000000  00000000  0008f03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a5c  00000000  00000000  00170c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00177680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000178 	.word	0x20000178
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e9e0 	.word	0x0800e9e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000017c 	.word	0x2000017c
 800021c:	0800e9e0 	.word	0x0800e9e0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SPI2_bmp280_read_id_register>:


// BMP280 is SPI1 in the schematic, but CubeIDE has pin33 marked as SPI2
// So, SPI1 in schematic means SPI2 here in software
void SPI2_bmp280_read_id_register()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
	char data[4] = {0};
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]

	data[0] = BMP280_ID_REG;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <SPI2_bmp280_read_id_register+0x8c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	713b      	strb	r3, [r7, #4]
	data[1] = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	717b      	strb	r3, [r7, #5]


  // Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e6:	481d      	ldr	r0, [pc, #116]	; (800065c <SPI2_bmp280_read_id_register+0x90>)
 80005e8:	f002 f8ea 	bl	80027c0 <HAL_GPIO_WritePin>
//	HAL_Delay(50);
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&data[0], 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2201      	movs	r2, #1
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <SPI2_bmp280_read_id_register+0x94>)
 80005f6:	f004 fe96 	bl	8005326 <HAL_SPI_Transmit>
//	HAL_Delay(5);
	HAL_SPI_Receive(&hspi2, (uint8_t *)&spi_buf[0], 4, HAL_MAX_DELAY);
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	2204      	movs	r2, #4
 8000600:	4918      	ldr	r1, [pc, #96]	; (8000664 <SPI2_bmp280_read_id_register+0x98>)
 8000602:	4817      	ldr	r0, [pc, #92]	; (8000660 <SPI2_bmp280_read_id_register+0x94>)
 8000604:	f004 fffd 	bl	8005602 <HAL_SPI_Receive>
//	HAL_Delay(50);
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4813      	ldr	r0, [pc, #76]	; (800065c <SPI2_bmp280_read_id_register+0x90>)
 8000610:	f002 f8d6 	bl	80027c0 <HAL_GPIO_WritePin>

	// print out status register, should be 0x58
	uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <SPI2_bmp280_read_id_register+0x98>)
 8000616:	781b      	ldrb	r3, [r3, #0]
	uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000618:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <SPI2_bmp280_read_id_register+0x98>)
 800061c:	785b      	ldrb	r3, [r3, #1]
	uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800061e:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[2],
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <SPI2_bmp280_read_id_register+0x98>)
 8000622:	789b      	ldrb	r3, [r3, #2]
	uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000624:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[3]);
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <SPI2_bmp280_read_id_register+0x98>)
 8000628:	78db      	ldrb	r3, [r3, #3]
	uart_buf_len = sprintf(uart_buf, "BMP280 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	9200      	str	r2, [sp, #0]
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	490d      	ldr	r1, [pc, #52]	; (8000668 <SPI2_bmp280_read_id_register+0x9c>)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <SPI2_bmp280_read_id_register+0xa0>)
 8000636:	f00d fda1 	bl	800e17c <siprintf>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <SPI2_bmp280_read_id_register+0xa4>)
 800063e:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <SPI2_bmp280_read_id_register+0xa4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <SPI2_bmp280_read_id_register+0xa0>)
 800064a:	f00d f805 	bl	800d658 <CDC_Transmit_FS>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	40020400 	.word	0x40020400
 8000660:	200002dc 	.word	0x200002dc
 8000664:	20000758 	.word	0x20000758
 8000668:	0800e9f8 	.word	0x0800e9f8
 800066c:	200006d4 	.word	0x200006d4
 8000670:	20000754 	.word	0x20000754

08000674 <SPI1_bmi270_read_id_register>:



void SPI1_bmi270_read_id_register()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af02      	add	r7, sp, #8
	char data[4] = {0};
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]

	data[0] = BMI270_ID_REG;
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SPI1_bmi270_read_id_register+0x88>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	713b      	strb	r3, [r7, #4]
	data[1] = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]

// Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <SPI1_bmi270_read_id_register+0x8c>)
 800068e:	f002 f897 	bl	80027c0 <HAL_GPIO_WritePin>
//	HAL_Delay(50);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data[0], 1, HAL_MAX_DELAY);
 8000692:	1d39      	adds	r1, r7, #4
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	2201      	movs	r2, #1
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <SPI1_bmi270_read_id_register+0x90>)
 800069c:	f004 fe43 	bl	8005326 <HAL_SPI_Transmit>
//	HAL_Delay(5);
	HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf[0], 4, HAL_MAX_DELAY);
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	2204      	movs	r2, #4
 80006a6:	4918      	ldr	r1, [pc, #96]	; (8000708 <SPI1_bmi270_read_id_register+0x94>)
 80006a8:	4816      	ldr	r0, [pc, #88]	; (8000704 <SPI1_bmi270_read_id_register+0x90>)
 80006aa:	f004 ffaa 	bl	8005602 <HAL_SPI_Receive>
//	HAL_Delay(50);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4813      	ldr	r0, [pc, #76]	; (8000700 <SPI1_bmi270_read_id_register+0x8c>)
 80006b4:	f002 f884 	bl	80027c0 <HAL_GPIO_WritePin>

	// print out status register, should be 0x24
	uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SPI1_bmi270_read_id_register+0x94>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
	uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80006bc:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <SPI1_bmi270_read_id_register+0x94>)
 80006c0:	785b      	ldrb	r3, [r3, #1]
	uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80006c2:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[2],
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <SPI1_bmi270_read_id_register+0x94>)
 80006c6:	789b      	ldrb	r3, [r3, #2]
	uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80006c8:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[3]);
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SPI1_bmi270_read_id_register+0x94>)
 80006cc:	78db      	ldrb	r3, [r3, #3]
	uart_buf_len = sprintf(uart_buf, "BMI270 ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9200      	str	r2, [sp, #0]
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <SPI1_bmi270_read_id_register+0x98>)
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <SPI1_bmi270_read_id_register+0x9c>)
 80006da:	f00d fd4f 	bl	800e17c <siprintf>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <SPI1_bmi270_read_id_register+0xa0>)
 80006e2:	6013      	str	r3, [r2, #0]
	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <SPI1_bmi270_read_id_register+0xa0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <SPI1_bmi270_read_id_register+0x9c>)
 80006ee:	f00c ffb3 	bl	800d658 <CDC_Transmit_FS>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000001 	.word	0x20000001
 8000700:	40020000 	.word	0x40020000
 8000704:	20000278 	.word	0x20000278
 8000708:	20000758 	.word	0x20000758
 800070c:	0800ea28 	.word	0x0800ea28
 8000710:	200006d4 	.word	0x200006d4
 8000714:	20000754 	.word	0x20000754

08000718 <SPI3_sdcard_read_id_register>:



void SPI3_sdcard_read_id_register()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af02      	add	r7, sp, #8
	char data[4] = {0};
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]

	data[0] = BMI270_ID_REG;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SPI3_sdcard_read_id_register+0x88>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	713b      	strb	r3, [r7, #4]
	data[1] = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	717b      	strb	r3, [r7, #5]

// Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <SPI3_sdcard_read_id_register+0x8c>)
 8000732:	f002 f845 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&data[0], 1, HAL_MAX_DELAY);
 8000736:	1d39      	adds	r1, r7, #4
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2201      	movs	r2, #1
 800073e:	481a      	ldr	r0, [pc, #104]	; (80007a8 <SPI3_sdcard_read_id_register+0x90>)
 8000740:	f004 fdf1 	bl	8005326 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, (uint8_t *)&spi_buf[0], 4, HAL_MAX_DELAY);
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2204      	movs	r2, #4
 800074a:	4918      	ldr	r1, [pc, #96]	; (80007ac <SPI3_sdcard_read_id_register+0x94>)
 800074c:	4816      	ldr	r0, [pc, #88]	; (80007a8 <SPI3_sdcard_read_id_register+0x90>)
 800074e:	f004 ff58 	bl	8005602 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <SPI3_sdcard_read_id_register+0x8c>)
 8000758:	f002 f832 	bl	80027c0 <HAL_GPIO_WritePin>


	// print out status register, should be 0x24
	uart_buf_len = sprintf(uart_buf, "SDCARD ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SPI3_sdcard_read_id_register+0x94>)
 800075e:	781b      	ldrb	r3, [r3, #0]
	uart_buf_len = sprintf(uart_buf, "SDCARD ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000760:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <SPI3_sdcard_read_id_register+0x94>)
 8000764:	785b      	ldrb	r3, [r3, #1]
	uart_buf_len = sprintf(uart_buf, "SDCARD ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000766:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[2],
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <SPI3_sdcard_read_id_register+0x94>)
 800076a:	789b      	ldrb	r3, [r3, #2]
	uart_buf_len = sprintf(uart_buf, "SDCARD ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800076c:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[3]);
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SPI3_sdcard_read_id_register+0x94>)
 8000770:	78db      	ldrb	r3, [r3, #3]
	uart_buf_len = sprintf(uart_buf, "SDCARD ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	9200      	str	r2, [sp, #0]
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <SPI3_sdcard_read_id_register+0x98>)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <SPI3_sdcard_read_id_register+0x9c>)
 800077e:	f00d fcfd 	bl	800e17c <siprintf>
 8000782:	4603      	mov	r3, r0
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <SPI3_sdcard_read_id_register+0xa0>)
 8000786:	6013      	str	r3, [r2, #0]
	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <SPI3_sdcard_read_id_register+0xa0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <SPI3_sdcard_read_id_register+0x9c>)
 8000792:	f00c ff61 	bl	800d658 <CDC_Transmit_FS>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000001 	.word	0x20000001
 80007a4:	40020400 	.word	0x40020400
 80007a8:	20000340 	.word	0x20000340
 80007ac:	20000758 	.word	0x20000758
 80007b0:	0800ea58 	.word	0x0800ea58
 80007b4:	200006d4 	.word	0x200006d4
 80007b8:	20000754 	.word	0x20000754

080007bc <SPI1_max_analog_read_id_register>:


// this is uses SPI1, but uses the MAX_Chip select, which is shared with SPI bus 2
void SPI1_max_analog_read_id_register()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af02      	add	r7, sp, #8
	char data[4] = {0};
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]

	data[0] = BMI270_ID_REG;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <SPI1_max_analog_read_id_register+0x8c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	713b      	strb	r3, [r7, #4]
	data[1] = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	717b      	strb	r3, [r7, #5]

// Read ID register

	// Set chip select low
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	481d      	ldr	r0, [pc, #116]	; (800084c <SPI1_max_analog_read_id_register+0x90>)
 80007d8:	f001 fff2 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data[0], 1, HAL_MAX_DELAY);
 80007dc:	1d39      	adds	r1, r7, #4
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	2201      	movs	r2, #1
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <SPI1_max_analog_read_id_register+0x94>)
 80007e6:	f004 fd9e 	bl	8005326 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf[0], 4, HAL_MAX_DELAY);
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	2204      	movs	r2, #4
 80007f0:	4918      	ldr	r1, [pc, #96]	; (8000854 <SPI1_max_analog_read_id_register+0x98>)
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <SPI1_max_analog_read_id_register+0x94>)
 80007f4:	f004 ff05 	bl	8005602 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fe:	4813      	ldr	r0, [pc, #76]	; (800084c <SPI1_max_analog_read_id_register+0x90>)
 8000800:	f001 ffde 	bl	80027c0 <HAL_GPIO_WritePin>

	// print out status register, should be 0x24
	uart_buf_len = sprintf(uart_buf, "MAX Analog ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
		  (unsigned int)spi_buf[0],
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <SPI1_max_analog_read_id_register+0x98>)
 8000806:	781b      	ldrb	r3, [r3, #0]
	uart_buf_len = sprintf(uart_buf, "MAX Analog ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000808:	4619      	mov	r1, r3
		  (unsigned int)spi_buf[1],
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <SPI1_max_analog_read_id_register+0x98>)
 800080c:	785b      	ldrb	r3, [r3, #1]
	uart_buf_len = sprintf(uart_buf, "MAX Analog ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800080e:	4618      	mov	r0, r3
		  (unsigned int)spi_buf[2],
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <SPI1_max_analog_read_id_register+0x98>)
 8000812:	789b      	ldrb	r3, [r3, #2]
	uart_buf_len = sprintf(uart_buf, "MAX Analog ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 8000814:	461a      	mov	r2, r3
		  (unsigned int)spi_buf[3]);
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <SPI1_max_analog_read_id_register+0x98>)
 8000818:	78db      	ldrb	r3, [r3, #3]
	uart_buf_len = sprintf(uart_buf, "MAX Analog ID Reg: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	9200      	str	r2, [sp, #0]
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <SPI1_max_analog_read_id_register+0x9c>)
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <SPI1_max_analog_read_id_register+0xa0>)
 8000826:	f00d fca9 	bl	800e17c <siprintf>
 800082a:	4603      	mov	r3, r0
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <SPI1_max_analog_read_id_register+0xa4>)
 800082e:	6013      	str	r3, [r2, #0]
	CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <SPI1_max_analog_read_id_register+0xa4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b29b      	uxth	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <SPI1_max_analog_read_id_register+0xa0>)
 800083a:	f00c ff0d 	bl	800d658 <CDC_Transmit_FS>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000001 	.word	0x20000001
 800084c:	40020000 	.word	0x40020000
 8000850:	20000278 	.word	0x20000278
 8000854:	20000758 	.word	0x20000758
 8000858:	0800ea88 	.word	0x0800ea88
 800085c:	200006d4 	.word	0x200006d4
 8000860:	20000754 	.word	0x20000754

08000864 <myprintf>:

	HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
}


void myprintf(const char *fmt, ...) {
 8000864:	b40f      	push	{r0, r1, r2, r3}
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <myprintf+0x40>)
 800087c:	f00d fcca 	bl	800e214 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <myprintf+0x40>)
 8000882:	f7ff fccd 	bl	8000220 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	607b      	str	r3, [r7, #4]
//  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);


  CDC_Transmit_FS((uint8_t *)buffer, len);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <myprintf+0x40>)
 8000892:	f00c fee1 	bl	800d658 <CDC_Transmit_FS>


}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr
 80008a4:	2000077c 	.word	0x2000077c

080008a8 <test_sdcard>:

// https://01001000.xyz/2020-08-09-Tutorial-STM32CubeIDE-SD-card/
void test_sdcard()
{
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80008ae:	af00      	add	r7, sp, #0
	  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80008b0:	4870      	ldr	r0, [pc, #448]	; (8000a74 <test_sdcard+0x1cc>)
 80008b2:	f7ff ffd7 	bl	8000864 <myprintf>

	  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80008b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ba:	f001 fa1b 	bl	8001cf4 <HAL_Delay>
	  FATFS FatFs; 	//Fatfs handle
	  FIL fil; 		//File handle
	  FRESULT fres; //Result after operations

	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 80008be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80008c2:	2201      	movs	r2, #1
 80008c4:	496c      	ldr	r1, [pc, #432]	; (8000a78 <test_sdcard+0x1d0>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00b ff32 	bl	800c730 <f_mount>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK) {
 80008d2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <test_sdcard+0x40>
		myprintf("f_mount error (%i)\r\n", fres);
 80008da:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80008de:	4619      	mov	r1, r3
 80008e0:	4866      	ldr	r0, [pc, #408]	; (8000a7c <test_sdcard+0x1d4>)
 80008e2:	f7ff ffbf 	bl	8000864 <myprintf>
		while(1);
 80008e6:	e7fe      	b.n	80008e6 <test_sdcard+0x3e>
	  //Let's get some statistics from the SD card
	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 80008e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	4861      	ldr	r0, [pc, #388]	; (8000a78 <test_sdcard+0x1d0>)
 80008f4:	f00c fc7c 	bl	800d1f0 <f_getfree>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK) {
 80008fe:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <test_sdcard+0x6c>
		myprintf("f_getfree error (%i)\r\n", fres);
 8000906:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800090a:	4619      	mov	r1, r3
 800090c:	485c      	ldr	r0, [pc, #368]	; (8000a80 <test_sdcard+0x1d8>)
 800090e:	f7ff ffa9 	bl	8000864 <myprintf>
		while(1);
 8000912:	e7fe      	b.n	8000912 <test_sdcard+0x6a>
	  }

	  //Formula comes from ChaN's documentation
	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000914:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000918:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	3b02      	subs	r3, #2
 8000922:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000926:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	8952      	ldrh	r2, [r2, #10]
 800092e:	fb02 f303 	mul.w	r3, r2, r3
 8000932:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	  free_sectors = free_clusters * getFreeFs->csize;
 8000936:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800093a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	895b      	ldrh	r3, [r3, #10]
 8000942:	461a      	mov	r2, r3
 8000944:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000948:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

	  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000956:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800095a:	0859      	lsrs	r1, r3, #1
 800095c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	461a      	mov	r2, r3
 8000964:	4847      	ldr	r0, [pc, #284]	; (8000a84 <test_sdcard+0x1dc>)
 8000966:	f7ff ff7d 	bl	8000864 <myprintf>

	  //Now let's try to open file "test.txt"
	  fres = f_open(&fil, "test.txt", FA_READ);
 800096a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096e:	2201      	movs	r2, #1
 8000970:	4945      	ldr	r1, [pc, #276]	; (8000a88 <test_sdcard+0x1e0>)
 8000972:	4618      	mov	r0, r3
 8000974:	f00b ff22 	bl	800c7bc <f_open>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK) {
 800097e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <test_sdcard+0xe6>
		myprintf("f_open error (%i)\r\n");
 8000986:	4841      	ldr	r0, [pc, #260]	; (8000a8c <test_sdcard+0x1e4>)
 8000988:	f7ff ff6c 	bl	8000864 <myprintf>
		while(1);
 800098c:	e7fe      	b.n	800098c <test_sdcard+0xe4>
	  }
	  myprintf("I was able to open 'test.txt' for reading!\r\n");
 800098e:	4840      	ldr	r0, [pc, #256]	; (8000a90 <test_sdcard+0x1e8>)
 8000990:	f7ff ff68 	bl	8000864 <myprintf>
	  //Read 30 bytes from "test.txt" on the SD card
	  BYTE readBuf[30];

	  //We can either use f_read OR f_gets to get data out of files
	  //f_gets is a wrapper on f_read that does some string formatting for us
	  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000994:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	211e      	movs	r1, #30
 800099e:	4618      	mov	r0, r3
 80009a0:	f00c fcdb 	bl	800d35a <f_gets>
 80009a4:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
	  if(rres != 0) {
 80009a8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d006      	beq.n	80009be <test_sdcard+0x116>
		myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	4619      	mov	r1, r3
 80009b6:	4837      	ldr	r0, [pc, #220]	; (8000a94 <test_sdcard+0x1ec>)
 80009b8:	f7ff ff54 	bl	8000864 <myprintf>
 80009bc:	e005      	b.n	80009ca <test_sdcard+0x122>
	  } else {
		myprintf("f_gets error (%i)\r\n", fres);
 80009be:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80009c2:	4619      	mov	r1, r3
 80009c4:	4834      	ldr	r0, [pc, #208]	; (8000a98 <test_sdcard+0x1f0>)
 80009c6:	f7ff ff4d 	bl	8000864 <myprintf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 80009ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00c fbe4 	bl	800d19c <f_close>

	  //Now let's try and write a file "write.txt"
	  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80009d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d8:	221a      	movs	r2, #26
 80009da:	4930      	ldr	r1, [pc, #192]	; (8000a9c <test_sdcard+0x1f4>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f00b feed 	bl	800c7bc <f_open>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if(fres == FR_OK) {
 80009e8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d103      	bne.n	80009f8 <test_sdcard+0x150>
		myprintf("I was able to open 'write.txt' for writing\r\n");
 80009f0:	482b      	ldr	r0, [pc, #172]	; (8000aa0 <test_sdcard+0x1f8>)
 80009f2:	f7ff ff37 	bl	8000864 <myprintf>
 80009f6:	e005      	b.n	8000a04 <test_sdcard+0x15c>
	  } else {
		myprintf("f_open error (%i)\r\n", fres);
 80009f8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80009fc:	4619      	mov	r1, r3
 80009fe:	4823      	ldr	r0, [pc, #140]	; (8000a8c <test_sdcard+0x1e4>)
 8000a00:	f7ff ff30 	bl	8000864 <myprintf>
	  }

	  //Copy in a string
	  strncpy((char*)readBuf, "a new file is made!", 19);
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <test_sdcard+0x1fc>)
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	4615      	mov	r5, r2
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	682b      	ldr	r3, [r5, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	8022      	strh	r2, [r4, #0]
 8000a18:	3402      	adds	r4, #2
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	7023      	strb	r3, [r4, #0]
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000a28:	2213      	movs	r2, #19
 8000a2a:	f00c f9c4 	bl	800cdb6 <f_write>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if(fres == FR_OK) {
 8000a34:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d109      	bne.n	8000a50 <test_sdcard+0x1a8>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000a3c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000a40:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <test_sdcard+0x200>)
 8000a4a:	f7ff ff0b 	bl	8000864 <myprintf>
 8000a4e:	e002      	b.n	8000a56 <test_sdcard+0x1ae>
	  } else {
		myprintf("f_write error (%i)\r\n");
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <test_sdcard+0x204>)
 8000a52:	f7ff ff07 	bl	8000864 <myprintf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00c fb9e 	bl	800d19c <f_close>

	  //We're done, so de-mount the drive
	  f_mount(NULL, "", 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	4905      	ldr	r1, [pc, #20]	; (8000a78 <test_sdcard+0x1d0>)
 8000a64:	2000      	movs	r0, #0
 8000a66:	f00b fe63 	bl	800c730 <f_mount>
}
 8000a6a:	bf00      	nop
 8000a6c:	f507 6794 	add.w	r7, r7, #1184	; 0x4a0
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	0800ebc0 	.word	0x0800ebc0
 8000a78:	0800ebe0 	.word	0x0800ebe0
 8000a7c:	0800ebe4 	.word	0x0800ebe4
 8000a80:	0800ebfc 	.word	0x0800ebfc
 8000a84:	0800ec14 	.word	0x0800ec14
 8000a88:	0800ec5c 	.word	0x0800ec5c
 8000a8c:	0800ec68 	.word	0x0800ec68
 8000a90:	0800ec7c 	.word	0x0800ec7c
 8000a94:	0800ecac 	.word	0x0800ecac
 8000a98:	0800ecd8 	.word	0x0800ecd8
 8000a9c:	0800ecec 	.word	0x0800ecec
 8000aa0:	0800ecf8 	.word	0x0800ecf8
 8000aa4:	0800ed28 	.word	0x0800ed28
 8000aa8:	0800ed3c 	.word	0x0800ed3c
 8000aac:	0800ed60 	.word	0x0800ed60

08000ab0 <start_bootloader>:


#define	MCU_IRQS	70u

void start_bootloader()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	void (*boot_jump)(void);

	boot_jump = (void (*)(void))(*((uint32_t *)(0x1FFF0000 + 4)));
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <start_bootloader+0x48>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	607b      	str	r3, [r7, #4]

	HAL_RCC_DeInit();
 8000abc:	f003 fa94 	bl	8003fe8 <HAL_RCC_DeInit>
	SysTick->CTRL = 0;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <start_bootloader+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <start_bootloader+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <start_bootloader+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad2:	b672      	cpsid	i
}
 8000ad4:	bf00      	nop
	__disable_irq();
	SYSCFG->MEMRMP = 0x01;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <start_bootloader+0x50>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	601a      	str	r2, [r3, #0]

	__set_MSP(*(uint32_t *)0x1FFF0000);
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <start_bootloader+0x54>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f383 8808 	msr	MSP, r3
}
 8000ae8:	bf00      	nop

	boot_jump();
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4798      	blx	r3
	*((unsigned long *)0x2004FFF0) = 0xDEADBEEF; // 320KB STM32F7xx
	__DSB();

	boot_jump();
	*/
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	1fff0004 	.word	0x1fff0004
 8000afc:	e000e010 	.word	0xe000e010
 8000b00:	40013800 	.word	0x40013800
 8000b04:	1fff0000 	.word	0x1fff0000

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f001 f895 	bl	8001c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b10:	f000 f88c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b14:	f000 fbb2 	bl	800127c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b18:	f00c fcb8 	bl	800d48c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000b1c:	f000 f8f0 	bl	8000d00 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b20:	f000 f940 	bl	8000da4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000b24:	f000 f990 	bl	8000e48 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b28:	f000 f9ce 	bl	8000ec8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 fb16 	bl	800115c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b30:	f000 fb44 	bl	80011bc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000b34:	f000 fb72 	bl	800121c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8000b38:	f000 fa04 	bl	8000f44 <MX_SPI2_Init>
  MX_UART4_Init();
 8000b3c:	f000 fa7e 	bl	800103c <MX_UART4_Init>
  MX_UART5_Init();
 8000b40:	f000 faac 	bl	800109c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000b44:	f000 fada 	bl	80010fc <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8000b48:	f000 fa3a 	bl	8000fc0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000b4c:	f007 fb7e 	bl	800824c <MX_FATFS_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b50:	b662      	cpsie	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN 2 */

  __enable_irq();


  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	482e      	ldr	r0, [pc, #184]	; (8000c10 <main+0x108>)
 8000b58:	f001 fe4b 	bl	80027f2 <HAL_GPIO_TogglePin>



  // CS pin should be default high
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	482c      	ldr	r0, [pc, #176]	; (8000c14 <main+0x10c>)
 8000b62:	f001 fe2d 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6c:	4828      	ldr	r0, [pc, #160]	; (8000c10 <main+0x108>)
 8000b6e:	f001 fe27 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <main+0x108>)
 8000b78:	f001 fe22 	bl	80027c0 <HAL_GPIO_WritePin>


  // Print something (probably will be too fast to connect and see?)
  uart_buf_len = sprintf(uart_buf, "STM32F7 main()\r\n");
 8000b7c:	4926      	ldr	r1, [pc, #152]	; (8000c18 <main+0x110>)
 8000b7e:	4827      	ldr	r0, [pc, #156]	; (8000c1c <main+0x114>)
 8000b80:	f00d fafc 	bl	800e17c <siprintf>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <main+0x118>)
 8000b88:	6013      	str	r3, [r2, #0]
  CDC_Transmit_FS((uint8_t *)uart_buf, uart_buf_len);
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <main+0x118>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	4822      	ldr	r0, [pc, #136]	; (8000c1c <main+0x114>)
 8000b94:	f00c fd60 	bl	800d658 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  if (test_enable)
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <main+0x11c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d026      	beq.n	8000bee <main+0xe6>





		  if (test_enable == '`')
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <main+0x11c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b60      	cmp	r3, #96	; 0x60
 8000ba6:	d101      	bne.n	8000bac <main+0xa4>
		  {
			  start_bootloader();
 8000ba8:	f7ff ff82 	bl	8000ab0 <start_bootloader>
		  }

		  if (test_enable == '1')
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <main+0x11c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b31      	cmp	r3, #49	; 0x31
 8000bb2:	d101      	bne.n	8000bb8 <main+0xb0>
		  {
			  test_sdcard();
 8000bb4:	f7ff fe78 	bl	80008a8 <test_sdcard>
		  }

		  if (test_enable == '2')
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <main+0x11c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b32      	cmp	r3, #50	; 0x32
 8000bbe:	d101      	bne.n	8000bc4 <main+0xbc>
		  {
			  SPI2_bmp280_read_id_register();
 8000bc0:	f7ff fd04 	bl	80005cc <SPI2_bmp280_read_id_register>
		  }

		  if (test_enable == '3')
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <main+0x11c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b33      	cmp	r3, #51	; 0x33
 8000bca:	d101      	bne.n	8000bd0 <main+0xc8>
		  {
			  SPI1_bmi270_read_id_register();
 8000bcc:	f7ff fd52 	bl	8000674 <SPI1_bmi270_read_id_register>
		  }

		  if (test_enable == '4')
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <main+0x11c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b34      	cmp	r3, #52	; 0x34
 8000bd6:	d101      	bne.n	8000bdc <main+0xd4>
		  {
			  SPI1_max_analog_read_id_register();
 8000bd8:	f7ff fdf0 	bl	80007bc <SPI1_max_analog_read_id_register>
		  }

		  if (test_enable == '5')
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <main+0x11c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b35      	cmp	r3, #53	; 0x35
 8000be2:	d101      	bne.n	8000be8 <main+0xe0>
		  {
			  SPI3_sdcard_read_id_register();
 8000be4:	f7ff fd98 	bl	8000718 <SPI3_sdcard_read_id_register>
		  }



		  test_enable = 0;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <main+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
	  }


	  // blink leds
	  HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8000bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <main+0x120>)
 8000bf4:	f001 fdfd 	bl	80027f2 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f001 f87b 	bl	8001cf4 <HAL_Delay>
	  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <main+0x108>)
 8000c02:	f001 fdf6 	bl	80027f2 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8000c06:	2064      	movs	r0, #100	; 0x64
 8000c08:	f001 f874 	bl	8001cf4 <HAL_Delay>
  	  if (test_enable)
 8000c0c:	e7c4      	b.n	8000b98 <main+0x90>
 8000c0e:	bf00      	nop
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020000 	.word	0x40020000
 8000c18:	0800ed78 	.word	0x0800ed78
 8000c1c:	200006d4 	.word	0x200006d4
 8000c20:	20000754 	.word	0x20000754
 8000c24:	20000778 	.word	0x20000778
 8000c28:	40020800 	.word	0x40020800

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	; 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2230      	movs	r2, #48	; 0x30
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00d faf8 	bl	800e230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <SystemClock_Config+0xcc>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <SystemClock_Config+0xcc>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <SystemClock_Config+0xcc>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <SystemClock_Config+0xd0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c92:	2310      	movs	r3, #16
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fa77 	bl	80041a8 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cc0:	f000 fb7c 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fd06 	bl	80046f0 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cea:	f000 fb67 	bl	80013bc <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	; 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <MX_ADC1_Init+0x9c>)
 8000d16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <MX_ADC1_Init+0xa0>)
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d60:	f000 ffec 	bl	8001d3c <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 fb27 	bl	80013bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d6e:	230b      	movs	r3, #11
 8000d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_ADC1_Init+0x98>)
 8000d80:	f001 f820 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d8a:	f000 fb17 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000194 	.word	0x20000194
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	0f000001 	.word	0x0f000001

08000da4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <MX_ADC2_Init+0x9c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <MX_ADC2_Init+0xa0>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000e04:	f000 ff9a 	bl	8001d3c <HAL_ADC_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f000 fad5 	bl	80013bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e12:	230c      	movs	r3, #12
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC2_Init+0x98>)
 8000e24:	f000 ffce 	bl	8001dc4 <HAL_ADC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000e2e:	f000 fac5 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001dc 	.word	0x200001dc
 8000e40:	40012100 	.word	0x40012100
 8000e44:	0f000001 	.word	0x0f000001

08000e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <MX_I2C1_Init+0x7c>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e84:	f001 fcd0 	bl	8002828 <HAL_I2C_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e8e:	f000 fa95 	bl	80013bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e96:	f001 fd57 	bl	8002948 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea0:	f000 fa8c 	bl	80013bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000ea8:	f001 fd99 	bl	80029de <HAL_I2CEx_ConfigDigitalFilter>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 fa83 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000224 	.word	0x20000224
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	00303d5b 	.word	0x00303d5b

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_SPI1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ee2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000efe:	2228      	movs	r2, #40	; 0x28
 8000f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f28:	f004 f952 	bl	80051d0 <HAL_SPI_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 fa43 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000278 	.word	0x20000278
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <MX_SPI2_Init+0x78>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f62:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f7a:	2228      	movs	r2, #40	; 0x28
 8000f7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f92:	2207      	movs	r2, #7
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_SPI2_Init+0x74>)
 8000fa4:	f004 f914 	bl	80051d0 <HAL_SPI_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 fa05 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002dc 	.word	0x200002dc
 8000fbc:	40003800 	.word	0x40003800

08000fc0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_SPI3_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fde:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_SPI3_Init+0x74>)
 8000fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SPI3_Init+0x74>)
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_SPI3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SPI3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_SPI3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SPI3_Init+0x74>)
 800100e:	2207      	movs	r2, #7
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_SPI3_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_SPI3_Init+0x74>)
 800101a:	2208      	movs	r2, #8
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_SPI3_Init+0x74>)
 8001020:	f004 f8d6 	bl	80051d0 <HAL_SPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 f9c7 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000340 	.word	0x20000340
 8001038:	40003c00 	.word	0x40003c00

0800103c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_UART4_Init+0x58>)
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <MX_UART4_Init+0x5c>)
 8001044:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_UART4_Init+0x58>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_UART4_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_UART4_Init+0x58>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_UART4_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_UART4_Init+0x58>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_UART4_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_UART4_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_UART4_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_UART4_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_UART4_Init+0x58>)
 8001080:	f005 f806 	bl	8006090 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800108a:	f000 f997 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200003a4 	.word	0x200003a4
 8001098:	40004c00 	.word	0x40004c00

0800109c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_UART5_Init+0x58>)
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <MX_UART5_Init+0x5c>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_UART5_Init+0x58>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_UART5_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_UART5_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_UART5_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_UART5_Init+0x58>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_UART5_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_UART5_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_UART5_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_UART5_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_UART5_Init+0x58>)
 80010e0:	f004 ffd6 	bl	8006090 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80010ea:	f000 f967 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000042c 	.word	0x2000042c
 80010f8:	40005000 	.word	0x40005000

080010fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001102:	4a15      	ldr	r2, [pc, #84]	; (8001158 <MX_USART1_UART_Init+0x5c>)
 8001104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800110c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USART1_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USART1_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USART1_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USART1_UART_Init+0x58>)
 8001140:	f004 ffa6 	bl	8006090 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800114a:	f000 f937 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200004b4 	.word	0x200004b4
 8001158:	40011000 	.word	0x40011000

0800115c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <MX_USART2_UART_Init+0x5c>)
 8001164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x58>)
 80011a0:	f004 ff76 	bl	8006090 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011aa:	f000 f907 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000053c 	.word	0x2000053c
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_USART3_UART_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART3_UART_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART3_UART_Init+0x58>)
 8001200:	f004 ff46 	bl	8006090 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 f8d7 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200005c4 	.word	0x200005c4
 8001218:	40004800 	.word	0x40004800

0800121c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <MX_USART6_UART_Init+0x5c>)
 8001224:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART6_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART6_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART6_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART6_UART_Init+0x58>)
 8001260:	f004 ff16 	bl	8006090 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800126a:	f000 f8a7 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000064c 	.word	0x2000064c
 8001278:	40011400 	.word	0x40011400

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <MX_GPIO_Init+0x130>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a45      	ldr	r2, [pc, #276]	; (80013ac <MX_GPIO_Init+0x130>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <MX_GPIO_Init+0x130>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <MX_GPIO_Init+0x130>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a3f      	ldr	r2, [pc, #252]	; (80013ac <MX_GPIO_Init+0x130>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <MX_GPIO_Init+0x130>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <MX_GPIO_Init+0x130>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a39      	ldr	r2, [pc, #228]	; (80013ac <MX_GPIO_Init+0x130>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <MX_GPIO_Init+0x130>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <MX_GPIO_Init+0x130>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <MX_GPIO_Init+0x130>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b31      	ldr	r3, [pc, #196]	; (80013ac <MX_GPIO_Init+0x130>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <MX_GPIO_Init+0x130>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <MX_GPIO_Init+0x130>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <MX_GPIO_Init+0x130>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 800130a:	2200      	movs	r2, #0
 800130c:	f24a 3101 	movw	r1, #41729	; 0xa301
 8001310:	4827      	ldr	r0, [pc, #156]	; (80013b0 <MX_GPIO_Init+0x134>)
 8001312:	f001 fa55 	bl	80027c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f248 1110 	movw	r1, #33040	; 0x8110
 800131c:	4825      	ldr	r0, [pc, #148]	; (80013b4 <MX_GPIO_Init+0x138>)
 800131e:	f001 fa4f 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001322:	2200      	movs	r2, #0
 8001324:	f649 41c3 	movw	r1, #40131	; 0x9cc3
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <MX_GPIO_Init+0x13c>)
 800132a:	f001 fa49 	bl	80027c0 <HAL_GPIO_WritePin>
                          |SPI2_CS_Pin|GPIO_PIN_15|LED1_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 LED0_Pin PC0 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|LED0_Pin|GPIO_PIN_0|GPIO_PIN_8
 800132e:	f24a 3301 	movw	r3, #41729	; 0xa301
 8001332:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_GPIO_Init+0x134>)
 8001348:	f001 f89e 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 800134c:	f244 0310 	movw	r3, #16400	; 0x4010
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001352:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_GPIO_Init+0x134>)
 8001364:	f001 f890 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin PA8 PA15 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_8|GPIO_PIN_15;
 8001368:	f248 1310 	movw	r3, #33040	; 0x8110
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_GPIO_Init+0x138>)
 8001382:	f001 f881 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           SPI2_CS_Pin PB15 LED1_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001386:	f649 43c3 	movw	r3, #40131	; 0x9cc3
 800138a:	617b      	str	r3, [r7, #20]
                          |SPI2_CS_Pin|GPIO_PIN_15|LED1_Pin|SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_GPIO_Init+0x13c>)
 80013a0:	f001 f872 	bl	8002488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_MspInit+0x44>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_MspInit+0x44>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_MspInit+0x44>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x44>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x44>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <HAL_ADC_MspInit+0xc8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d124      	bne.n	800147c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a23      	ldr	r2, [pc, #140]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <HAL_ADC_MspInit+0xd0>)
 8001476:	f001 f807 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800147a:	e028      	b.n	80014ce <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <HAL_ADC_MspInit+0xd4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d123      	bne.n	80014ce <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_ADC_MspInit+0xcc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014b6:	2304      	movs	r3, #4
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_ADC_MspInit+0xd0>)
 80014ca:	f000 ffdd 	bl	8002488 <HAL_GPIO_Init>
}
 80014ce:	bf00      	nop
 80014d0:	3730      	adds	r7, #48	; 0x30
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40012000 	.word	0x40012000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40012100 	.word	0x40012100

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0aa      	sub	sp, #168	; 0xa8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f00c fe91 	bl	800e230 <memset>
  if(hi2c->Instance==I2C1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_I2C_MspInit+0xb4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d13c      	bne.n	8001592 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800151e:	2300      	movs	r3, #0
 8001520:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fb08 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001532:	f7ff ff43 	bl	80013bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_I2C_MspInit+0xb8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_I2C_MspInit+0xb8>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_I2C_MspInit+0xb8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800154e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001556:	2312      	movs	r3, #18
 8001558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001568:	2304      	movs	r3, #4
 800156a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <HAL_I2C_MspInit+0xbc>)
 8001576:	f000 ff87 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_I2C_MspInit+0xb8>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_I2C_MspInit+0xb8>)
 8001580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_I2C_MspInit+0xb8>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	37a8      	adds	r7, #168	; 0xa8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005400 	.word	0x40005400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a53      	ldr	r2, [pc, #332]	; (8001714 <HAL_SPI_MspInit+0x16c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d128      	bne.n	800161c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80015d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23e0      	movs	r3, #224	; 0xe0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160a:	2305      	movs	r3, #5
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4841      	ldr	r0, [pc, #260]	; (800171c <HAL_SPI_MspInit+0x174>)
 8001616:	f000 ff37 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800161a:	e077      	b.n	800170c <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a3f      	ldr	r2, [pc, #252]	; (8001720 <HAL_SPI_MspInit+0x178>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d145      	bne.n	80016b2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <HAL_SPI_MspInit+0x170>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a3b      	ldr	r2, [pc, #236]	; (8001718 <HAL_SPI_MspInit+0x170>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_SPI_MspInit+0x170>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_SPI_MspInit+0x170>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a35      	ldr	r2, [pc, #212]	; (8001718 <HAL_SPI_MspInit+0x170>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <HAL_SPI_MspInit+0x170>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_SPI_MspInit+0x170>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a2f      	ldr	r2, [pc, #188]	; (8001718 <HAL_SPI_MspInit+0x170>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_SPI_MspInit+0x170>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800166e:	2308      	movs	r3, #8
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167e:	2305      	movs	r3, #5
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4826      	ldr	r0, [pc, #152]	; (8001724 <HAL_SPI_MspInit+0x17c>)
 800168a:	f000 fefd 	bl	8002488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800168e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a0:	2305      	movs	r3, #5
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	481f      	ldr	r0, [pc, #124]	; (8001728 <HAL_SPI_MspInit+0x180>)
 80016ac:	f000 feec 	bl	8002488 <HAL_GPIO_Init>
}
 80016b0:	e02c      	b.n	800170c <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI3)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_SPI_MspInit+0x184>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d127      	bne.n	800170c <HAL_SPI_MspInit+0x164>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80016c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_SPI_MspInit+0x170>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016ec:	2338      	movs	r3, #56	; 0x38
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016fc:	2306      	movs	r3, #6
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <HAL_SPI_MspInit+0x180>)
 8001708:	f000 febe 	bl	8002488 <HAL_GPIO_Init>
}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40013000 	.word	0x40013000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40003800 	.word	0x40003800
 8001724:	40020800 	.word	0x40020800
 8001728:	40020400 	.word	0x40020400
 800172c:	40003c00 	.word	0x40003c00

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0b4      	sub	sp, #208	; 0xd0
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00c fd6d 	bl	800e230 <memset>
  if(huart->Instance==UART4)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4ab6      	ldr	r2, [pc, #728]	; (8001a34 <HAL_UART_MspInit+0x304>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d13d      	bne.n	80017dc <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f9e3 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800177c:	f7ff fe1e 	bl	80013bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001780:	4bad      	ldr	r3, [pc, #692]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4aac      	ldr	r2, [pc, #688]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4baa      	ldr	r3, [pc, #680]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4ba7      	ldr	r3, [pc, #668]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4aa6      	ldr	r2, [pc, #664]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
 80017a4:	4ba4      	ldr	r3, [pc, #656]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b0:	2303      	movs	r3, #3
 80017b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017c8:	2308      	movs	r3, #8
 80017ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017d2:	4619      	mov	r1, r3
 80017d4:	4899      	ldr	r0, [pc, #612]	; (8001a3c <HAL_UART_MspInit+0x30c>)
 80017d6:	f000 fe57 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80017da:	e17f      	b.n	8001adc <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==UART5)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a97      	ldr	r2, [pc, #604]	; (8001a40 <HAL_UART_MspInit+0x310>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d15f      	bne.n	80018a6 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80017e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 f9a0 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001802:	f7ff fddb 	bl	80013bc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001806:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a8b      	ldr	r2, [pc, #556]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800180c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
 800181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	4b86      	ldr	r3, [pc, #536]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a85      	ldr	r2, [pc, #532]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b83      	ldr	r3, [pc, #524]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a7f      	ldr	r2, [pc, #508]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b7d      	ldr	r3, [pc, #500]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001868:	2308      	movs	r3, #8
 800186a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001872:	4619      	mov	r1, r3
 8001874:	4873      	ldr	r0, [pc, #460]	; (8001a44 <HAL_UART_MspInit+0x314>)
 8001876:	f000 fe07 	bl	8002488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187a:	2304      	movs	r3, #4
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001892:	2308      	movs	r3, #8
 8001894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001898:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800189c:	4619      	mov	r1, r3
 800189e:	486a      	ldr	r0, [pc, #424]	; (8001a48 <HAL_UART_MspInit+0x318>)
 80018a0:	f000 fdf2 	bl	8002488 <HAL_GPIO_Init>
}
 80018a4:	e11a      	b.n	8001adc <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a68      	ldr	r2, [pc, #416]	; (8001a4c <HAL_UART_MspInit+0x31c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d13c      	bne.n	800192a <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018b4:	2300      	movs	r3, #0
 80018b6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 f93d 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80018c8:	f7ff fd78 	bl	80013bc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018cc:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	4a59      	ldr	r2, [pc, #356]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6453      	str	r3, [r2, #68]	; 0x44
 80018d8:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001916:	2307      	movs	r3, #7
 8001918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001920:	4619      	mov	r1, r3
 8001922:	4846      	ldr	r0, [pc, #280]	; (8001a3c <HAL_UART_MspInit+0x30c>)
 8001924:	f000 fdb0 	bl	8002488 <HAL_GPIO_Init>
}
 8001928:	e0d8      	b.n	8001adc <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_UART_MspInit+0x320>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d13b      	bne.n	80019ac <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001938:	2300      	movs	r3, #0
 800193a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001940:	4618      	mov	r0, r3
 8001942:	f003 f8fb 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0x220>
      Error_Handler();
 800194c:	f7ff fd36 	bl	80013bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <HAL_UART_MspInit+0x308>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x308>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001980:	230c      	movs	r3, #12
 8001982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001998:	2307      	movs	r3, #7
 800199a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019a2:	4619      	mov	r1, r3
 80019a4:	4825      	ldr	r0, [pc, #148]	; (8001a3c <HAL_UART_MspInit+0x30c>)
 80019a6:	f000 fd6f 	bl	8002488 <HAL_GPIO_Init>
}
 80019aa:	e097      	b.n	8001adc <HAL_UART_MspInit+0x3ac>
  else if(huart->Instance==USART3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <HAL_UART_MspInit+0x324>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d150      	bne.n	8001a58 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 f8b8 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_MspInit+0x2a6>
      Error_Handler();
 80019d2:	f7ff fcf3 	bl	80013bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_UART_MspInit+0x308>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a20:	2307      	movs	r3, #7
 8001a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_UART_MspInit+0x314>)
 8001a2e:	f000 fd2b 	bl	8002488 <HAL_GPIO_Init>
}
 8001a32:	e053      	b.n	8001adc <HAL_UART_MspInit+0x3ac>
 8001a34:	40004c00 	.word	0x40004c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40005000 	.word	0x40005000
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40004800 	.word	0x40004800
  else if(huart->Instance==USART6)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_UART_MspInit+0x3b4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d13c      	bne.n	8001adc <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 f862 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_UART_MspInit+0x352>
      Error_Handler();
 8001a7e:	f7ff fc9d 	bl	80013bc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_UART_MspInit+0x3b8>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <HAL_UART_MspInit+0x3b8>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_UART_MspInit+0x3b8>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_UART_MspInit+0x3b8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_UART_MspInit+0x3b8>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_UART_MspInit+0x3b8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab2:	23c0      	movs	r3, #192	; 0xc0
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001aca:	2308      	movs	r3, #8
 8001acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_UART_MspInit+0x3bc>)
 8001ad8:	f000 fcd6 	bl	8002488 <HAL_GPIO_Init>
}
 8001adc:	bf00      	nop
 8001ade:	37d0      	adds	r7, #208	; 0xd0
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40011400 	.word	0x40011400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020800 	.word	0x40020800

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <NMI_Handler+0x4>

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3c:	f000 f8ba 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <OTG_FS_IRQHandler+0x10>)
 8001b4a:	f001 f8da 	bl	8002d02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20001dac 	.word	0x20001dac

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f00c fb6a 	bl	800e260 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20040000 	.word	0x20040000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	2000087c 	.word	0x2000087c
 8001bc0:	20002400 	.word	0x20002400

08001bc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bee:	490e      	ldr	r1, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c04:	4c0b      	ldr	r4, [pc, #44]	; (8001c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c12:	f7ff ffd7 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f00c fb29 	bl	800e26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7fe ff75 	bl	8000b08 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001c2c:	0800eff4 	.word	0x0800eff4
  ldr r2, =_sbss
 8001c30:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001c34:	200023fc 	.word	0x200023fc

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>

08001c3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f000 fbe0 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c44:	200f      	movs	r0, #15
 8001c46:	f000 f805 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4a:	f7ff fbbd 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fbfb 	bl	800246e <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 fbc3 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	2000000c 	.word	0x2000000c
 8001cb0:	20000008 	.word	0x20000008

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	20000880 	.word	0x20000880

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000880 	.word	0x20000880

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000000c 	.word	0x2000000c

08001d3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e031      	b.n	8001db6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fb58 	bl	8001410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_ADC_Init+0x84>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	f043 0202 	orr.w	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f970 	bl	8002070 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
 8001da6:	e001      	b.n	8001dac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	ffffeefd 	.word	0xffffeefd

08001dc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1c>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e136      	b.n	800204e <HAL_ADC_ConfigChannel+0x28a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b09      	cmp	r3, #9
 8001dee:	d93a      	bls.n	8001e66 <HAL_ADC_ConfigChannel+0xa2>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df8:	d035      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68d9      	ldr	r1, [r3, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b1e      	subs	r3, #30
 8001e10:	2207      	movs	r2, #7
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a8d      	ldr	r2, [pc, #564]	; (800205c <HAL_ADC_ConfigChannel+0x298>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10a      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68d9      	ldr	r1, [r3, #12]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	061a      	lsls	r2, r3, #24
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3e:	e035      	b.n	8001eac <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4403      	add	r3, r0
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e64:	e022      	b.n	8001eac <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6919      	ldr	r1, [r3, #16]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43da      	mvns	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	400a      	ands	r2, r1
 8001e88:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6919      	ldr	r1, [r3, #16]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4403      	add	r3, r0
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b05      	subs	r3, #5
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b05      	subs	r3, #5
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34
 8001efc:	e04c      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d824      	bhi.n	8001f50 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b23      	subs	r3, #35	; 0x23
 8001f18:	221f      	movs	r2, #31
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	400a      	ands	r2, r1
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b23      	subs	r3, #35	; 0x23
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4e:	e023      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b41      	subs	r3, #65	; 0x41
 8001f62:	221f      	movs	r2, #31
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	400a      	ands	r2, r1
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b41      	subs	r3, #65	; 0x41
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a30      	ldr	r2, [pc, #192]	; (8002060 <HAL_ADC_ConfigChannel+0x29c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001faa:	d105      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fb6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	; (8002060 <HAL_ADC_ConfigChannel+0x29c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x21e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fd4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fe0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_ADC_ConfigChannel+0x29c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d12b      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x280>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_ADC_ConfigChannel+0x298>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x23a>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b11      	cmp	r3, #17
 8001ffc:	d122      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8002004:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002008:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a15      	ldr	r2, [pc, #84]	; (8002064 <HAL_ADC_ConfigChannel+0x2a0>)
 8002010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002014:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_ADC_ConfigChannel+0x298>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x2a4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <HAL_ADC_ConfigChannel+0x2a8>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9a      	lsrs	r2, r3, #18
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002036:	e002      	b.n	800203e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3b01      	subs	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f9      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	10000012 	.word	0x10000012
 8002060:	40012000 	.word	0x40012000
 8002064:	40012300 	.word	0x40012300
 8002068:	20000004 	.word	0x20000004
 800206c:	431bde83 	.word	0x431bde83

08002070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002078:	4b78      	ldr	r3, [pc, #480]	; (800225c <ADC_Init+0x1ec>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a77      	ldr	r2, [pc, #476]	; (800225c <ADC_Init+0x1ec>)
 800207e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002082:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <ADC_Init+0x1ec>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4973      	ldr	r1, [pc, #460]	; (800225c <ADC_Init+0x1ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	021a      	lsls	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <ADC_Init+0x1f0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	e00f      	b.n	800216a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0202 	bic.w	r2, r2, #2
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	005a      	lsls	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	035a      	lsls	r2, r3, #13
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e007      	b.n	80021e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	051a      	lsls	r2, r3, #20
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002222:	025a      	lsls	r2, r3, #9
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	029a      	lsls	r2, r3, #10
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	0f000001 	.word	0x0f000001

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	4313      	orrs	r3, r2
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00
 80022a8:	05fa0000 	.word	0x05fa0000

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e169      	b.n	800277c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8158 	bne.w	8002776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x56>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80b2 	beq.w	8002776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b60      	ldr	r3, [pc, #384]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a5f      	ldr	r2, [pc, #380]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800262a:	4a5b      	ldr	r2, [pc, #364]	; (8002798 <HAL_GPIO_Init+0x310>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_GPIO_Init+0x314>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x226>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_GPIO_Init+0x318>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x222>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a50      	ldr	r2, [pc, #320]	; (80027a4 <HAL_GPIO_Init+0x31c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x21e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <HAL_GPIO_Init+0x320>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x21a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_GPIO_Init+0x324>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x216>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4d      	ldr	r2, [pc, #308]	; (80027b0 <HAL_GPIO_Init+0x328>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x212>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <HAL_GPIO_Init+0x32c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4b      	ldr	r2, [pc, #300]	; (80027b8 <HAL_GPIO_Init+0x330>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x20a>
 800268e:	2307      	movs	r3, #7
 8002690:	e00e      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 8002692:	2308      	movs	r3, #8
 8002694:	e00c      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 8002696:	2306      	movs	r3, #6
 8002698:	e00a      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 800269a:	2305      	movs	r3, #5
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 800269e:	2304      	movs	r3, #4
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026ae:	2300      	movs	r3, #0
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026c0:	4935      	ldr	r1, [pc, #212]	; (8002798 <HAL_GPIO_Init+0x310>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_GPIO_Init+0x334>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_GPIO_Init+0x334>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	f67f ae92 	bls.w	80024a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40013800 	.word	0x40013800
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40021800 	.word	0x40021800
 80027b8:	40021c00 	.word	0x40021c00
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002804:	887a      	ldrh	r2, [r7, #2]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	041a      	lsls	r2, r3, #16
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43d9      	mvns	r1, r3
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	400b      	ands	r3, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fe4a 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002878:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002888:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e006      	b.n	80028b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d104      	bne.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_I2C_Init+0x11c>)
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	02008000 	.word	0x02008000

08002948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	d138      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002968:	2302      	movs	r3, #2
 800296a:	e032      	b.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800299a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d139      	bne.n	8002a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e033      	b.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	; 0x24
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a78:	b08f      	sub	sp, #60	; 0x3c
 8002a7a:	af0a      	add	r7, sp, #40	; 0x28
 8002a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e116      	b.n	8002cb6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f00a ff32 	bl	800d90c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 f86f 	bl	8006baa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	687e      	ldr	r6, [r7, #4]
 8002ad4:	466d      	mov	r5, sp
 8002ad6:	f106 0410 	add.w	r4, r6, #16
 8002ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aea:	1d33      	adds	r3, r6, #4
 8002aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aee:	6838      	ldr	r0, [r7, #0]
 8002af0:	f003 ff20 	bl	8006934 <USB_CoreInit>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0d7      	b.n	8002cb6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 f85d 	bl	8006bcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e04a      	b.n	8002bae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	333d      	adds	r3, #61	; 0x3d
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	333c      	adds	r3, #60	; 0x3c
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	b298      	uxth	r0, r3
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3344      	adds	r3, #68	; 0x44
 8002b54:	4602      	mov	r2, r0
 8002b56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3340      	adds	r3, #64	; 0x40
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3348      	adds	r3, #72	; 0x48
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334c      	adds	r3, #76	; 0x4c
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3354      	adds	r3, #84	; 0x54
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	3301      	adds	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3af      	bcc.n	8002b18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	e044      	b.n	8002c48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	3301      	adds	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d3b5      	bcc.n	8002bbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	687e      	ldr	r6, [r7, #4]
 8002c5a:	466d      	mov	r5, sp
 8002c5c:	f106 0410 	add.w	r4, r6, #16
 8002c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c70:	1d33      	adds	r3, r6, #4
 8002c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f003 fff5 	bl	8006c64 <USB_DevInit>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e014      	b.n	8002cb6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 f97b 	bl	8003fa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 f953 	bl	8007f5a <USB_DevDisconnect>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_PCD_Start+0x16>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e012      	b.n	8002cfa <HAL_PCD_Start+0x3c>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 ff51 	bl	8006b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 f914 	bl	8007f18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d02:	b590      	push	{r4, r7, lr}
 8002d04:	b08d      	sub	sp, #52	; 0x34
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f005 f9d2 	bl	80080c2 <USB_GetMode>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 84b7 	bne.w	8003694 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f005 f936 	bl	8007f9c <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 84ad 	beq.w	8003692 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 f923 	bl	8007f9c <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d107      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f002 0202 	and.w	r2, r2, #2
 8002d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 f911 	bl	8007f9c <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d161      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0210 	bic.w	r2, r2, #16
 8002d92:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	3304      	adds	r3, #4
 8002db2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	0c5b      	lsrs	r3, r3, #17
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d124      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d035      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6a38      	ldr	r0, [r7, #32]
 8002de0:	f004 ff48 	bl	8007c74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df0:	441a      	add	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e02:	441a      	add	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
 8002e08:	e016      	b.n	8002e38 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	0c5b      	lsrs	r3, r3, #17
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d110      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6a38      	ldr	r0, [r7, #32]
 8002e22:	f004 ff27 	bl	8007c74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e32:	441a      	add	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0210 	orr.w	r2, r2, #16
 8002e46:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f005 f8a5 	bl	8007f9c <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e5c:	f040 80a7 	bne.w	8002fae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 f8aa 	bl	8007fc2 <USB_ReadDevAllOutEpInterrupt>
 8002e6e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e70:	e099      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 808e 	beq.w	8002f9a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f005 f8ce 	bl	800802a <USB_ReadDevOutEPInterrupt>
 8002e8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fef0 	bl	8003c94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2308      	movs	r3, #8
 8002ece:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 ffc6 	bl	8003e64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d030      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b80      	cmp	r3, #128	; 0x80
 8002f08:	d109      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	78db      	ldrb	r3, [r3, #3]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f00a fe03 	bl	800db54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	461a      	mov	r2, r3
 8002f78:	2320      	movs	r3, #32
 8002f7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f af62 	bne.w	8002e72 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fff2 	bl	8007f9c <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fc2:	f040 80db 	bne.w	800317c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f005 f813 	bl	8007ff6 <USB_ReadDevAllInEpInterrupt>
 8002fd0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fd6:	e0cd      	b.n	8003174 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80c2 	beq.w	8003168 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f005 f839 	bl	8008066 <USB_ReadDevInEPInterrupt>
 8002ff4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d057      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	2201      	movs	r2, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	43db      	mvns	r3, r3
 800301a:	69f9      	ldr	r1, [r7, #28]
 800301c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003020:	4013      	ands	r3, r2
 8003022:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003030:	461a      	mov	r2, r3
 8003032:	2301      	movs	r3, #1
 8003034:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d132      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	334c      	adds	r3, #76	; 0x4c
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4403      	add	r3, r0
 800305e:	3348      	adds	r3, #72	; 0x48
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4419      	add	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4403      	add	r3, r0
 8003072:	334c      	adds	r3, #76	; 0x4c
 8003074:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d113      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x3a2>
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3354      	adds	r3, #84	; 0x54
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800309c:	461a      	mov	r2, r3
 800309e:	2101      	movs	r1, #1
 80030a0:	f005 f842 	bl	8008128 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f00a fccd 	bl	800da4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c6:	461a      	mov	r2, r3
 80030c8:	2308      	movs	r3, #8
 80030ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	461a      	mov	r2, r3
 80030e4:	2310      	movs	r3, #16
 80030e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	461a      	mov	r2, r3
 8003100:	2340      	movs	r3, #64	; 0x40
 8003102:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d023      	beq.n	8003156 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800310e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003110:	6a38      	ldr	r0, [r7, #32]
 8003112:	f003 ff15 	bl	8006f40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	3338      	adds	r3, #56	; 0x38
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	78db      	ldrb	r3, [r3, #3]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f00a fd1a 	bl	800db78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	2302      	movs	r3, #2
 8003154:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fd08 	bl	8003b78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f af2e 	bne.w	8002fd8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f004 ff0b 	bl	8007f9c <USB_ReadInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800318c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003190:	d122      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031b8:	2100      	movs	r1, #0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f00a fe98 	bl	800def0 <HAL_PCDEx_LPM_Callback>
 80031c0:	e002      	b.n	80031c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f00a fcb8 	bl	800db38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 fedd 	bl	8007f9c <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ec:	d112      	bne.n	8003214 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f00a fc74 	bl	800daec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003212:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f004 febf 	bl	8007f9c <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003228:	d121      	bne.n	800326e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003238:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800325e:	2101      	movs	r1, #1
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f00a fe45 	bl	800def0 <HAL_PCDEx_LPM_Callback>
 8003266:	e002      	b.n	800326e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f00a fc3f 	bl	800daec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 fe92 	bl	8007f9c <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003282:	f040 80b7 	bne.w	80033f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2110      	movs	r1, #16
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fe4d 	bl	8006f40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	e046      	b.n	800333a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b8:	461a      	mov	r2, r3
 80032ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003304:	0151      	lsls	r1, r2, #5
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	440a      	add	r2, r1
 800330a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800330e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003312:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	440a      	add	r2, r1
 800332a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800332e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003332:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	3301      	adds	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	429a      	cmp	r2, r3
 8003342:	d3b3      	bcc.n	80032ac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003352:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003356:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003370:	f043 030b 	orr.w	r3, r3, #11
 8003374:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003386:	f043 030b 	orr.w	r3, r3, #11
 800338a:	6453      	str	r3, [r2, #68]	; 0x44
 800338c:	e015      	b.n	80033ba <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339c:	4619      	mov	r1, r3
 800339e:	f242 032b 	movw	r3, #8235	; 0x202b
 80033a2:	4313      	orrs	r3, r2
 80033a4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b4:	f043 030b 	orr.w	r3, r3, #11
 80033b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033de:	461a      	mov	r2, r3
 80033e0:	f004 fea2 	bl	8008128 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 fdcf 	bl	8007f9c <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d124      	bne.n	8003454 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f004 fe66 	bl	80080e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fe0e 	bl	800703a <USB_GetDevSpeed>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681c      	ldr	r4, [r3, #0]
 800342a:	f001 fb53 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 800342e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	4620      	mov	r0, r4
 800343a:	f003 fb03 	bl	8006a44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f00a fb2b 	bl	800da9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003452:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fd9f 	bl	8007f9c <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d10a      	bne.n	800347e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f00a fb08 	bl	800da7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 0208 	and.w	r2, r2, #8
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fd8a 	bl	8007f9c <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d122      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349e:	2301      	movs	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e014      	b.n	80034ce <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb27 	bl	8003b16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	3301      	adds	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3e5      	bcc.n	80034a4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f004 fd5d 	bl	8007f9c <USB_ReadInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ec:	d13b      	bne.n	8003566 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e02b      	b.n	800354c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3340      	adds	r3, #64	; 0x40
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d115      	bne.n	8003546 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800351a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	da12      	bge.n	8003546 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	333f      	adds	r3, #63	; 0x3f
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fae8 	bl	8003b16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d3ce      	bcc.n	80034f4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fd16 	bl	8007f9c <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800357a:	d155      	bne.n	8003628 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e045      	b.n	800360e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d12e      	bne.n	8003608 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da2b      	bge.n	8003608 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d121      	bne.n	8003608 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003604:	6053      	str	r3, [r2, #4]
            break;
 8003606:	e007      	b.n	8003618 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	3301      	adds	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	429a      	cmp	r2, r3
 8003616:	d3b4      	bcc.n	8003582 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 fcb5 	bl	8007f9c <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d10a      	bne.n	8003654 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f00a faac 	bl	800db9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fc9f 	bl	8007f9c <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d115      	bne.n	8003694 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f00a fa9c 	bl	800dbb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e000      	b.n	8003694 <HAL_PCD_IRQHandler+0x992>
      return;
 8003692:	bf00      	nop
    }
  }
}
 8003694:	3734      	adds	r7, #52	; 0x34
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_PCD_SetAddress+0x1a>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e013      	b.n	80036dc <HAL_PCD_SetAddress+0x42>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fbfd 	bl	8007ecc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	70fb      	strb	r3, [r7, #3]
 80036f6:	460b      	mov	r3, r1
 80036f8:	803b      	strh	r3, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0f      	bge.n	800372a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3338      	adds	r3, #56	; 0x38
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	705a      	strb	r2, [r3, #1]
 8003728:	e00f      	b.n	800374a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003756:	883a      	ldrh	r2, [r7, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003774:	78bb      	ldrb	r3, [r7, #2]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d102      	bne.n	8003780 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_PCD_EP_Open+0xaa>
 800378a:	2302      	movs	r3, #2
 800378c:	e00e      	b.n	80037ac <HAL_PCD_EP_Open+0xc8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fc71 	bl	8007084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037aa:	7afb      	ldrb	r3, [r7, #11]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da0f      	bge.n	80037e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 020f 	and.w	r2, r3, #15
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	3338      	adds	r3, #56	; 0x38
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	705a      	strb	r2, [r3, #1]
 80037e6:	e00f      	b.n	8003808 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_PCD_EP_Close+0x6e>
 800381e:	2302      	movs	r3, #2
 8003820:	e00e      	b.n	8003840 <HAL_PCD_EP_Close+0x8c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fcaf 	bl	8007194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	460b      	mov	r3, r1
 8003856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	3304      	adds	r3, #4
 8003870:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	f003 ff96 	bl	80077ec <USB_EP0StartXfer>
 80038c0:	e008      	b.n	80038d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	f003 fd3c 	bl	800734c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003900:	681b      	ldr	r3, [r3, #0]
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	460b      	mov	r3, r1
 800391c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391e:	7afb      	ldrb	r3, [r7, #11]
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	3338      	adds	r3, #56	; 0x38
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	f003 ff34 	bl	80077ec <USB_EP0StartXfer>
 8003984:	e008      	b.n	8003998 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	f003 fcda 	bl	800734c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d901      	bls.n	80039c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e050      	b.n	8003a62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da0f      	bge.n	80039e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3338      	adds	r3, #56	; 0x38
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
 80039e6:	e00d      	b.n	8003a04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_PCD_EP_SetStall+0x82>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e01e      	b.n	8003a62 <HAL_PCD_EP_SetStall+0xc0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f976 	bl	8007d24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a52:	461a      	mov	r2, r3
 8003a54:	f004 fb68 	bl	8008128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d901      	bls.n	8003a88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e042      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0f      	bge.n	8003ab0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3338      	adds	r3, #56	; 0x38
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	705a      	strb	r2, [r3, #1]
 8003aae:	e00f      	b.n	8003ad0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_PCD_EP_ClrStall+0x86>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e00e      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0xa4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 f97e 	bl	8007e00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0c      	bge.n	8003b44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e00c      	b.n	8003b5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 ff9d 	bl	8007aa4 <USB_EPStopXfer>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3338      	adds	r3, #56	; 0x38
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d901      	bls.n	8003bb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e06c      	b.n	8003c8a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d902      	bls.n	8003bcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3303      	adds	r3, #3
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bd4:	e02b      	b.n	8003c2e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d902      	bls.n	8003bf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6919      	ldr	r1, [r3, #16]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f003 fff1 	bl	8007bf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d809      	bhi.n	8003c58 <PCD_WriteEmptyTxFifo+0xe0>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d203      	bcs.n	8003c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1be      	bne.n	8003bd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d811      	bhi.n	8003c88 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	6939      	ldr	r1, [r7, #16]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4013      	ands	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	333c      	adds	r3, #60	; 0x3c
 8003cac:	3304      	adds	r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d17b      	bne.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4a61      	ldr	r2, [pc, #388]	; (8003e5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	f240 80b9 	bls.w	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80b3 	beq.w	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfc:	6093      	str	r3, [r2, #8]
 8003cfe:	e0a7      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	461a      	mov	r2, r3
 8003d18:	2320      	movs	r3, #32
 8003d1a:	6093      	str	r3, [r2, #8]
 8003d1c:	e098      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 8093 	bne.w	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d90f      	bls.n	8003d52 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4e:	6093      	str	r3, [r2, #8]
 8003d50:	e07e      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	3304      	adds	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	0159      	lsls	r1, r3, #5
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7e:	1ad2      	subs	r2, r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d114      	bne.n	8003db4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2101      	movs	r1, #1
 8003da0:	f004 f9c2 	bl	8008128 <USB_EP0_OutStart>
 8003da4:	e006      	b.n	8003db4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	441a      	add	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4619      	mov	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f009 fe2a 	bl	800da14 <HAL_PCD_DataOutStageCallback>
 8003dc0:	e046      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d124      	bne.n	8003e14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	e032      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	2320      	movs	r3, #32
 8003e04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f009 fe01 	bl	800da14 <HAL_PCD_DataOutStageCallback>
 8003e12:	e01d      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d114      	bne.n	8003e44 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f004 f972 	bl	8008128 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f009 fde2 	bl	800da14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	4f54300a 	.word	0x4f54300a
 8003e60:	4f54310a 	.word	0x4f54310a

08003e64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	333c      	adds	r3, #60	; 0x3c
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <PCD_EP_OutSetupPacket_int+0x88>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90e      	bls.n	8003eb8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f009 fd99 	bl	800d9f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <PCD_EP_OutSetupPacket_int+0x88>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d90c      	bls.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d108      	bne.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2101      	movs	r1, #1
 8003edc:	f004 f924 	bl	8008128 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	4f54300a 	.word	0x4f54300a

08003ef0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
 8003efc:	4613      	mov	r3, r2
 8003efe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f0e:	883b      	ldrh	r3, [r7, #0]
 8003f10:	0419      	lsls	r1, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f1c:	e028      	b.n	8003f70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e00d      	b.n	8003f4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	3340      	adds	r3, #64	; 0x40
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3ec      	bcc.n	8003f32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f58:	883b      	ldrh	r3, [r7, #0]
 8003f5a:	0418      	lsls	r0, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	4302      	orrs	r2, r0
 8003f68:	3340      	adds	r3, #64	; 0x40
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	10000003 	.word	0x10000003

08003fe8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003fee:	f7fd fe75 	bl	8001cdc <HAL_GetTick>
 8003ff2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a65      	ldr	r2, [pc, #404]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fd fe6b 	bl	8001cdc <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0b8      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004014:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8004020:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5a      	ldr	r2, [pc, #360]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800402c:	f7fd fe56 	bl	8001cdc <HAL_GetTick>
 8004030:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004032:	4b57      	ldr	r3, [pc, #348]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403a:	f7fd fe4f 	bl	8001cdc <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e09a      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004050:	4b4f      	ldr	r3, [pc, #316]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ee      	bne.n	800403a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800405c:	f7fd fe3e 	bl	8001cdc <HAL_GetTick>
 8004060:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004062:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004068:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800406c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd fe34 	bl	8001cdc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e081      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004082:	4b43      	ldr	r3, [pc, #268]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800408e:	f7fd fe25 	bl	8001cdc <HAL_GetTick>
 8004092:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004094:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 800409a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fe1b 	bl	8001cdc <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e068      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_DeInit+0xba>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040c0:	f7fd fe0c 	bl	8001cdc <HAL_GetTick>
 80040c4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a31      	ldr	r2, [pc, #196]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 80040cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040d4:	f7fd fe02 	bl	8001cdc <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e04f      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_DeInit+0xec>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80040f2:	f7fd fdf3 	bl	8001cdc <HAL_GetTick>
 80040f6:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a24      	ldr	r2, [pc, #144]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004102:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004106:	f7fd fde9 	bl	8001cdc <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b64      	cmp	r3, #100	; 0x64
 8004112:	d901      	bls.n	8004118 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e036      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_DeInit+0x11e>
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_RCC_DeInit+0x1ac>)
 8004128:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 800412c:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <HAL_RCC_DeInit+0x1b0>)
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register to default value */
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_RCC_DeInit+0x1b0>)
 8004136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	4a14      	ldr	r2, [pc, #80]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004144:	60d3      	str	r3, [r2, #12]

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 800414c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004150:	60d3      	str	r3, [r2, #12]

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	4a0b      	ldr	r2, [pc, #44]	; (8004190 <HAL_RCC_DeInit+0x1a8>)
 8004164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004168:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCC_DeInit+0x1b4>)
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <HAL_RCC_DeInit+0x1b8>)
 800416e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <HAL_RCC_DeInit+0x1bc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7fd fd6d 	bl	8001c54 <HAL_InitTick>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_RCC_DeInit+0x19c>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_RCC_DeInit+0x19e>
  }
  else
  {
    return HAL_OK;
 8004184:	2300      	movs	r3, #0
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	24003010 	.word	0x24003010
 8004198:	24003000 	.word	0x24003000
 800419c:	20000004 	.word	0x20000004
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	20000008 	.word	0x20000008

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e291      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8087 	beq.w	80042da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041cc:	4b96      	ldr	r3, [pc, #600]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d00c      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d8:	4b93      	ldr	r3, [pc, #588]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d112      	bne.n	800420a <HAL_RCC_OscConfig+0x62>
 80041e4:	4b90      	ldr	r3, [pc, #576]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f0:	d10b      	bne.n	800420a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f2:	4b8d      	ldr	r3, [pc, #564]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d06c      	beq.n	80042d8 <HAL_RCC_OscConfig+0x130>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d168      	bne.n	80042d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e26b      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x7a>
 8004214:	4b84      	ldr	r3, [pc, #528]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a83      	ldr	r2, [pc, #524]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800421a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e02e      	b.n	8004280 <HAL_RCC_OscConfig+0xd8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x9c>
 800422a:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7e      	ldr	r2, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b7c      	ldr	r3, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7b      	ldr	r2, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800423c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e01d      	b.n	8004280 <HAL_RCC_OscConfig+0xd8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0xc0>
 800424e:	4b76      	ldr	r3, [pc, #472]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a75      	ldr	r2, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a72      	ldr	r2, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0xd8>
 8004268:	4b6f      	ldr	r3, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a6e      	ldr	r2, [pc, #440]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6b      	ldr	r2, [pc, #428]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fd28 	bl	8001cdc <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd fd24 	bl	8001cdc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e21f      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	4b61      	ldr	r3, [pc, #388]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0xe8>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd fd14 	bl	8001cdc <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b8:	f7fd fd10 	bl	8001cdc <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e20b      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x110>
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d069      	beq.n	80043ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e6:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d11c      	bne.n	8004338 <HAL_RCC_OscConfig+0x190>
 80042fe:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_RCC_OscConfig+0x17a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1df      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	493d      	ldr	r1, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	e040      	b.n	80043ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d023      	beq.n	8004388 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a38      	ldr	r2, [pc, #224]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd fcc6 	bl	8001cdc <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fd fcc2 	bl	8001cdc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e1bd      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	4b30      	ldr	r3, [pc, #192]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4929      	ldr	r1, [pc, #164]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
 8004386:	e018      	b.n	80043ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004388:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fca2 	bl	8001cdc <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439c:	f7fd fc9e 	bl	8001cdc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e199      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d038      	beq.n	8004438 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d019      	beq.n	8004402 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ce:	4b16      	ldr	r3, [pc, #88]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fd fc7f 	bl	8001cdc <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e2:	f7fd fc7b 	bl	8001cdc <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e176      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCC_OscConfig+0x23a>
 8004400:	e01a      	b.n	8004438 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_RCC_OscConfig+0x280>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd fc65 	bl	8001cdc <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004416:	f7fd fc61 	bl	8001cdc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d903      	bls.n	800442c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e15c      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
 8004428:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	4b91      	ldr	r3, [pc, #580]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ee      	bne.n	8004416 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80a4 	beq.w	800458e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004446:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	4a87      	ldr	r2, [pc, #540]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
 800445e:	4b85      	ldr	r3, [pc, #532]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446e:	4b82      	ldr	r3, [pc, #520]	; (8004678 <HAL_RCC_OscConfig+0x4d0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800447a:	4b7f      	ldr	r3, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x4d0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7e      	ldr	r2, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x4d0>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd fc29 	bl	8001cdc <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd fc25 	bl	8001cdc <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b64      	cmp	r3, #100	; 0x64
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e120      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x4d0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x31a>
 80044b4:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	e02d      	b.n	800451e <HAL_RCC_OscConfig+0x376>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x33c>
 80044ca:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a69      	ldr	r2, [pc, #420]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	4b67      	ldr	r3, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a66      	ldr	r2, [pc, #408]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
 80044e2:	e01c      	b.n	800451e <HAL_RCC_OscConfig+0x376>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d10c      	bne.n	8004506 <HAL_RCC_OscConfig+0x35e>
 80044ec:	4b61      	ldr	r3, [pc, #388]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	4a60      	ldr	r2, [pc, #384]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044f2:	f043 0304 	orr.w	r3, r3, #4
 80044f6:	6713      	str	r3, [r2, #112]	; 0x70
 80044f8:	4b5e      	ldr	r3, [pc, #376]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a5d      	ldr	r2, [pc, #372]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	e00b      	b.n	800451e <HAL_RCC_OscConfig+0x376>
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a5a      	ldr	r2, [pc, #360]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	; 0x70
 8004512:	4b58      	ldr	r3, [pc, #352]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a57      	ldr	r2, [pc, #348]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d015      	beq.n	8004552 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fd fbd9 	bl	8001cdc <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd fbd5 	bl	8001cdc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e0ce      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	4b4b      	ldr	r3, [pc, #300]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RCC_OscConfig+0x386>
 8004550:	e014      	b.n	800457c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd fbc3 	bl	8001cdc <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd fbbf 	bl	8001cdc <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ee      	bne.n	800455a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80a4 	beq.w	80046e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004598:	4b36      	ldr	r3, [pc, #216]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d06b      	beq.n	800467c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d149      	bne.n	8004640 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a30      	ldr	r2, [pc, #192]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80045b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd fb90 	bl	8001cdc <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fd fb8c 	bl	8001cdc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e087      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d2:	4b28      	ldr	r3, [pc, #160]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	019b      	lsls	r3, r3, #6
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	3b01      	subs	r3, #1
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	4313      	orrs	r3, r2
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800460a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a18      	ldr	r2, [pc, #96]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd fb60 	bl	8001cdc <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fb5c 	bl	8001cdc <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e057      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x478>
 800463e:	e04f      	b.n	80046e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fb46 	bl	8001cdc <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fb42 	bl	8001cdc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e03d      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x4ac>
 8004672:	e035      	b.n	80046e0 <HAL_RCC_OscConfig+0x538>
 8004674:	40023800 	.word	0x40023800
 8004678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_RCC_OscConfig+0x544>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d028      	beq.n	80046dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d121      	bne.n	80046dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d11a      	bne.n	80046dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d111      	bne.n	80046dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	3b01      	subs	r3, #1
 80046c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0d0      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b67      	ldr	r3, [pc, #412]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	4965      	ldr	r1, [pc, #404]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b8      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a58      	ldr	r2, [pc, #352]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800475a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	494d      	ldr	r1, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d040      	beq.n	8004814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d115      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e073      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	4b3d      	ldr	r3, [pc, #244]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e06b      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d2:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 0203 	bic.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4936      	ldr	r1, [pc, #216]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fd fa7a 	bl	8001cdc <HAL_GetTick>
 80047e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ec:	f7fd fa76 	bl	8001cdc <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e053      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	4b2d      	ldr	r3, [pc, #180]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 020c 	and.w	r2, r3, #12
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	429a      	cmp	r2, r3
 8004812:	d1eb      	bne.n	80047ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004814:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d210      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 020f 	bic.w	r2, r3, #15
 800482a:	4922      	ldr	r1, [pc, #136]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e032      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4916      	ldr	r1, [pc, #88]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	490e      	ldr	r1, [pc, #56]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004882:	f000 f821 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004886:	4602      	mov	r2, r0
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	490a      	ldr	r1, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x1cc>)
 8004894:	5ccb      	ldrb	r3, [r1, r3]
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1d0>)
 800489c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1d4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd f9d6 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023c00 	.word	0x40023c00
 80048b8:	40023800 	.word	0x40023800
 80048bc:	0800ee18 	.word	0x0800ee18
 80048c0:	20000004 	.word	0x20000004
 80048c4:	20000008 	.word	0x20000008

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b094      	sub	sp, #80	; 0x50
 80048ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
 80048d4:	2300      	movs	r3, #0
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	2300      	movs	r3, #0
 80048da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4b79      	ldr	r3, [pc, #484]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d00d      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x40>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	f200 80e1 	bhi.w	8004ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x34>
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x3a>
 80048fa:	e0db      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCC_GetSysClockFreq+0x204>)
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004900:	e0db      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b73      	ldr	r3, [pc, #460]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004906:	e0d8      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4b6f      	ldr	r3, [pc, #444]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004910:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004912:	4b6d      	ldr	r3, [pc, #436]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	2200      	movs	r2, #0
 8004926:	63bb      	str	r3, [r7, #56]	; 0x38
 8004928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
 8004932:	2300      	movs	r3, #0
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
 8004936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4621      	mov	r1, r4
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	6139      	str	r1, [r7, #16]
 8004958:	4629      	mov	r1, r5
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800496c:	4659      	mov	r1, fp
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004976:	4651      	mov	r1, sl
 8004978:	018a      	lsls	r2, r1, #6
 800497a:	4651      	mov	r1, sl
 800497c:	ebb2 0801 	subs.w	r8, r2, r1
 8004980:	4659      	mov	r1, fp
 8004982:	eb63 0901 	sbc.w	r9, r3, r1
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800499a:	4690      	mov	r8, r2
 800499c:	4699      	mov	r9, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	eb18 0303 	adds.w	r3, r8, r3
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	462b      	mov	r3, r5
 80049a8:	eb49 0303 	adc.w	r3, r9, r3
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ba:	4629      	mov	r1, r5
 80049bc:	024b      	lsls	r3, r1, #9
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c4:	4621      	mov	r1, r4
 80049c6:	024a      	lsls	r2, r1, #9
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ce:	2200      	movs	r2, #0
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049d8:	f7fb fc7a 	bl	80002d0 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	e058      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e6:	4b38      	ldr	r3, [pc, #224]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	099b      	lsrs	r3, r3, #6
 80049ec:	2200      	movs	r2, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	4611      	mov	r1, r2
 80049f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
 80049fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a00:	4642      	mov	r2, r8
 8004a02:	464b      	mov	r3, r9
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0159      	lsls	r1, r3, #5
 8004a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a12:	0150      	lsls	r0, r2, #5
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4641      	mov	r1, r8
 8004a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a1e:	4649      	mov	r1, r9
 8004a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a38:	ebb2 040a 	subs.w	r4, r2, sl
 8004a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	00eb      	lsls	r3, r5, #3
 8004a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a4e:	00e2      	lsls	r2, r4, #3
 8004a50:	4614      	mov	r4, r2
 8004a52:	461d      	mov	r5, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	18e3      	adds	r3, r4, r3
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	eb45 0303 	adc.w	r3, r5, r3
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	028b      	lsls	r3, r1, #10
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a78:	4621      	mov	r1, r4
 8004a7a:	028a      	lsls	r2, r1, #10
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	61fa      	str	r2, [r7, #28]
 8004a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a8c:	f7fb fc20 	bl	80002d0 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab2:	e002      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3750      	adds	r7, #80	; 0x50
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200

08004ad4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004af0:	f7ff fff0 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0a9b      	lsrs	r3, r3, #10
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4903      	ldr	r1, [pc, #12]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	0800ee28 	.word	0x0800ee28

08004b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b18:	f7ff ffdc 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0b5b      	lsrs	r3, r3, #13
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4903      	ldr	r1, [pc, #12]	; (8004b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	0800ee28 	.word	0x0800ee28

08004b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d012      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b60:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a64      	ldr	r2, [pc, #400]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b6a:	6093      	str	r3, [r2, #8]
 8004b6c:	4b62      	ldr	r3, [pc, #392]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4960      	ldr	r1, [pc, #384]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d017      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b92:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	4955      	ldr	r1, [pc, #340]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d017      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bce:	4b4a      	ldr	r3, [pc, #296]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	4946      	ldr	r1, [pc, #280]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 808b 	beq.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b3a      	ldr	r3, [pc, #232]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	4a39      	ldr	r2, [pc, #228]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6413      	str	r3, [r2, #64]	; 0x40
 8004c18:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c24:	4b35      	ldr	r3, [pc, #212]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a34      	ldr	r2, [pc, #208]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd f854 	bl	8001cdc <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c38:	f7fd f850 	bl	8001cdc <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e2bc      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c4a:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d035      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d02e      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c74:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d114      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd f818 	bl	8001cdc <HAL_GetTick>
 8004cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fd f814 	bl	8001cdc <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e27e      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ee      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cde:	d111      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	4901      	ldr	r1, [pc, #4]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	0ffffcff 	.word	0x0ffffcff
 8004d04:	4ba4      	ldr	r3, [pc, #656]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4aa3      	ldr	r2, [pc, #652]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d0e:	6093      	str	r3, [r2, #8]
 8004d10:	4ba1      	ldr	r3, [pc, #644]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1c:	499e      	ldr	r1, [pc, #632]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d2e:	4b9a      	ldr	r3, [pc, #616]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d34:	4a98      	ldr	r2, [pc, #608]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d3e:	4b96      	ldr	r3, [pc, #600]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	4993      	ldr	r1, [pc, #588]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d5c:	4b8e      	ldr	r3, [pc, #568]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6a:	498b      	ldr	r1, [pc, #556]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d7e:	4b86      	ldr	r3, [pc, #536]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	4982      	ldr	r1, [pc, #520]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004da0:	4b7d      	ldr	r3, [pc, #500]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dae:	497a      	ldr	r1, [pc, #488]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc2:	4b75      	ldr	r3, [pc, #468]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f023 0203 	bic.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	4971      	ldr	r1, [pc, #452]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de4:	4b6c      	ldr	r3, [pc, #432]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f023 020c 	bic.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4969      	ldr	r1, [pc, #420]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e06:	4b64      	ldr	r3, [pc, #400]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	4960      	ldr	r1, [pc, #384]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e28:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e36:	4958      	ldr	r1, [pc, #352]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e4a:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	494f      	ldr	r1, [pc, #316]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e6c:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	4947      	ldr	r1, [pc, #284]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e8e:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	493e      	ldr	r1, [pc, #248]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eb0:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4936      	ldr	r1, [pc, #216]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d011      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ed2:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee0:	492d      	ldr	r1, [pc, #180]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f02:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f10:	4921      	ldr	r1, [pc, #132]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f24:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f32:	4919      	ldr	r1, [pc, #100]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f54:	4910      	ldr	r1, [pc, #64]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d006      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 809d 	beq.w	80050aa <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fc feae 	bl	8001cdc <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f82:	e00b      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f84:	f7fc feaa 	bl	8001cdc <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	; 0x64
 8004f90:	d904      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e116      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f9c:	4b8b      	ldr	r3, [pc, #556]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1ed      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d017      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d113      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fbc:	4b83      	ldr	r3, [pc, #524]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc2:	0e1b      	lsrs	r3, r3, #24
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	019a      	lsls	r2, r3, #6
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	071b      	lsls	r3, r3, #28
 8004fdc:	497b      	ldr	r1, [pc, #492]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d024      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500e:	d11f      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005010:	4b6e      	ldr	r3, [pc, #440]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	0f1b      	lsrs	r3, r3, #28
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	431a      	orrs	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	071b      	lsls	r3, r3, #28
 8005030:	4966      	ldr	r1, [pc, #408]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005038:	4b64      	ldr	r3, [pc, #400]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800503a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503e:	f023 021f 	bic.w	r2, r3, #31
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	3b01      	subs	r3, #1
 8005048:	4960      	ldr	r1, [pc, #384]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	019a      	lsls	r2, r3, #6
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	071b      	lsls	r3, r3, #28
 8005070:	4956      	ldr	r1, [pc, #344]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005078:	4b54      	ldr	r3, [pc, #336]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a53      	ldr	r2, [pc, #332]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800507e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fc fe2a 	bl	8001cdc <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800508c:	f7fc fe26 	bl	8001cdc <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e092      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800509e:	4b4b      	ldr	r3, [pc, #300]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	f040 8088 	bne.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050b2:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a45      	ldr	r2, [pc, #276]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050be:	f7fc fe0d 	bl	8001cdc <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050c6:	f7fc fe09 	bl	8001cdc <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d901      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e075      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050d8:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e4:	d0ef      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005102:	2b00      	cmp	r3, #0
 8005104:	d024      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d120      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	019a      	lsls	r2, r3, #6
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	4927      	ldr	r1, [pc, #156]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	3b01      	subs	r3, #1
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	4920      	ldr	r1, [pc, #128]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d018      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005164:	d113      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	0e1b      	lsrs	r3, r3, #24
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	019a      	lsls	r2, r3, #6
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	431a      	orrs	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	4911      	ldr	r1, [pc, #68]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519a:	f7fc fd9f 	bl	8001cdc <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051a2:	f7fc fd9b 	bl	8001cdc <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b64      	cmp	r3, #100	; 0x64
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e007      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c0:	d1ef      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800

080051d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e09d      	b.n	800531e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f2:	d009      	beq.n	8005208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
 80051fa:	e005      	b.n	8005208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc f9c0 	bl	80015a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005248:	d902      	bls.n	8005250 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e002      	b.n	8005256 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005254:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800525e:	d007      	beq.n	8005270 <HAL_SPI_Init+0xa0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005268:	d002      	beq.n	8005270 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	ea42 0103 	orr.w	r1, r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 0204 	and.w	r2, r3, #4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052ec:	ea42 0103 	orr.w	r1, r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b088      	sub	sp, #32
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_SPI_Transmit+0x22>
 8005344:	2302      	movs	r3, #2
 8005346:	e158      	b.n	80055fa <HAL_SPI_Transmit+0x2d4>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005350:	f7fc fcc4 	bl	8001cdc <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d002      	beq.n	800536c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800536a:	e13d      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_Transmit+0x52>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800537c:	e134      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c8:	d10f      	bne.n	80053ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d007      	beq.n	8005408 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005410:	d94b      	bls.n	80054aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Transmit+0xfa>
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d13e      	bne.n	800549e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	881a      	ldrh	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005444:	e02b      	b.n	800549e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d112      	bne.n	800547a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	881a      	ldrh	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005478:	e011      	b.n	800549e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547a:	f7fc fc2f 	bl	8001cdc <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d803      	bhi.n	8005492 <HAL_SPI_Transmit+0x16c>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Transmit+0x172>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800549c:	e0a4      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ce      	bne.n	8005446 <HAL_SPI_Transmit+0x120>
 80054a8:	e07c      	b.n	80055a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Transmit+0x192>
 80054b2:	8afb      	ldrh	r3, [r7, #22]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d170      	bne.n	800559a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d912      	bls.n	80054e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b02      	subs	r3, #2
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054e6:	e058      	b.n	800559a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800550e:	e044      	b.n	800559a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d12b      	bne.n	8005576 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	d912      	bls.n	800554e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b02      	subs	r3, #2
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800554c:	e025      	b.n	800559a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005574:	e011      	b.n	800559a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005576:	f7fc fbb1 	bl	8001cdc <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d803      	bhi.n	800558e <HAL_SPI_Transmit+0x268>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d102      	bne.n	8005594 <HAL_SPI_Transmit+0x26e>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005598:	e026      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1b5      	bne.n	8005510 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fd07 	bl	8005fbc <SPI_EndRxTxTransaction>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e000      	b.n	80055e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80055e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b088      	sub	sp, #32
 8005606:	af02      	add	r7, sp, #8
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561e:	d112      	bne.n	8005646 <HAL_SPI_Receive+0x44>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10e      	bne.n	8005646 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2204      	movs	r2, #4
 800562c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f910 	bl	8005862 <HAL_SPI_TransmitReceive>
 8005642:	4603      	mov	r3, r0
 8005644:	e109      	b.n	800585a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_SPI_Receive+0x52>
 8005650:	2302      	movs	r3, #2
 8005652:	e102      	b.n	800585a <HAL_SPI_Receive+0x258>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565c:	f7fc fb3e 	bl	8001cdc <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800566e:	2302      	movs	r3, #2
 8005670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005672:	e0e9      	b.n	8005848 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Receive+0x7e>
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005684:	e0e0      	b.n	8005848 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2204      	movs	r2, #4
 800568a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056d0:	d908      	bls.n	80056e4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	e007      	b.n	80056f4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fc:	d10f      	bne.n	800571e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d007      	beq.n	800573c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005744:	d867      	bhi.n	8005816 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005746:	e030      	b.n	80057aa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d117      	bne.n	8005786 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f103 020c 	add.w	r2, r3, #12
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	7812      	ldrb	r2, [r2, #0]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005784:	e011      	b.n	80057aa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005786:	f7fc faa9 	bl	8001cdc <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d803      	bhi.n	800579e <HAL_SPI_Receive+0x19c>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_Receive+0x1a2>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057a8:	e04e      	b.n	8005848 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1c8      	bne.n	8005748 <HAL_SPI_Receive+0x146>
 80057b6:	e034      	b.n	8005822 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d115      	bne.n	80057f2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	b292      	uxth	r2, r2
 80057d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057f0:	e011      	b.n	8005816 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f2:	f7fc fa73 	bl	8001cdc <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d803      	bhi.n	800580a <HAL_SPI_Receive+0x208>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d102      	bne.n	8005810 <HAL_SPI_Receive+0x20e>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005814:	e018      	b.n	8005848 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1ca      	bne.n	80057b8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fb4c 	bl	8005ec4 <SPI_EndRxTransaction>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	75fb      	strb	r3, [r7, #23]
 8005844:	e000      	b.n	8005848 <HAL_SPI_Receive+0x246>
  }

error :
 8005846:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b08a      	sub	sp, #40	; 0x28
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005870:	2301      	movs	r3, #1
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x26>
 8005884:	2302      	movs	r3, #2
 8005886:	e1fb      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x41e>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005890:	f7fc fa24 	bl	8001cdc <HAL_GetTick>
 8005894:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800589c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80058a8:	887b      	ldrh	r3, [r7, #2]
 80058aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058ac:	7efb      	ldrb	r3, [r7, #27]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d00e      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x6e>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b8:	d106      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x66>
 80058c2:	7efb      	ldrb	r3, [r7, #27]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d003      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058ce:	e1cd      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x80>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x80>
 80058dc:	887b      	ldrh	r3, [r7, #2]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058e8:	e1c0      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d003      	beq.n	80058fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2205      	movs	r2, #5
 80058fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	887a      	ldrh	r2, [r7, #2]
 8005916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	887a      	ldrh	r2, [r7, #2]
 8005924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	887a      	ldrh	r2, [r7, #2]
 800592a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005940:	d802      	bhi.n	8005948 <HAL_SPI_TransmitReceive+0xe6>
 8005942:	8a3b      	ldrh	r3, [r7, #16]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d908      	bls.n	800595a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	e007      	b.n	800596a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005968:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d007      	beq.n	8005988 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005990:	d97c      	bls.n	8005a8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x13e>
 800599a:	8a7b      	ldrh	r3, [r7, #18]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d169      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c4:	e056      	b.n	8005a74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d11b      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x1aa>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x1aa>
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d113      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d11c      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x1f2>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	b292      	uxth	r2, r2
 8005a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a50:	2301      	movs	r3, #1
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a54:	f7fc f942 	bl	8001cdc <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d807      	bhi.n	8005a74 <HAL_SPI_TransmitReceive+0x212>
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d003      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a72:	e0fb      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1a3      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x164>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d19d      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x164>
 8005a8a:	e0df      	b.n	8005c4c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x23a>
 8005a94:	8a7b      	ldrh	r3, [r7, #18]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	f040 80cb 	bne.w	8005c32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d912      	bls.n	8005acc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	881a      	ldrh	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b02      	subs	r3, #2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aca:	e0b2      	b.n	8005c32 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005af2:	e09e      	b.n	8005c32 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d134      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x30a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d02f      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x30a>
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d12c      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d912      	bls.n	8005b42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	881a      	ldrh	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b02      	subs	r3, #2
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b40:	e012      	b.n	8005b68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d148      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x3aa>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d042      	beq.n	8005c0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d923      	bls.n	8005bda <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b02      	subs	r3, #2
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d81f      	bhi.n	8005c08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e016      	b.n	8005c08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f103 020c 	add.w	r2, r3, #12
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c0c:	f7fc f866 	bl	8001cdc <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d803      	bhi.n	8005c24 <HAL_SPI_TransmitReceive+0x3c2>
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d102      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x3c8>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c30:	e01c      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f47f af5b 	bne.w	8005af4 <HAL_SPI_TransmitReceive+0x292>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f47f af54 	bne.w	8005af4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f9b3 	bl	8005fbc <SPI_EndRxTxTransaction>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d006      	beq.n	8005c6a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60
 8005c68:	e000      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005c6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	; 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c98:	f7fc f820 	bl	8001cdc <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ca8:	f7fc f818 	bl	8001cdc <HAL_GetTick>
 8005cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cae:	4b39      	ldr	r3, [pc, #228]	; (8005d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	015b      	lsls	r3, r3, #5
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cbe:	e054      	b.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d050      	beq.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc8:	f7fc f808 	bl	8001cdc <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d902      	bls.n	8005cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d13d      	bne.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf6:	d111      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d00:	d004      	beq.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0a:	d107      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d24:	d10f      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e017      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d19b      	bne.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000004 	.word	0x20000004

08005d98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005daa:	f7fb ff97 	bl	8001cdc <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dba:	f7fb ff8f 	bl	8001cdc <HAL_GetTick>
 8005dbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00da      	lsls	r2, r3, #3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	0d1b      	lsrs	r3, r3, #20
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005de0:	e060      	b.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005de8:	d107      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d050      	beq.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e02:	f7fb ff6b 	bl	8001cdc <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13d      	bne.n	8005e94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e30:	d111      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d004      	beq.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5e:	d10f      	bne.n	8005e80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e010      	b.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d196      	bne.n	8005de2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	; 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000004 	.word	0x20000004

08005ec4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed8:	d111      	bne.n	8005efe <SPI_EndRxTransaction+0x3a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	d004      	beq.n	8005eee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d107      	bne.n	8005efe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f06:	d112      	bne.n	8005f2e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff feb8 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d021      	beq.n	8005f62 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e03d      	b.n	8005faa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f2e:	4b21      	ldr	r3, [pc, #132]	; (8005fb4 <SPI_EndRxTransaction+0xf0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <SPI_EndRxTransaction+0xf4>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	0d5b      	lsrs	r3, r3, #21
 8005f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b80      	cmp	r3, #128	; 0x80
 8005f5c:	d0f2      	beq.n	8005f44 <SPI_EndRxTransaction+0x80>
 8005f5e:	e000      	b.n	8005f62 <SPI_EndRxTransaction+0x9e>
        break;
 8005f60:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6a:	d11d      	bne.n	8005fa8 <SPI_EndRxTransaction+0xe4>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f74:	d004      	beq.n	8005f80 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7e:	d113      	bne.n	8005fa8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff ff03 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9c:	f043 0220 	orr.w	r2, r3, #32
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e000      	b.n	8005faa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000004 	.word	0x20000004
 8005fb8:	165e9f81 	.word	0x165e9f81

08005fbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fedf 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe4:	f043 0220 	orr.w	r2, r3, #32
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e046      	b.n	800607e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ff0:	4b25      	ldr	r3, [pc, #148]	; (8006088 <SPI_EndRxTxTransaction+0xcc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a25      	ldr	r2, [pc, #148]	; (800608c <SPI_EndRxTxTransaction+0xd0>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	0d5b      	lsrs	r3, r3, #21
 8005ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600e:	d112      	bne.n	8006036 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fe34 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e023      	b.n	800607e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	3b01      	subs	r3, #1
 8006040:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d0f2      	beq.n	8006036 <SPI_EndRxTxTransaction+0x7a>
 8006050:	e000      	b.n	8006054 <SPI_EndRxTxTransaction+0x98>
        break;
 8006052:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fe99 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e000      	b.n	800607e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000004 	.word	0x20000004
 800608c:	165e9f81 	.word	0x165e9f81

08006090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e040      	b.n	8006124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb fb3c 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2224      	movs	r2, #36	; 0x24
 80060bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0201 	bic.w	r2, r2, #1
 80060cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f82c 	bl	800612c <UART_SetConfig>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e022      	b.n	8006124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa84 	bl	80065f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800610a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fb0b 	bl	8006738 <UART_CheckIdleState>
 8006122:	4603      	mov	r3, r0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4ba6      	ldr	r3, [pc, #664]	; (80063f0 <UART_SetConfig+0x2c4>)
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	430b      	orrs	r3, r1
 8006162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a94      	ldr	r2, [pc, #592]	; (80063f4 <UART_SetConfig+0x2c8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d120      	bne.n	80061ea <UART_SetConfig+0xbe>
 80061a8:	4b93      	ldr	r3, [pc, #588]	; (80063f8 <UART_SetConfig+0x2cc>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d816      	bhi.n	80061e4 <UART_SetConfig+0xb8>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x90>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061d3 	.word	0x080061d3
 80061c8:	080061df 	.word	0x080061df
 80061cc:	2301      	movs	r3, #1
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e150      	b.n	8006474 <UART_SetConfig+0x348>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e14d      	b.n	8006474 <UART_SetConfig+0x348>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e14a      	b.n	8006474 <UART_SetConfig+0x348>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e147      	b.n	8006474 <UART_SetConfig+0x348>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e144      	b.n	8006474 <UART_SetConfig+0x348>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a83      	ldr	r2, [pc, #524]	; (80063fc <UART_SetConfig+0x2d0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d132      	bne.n	800625a <UART_SetConfig+0x12e>
 80061f4:	4b80      	ldr	r3, [pc, #512]	; (80063f8 <UART_SetConfig+0x2cc>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b0c      	cmp	r3, #12
 8006200:	d828      	bhi.n	8006254 <UART_SetConfig+0x128>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0xdc>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	0800623d 	.word	0x0800623d
 800620c:	08006255 	.word	0x08006255
 8006210:	08006255 	.word	0x08006255
 8006214:	08006255 	.word	0x08006255
 8006218:	08006249 	.word	0x08006249
 800621c:	08006255 	.word	0x08006255
 8006220:	08006255 	.word	0x08006255
 8006224:	08006255 	.word	0x08006255
 8006228:	08006243 	.word	0x08006243
 800622c:	08006255 	.word	0x08006255
 8006230:	08006255 	.word	0x08006255
 8006234:	08006255 	.word	0x08006255
 8006238:	0800624f 	.word	0x0800624f
 800623c:	2300      	movs	r3, #0
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e118      	b.n	8006474 <UART_SetConfig+0x348>
 8006242:	2302      	movs	r3, #2
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e115      	b.n	8006474 <UART_SetConfig+0x348>
 8006248:	2304      	movs	r3, #4
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e112      	b.n	8006474 <UART_SetConfig+0x348>
 800624e:	2308      	movs	r3, #8
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e10f      	b.n	8006474 <UART_SetConfig+0x348>
 8006254:	2310      	movs	r3, #16
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e10c      	b.n	8006474 <UART_SetConfig+0x348>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a68      	ldr	r2, [pc, #416]	; (8006400 <UART_SetConfig+0x2d4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d120      	bne.n	80062a6 <UART_SetConfig+0x17a>
 8006264:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <UART_SetConfig+0x2cc>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800626e:	2b30      	cmp	r3, #48	; 0x30
 8006270:	d013      	beq.n	800629a <UART_SetConfig+0x16e>
 8006272:	2b30      	cmp	r3, #48	; 0x30
 8006274:	d814      	bhi.n	80062a0 <UART_SetConfig+0x174>
 8006276:	2b20      	cmp	r3, #32
 8006278:	d009      	beq.n	800628e <UART_SetConfig+0x162>
 800627a:	2b20      	cmp	r3, #32
 800627c:	d810      	bhi.n	80062a0 <UART_SetConfig+0x174>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <UART_SetConfig+0x15c>
 8006282:	2b10      	cmp	r3, #16
 8006284:	d006      	beq.n	8006294 <UART_SetConfig+0x168>
 8006286:	e00b      	b.n	80062a0 <UART_SetConfig+0x174>
 8006288:	2300      	movs	r3, #0
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e0f2      	b.n	8006474 <UART_SetConfig+0x348>
 800628e:	2302      	movs	r3, #2
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e0ef      	b.n	8006474 <UART_SetConfig+0x348>
 8006294:	2304      	movs	r3, #4
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e0ec      	b.n	8006474 <UART_SetConfig+0x348>
 800629a:	2308      	movs	r3, #8
 800629c:	77fb      	strb	r3, [r7, #31]
 800629e:	e0e9      	b.n	8006474 <UART_SetConfig+0x348>
 80062a0:	2310      	movs	r3, #16
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e0e6      	b.n	8006474 <UART_SetConfig+0x348>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a56      	ldr	r2, [pc, #344]	; (8006404 <UART_SetConfig+0x2d8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d120      	bne.n	80062f2 <UART_SetConfig+0x1c6>
 80062b0:	4b51      	ldr	r3, [pc, #324]	; (80063f8 <UART_SetConfig+0x2cc>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ba:	2bc0      	cmp	r3, #192	; 0xc0
 80062bc:	d013      	beq.n	80062e6 <UART_SetConfig+0x1ba>
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	d814      	bhi.n	80062ec <UART_SetConfig+0x1c0>
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d009      	beq.n	80062da <UART_SetConfig+0x1ae>
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d810      	bhi.n	80062ec <UART_SetConfig+0x1c0>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <UART_SetConfig+0x1a8>
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d006      	beq.n	80062e0 <UART_SetConfig+0x1b4>
 80062d2:	e00b      	b.n	80062ec <UART_SetConfig+0x1c0>
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e0cc      	b.n	8006474 <UART_SetConfig+0x348>
 80062da:	2302      	movs	r3, #2
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e0c9      	b.n	8006474 <UART_SetConfig+0x348>
 80062e0:	2304      	movs	r3, #4
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e0c6      	b.n	8006474 <UART_SetConfig+0x348>
 80062e6:	2308      	movs	r3, #8
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e0c3      	b.n	8006474 <UART_SetConfig+0x348>
 80062ec:	2310      	movs	r3, #16
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e0c0      	b.n	8006474 <UART_SetConfig+0x348>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a44      	ldr	r2, [pc, #272]	; (8006408 <UART_SetConfig+0x2dc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d125      	bne.n	8006348 <UART_SetConfig+0x21c>
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <UART_SetConfig+0x2cc>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630a:	d017      	beq.n	800633c <UART_SetConfig+0x210>
 800630c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006310:	d817      	bhi.n	8006342 <UART_SetConfig+0x216>
 8006312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006316:	d00b      	beq.n	8006330 <UART_SetConfig+0x204>
 8006318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631c:	d811      	bhi.n	8006342 <UART_SetConfig+0x216>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <UART_SetConfig+0x1fe>
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d006      	beq.n	8006336 <UART_SetConfig+0x20a>
 8006328:	e00b      	b.n	8006342 <UART_SetConfig+0x216>
 800632a:	2300      	movs	r3, #0
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e0a1      	b.n	8006474 <UART_SetConfig+0x348>
 8006330:	2302      	movs	r3, #2
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e09e      	b.n	8006474 <UART_SetConfig+0x348>
 8006336:	2304      	movs	r3, #4
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e09b      	b.n	8006474 <UART_SetConfig+0x348>
 800633c:	2308      	movs	r3, #8
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e098      	b.n	8006474 <UART_SetConfig+0x348>
 8006342:	2310      	movs	r3, #16
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e095      	b.n	8006474 <UART_SetConfig+0x348>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2f      	ldr	r2, [pc, #188]	; (800640c <UART_SetConfig+0x2e0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d125      	bne.n	800639e <UART_SetConfig+0x272>
 8006352:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <UART_SetConfig+0x2cc>)
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800635c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006360:	d017      	beq.n	8006392 <UART_SetConfig+0x266>
 8006362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006366:	d817      	bhi.n	8006398 <UART_SetConfig+0x26c>
 8006368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636c:	d00b      	beq.n	8006386 <UART_SetConfig+0x25a>
 800636e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006372:	d811      	bhi.n	8006398 <UART_SetConfig+0x26c>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <UART_SetConfig+0x254>
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637c:	d006      	beq.n	800638c <UART_SetConfig+0x260>
 800637e:	e00b      	b.n	8006398 <UART_SetConfig+0x26c>
 8006380:	2301      	movs	r3, #1
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e076      	b.n	8006474 <UART_SetConfig+0x348>
 8006386:	2302      	movs	r3, #2
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e073      	b.n	8006474 <UART_SetConfig+0x348>
 800638c:	2304      	movs	r3, #4
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e070      	b.n	8006474 <UART_SetConfig+0x348>
 8006392:	2308      	movs	r3, #8
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e06d      	b.n	8006474 <UART_SetConfig+0x348>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e06a      	b.n	8006474 <UART_SetConfig+0x348>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <UART_SetConfig+0x2e4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d138      	bne.n	800641a <UART_SetConfig+0x2ee>
 80063a8:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <UART_SetConfig+0x2cc>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b6:	d017      	beq.n	80063e8 <UART_SetConfig+0x2bc>
 80063b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063bc:	d82a      	bhi.n	8006414 <UART_SetConfig+0x2e8>
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c2:	d00b      	beq.n	80063dc <UART_SetConfig+0x2b0>
 80063c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c8:	d824      	bhi.n	8006414 <UART_SetConfig+0x2e8>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <UART_SetConfig+0x2aa>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	d006      	beq.n	80063e2 <UART_SetConfig+0x2b6>
 80063d4:	e01e      	b.n	8006414 <UART_SetConfig+0x2e8>
 80063d6:	2300      	movs	r3, #0
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e04b      	b.n	8006474 <UART_SetConfig+0x348>
 80063dc:	2302      	movs	r3, #2
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e048      	b.n	8006474 <UART_SetConfig+0x348>
 80063e2:	2304      	movs	r3, #4
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e045      	b.n	8006474 <UART_SetConfig+0x348>
 80063e8:	2308      	movs	r3, #8
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e042      	b.n	8006474 <UART_SetConfig+0x348>
 80063ee:	bf00      	nop
 80063f0:	efff69f3 	.word	0xefff69f3
 80063f4:	40011000 	.word	0x40011000
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40004400 	.word	0x40004400
 8006400:	40004800 	.word	0x40004800
 8006404:	40004c00 	.word	0x40004c00
 8006408:	40005000 	.word	0x40005000
 800640c:	40011400 	.word	0x40011400
 8006410:	40007800 	.word	0x40007800
 8006414:	2310      	movs	r3, #16
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e02c      	b.n	8006474 <UART_SetConfig+0x348>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a72      	ldr	r2, [pc, #456]	; (80065e8 <UART_SetConfig+0x4bc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d125      	bne.n	8006470 <UART_SetConfig+0x344>
 8006424:	4b71      	ldr	r3, [pc, #452]	; (80065ec <UART_SetConfig+0x4c0>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800642e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006432:	d017      	beq.n	8006464 <UART_SetConfig+0x338>
 8006434:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006438:	d817      	bhi.n	800646a <UART_SetConfig+0x33e>
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643e:	d00b      	beq.n	8006458 <UART_SetConfig+0x32c>
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006444:	d811      	bhi.n	800646a <UART_SetConfig+0x33e>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <UART_SetConfig+0x326>
 800644a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644e:	d006      	beq.n	800645e <UART_SetConfig+0x332>
 8006450:	e00b      	b.n	800646a <UART_SetConfig+0x33e>
 8006452:	2300      	movs	r3, #0
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e00d      	b.n	8006474 <UART_SetConfig+0x348>
 8006458:	2302      	movs	r3, #2
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e00a      	b.n	8006474 <UART_SetConfig+0x348>
 800645e:	2304      	movs	r3, #4
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e007      	b.n	8006474 <UART_SetConfig+0x348>
 8006464:	2308      	movs	r3, #8
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e004      	b.n	8006474 <UART_SetConfig+0x348>
 800646a:	2310      	movs	r3, #16
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e001      	b.n	8006474 <UART_SetConfig+0x348>
 8006470:	2310      	movs	r3, #16
 8006472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647c:	d15b      	bne.n	8006536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800647e:	7ffb      	ldrb	r3, [r7, #31]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d828      	bhi.n	80064d6 <UART_SetConfig+0x3aa>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x360>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064c1 	.word	0x080064c1
 8006498:	080064d7 	.word	0x080064d7
 800649c:	080064c7 	.word	0x080064c7
 80064a0:	080064d7 	.word	0x080064d7
 80064a4:	080064d7 	.word	0x080064d7
 80064a8:	080064d7 	.word	0x080064d7
 80064ac:	080064cf 	.word	0x080064cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fe fb1c 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e013      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b8:	f7fe fb2c 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
 80064bc:	61b8      	str	r0, [r7, #24]
        break;
 80064be:	e00f      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c0:	4b4b      	ldr	r3, [pc, #300]	; (80065f0 <UART_SetConfig+0x4c4>)
 80064c2:	61bb      	str	r3, [r7, #24]
        break;
 80064c4:	e00c      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fe f9ff 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 80064ca:	61b8      	str	r0, [r7, #24]
        break;
 80064cc:	e008      	b.n	80064e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d2:	61bb      	str	r3, [r7, #24]
        break;
 80064d4:	e004      	b.n	80064e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	77bb      	strb	r3, [r7, #30]
        break;
 80064de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d074      	beq.n	80065d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	005a      	lsls	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	441a      	add	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d916      	bls.n	8006530 <UART_SetConfig+0x404>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d212      	bcs.n	8006530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	b29b      	uxth	r3, r3
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	b29a      	uxth	r2, r3
 8006520:	89fb      	ldrh	r3, [r7, #14]
 8006522:	4313      	orrs	r3, r2
 8006524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	89fa      	ldrh	r2, [r7, #14]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	e04f      	b.n	80065d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	77bb      	strb	r3, [r7, #30]
 8006534:	e04c      	b.n	80065d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006536:	7ffb      	ldrb	r3, [r7, #31]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d828      	bhi.n	800658e <UART_SetConfig+0x462>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x418>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006569 	.word	0x08006569
 8006548:	08006571 	.word	0x08006571
 800654c:	08006579 	.word	0x08006579
 8006550:	0800658f 	.word	0x0800658f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800658f 	.word	0x0800658f
 800655c:	0800658f 	.word	0x0800658f
 8006560:	0800658f 	.word	0x0800658f
 8006564:	08006587 	.word	0x08006587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006568:	f7fe fac0 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 800656c:	61b8      	str	r0, [r7, #24]
        break;
 800656e:	e013      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006570:	f7fe fad0 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
 8006574:	61b8      	str	r0, [r7, #24]
        break;
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006578:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <UART_SetConfig+0x4c4>)
 800657a:	61bb      	str	r3, [r7, #24]
        break;
 800657c:	e00c      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800657e:	f7fe f9a3 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8006582:	61b8      	str	r0, [r7, #24]
        break;
 8006584:	e008      	b.n	8006598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e004      	b.n	8006598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	77bb      	strb	r3, [r7, #30]
        break;
 8006596:	bf00      	nop
    }

    if (pclk != 0U)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	085a      	lsrs	r2, r3, #1
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	441a      	add	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d909      	bls.n	80065cc <UART_SetConfig+0x4a0>
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065be:	d205      	bcs.n	80065cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60da      	str	r2, [r3, #12]
 80065ca:	e001      	b.n	80065d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40007c00 	.word	0x40007c00
 80065ec:	40023800 	.word	0x40023800
 80065f0:	00f42400 	.word	0x00f42400

080065f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01a      	beq.n	800670a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f2:	d10a      	bne.n	800670a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006748:	f7fb fac8 	bl	8001cdc <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b08      	cmp	r3, #8
 800675a:	d10e      	bne.n	800677a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f81b 	bl	80067a6 <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e011      	b.n	800679e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b09c      	sub	sp, #112	; 0x70
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4613      	mov	r3, r2
 80067b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b6:	e0a7      	b.n	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	f000 80a3 	beq.w	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fb fa8b 	bl	8001cdc <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80067d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d13f      	bne.n	8006858 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ec:	667b      	str	r3, [r7, #100]	; 0x64
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e6      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	663b      	str	r3, [r7, #96]	; 0x60
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800682a:	64ba      	str	r2, [r7, #72]	; 0x48
 800682c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e068      	b.n	800692a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d050      	beq.n	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006874:	d148      	bne.n	8006908 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800687e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006894:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
 80068a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	613b      	str	r3, [r7, #16]
   return(result);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d2:	623a      	str	r2, [r7, #32]
 80068d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	69f9      	ldr	r1, [r7, #28]
 80068d8:	6a3a      	ldr	r2, [r7, #32]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e5      	bne.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e010      	b.n	800692a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	429a      	cmp	r2, r3
 8006924:	f43f af48 	beq.w	80067b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3770      	adds	r7, #112	; 0x70
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006934:	b084      	sub	sp, #16
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	f107 001c 	add.w	r0, r7, #28
 8006942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	d126      	bne.n	800699a <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	4b38      	ldr	r3, [pc, #224]	; (8006a40 <USB_CoreInit+0x10c>)
 800695e:	4013      	ands	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f043 0210 	orr.w	r2, r3, #16
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800697c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d105      	bne.n	800698e <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fc28 	bl	80081e4 <USB_CoreReset>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
 8006998:	e03a      	b.n	8006a10 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2b03      	cmp	r3, #3
 800699e:	d126      	bne.n	80069ee <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	4b23      	ldr	r3, [pc, #140]	; (8006a40 <USB_CoreInit+0x10c>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f023 0210 	bic.w	r2, r3, #16
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80069d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d105      	bne.n	80069e2 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fbfe 	bl	80081e4 <USB_CoreReset>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e010      	b.n	8006a10 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 fbf2 	bl	80081e4 <USB_CoreReset>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10b      	bne.n	8006a2e <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f043 0206 	orr.w	r2, r3, #6
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a3a:	b004      	add	sp, #16
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	ffbdffbf 	.word	0xffbdffbf

08006a44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d165      	bne.n	8006b24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a41      	ldr	r2, [pc, #260]	; (8006b60 <USB_SetTurnaroundTime+0x11c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d906      	bls.n	8006a6e <USB_SetTurnaroundTime+0x2a>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4a40      	ldr	r2, [pc, #256]	; (8006b64 <USB_SetTurnaroundTime+0x120>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d202      	bcs.n	8006a6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a68:	230f      	movs	r3, #15
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	e062      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4a3c      	ldr	r2, [pc, #240]	; (8006b64 <USB_SetTurnaroundTime+0x120>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d306      	bcc.n	8006a84 <USB_SetTurnaroundTime+0x40>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4a3b      	ldr	r2, [pc, #236]	; (8006b68 <USB_SetTurnaroundTime+0x124>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d202      	bcs.n	8006a84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a7e:	230e      	movs	r3, #14
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e057      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4a38      	ldr	r2, [pc, #224]	; (8006b68 <USB_SetTurnaroundTime+0x124>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d306      	bcc.n	8006a9a <USB_SetTurnaroundTime+0x56>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4a37      	ldr	r2, [pc, #220]	; (8006b6c <USB_SetTurnaroundTime+0x128>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d202      	bcs.n	8006a9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a94:	230d      	movs	r3, #13
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e04c      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4a33      	ldr	r2, [pc, #204]	; (8006b6c <USB_SetTurnaroundTime+0x128>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d306      	bcc.n	8006ab0 <USB_SetTurnaroundTime+0x6c>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4a32      	ldr	r2, [pc, #200]	; (8006b70 <USB_SetTurnaroundTime+0x12c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d802      	bhi.n	8006ab0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006aaa:	230c      	movs	r3, #12
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	e041      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a2f      	ldr	r2, [pc, #188]	; (8006b70 <USB_SetTurnaroundTime+0x12c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d906      	bls.n	8006ac6 <USB_SetTurnaroundTime+0x82>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a2e      	ldr	r2, [pc, #184]	; (8006b74 <USB_SetTurnaroundTime+0x130>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d802      	bhi.n	8006ac6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ac0:	230b      	movs	r3, #11
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e036      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <USB_SetTurnaroundTime+0x130>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d906      	bls.n	8006adc <USB_SetTurnaroundTime+0x98>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <USB_SetTurnaroundTime+0x134>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d802      	bhi.n	8006adc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e02b      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a26      	ldr	r2, [pc, #152]	; (8006b78 <USB_SetTurnaroundTime+0x134>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d906      	bls.n	8006af2 <USB_SetTurnaroundTime+0xae>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a25      	ldr	r2, [pc, #148]	; (8006b7c <USB_SetTurnaroundTime+0x138>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d202      	bcs.n	8006af2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006aec:	2309      	movs	r3, #9
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e020      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4a21      	ldr	r2, [pc, #132]	; (8006b7c <USB_SetTurnaroundTime+0x138>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d306      	bcc.n	8006b08 <USB_SetTurnaroundTime+0xc4>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <USB_SetTurnaroundTime+0x13c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d802      	bhi.n	8006b08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b02:	2308      	movs	r3, #8
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e015      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4a1d      	ldr	r2, [pc, #116]	; (8006b80 <USB_SetTurnaroundTime+0x13c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d906      	bls.n	8006b1e <USB_SetTurnaroundTime+0xda>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a1c      	ldr	r2, [pc, #112]	; (8006b84 <USB_SetTurnaroundTime+0x140>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d202      	bcs.n	8006b1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b18:	2307      	movs	r3, #7
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e00a      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b1e:	2306      	movs	r3, #6
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	e007      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b2a:	2309      	movs	r3, #9
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e001      	b.n	8006b34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b30:	2309      	movs	r3, #9
 8006b32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	00d8acbf 	.word	0x00d8acbf
 8006b64:	00e4e1c0 	.word	0x00e4e1c0
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	01067380 	.word	0x01067380
 8006b70:	011a499f 	.word	0x011a499f
 8006b74:	01312cff 	.word	0x01312cff
 8006b78:	014ca43f 	.word	0x014ca43f
 8006b7c:	016e3600 	.word	0x016e3600
 8006b80:	01a6ab1f 	.word	0x01a6ab1f
 8006b84:	01e84800 	.word	0x01e84800

08006b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f043 0201 	orr.w	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d115      	bne.n	8006c1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	f7fb f87a 	bl	8001cf4 <HAL_Delay>
      ms++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fa5b 	bl	80080c2 <USB_GetMode>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d01e      	beq.n	8006c50 <USB_SetCurrentMode+0x84>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b31      	cmp	r3, #49	; 0x31
 8006c16:	d9f0      	bls.n	8006bfa <USB_SetCurrentMode+0x2e>
 8006c18:	e01a      	b.n	8006c50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d115      	bne.n	8006c4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f7fb f861 	bl	8001cf4 <HAL_Delay>
      ms++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fa42 	bl	80080c2 <USB_GetMode>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <USB_SetCurrentMode+0x84>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b31      	cmp	r3, #49	; 0x31
 8006c48:	d9f0      	bls.n	8006c2c <USB_SetCurrentMode+0x60>
 8006c4a:	e001      	b.n	8006c50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e005      	b.n	8006c5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b32      	cmp	r3, #50	; 0x32
 8006c54:	d101      	bne.n	8006c5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c64:	b084      	sub	sp, #16
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	e009      	b.n	8006c98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3340      	adds	r3, #64	; 0x40
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3301      	adds	r3, #1
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b0e      	cmp	r3, #14
 8006c9c:	d9f2      	bls.n	8006c84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11c      	bne.n	8006cde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb2:	f043 0302 	orr.w	r3, r3, #2
 8006cb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e005      	b.n	8006cea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d04:	461a      	mov	r2, r3
 8006d06:	680b      	ldr	r3, [r1, #0]
 8006d08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d10c      	bne.n	8006d2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f975 	bl	8007008 <USB_SetDevSpeed>
 8006d1e:	e018      	b.n	8006d52 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d20:	2101      	movs	r1, #1
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f970 	bl	8007008 <USB_SetDevSpeed>
 8006d28:	e013      	b.n	8006d52 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d10c      	bne.n	8006d4a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d36:	2100      	movs	r1, #0
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f965 	bl	8007008 <USB_SetDevSpeed>
 8006d3e:	e008      	b.n	8006d52 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d40:	2101      	movs	r1, #1
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f960 	bl	8007008 <USB_SetDevSpeed>
 8006d48:	e003      	b.n	8006d52 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d4a:	2103      	movs	r1, #3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f95b 	bl	8007008 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d52:	2110      	movs	r1, #16
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f8f3 	bl	8006f40 <USB_FlushTxFifo>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f91f 	bl	8006fa8 <USB_FlushRxFifo>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d92:	461a      	mov	r2, r3
 8006d94:	2300      	movs	r3, #0
 8006d96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	e043      	b.n	8006e26 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db4:	d118      	bne.n	8006de8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	e013      	b.n	8006dfa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dde:	461a      	mov	r2, r3
 8006de0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	e008      	b.n	8006dfa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	461a      	mov	r2, r3
 8006df6:	2300      	movs	r3, #0
 8006df8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3301      	adds	r3, #1
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3b7      	bcc.n	8006d9e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e043      	b.n	8006ebc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e4a:	d118      	bne.n	8006e7e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e013      	b.n	8006e90 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	461a      	mov	r2, r3
 8006e76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	e008      	b.n	8006e90 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d3b7      	bcc.n	8006e34 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ee4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	4b0e      	ldr	r3, [pc, #56]	; (8006f38 <USB_DevInit+0x2d4>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f043 0208 	orr.w	r2, r3, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <USB_DevInit+0x2d8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f34:	b004      	add	sp, #16
 8006f36:	4770      	bx	lr
 8006f38:	803c3800 	.word	0x803c3800
 8006f3c:	40000004 	.word	0x40000004

08006f40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <USB_FlushTxFifo+0x64>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d901      	bls.n	8006f60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e01b      	b.n	8006f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	daf2      	bge.n	8006f4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	019b      	lsls	r3, r3, #6
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4a08      	ldr	r2, [pc, #32]	; (8006fa4 <USB_FlushTxFifo+0x64>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d901      	bls.n	8006f8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e006      	b.n	8006f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d0f0      	beq.n	8006f78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	00030d40 	.word	0x00030d40

08006fa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a11      	ldr	r2, [pc, #68]	; (8007004 <USB_FlushRxFifo+0x5c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e018      	b.n	8006ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	daf2      	bge.n	8006fb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a08      	ldr	r2, [pc, #32]	; (8007004 <USB_FlushRxFifo+0x5c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e006      	b.n	8006ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d0f0      	beq.n	8006fd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	00030d40 	.word	0x00030d40

08007008 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800703a:	b480      	push	{r7}
 800703c:	b087      	sub	sp, #28
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800705a:	2300      	movs	r3, #0
 800705c:	75fb      	strb	r3, [r7, #23]
 800705e:	e00a      	b.n	8007076 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d002      	beq.n	800706c <USB_GetDevSpeed+0x32>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d102      	bne.n	8007072 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800706c:	2302      	movs	r3, #2
 800706e:	75fb      	strb	r3, [r7, #23]
 8007070:	e001      	b.n	8007076 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007072:	230f      	movs	r3, #15
 8007074:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d139      	bne.n	8007114 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	2101      	movs	r1, #1
 80070b2:	fa01 f303 	lsl.w	r3, r1, r3
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070be:	4313      	orrs	r3, r2
 80070c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d153      	bne.n	8007180 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	059b      	lsls	r3, r3, #22
 80070fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	0159      	lsls	r1, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	440b      	add	r3, r1
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	4619      	mov	r1, r3
 800710c:	4b20      	ldr	r3, [pc, #128]	; (8007190 <USB_ActivateEndpoint+0x10c>)
 800710e:	4313      	orrs	r3, r2
 8007110:	600b      	str	r3, [r1, #0]
 8007112:	e035      	b.n	8007180 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	69da      	ldr	r2, [r3, #28]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f303 	lsl.w	r3, r1, r3
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007132:	4313      	orrs	r3, r2
 8007134:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d119      	bne.n	8007180 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	791b      	ldrb	r3, [r3, #4]
 8007166:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007168:	430b      	orrs	r3, r1
 800716a:	431a      	orrs	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	0159      	lsls	r1, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	440b      	add	r3, r1
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	4619      	mov	r1, r3
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <USB_ActivateEndpoint+0x10c>)
 800717c:	4313      	orrs	r3, r2
 800717e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	10008000 	.word	0x10008000

08007194 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d161      	bne.n	8007274 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c6:	d11f      	bne.n	8007208 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007206:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	2101      	movs	r1, #1
 800721a:	fa01 f303 	lsl.w	r3, r1, r3
 800721e:	b29b      	uxth	r3, r3
 8007220:	43db      	mvns	r3, r3
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007228:	4013      	ands	r3, r2
 800722a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	2101      	movs	r1, #1
 800723e:	fa01 f303 	lsl.w	r3, r1, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	43db      	mvns	r3, r3
 8007246:	68f9      	ldr	r1, [r7, #12]
 8007248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800724c:	4013      	ands	r3, r2
 800724e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	0159      	lsls	r1, r3, #5
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	440b      	add	r3, r1
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	4619      	mov	r1, r3
 800726c:	4b35      	ldr	r3, [pc, #212]	; (8007344 <USB_DeactivateEndpoint+0x1b0>)
 800726e:	4013      	ands	r3, r2
 8007270:	600b      	str	r3, [r1, #0]
 8007272:	e060      	b.n	8007336 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800728a:	d11f      	bne.n	80072cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2101      	movs	r1, #1
 80072de:	fa01 f303 	lsl.w	r3, r1, r3
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	43db      	mvns	r3, r3
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ec:	4013      	ands	r3, r2
 80072ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f303 	lsl.w	r3, r1, r3
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	43db      	mvns	r3, r3
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007310:	4013      	ands	r3, r2
 8007312:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	0159      	lsls	r1, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	440b      	add	r3, r1
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	4619      	mov	r1, r3
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <USB_DeactivateEndpoint+0x1b4>)
 8007332:	4013      	ands	r3, r2
 8007334:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	ec337800 	.word	0xec337800
 8007348:	eff37800 	.word	0xeff37800

0800734c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af02      	add	r7, sp, #8
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	785b      	ldrb	r3, [r3, #1]
 8007368:	2b01      	cmp	r3, #1
 800736a:	f040 8163 	bne.w	8007634 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d132      	bne.n	80073dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	0159      	lsls	r1, r3, #5
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	440b      	add	r3, r1
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	4619      	mov	r1, r3
 8007392:	4ba5      	ldr	r3, [pc, #660]	; (8007628 <USB_EPStartXfer+0x2dc>)
 8007394:	4013      	ands	r3, r2
 8007396:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	0159      	lsls	r1, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	4619      	mov	r1, r3
 80073d4:	4b95      	ldr	r3, [pc, #596]	; (800762c <USB_EPStartXfer+0x2e0>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	610b      	str	r3, [r1, #16]
 80073da:	e074      	b.n	80074c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	0159      	lsls	r1, r3, #5
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	440b      	add	r3, r1
 80073f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f6:	4619      	mov	r1, r3
 80073f8:	4b8c      	ldr	r3, [pc, #560]	; (800762c <USB_EPStartXfer+0x2e0>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	0159      	lsls	r1, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	440b      	add	r3, r1
 8007414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007418:	4619      	mov	r1, r3
 800741a:	4b83      	ldr	r3, [pc, #524]	; (8007628 <USB_EPStartXfer+0x2dc>)
 800741c:	4013      	ands	r3, r2
 800741e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6999      	ldr	r1, [r3, #24]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	440b      	add	r3, r1
 8007438:	1e59      	subs	r1, r3, #1
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007442:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007444:	4b7a      	ldr	r3, [pc, #488]	; (8007630 <USB_EPStartXfer+0x2e4>)
 8007446:	400b      	ands	r3, r1
 8007448:	69b9      	ldr	r1, [r7, #24]
 800744a:	0148      	lsls	r0, r1, #5
 800744c:	69f9      	ldr	r1, [r7, #28]
 800744e:	4401      	add	r1, r0
 8007450:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007454:	4313      	orrs	r3, r2
 8007456:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800746e:	69b9      	ldr	r1, [r7, #24]
 8007470:	0148      	lsls	r0, r1, #5
 8007472:	69f9      	ldr	r1, [r7, #28]
 8007474:	4401      	add	r1, r0
 8007476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800747a:	4313      	orrs	r3, r2
 800747c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d11f      	bne.n	80074c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	440a      	add	r2, r1
 800749c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d14b      	bne.n	8007564 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	461a      	mov	r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d128      	bne.n	8007542 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d110      	bne.n	8007522 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e00f      	b.n	8007542 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007540:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	e137      	b.n	80077d4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007582:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	791b      	ldrb	r3, [r3, #4]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d015      	beq.n	80075b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 811f 	beq.w	80077d4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	2101      	movs	r1, #1
 80075a8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ac:	69f9      	ldr	r1, [r7, #28]
 80075ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075b2:	4313      	orrs	r3, r2
 80075b4:	634b      	str	r3, [r1, #52]	; 0x34
 80075b6:	e10d      	b.n	80077d4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d110      	bne.n	80075ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e00f      	b.n	800760a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007608:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6919      	ldr	r1, [r3, #16]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	b298      	uxth	r0, r3
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	4603      	mov	r3, r0
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 faea 	bl	8007bf8 <USB_WritePacket>
 8007624:	e0d6      	b.n	80077d4 <USB_EPStartXfer+0x488>
 8007626:	bf00      	nop
 8007628:	e007ffff 	.word	0xe007ffff
 800762c:	fff80000 	.word	0xfff80000
 8007630:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	0159      	lsls	r1, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	440b      	add	r3, r1
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	4619      	mov	r1, r3
 8007650:	4b63      	ldr	r3, [pc, #396]	; (80077e0 <USB_EPStartXfer+0x494>)
 8007652:	4013      	ands	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	0159      	lsls	r1, r3, #5
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	440b      	add	r3, r1
 800766c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007670:	4619      	mov	r1, r3
 8007672:	4b5c      	ldr	r3, [pc, #368]	; (80077e4 <USB_EPStartXfer+0x498>)
 8007674:	4013      	ands	r3, r2
 8007676:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d123      	bne.n	80076c8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007696:	69b9      	ldr	r1, [r7, #24]
 8007698:	0148      	lsls	r0, r1, #5
 800769a:	69f9      	ldr	r1, [r7, #28]
 800769c:	4401      	add	r1, r0
 800769e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076a2:	4313      	orrs	r3, r2
 80076a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076c4:	6113      	str	r3, [r2, #16]
 80076c6:	e037      	b.n	8007738 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	1e5a      	subs	r2, r3, #1
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	8afa      	ldrh	r2, [r7, #22]
 80076e4:	fb03 f202 	mul.w	r2, r3, r2
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	8afb      	ldrh	r3, [r7, #22]
 80076fc:	04d9      	lsls	r1, r3, #19
 80076fe:	4b3a      	ldr	r3, [pc, #232]	; (80077e8 <USB_EPStartXfer+0x49c>)
 8007700:	400b      	ands	r3, r1
 8007702:	69b9      	ldr	r1, [r7, #24]
 8007704:	0148      	lsls	r0, r1, #5
 8007706:	69f9      	ldr	r1, [r7, #28]
 8007708:	4401      	add	r1, r0
 800770a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800770e:	4313      	orrs	r3, r2
 8007710:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	0148      	lsls	r0, r1, #5
 800772c:	69f9      	ldr	r1, [r7, #28]
 800772e:	4401      	add	r1, r0
 8007730:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007734:	4313      	orrs	r3, r2
 8007736:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10d      	bne.n	800775a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6919      	ldr	r1, [r3, #16]
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	460a      	mov	r2, r1
 8007758:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	791b      	ldrb	r3, [r3, #4]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d128      	bne.n	80077b4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d110      	bne.n	8007794 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e00f      	b.n	80077b4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	fff80000 	.word	0xfff80000
 80077e4:	e007ffff 	.word	0xe007ffff
 80077e8:	1ff80000 	.word	0x1ff80000

080077ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b01      	cmp	r3, #1
 800780a:	f040 80ce 	bne.w	80079aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d132      	bne.n	800787c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	0159      	lsls	r1, r3, #5
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	440b      	add	r3, r1
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	4619      	mov	r1, r3
 8007832:	4b9a      	ldr	r3, [pc, #616]	; (8007a9c <USB_EP0StartXfer+0x2b0>)
 8007834:	4013      	ands	r3, r2
 8007836:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	0159      	lsls	r1, r3, #5
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	440b      	add	r3, r1
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	4619      	mov	r1, r3
 8007874:	4b8a      	ldr	r3, [pc, #552]	; (8007aa0 <USB_EP0StartXfer+0x2b4>)
 8007876:	4013      	ands	r3, r2
 8007878:	610b      	str	r3, [r1, #16]
 800787a:	e04e      	b.n	800791a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	0159      	lsls	r1, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	440b      	add	r3, r1
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	4619      	mov	r1, r3
 8007898:	4b81      	ldr	r3, [pc, #516]	; (8007aa0 <USB_EP0StartXfer+0x2b4>)
 800789a:	4013      	ands	r3, r2
 800789c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	0159      	lsls	r1, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	440b      	add	r3, r1
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	4619      	mov	r1, r3
 80078ba:	4b78      	ldr	r3, [pc, #480]	; (8007a9c <USB_EP0StartXfer+0x2b0>)
 80078bc:	4013      	ands	r3, r2
 80078be:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d903      	bls.n	80078d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800790a:	6939      	ldr	r1, [r7, #16]
 800790c:	0148      	lsls	r0, r1, #5
 800790e:	6979      	ldr	r1, [r7, #20]
 8007910:	4401      	add	r1, r0
 8007912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007916:	4313      	orrs	r3, r2
 8007918:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11e      	bne.n	800795e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007934:	461a      	mov	r2, r3
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	0151      	lsls	r1, r2, #5
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	440a      	add	r2, r1
 8007952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	e097      	b.n	8007a8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	0151      	lsls	r1, r2, #5
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	440a      	add	r2, r1
 8007974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800797c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8083 	beq.w	8007a8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	2101      	movs	r1, #1
 800799a:	fa01 f303 	lsl.w	r3, r1, r3
 800799e:	6979      	ldr	r1, [r7, #20]
 80079a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079a4:	4313      	orrs	r3, r2
 80079a6:	634b      	str	r3, [r1, #52]	; 0x34
 80079a8:	e071      	b.n	8007a8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	0159      	lsls	r1, r3, #5
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	440b      	add	r3, r1
 80079c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c4:	4619      	mov	r1, r3
 80079c6:	4b36      	ldr	r3, [pc, #216]	; (8007aa0 <USB_EP0StartXfer+0x2b4>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	0159      	lsls	r1, r3, #5
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	440b      	add	r3, r1
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	4619      	mov	r1, r3
 80079e8:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <USB_EP0StartXfer+0x2b0>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a3c:	6939      	ldr	r1, [r7, #16]
 8007a3e:	0148      	lsls	r0, r1, #5
 8007a40:	6979      	ldr	r1, [r7, #20]
 8007a42:	4401      	add	r1, r0
 8007a44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d10d      	bne.n	8007a6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6919      	ldr	r1, [r3, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	e007ffff 	.word	0xe007ffff
 8007aa0:	fff80000 	.word	0xfff80000

08007aa4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d14a      	bne.n	8007b58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ada:	f040 8086 	bne.w	8007bea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d902      	bls.n	8007b3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	75fb      	strb	r3, [r7, #23]
          break;
 8007b3a:	e056      	b.n	8007bea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b54:	d0e7      	beq.n	8007b26 <USB_EPStopXfer+0x82>
 8007b56:	e048      	b.n	8007bea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b70:	d13b      	bne.n	8007bea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	7812      	ldrb	r2, [r2, #0]
 8007b86:	0151      	lsls	r1, r2, #5
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	440a      	add	r2, r1
 8007b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d902      	bls.n	8007bd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bce:	e00c      	b.n	8007bea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007be8:	d0e7      	beq.n	8007bba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b089      	sub	sp, #36	; 0x24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4611      	mov	r1, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	460b      	mov	r3, r1
 8007c08:	71fb      	strb	r3, [r7, #7]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d123      	bne.n	8007c66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c1e:	88bb      	ldrh	r3, [r7, #4]
 8007c20:	3303      	adds	r3, #3
 8007c22:	089b      	lsrs	r3, r3, #2
 8007c24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c26:	2300      	movs	r3, #0
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	e018      	b.n	8007c5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	031a      	lsls	r2, r3, #12
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c38:	461a      	mov	r2, r3
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	3301      	adds	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	3301      	adds	r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3e2      	bcc.n	8007c2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3724      	adds	r7, #36	; 0x24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b08b      	sub	sp, #44	; 0x2c
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	089b      	lsrs	r3, r3, #2
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	e014      	b.n	8007cca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	3301      	adds	r3, #1
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	3301      	adds	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d3e6      	bcc.n	8007ca0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007cd2:	8bfb      	ldrh	r3, [r7, #30]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01e      	beq.n	8007d16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f107 0310 	add.w	r3, r7, #16
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	701a      	strb	r2, [r3, #0]
      i++;
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	3301      	adds	r3, #1
 8007d02:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	3301      	adds	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d0a:	8bfb      	ldrh	r3, [r7, #30]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d10:	8bfb      	ldrh	r3, [r7, #30]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1ea      	bne.n	8007cec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	372c      	adds	r7, #44	; 0x2c
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d12c      	bne.n	8007d9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	db12      	blt.n	8007d78 <USB_EPSetStall+0x54>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00f      	beq.n	8007d78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	0151      	lsls	r1, r2, #5
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	440a      	add	r2, r1
 8007d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	e02b      	b.n	8007df2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	db12      	blt.n	8007dd2 <USB_EPSetStall+0xae>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d128      	bne.n	8007e6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	791b      	ldrb	r3, [r3, #4]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d003      	beq.n	8007e4c <USB_EPClearStall+0x4c>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	791b      	ldrb	r3, [r3, #4]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d138      	bne.n	8007ebe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	e027      	b.n	8007ebe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d003      	beq.n	8007e9e <USB_EPClearStall+0x9e>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d10f      	bne.n	8007ebe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ebc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007eee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f00:	68f9      	ldr	r1, [r7, #12]
 8007f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f06:	4313      	orrs	r3, r2
 8007f08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f46:	f023 0302 	bic.w	r3, r3, #2
 8007f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f74:	f023 0303 	bic.w	r3, r3, #3
 8007f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f88:	f043 0302 	orr.w	r3, r3, #2
 8007f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	0c1b      	lsrs	r3, r3, #16
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	4013      	ands	r3, r2
 8008018:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	b29b      	uxth	r3, r3
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	460b      	mov	r3, r1
 8008034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008058:	68bb      	ldr	r3, [r7, #8]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008088:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	fa22 f303 	lsr.w	r3, r2, r3
 8008096:	01db      	lsls	r3, r3, #7
 8008098:	b2db      	uxtb	r3, r3
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4013      	ands	r3, r2
 80080b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080b4:	68bb      	ldr	r3, [r7, #8]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	f003 0301 	and.w	r3, r3, #1
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fa:	4619      	mov	r1, r3
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <USB_ActivateSetup+0x44>)
 80080fe:	4013      	ands	r3, r2
 8008100:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	fffff800 	.word	0xfffff800

08008128 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	460b      	mov	r3, r1
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	333c      	adds	r3, #60	; 0x3c
 800813e:	3304      	adds	r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <USB_EP0_OutStart+0xb8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d90a      	bls.n	8008162 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800815c:	d101      	bne.n	8008162 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e037      	b.n	80081d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800817c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008190:	f043 0318 	orr.w	r3, r3, #24
 8008194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80081a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d10f      	bne.n	80081d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b6:	461a      	mov	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80081ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	4f54300a 	.word	0x4f54300a

080081e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <USB_CoreReset+0x64>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d901      	bls.n	8008202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e01b      	b.n	800823a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	daf2      	bge.n	80081f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f043 0201 	orr.w	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a09      	ldr	r2, [pc, #36]	; (8008248 <USB_CoreReset+0x64>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e006      	b.n	800823a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b01      	cmp	r3, #1
 8008236:	d0f0      	beq.n	800821a <USB_CoreReset+0x36>

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	00030d40 	.word	0x00030d40

0800824c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008250:	4904      	ldr	r1, [pc, #16]	; (8008264 <MX_FATFS_Init+0x18>)
 8008252:	4805      	ldr	r0, [pc, #20]	; (8008268 <MX_FATFS_Init+0x1c>)
 8008254:	f005 f90a 	bl	800d46c <FATFS_LinkDriver>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	4b03      	ldr	r3, [pc, #12]	; (800826c <MX_FATFS_Init+0x20>)
 800825e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008260:	bf00      	nop
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000888 	.word	0x20000888
 8008268:	20000010 	.word	0x20000010
 800826c:	20000884 	.word	0x20000884

08008270 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008274:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008276:	4618      	mov	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f9d3 	bl	8008638 <USER_SPI_initialize>
 8008292:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fab1 	bl	8008810 <USER_SPI_status>
 80082ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80082c8:	7bf8      	ldrb	r0, [r7, #15]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	f000 fab4 	bl	800883c <USER_SPI_read>
 80082d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80082ee:	7bf8      	ldrb	r0, [r7, #15]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	f000 fb07 	bl	8008908 <USER_SPI_write>
 80082fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	603a      	str	r2, [r7, #0]
 800830e:	71fb      	strb	r3, [r7, #7]
 8008310:	460b      	mov	r3, r1
 8008312:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008314:	79b9      	ldrb	r1, [r7, #6]
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fb70 	bl	8008a00 <USER_SPI_ioctl>
 8008320:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008334:	f7f9 fcd2 	bl	8001cdc <HAL_GetTick>
 8008338:	4603      	mov	r3, r0
 800833a:	4a04      	ldr	r2, [pc, #16]	; (800834c <SPI_Timer_On+0x20>)
 800833c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800833e:	4a04      	ldr	r2, [pc, #16]	; (8008350 <SPI_Timer_On+0x24>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6013      	str	r3, [r2, #0]
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000890 	.word	0x20000890
 8008350:	20000894 	.word	0x20000894

08008354 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008358:	f7f9 fcc0 	bl	8001cdc <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <SPI_Timer_Status+0x24>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	1ad2      	subs	r2, r2, r3
 8008364:	4b05      	ldr	r3, [pc, #20]	; (800837c <SPI_Timer_Status+0x28>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	bf34      	ite	cc
 800836c:	2301      	movcc	r3, #1
 800836e:	2300      	movcs	r3, #0
 8008370:	b2db      	uxtb	r3, r3
}
 8008372:	4618      	mov	r0, r3
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000890 	.word	0x20000890
 800837c:	20000894 	.word	0x20000894

08008380 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af02      	add	r7, sp, #8
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800838a:	f107 020f 	add.w	r2, r7, #15
 800838e:	1df9      	adds	r1, r7, #7
 8008390:	2332      	movs	r3, #50	; 0x32
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2301      	movs	r3, #1
 8008396:	4804      	ldr	r0, [pc, #16]	; (80083a8 <xchg_spi+0x28>)
 8008398:	f7fd fa63 	bl	8005862 <HAL_SPI_TransmitReceive>
    return rxDat;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000340 	.word	0x20000340

080083ac <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e00a      	b.n	80083d2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	18d4      	adds	r4, r2, r3
 80083c2:	20ff      	movs	r0, #255	; 0xff
 80083c4:	f7ff ffdc 	bl	8008380 <xchg_spi>
 80083c8:	4603      	mov	r3, r0
 80083ca:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d3f0      	bcc.n	80083bc <rcvr_spi_multi+0x10>
	}
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd90      	pop	{r4, r7, pc}

080083e4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f04f 33ff 	mov.w	r3, #4294967295
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4803      	ldr	r0, [pc, #12]	; (8008408 <xmit_spi_multi+0x24>)
 80083fa:	f7fc ff94 	bl	8005326 <HAL_SPI_Transmit>
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000340 	.word	0x20000340

0800840c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008414:	f7f9 fc62 	bl	8001cdc <HAL_GetTick>
 8008418:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800841e:	20ff      	movs	r0, #255	; 0xff
 8008420:	f7ff ffae 	bl	8008380 <xchg_spi>
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	2bff      	cmp	r3, #255	; 0xff
 800842c:	d007      	beq.n	800843e <wait_ready+0x32>
 800842e:	f7f9 fc55 	bl	8001cdc <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	429a      	cmp	r2, r3
 800843c:	d8ef      	bhi.n	800841e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	2bff      	cmp	r3, #255	; 0xff
 8008442:	bf0c      	ite	eq
 8008444:	2301      	moveq	r3, #1
 8008446:	2300      	movne	r3, #0
 8008448:	b2db      	uxtb	r3, r3
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008458:	2201      	movs	r2, #1
 800845a:	2180      	movs	r1, #128	; 0x80
 800845c:	4803      	ldr	r0, [pc, #12]	; (800846c <despiselect+0x18>)
 800845e:	f7fa f9af 	bl	80027c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008462:	20ff      	movs	r0, #255	; 0xff
 8008464:	f7ff ff8c 	bl	8008380 <xchg_spi>

}
 8008468:	bf00      	nop
 800846a:	bd80      	pop	{r7, pc}
 800846c:	40020400 	.word	0x40020400

08008470 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008474:	2200      	movs	r2, #0
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	4809      	ldr	r0, [pc, #36]	; (80084a0 <spiselect+0x30>)
 800847a:	f7fa f9a1 	bl	80027c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800847e:	20ff      	movs	r0, #255	; 0xff
 8008480:	f7ff ff7e 	bl	8008380 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008488:	f7ff ffc0 	bl	800840c <wait_ready>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <spiselect+0x26>
 8008492:	2301      	movs	r3, #1
 8008494:	e002      	b.n	800849c <spiselect+0x2c>

	despiselect();
 8008496:	f7ff ffdd 	bl	8008454 <despiselect>
	return 0;	/* Timeout */
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40020400 	.word	0x40020400

080084a4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80084ae:	20c8      	movs	r0, #200	; 0xc8
 80084b0:	f7ff ff3c 	bl	800832c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80084b4:	20ff      	movs	r0, #255	; 0xff
 80084b6:	f7ff ff63 	bl	8008380 <xchg_spi>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2bff      	cmp	r3, #255	; 0xff
 80084c2:	d104      	bne.n	80084ce <rcvr_datablock+0x2a>
 80084c4:	f7ff ff46 	bl	8008354 <SPI_Timer_Status>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1f2      	bne.n	80084b4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2bfe      	cmp	r3, #254	; 0xfe
 80084d2:	d001      	beq.n	80084d8 <rcvr_datablock+0x34>
 80084d4:	2300      	movs	r3, #0
 80084d6:	e00a      	b.n	80084ee <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff ff66 	bl	80083ac <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80084e0:	20ff      	movs	r0, #255	; 0xff
 80084e2:	f7ff ff4d 	bl	8008380 <xchg_spi>
 80084e6:	20ff      	movs	r0, #255	; 0xff
 80084e8:	f7ff ff4a 	bl	8008380 <xchg_spi>

	return 1;						/* Function succeeded */
 80084ec:	2301      	movs	r3, #1
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008506:	f7ff ff81 	bl	800840c <wait_ready>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <xmit_datablock+0x1e>
 8008510:	2300      	movs	r3, #0
 8008512:	e01e      	b.n	8008552 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff ff32 	bl	8008380 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	2bfd      	cmp	r3, #253	; 0xfd
 8008520:	d016      	beq.n	8008550 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff ff5c 	bl	80083e4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800852c:	20ff      	movs	r0, #255	; 0xff
 800852e:	f7ff ff27 	bl	8008380 <xchg_spi>
 8008532:	20ff      	movs	r0, #255	; 0xff
 8008534:	f7ff ff24 	bl	8008380 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008538:	20ff      	movs	r0, #255	; 0xff
 800853a:	f7ff ff21 	bl	8008380 <xchg_spi>
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	f003 031f 	and.w	r3, r3, #31
 8008548:	2b05      	cmp	r3, #5
 800854a:	d001      	beq.n	8008550 <xmit_datablock+0x5a>
 800854c:	2300      	movs	r3, #0
 800854e:	e000      	b.n	8008552 <xmit_datablock+0x5c>
	}
	return 1;
 8008550:	2301      	movs	r3, #1
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	4603      	mov	r3, r0
 8008562:	6039      	str	r1, [r7, #0]
 8008564:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800856a:	2b00      	cmp	r3, #0
 800856c:	da0e      	bge.n	800858c <send_cmd+0x32>
		cmd &= 0x7F;
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008574:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008576:	2100      	movs	r1, #0
 8008578:	2037      	movs	r0, #55	; 0x37
 800857a:	f7ff ffee 	bl	800855a <send_cmd>
 800857e:	4603      	mov	r3, r0
 8008580:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d901      	bls.n	800858c <send_cmd+0x32>
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	e051      	b.n	8008630 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b0c      	cmp	r3, #12
 8008590:	d008      	beq.n	80085a4 <send_cmd+0x4a>
		despiselect();
 8008592:	f7ff ff5f 	bl	8008454 <despiselect>
		if (!spiselect()) return 0xFF;
 8008596:	f7ff ff6b 	bl	8008470 <spiselect>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <send_cmd+0x4a>
 80085a0:	23ff      	movs	r3, #255	; 0xff
 80085a2:	e045      	b.n	8008630 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff fee7 	bl	8008380 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	0e1b      	lsrs	r3, r3, #24
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff fee1 	bl	8008380 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fedb 	bl	8008380 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	0a1b      	lsrs	r3, r3, #8
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff fed5 	bl	8008380 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fed0 	bl	8008380 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80085e0:	2301      	movs	r3, #1
 80085e2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <send_cmd+0x94>
 80085ea:	2395      	movs	r3, #149	; 0x95
 80085ec:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d101      	bne.n	80085f8 <send_cmd+0x9e>
 80085f4:	2387      	movs	r3, #135	; 0x87
 80085f6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fec0 	bl	8008380 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b0c      	cmp	r3, #12
 8008604:	d102      	bne.n	800860c <send_cmd+0xb2>
 8008606:	20ff      	movs	r0, #255	; 0xff
 8008608:	f7ff feba 	bl	8008380 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800860c:	230a      	movs	r3, #10
 800860e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008610:	20ff      	movs	r0, #255	; 0xff
 8008612:	f7ff feb5 	bl	8008380 <xchg_spi>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800861a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	da05      	bge.n	800862e <send_cmd+0xd4>
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	3b01      	subs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <send_cmd+0xb6>

	return res;							/* Return received response */
 800862e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <USER_SPI_initialize+0x14>
 8008648:	2301      	movs	r3, #1
 800864a:	e0d6      	b.n	80087fa <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800864c:	4b6d      	ldr	r3, [pc, #436]	; (8008804 <USER_SPI_initialize+0x1cc>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <USER_SPI_initialize+0x2a>
 800865a:	4b6a      	ldr	r3, [pc, #424]	; (8008804 <USER_SPI_initialize+0x1cc>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e0cb      	b.n	80087fa <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008662:	4b69      	ldr	r3, [pc, #420]	; (8008808 <USER_SPI_initialize+0x1d0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800866c:	4b66      	ldr	r3, [pc, #408]	; (8008808 <USER_SPI_initialize+0x1d0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8008674:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008676:	230a      	movs	r3, #10
 8008678:	73fb      	strb	r3, [r7, #15]
 800867a:	e005      	b.n	8008688 <USER_SPI_initialize+0x50>
 800867c:	20ff      	movs	r0, #255	; 0xff
 800867e:	f7ff fe7f 	bl	8008380 <xchg_spi>
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	3b01      	subs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f6      	bne.n	800867c <USER_SPI_initialize+0x44>

	ty = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008692:	2100      	movs	r1, #0
 8008694:	2000      	movs	r0, #0
 8008696:	f7ff ff60 	bl	800855a <send_cmd>
 800869a:	4603      	mov	r3, r0
 800869c:	2b01      	cmp	r3, #1
 800869e:	f040 808b 	bne.w	80087b8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80086a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086a6:	f7ff fe41 	bl	800832c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80086aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086ae:	2008      	movs	r0, #8
 80086b0:	f7ff ff53 	bl	800855a <send_cmd>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d151      	bne.n	800875e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
 80086be:	e00d      	b.n	80086dc <USER_SPI_initialize+0xa4>
 80086c0:	7bfc      	ldrb	r4, [r7, #15]
 80086c2:	20ff      	movs	r0, #255	; 0xff
 80086c4:	f7ff fe5c 	bl	8008380 <xchg_spi>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	f104 0310 	add.w	r3, r4, #16
 80086d0:	443b      	add	r3, r7
 80086d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	3301      	adds	r3, #1
 80086da:	73fb      	strb	r3, [r7, #15]
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d9ee      	bls.n	80086c0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80086e2:	7abb      	ldrb	r3, [r7, #10]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d167      	bne.n	80087b8 <USER_SPI_initialize+0x180>
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	2baa      	cmp	r3, #170	; 0xaa
 80086ec:	d164      	bne.n	80087b8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80086ee:	bf00      	nop
 80086f0:	f7ff fe30 	bl	8008354 <SPI_Timer_Status>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <USER_SPI_initialize+0xd2>
 80086fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80086fe:	20a9      	movs	r0, #169	; 0xa9
 8008700:	f7ff ff2b 	bl	800855a <send_cmd>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f2      	bne.n	80086f0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800870a:	f7ff fe23 	bl	8008354 <SPI_Timer_Status>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d051      	beq.n	80087b8 <USER_SPI_initialize+0x180>
 8008714:	2100      	movs	r1, #0
 8008716:	203a      	movs	r0, #58	; 0x3a
 8008718:	f7ff ff1f 	bl	800855a <send_cmd>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d14a      	bne.n	80087b8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e00d      	b.n	8008744 <USER_SPI_initialize+0x10c>
 8008728:	7bfc      	ldrb	r4, [r7, #15]
 800872a:	20ff      	movs	r0, #255	; 0xff
 800872c:	f7ff fe28 	bl	8008380 <xchg_spi>
 8008730:	4603      	mov	r3, r0
 8008732:	461a      	mov	r2, r3
 8008734:	f104 0310 	add.w	r3, r4, #16
 8008738:	443b      	add	r3, r7
 800873a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	3301      	adds	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	2b03      	cmp	r3, #3
 8008748:	d9ee      	bls.n	8008728 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800874a:	7a3b      	ldrb	r3, [r7, #8]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <USER_SPI_initialize+0x120>
 8008754:	230c      	movs	r3, #12
 8008756:	e000      	b.n	800875a <USER_SPI_initialize+0x122>
 8008758:	2304      	movs	r3, #4
 800875a:	737b      	strb	r3, [r7, #13]
 800875c:	e02c      	b.n	80087b8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800875e:	2100      	movs	r1, #0
 8008760:	20a9      	movs	r0, #169	; 0xa9
 8008762:	f7ff fefa 	bl	800855a <send_cmd>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d804      	bhi.n	8008776 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800876c:	2302      	movs	r3, #2
 800876e:	737b      	strb	r3, [r7, #13]
 8008770:	23a9      	movs	r3, #169	; 0xa9
 8008772:	73bb      	strb	r3, [r7, #14]
 8008774:	e003      	b.n	800877e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008776:	2301      	movs	r3, #1
 8008778:	737b      	strb	r3, [r7, #13]
 800877a:	2301      	movs	r3, #1
 800877c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800877e:	bf00      	nop
 8008780:	f7ff fde8 	bl	8008354 <SPI_Timer_Status>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <USER_SPI_initialize+0x162>
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fee3 	bl	800855a <send_cmd>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1f2      	bne.n	8008780 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800879a:	f7ff fddb 	bl	8008354 <SPI_Timer_Status>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <USER_SPI_initialize+0x17c>
 80087a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087a8:	2010      	movs	r0, #16
 80087aa:	f7ff fed6 	bl	800855a <send_cmd>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <USER_SPI_initialize+0x180>
				ty = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80087b8:	4a14      	ldr	r2, [pc, #80]	; (800880c <USER_SPI_initialize+0x1d4>)
 80087ba:	7b7b      	ldrb	r3, [r7, #13]
 80087bc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80087be:	f7ff fe49 	bl	8008454 <despiselect>

	if (ty) {			/* OK */
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d012      	beq.n	80087ee <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <USER_SPI_initialize+0x1d0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <USER_SPI_initialize+0x1d0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80087da:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <USER_SPI_initialize+0x1cc>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	4b06      	ldr	r3, [pc, #24]	; (8008804 <USER_SPI_initialize+0x1cc>)
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e002      	b.n	80087f4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <USER_SPI_initialize+0x1cc>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80087f4:	4b03      	ldr	r3, [pc, #12]	; (8008804 <USER_SPI_initialize+0x1cc>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	b2db      	uxtb	r3, r3
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd90      	pop	{r4, r7, pc}
 8008802:	bf00      	nop
 8008804:	20000024 	.word	0x20000024
 8008808:	20000340 	.word	0x20000340
 800880c:	2000088c 	.word	0x2000088c

08008810 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <USER_SPI_status+0x14>
 8008820:	2301      	movs	r3, #1
 8008822:	e002      	b.n	800882a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <USER_SPI_status+0x28>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	b2db      	uxtb	r3, r3
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20000024 	.word	0x20000024

0800883c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <USER_SPI_read+0x1c>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <USER_SPI_read+0x20>
 8008858:	2304      	movs	r3, #4
 800885a:	e04d      	b.n	80088f8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800885c:	4b28      	ldr	r3, [pc, #160]	; (8008900 <USER_SPI_read+0xc4>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <USER_SPI_read+0x32>
 800886a:	2303      	movs	r3, #3
 800886c:	e044      	b.n	80088f8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800886e:	4b25      	ldr	r3, [pc, #148]	; (8008904 <USER_SPI_read+0xc8>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <USER_SPI_read+0x44>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	025b      	lsls	r3, r3, #9
 800887e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d111      	bne.n	80088aa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	2011      	movs	r0, #17
 800888a:	f7ff fe66 	bl	800855a <send_cmd>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d129      	bne.n	80088e8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f7ff fe03 	bl	80084a4 <rcvr_datablock>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d021      	beq.n	80088e8 <USER_SPI_read+0xac>
			count = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	e01e      	b.n	80088e8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	2012      	movs	r0, #18
 80088ae:	f7ff fe54 	bl	800855a <send_cmd>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d117      	bne.n	80088e8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80088b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088bc:	68b8      	ldr	r0, [r7, #8]
 80088be:	f7ff fdf1 	bl	80084a4 <rcvr_datablock>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <USER_SPI_read+0xa2>
				buff += 512;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80088ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1ed      	bne.n	80088b8 <USER_SPI_read+0x7c>
 80088dc:	e000      	b.n	80088e0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80088de:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80088e0:	2100      	movs	r1, #0
 80088e2:	200c      	movs	r0, #12
 80088e4:	f7ff fe39 	bl	800855a <send_cmd>
		}
	}
	despiselect();
 80088e8:	f7ff fdb4 	bl	8008454 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf14      	ite	ne
 80088f2:	2301      	movne	r3, #1
 80088f4:	2300      	moveq	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20000024 	.word	0x20000024
 8008904:	2000088c 	.word	0x2000088c

08008908 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <USER_SPI_write+0x1c>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <USER_SPI_write+0x20>
 8008924:	2304      	movs	r3, #4
 8008926:	e063      	b.n	80089f0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008928:	4b33      	ldr	r3, [pc, #204]	; (80089f8 <USER_SPI_write+0xf0>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <USER_SPI_write+0x32>
 8008936:	2303      	movs	r3, #3
 8008938:	e05a      	b.n	80089f0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800893a:	4b2f      	ldr	r3, [pc, #188]	; (80089f8 <USER_SPI_write+0xf0>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <USER_SPI_write+0x44>
 8008948:	2302      	movs	r3, #2
 800894a:	e051      	b.n	80089f0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800894c:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <USER_SPI_write+0xf4>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d102      	bne.n	800895e <USER_SPI_write+0x56>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	025b      	lsls	r3, r3, #9
 800895c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d110      	bne.n	8008986 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	2018      	movs	r0, #24
 8008968:	f7ff fdf7 	bl	800855a <send_cmd>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d136      	bne.n	80089e0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008972:	21fe      	movs	r1, #254	; 0xfe
 8008974:	68b8      	ldr	r0, [r7, #8]
 8008976:	f7ff fdbe 	bl	80084f6 <xmit_datablock>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d02f      	beq.n	80089e0 <USER_SPI_write+0xd8>
			count = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	e02c      	b.n	80089e0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008986:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <USER_SPI_write+0xf4>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	f003 0306 	and.w	r3, r3, #6
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <USER_SPI_write+0x92>
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	2097      	movs	r0, #151	; 0x97
 8008996:	f7ff fde0 	bl	800855a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	2019      	movs	r0, #25
 800899e:	f7ff fddc 	bl	800855a <send_cmd>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d11b      	bne.n	80089e0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80089a8:	21fc      	movs	r1, #252	; 0xfc
 80089aa:	68b8      	ldr	r0, [r7, #8]
 80089ac:	f7ff fda3 	bl	80084f6 <xmit_datablock>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <USER_SPI_write+0xc4>
				buff += 512;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80089bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1ee      	bne.n	80089a8 <USER_SPI_write+0xa0>
 80089ca:	e000      	b.n	80089ce <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80089cc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80089ce:	21fd      	movs	r1, #253	; 0xfd
 80089d0:	2000      	movs	r0, #0
 80089d2:	f7ff fd90 	bl	80084f6 <xmit_datablock>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <USER_SPI_write+0xd8>
 80089dc:	2301      	movs	r3, #1
 80089de:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80089e0:	f7ff fd38 	bl	8008454 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000024 	.word	0x20000024
 80089fc:	2000088c 	.word	0x2000088c

08008a00 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08c      	sub	sp, #48	; 0x30
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	603a      	str	r2, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <USER_SPI_ioctl+0x1a>
 8008a16:	2304      	movs	r3, #4
 8008a18:	e15a      	b.n	8008cd0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008a1a:	4baf      	ldr	r3, [pc, #700]	; (8008cd8 <USER_SPI_ioctl+0x2d8>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <USER_SPI_ioctl+0x2c>
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e151      	b.n	8008cd0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8008a32:	79bb      	ldrb	r3, [r7, #6]
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	f200 8136 	bhi.w	8008ca6 <USER_SPI_ioctl+0x2a6>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <USER_SPI_ioctl+0x40>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008a55 	.word	0x08008a55
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008ca7 	.word	0x08008ca7
 8008a4c:	08008b15 	.word	0x08008b15
 8008a50:	08008c0b 	.word	0x08008c0b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008a54:	f7ff fd0c 	bl	8008470 <spiselect>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8127 	beq.w	8008cae <USER_SPI_ioctl+0x2ae>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008a66:	e122      	b.n	8008cae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2009      	movs	r0, #9
 8008a6c:	f7ff fd75 	bl	800855a <send_cmd>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 811d 	bne.w	8008cb2 <USER_SPI_ioctl+0x2b2>
 8008a78:	f107 030c 	add.w	r3, r7, #12
 8008a7c:	2110      	movs	r1, #16
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fd10 	bl	80084a4 <rcvr_datablock>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8113 	beq.w	8008cb2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008a8c:	7b3b      	ldrb	r3, [r7, #12]
 8008a8e:	099b      	lsrs	r3, r3, #6
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d111      	bne.n	8008aba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008a96:	7d7b      	ldrb	r3, [r7, #21]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	7d3b      	ldrb	r3, [r7, #20]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	4413      	add	r3, r2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	7cfb      	ldrb	r3, [r7, #19]
 8008aa4:	041b      	lsls	r3, r3, #16
 8008aa6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8008aaa:	4413      	add	r3, r2
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	029a      	lsls	r2, r3, #10
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e028      	b.n	8008b0c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008aba:	7c7b      	ldrb	r3, [r7, #17]
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	7dbb      	ldrb	r3, [r7, #22]
 8008ac4:	09db      	lsrs	r3, r3, #7
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	4413      	add	r3, r2
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	7d7b      	ldrb	r3, [r7, #21]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0306 	and.w	r3, r3, #6
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	3302      	adds	r3, #2
 8008ade:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008ae2:	7d3b      	ldrb	r3, [r7, #20]
 8008ae4:	099b      	lsrs	r3, r3, #6
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	7cfb      	ldrb	r3, [r7, #19]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	441a      	add	r2, r3
 8008af0:	7cbb      	ldrb	r3, [r7, #18]
 8008af2:	029b      	lsls	r3, r3, #10
 8008af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008af8:	4413      	add	r3, r2
 8008afa:	3301      	adds	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008afe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b02:	3b09      	subs	r3, #9
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	409a      	lsls	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008b12:	e0ce      	b.n	8008cb2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008b14:	4b71      	ldr	r3, [pc, #452]	; (8008cdc <USER_SPI_ioctl+0x2dc>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d031      	beq.n	8008b84 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008b20:	2100      	movs	r1, #0
 8008b22:	208d      	movs	r0, #141	; 0x8d
 8008b24:	f7ff fd19 	bl	800855a <send_cmd>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 80c3 	bne.w	8008cb6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008b30:	20ff      	movs	r0, #255	; 0xff
 8008b32:	f7ff fc25 	bl	8008380 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008b36:	f107 030c 	add.w	r3, r7, #12
 8008b3a:	2110      	movs	r1, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fcb1 	bl	80084a4 <rcvr_datablock>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 80b6 	beq.w	8008cb6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008b4a:	2330      	movs	r3, #48	; 0x30
 8008b4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008b50:	e007      	b.n	8008b62 <USER_SPI_ioctl+0x162>
 8008b52:	20ff      	movs	r0, #255	; 0xff
 8008b54:	f7ff fc14 	bl	8008380 <xchg_spi>
 8008b58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008b62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f3      	bne.n	8008b52 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008b6a:	7dbb      	ldrb	r3, [r7, #22]
 8008b6c:	091b      	lsrs	r3, r3, #4
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	2310      	movs	r3, #16
 8008b74:	fa03 f202 	lsl.w	r2, r3, r2
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008b82:	e098      	b.n	8008cb6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008b84:	2100      	movs	r1, #0
 8008b86:	2009      	movs	r0, #9
 8008b88:	f7ff fce7 	bl	800855a <send_cmd>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 8091 	bne.w	8008cb6 <USER_SPI_ioctl+0x2b6>
 8008b94:	f107 030c 	add.w	r3, r7, #12
 8008b98:	2110      	movs	r1, #16
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fc82 	bl	80084a4 <rcvr_datablock>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8087 	beq.w	8008cb6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008ba8:	4b4c      	ldr	r3, [pc, #304]	; (8008cdc <USER_SPI_ioctl+0x2dc>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d012      	beq.n	8008bda <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008bb4:	7dbb      	ldrb	r3, [r7, #22]
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008bbc:	7dfa      	ldrb	r2, [r7, #23]
 8008bbe:	09d2      	lsrs	r2, r2, #7
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	7e7b      	ldrb	r3, [r7, #25]
 8008bc8:	099b      	lsrs	r3, r3, #6
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e013      	b.n	8008c02 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008bda:	7dbb      	ldrb	r3, [r7, #22]
 8008bdc:	109b      	asrs	r3, r3, #2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f003 031f 	and.w	r3, r3, #31
 8008be4:	3301      	adds	r3, #1
 8008be6:	7dfa      	ldrb	r2, [r7, #23]
 8008be8:	00d2      	lsls	r2, r2, #3
 8008bea:	f002 0218 	and.w	r2, r2, #24
 8008bee:	7df9      	ldrb	r1, [r7, #23]
 8008bf0:	0949      	lsrs	r1, r1, #5
 8008bf2:	b2c9      	uxtb	r1, r1
 8008bf4:	440a      	add	r2, r1
 8008bf6:	3201      	adds	r2, #1
 8008bf8:	fb02 f303 	mul.w	r3, r2, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008c08:	e055      	b.n	8008cb6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008c0a:	4b34      	ldr	r3, [pc, #208]	; (8008cdc <USER_SPI_ioctl+0x2dc>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 0306 	and.w	r3, r3, #6
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d051      	beq.n	8008cba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008c16:	f107 020c 	add.w	r2, r7, #12
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	210b      	movs	r1, #11
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff feee 	bl	8008a00 <USER_SPI_ioctl>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d149      	bne.n	8008cbe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008c2a:	7b3b      	ldrb	r3, [r7, #12]
 8008c2c:	099b      	lsrs	r3, r3, #6
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <USER_SPI_ioctl+0x23e>
 8008c34:	7dbb      	ldrb	r3, [r7, #22]
 8008c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d041      	beq.n	8008cc2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	623b      	str	r3, [r7, #32]
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008c4e:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <USER_SPI_ioctl+0x2dc>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	025b      	lsls	r3, r3, #9
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	025b      	lsls	r3, r3, #9
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c68:	2020      	movs	r0, #32
 8008c6a:	f7ff fc76 	bl	800855a <send_cmd>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d128      	bne.n	8008cc6 <USER_SPI_ioctl+0x2c6>
 8008c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c76:	2021      	movs	r0, #33	; 0x21
 8008c78:	f7ff fc6f 	bl	800855a <send_cmd>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d121      	bne.n	8008cc6 <USER_SPI_ioctl+0x2c6>
 8008c82:	2100      	movs	r1, #0
 8008c84:	2026      	movs	r0, #38	; 0x26
 8008c86:	f7ff fc68 	bl	800855a <send_cmd>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d11a      	bne.n	8008cc6 <USER_SPI_ioctl+0x2c6>
 8008c90:	f247 5030 	movw	r0, #30000	; 0x7530
 8008c94:	f7ff fbba 	bl	800840c <wait_ready>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d013      	beq.n	8008cc6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008ca4:	e00f      	b.n	8008cc6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008ca6:	2304      	movs	r3, #4
 8008ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cac:	e00c      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8008cae:	bf00      	nop
 8008cb0:	e00a      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8008cb2:	bf00      	nop
 8008cb4:	e008      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8008cb6:	bf00      	nop
 8008cb8:	e006      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008cba:	bf00      	nop
 8008cbc:	e004      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008cbe:	bf00      	nop
 8008cc0:	e002      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008cc2:	bf00      	nop
 8008cc4:	e000      	b.n	8008cc8 <USER_SPI_ioctl+0x2c8>
		break;
 8008cc6:	bf00      	nop
	}

	despiselect();
 8008cc8:	f7ff fbc4 	bl	8008454 <despiselect>

	return res;
 8008ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3730      	adds	r7, #48	; 0x30
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	20000024 	.word	0x20000024
 8008cdc:	2000088c 	.word	0x2000088c

08008ce0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008cf0:	f005 f97e 	bl	800dff0 <malloc>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	32b0      	adds	r2, #176	; 0xb0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e0d4      	b.n	8008ebc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d12:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d16:	2100      	movs	r1, #0
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f005 fa89 	bl	800e230 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	32b0      	adds	r2, #176	; 0xb0
 8008d28:	68f9      	ldr	r1, [r7, #12]
 8008d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	32b0      	adds	r2, #176	; 0xb0
 8008d38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7c1b      	ldrb	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d138      	bne.n	8008dbc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d4a:	4b5e      	ldr	r3, [pc, #376]	; (8008ec4 <USBD_CDC_Init+0x1e4>)
 8008d4c:	7819      	ldrb	r1, [r3, #0]
 8008d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d52:	2202      	movs	r2, #2
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f004 ffa8 	bl	800dcaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d5a:	4b5a      	ldr	r3, [pc, #360]	; (8008ec4 <USBD_CDC_Init+0x1e4>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f003 020f 	and.w	r2, r3, #15
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3324      	adds	r3, #36	; 0x24
 8008d70:	2201      	movs	r2, #1
 8008d72:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d74:	4b54      	ldr	r3, [pc, #336]	; (8008ec8 <USBD_CDC_Init+0x1e8>)
 8008d76:	7819      	ldrb	r1, [r3, #0]
 8008d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f004 ff93 	bl	800dcaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d84:	4b50      	ldr	r3, [pc, #320]	; (8008ec8 <USBD_CDC_Init+0x1e8>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008da0:	4b4a      	ldr	r3, [pc, #296]	; (8008ecc <USBD_CDC_Init+0x1ec>)
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	f003 020f 	and.w	r2, r3, #15
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	3326      	adds	r3, #38	; 0x26
 8008db6:	2210      	movs	r2, #16
 8008db8:	801a      	strh	r2, [r3, #0]
 8008dba:	e035      	b.n	8008e28 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008dbc:	4b41      	ldr	r3, [pc, #260]	; (8008ec4 <USBD_CDC_Init+0x1e4>)
 8008dbe:	7819      	ldrb	r1, [r3, #0]
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f004 ff70 	bl	800dcaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008dca:	4b3e      	ldr	r3, [pc, #248]	; (8008ec4 <USBD_CDC_Init+0x1e4>)
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	f003 020f 	and.w	r2, r3, #15
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	3324      	adds	r3, #36	; 0x24
 8008de0:	2201      	movs	r2, #1
 8008de2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008de4:	4b38      	ldr	r3, [pc, #224]	; (8008ec8 <USBD_CDC_Init+0x1e8>)
 8008de6:	7819      	ldrb	r1, [r3, #0]
 8008de8:	2340      	movs	r3, #64	; 0x40
 8008dea:	2202      	movs	r2, #2
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f004 ff5c 	bl	800dcaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008df2:	4b35      	ldr	r3, [pc, #212]	; (8008ec8 <USBD_CDC_Init+0x1e8>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	f003 020f 	and.w	r2, r3, #15
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ecc <USBD_CDC_Init+0x1ec>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 020f 	and.w	r2, r3, #15
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	3326      	adds	r3, #38	; 0x26
 8008e24:	2210      	movs	r2, #16
 8008e26:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e28:	4b28      	ldr	r3, [pc, #160]	; (8008ecc <USBD_CDC_Init+0x1ec>)
 8008e2a:	7819      	ldrb	r1, [r3, #0]
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	2203      	movs	r2, #3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f004 ff3a 	bl	800dcaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008e36:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <USBD_CDC_Init+0x1ec>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 020f 	and.w	r2, r3, #15
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	3324      	adds	r3, #36	; 0x24
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	33b0      	adds	r3, #176	; 0xb0
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008e86:	2302      	movs	r3, #2
 8008e88:	e018      	b.n	8008ebc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7c1b      	ldrb	r3, [r3, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <USBD_CDC_Init+0x1e8>)
 8008e94:	7819      	ldrb	r1, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f004 fff1 	bl	800de88 <USBD_LL_PrepareReceive>
 8008ea6:	e008      	b.n	8008eba <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <USBD_CDC_Init+0x1e8>)
 8008eaa:	7819      	ldrb	r1, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eb2:	2340      	movs	r3, #64	; 0x40
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f004 ffe7 	bl	800de88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	200000af 	.word	0x200000af
 8008ec8:	200000b0 	.word	0x200000b0
 8008ecc:	200000b1 	.word	0x200000b1

08008ed0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008edc:	4b3a      	ldr	r3, [pc, #232]	; (8008fc8 <USBD_CDC_DeInit+0xf8>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f004 ff07 	bl	800dcf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ee8:	4b37      	ldr	r3, [pc, #220]	; (8008fc8 <USBD_CDC_DeInit+0xf8>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 020f 	and.w	r2, r3, #15
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	3324      	adds	r3, #36	; 0x24
 8008efe:	2200      	movs	r2, #0
 8008f00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008f02:	4b32      	ldr	r3, [pc, #200]	; (8008fcc <USBD_CDC_DeInit+0xfc>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f004 fef4 	bl	800dcf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f0e:	4b2f      	ldr	r3, [pc, #188]	; (8008fcc <USBD_CDC_DeInit+0xfc>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	f003 020f 	and.w	r2, r3, #15
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	440b      	add	r3, r1
 8008f22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f26:	2200      	movs	r2, #0
 8008f28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f2a:	4b29      	ldr	r3, [pc, #164]	; (8008fd0 <USBD_CDC_DeInit+0x100>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f004 fee0 	bl	800dcf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008f36:	4b26      	ldr	r3, [pc, #152]	; (8008fd0 <USBD_CDC_DeInit+0x100>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	f003 020f 	and.w	r2, r3, #15
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	3324      	adds	r3, #36	; 0x24
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008f50:	4b1f      	ldr	r3, [pc, #124]	; (8008fd0 <USBD_CDC_DeInit+0x100>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	3326      	adds	r3, #38	; 0x26
 8008f66:	2200      	movs	r2, #0
 8008f68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	32b0      	adds	r2, #176	; 0xb0
 8008f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d01f      	beq.n	8008fbc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	33b0      	adds	r3, #176	; 0xb0
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	32b0      	adds	r2, #176	; 0xb0
 8008f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f005 f82e 	bl	800e000 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32b0      	adds	r2, #176	; 0xb0
 8008fae:	2100      	movs	r1, #0
 8008fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200000af 	.word	0x200000af
 8008fcc:	200000b0 	.word	0x200000b0
 8008fd0:	200000b1 	.word	0x200000b1

08008fd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	32b0      	adds	r2, #176	; 0xb0
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009000:	2303      	movs	r3, #3
 8009002:	e0bf      	b.n	8009184 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800900c:	2b00      	cmp	r3, #0
 800900e:	d050      	beq.n	80090b2 <USBD_CDC_Setup+0xde>
 8009010:	2b20      	cmp	r3, #32
 8009012:	f040 80af 	bne.w	8009174 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88db      	ldrh	r3, [r3, #6]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d03a      	beq.n	8009094 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	b25b      	sxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	da1b      	bge.n	8009060 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	33b0      	adds	r3, #176	; 0xb0
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800903e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	88d2      	ldrh	r2, [r2, #6]
 8009044:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	88db      	ldrh	r3, [r3, #6]
 800904a:	2b07      	cmp	r3, #7
 800904c:	bf28      	it	cs
 800904e:	2307      	movcs	r3, #7
 8009050:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	89fa      	ldrh	r2, [r7, #14]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 fdad 	bl	800abb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800905e:	e090      	b.n	8009182 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	785a      	ldrb	r2, [r3, #1]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	88db      	ldrh	r3, [r3, #6]
 800906e:	2b3f      	cmp	r3, #63	; 0x3f
 8009070:	d803      	bhi.n	800907a <USBD_CDC_Setup+0xa6>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	88db      	ldrh	r3, [r3, #6]
 8009076:	b2da      	uxtb	r2, r3
 8009078:	e000      	b.n	800907c <USBD_CDC_Setup+0xa8>
 800907a:	2240      	movs	r2, #64	; 0x40
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009082:	6939      	ldr	r1, [r7, #16]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800908a:	461a      	mov	r2, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 fdbf 	bl	800ac10 <USBD_CtlPrepareRx>
      break;
 8009092:	e076      	b.n	8009182 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	33b0      	adds	r3, #176	; 0xb0
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	7850      	ldrb	r0, [r2, #1]
 80090aa:	2200      	movs	r2, #0
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	4798      	blx	r3
      break;
 80090b0:	e067      	b.n	8009182 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b0b      	cmp	r3, #11
 80090b8:	d851      	bhi.n	800915e <USBD_CDC_Setup+0x18a>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <USBD_CDC_Setup+0xec>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090f1 	.word	0x080090f1
 80090c4:	0800916d 	.word	0x0800916d
 80090c8:	0800915f 	.word	0x0800915f
 80090cc:	0800915f 	.word	0x0800915f
 80090d0:	0800915f 	.word	0x0800915f
 80090d4:	0800915f 	.word	0x0800915f
 80090d8:	0800915f 	.word	0x0800915f
 80090dc:	0800915f 	.word	0x0800915f
 80090e0:	0800915f 	.word	0x0800915f
 80090e4:	0800915f 	.word	0x0800915f
 80090e8:	0800911b 	.word	0x0800911b
 80090ec:	08009145 	.word	0x08009145
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d107      	bne.n	800910c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80090fc:	f107 030a 	add.w	r3, r7, #10
 8009100:	2202      	movs	r2, #2
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fd57 	bl	800abb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800910a:	e032      	b.n	8009172 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f001 fce1 	bl	800aad6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009114:	2303      	movs	r3, #3
 8009116:	75fb      	strb	r3, [r7, #23]
          break;
 8009118:	e02b      	b.n	8009172 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b03      	cmp	r3, #3
 8009124:	d107      	bne.n	8009136 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009126:	f107 030d 	add.w	r3, r7, #13
 800912a:	2201      	movs	r2, #1
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fd42 	bl	800abb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009134:	e01d      	b.n	8009172 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 fccc 	bl	800aad6 <USBD_CtlError>
            ret = USBD_FAIL;
 800913e:	2303      	movs	r3, #3
 8009140:	75fb      	strb	r3, [r7, #23]
          break;
 8009142:	e016      	b.n	8009172 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b03      	cmp	r3, #3
 800914e:	d00f      	beq.n	8009170 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fcbf 	bl	800aad6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009158:	2303      	movs	r3, #3
 800915a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800915c:	e008      	b.n	8009170 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 fcb8 	bl	800aad6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009166:	2303      	movs	r3, #3
 8009168:	75fb      	strb	r3, [r7, #23]
          break;
 800916a:	e002      	b.n	8009172 <USBD_CDC_Setup+0x19e>
          break;
 800916c:	bf00      	nop
 800916e:	e008      	b.n	8009182 <USBD_CDC_Setup+0x1ae>
          break;
 8009170:	bf00      	nop
      }
      break;
 8009172:	e006      	b.n	8009182 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 fcad 	bl	800aad6 <USBD_CtlError>
      ret = USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	75fb      	strb	r3, [r7, #23]
      break;
 8009180:	bf00      	nop
  }

  return (uint8_t)ret;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800919e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32b0      	adds	r2, #176	; 0xb0
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e065      	b.n	8009282 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	32b0      	adds	r2, #176	; 0xb0
 80091c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	3318      	adds	r3, #24
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d02f      	beq.n	8009240 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	f003 020f 	and.w	r2, r3, #15
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	3318      	adds	r3, #24
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	f003 010f 	and.w	r1, r3, #15
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	460b      	mov	r3, r1
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	440b      	add	r3, r1
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4403      	add	r3, r0
 8009208:	3348      	adds	r3, #72	; 0x48
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009210:	fb01 f303 	mul.w	r3, r1, r3
 8009214:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009216:	2b00      	cmp	r3, #0
 8009218:	d112      	bne.n	8009240 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	f003 020f 	and.w	r2, r3, #15
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	3318      	adds	r3, #24
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009232:	78f9      	ldrb	r1, [r7, #3]
 8009234:	2300      	movs	r3, #0
 8009236:	2200      	movs	r2, #0
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f004 fe04 	bl	800de46 <USBD_LL_Transmit>
 800923e:	e01f      	b.n	8009280 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	33b0      	adds	r3, #176	; 0xb0
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d010      	beq.n	8009280 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	33b0      	adds	r3, #176	; 0xb0
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	32b0      	adds	r2, #176	; 0xb0
 80092a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	32b0      	adds	r2, #176	; 0xb0
 80092b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e01a      	b.n	80092f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f004 fe02 	bl	800deca <USBD_LL_GetRxDataSize>
 80092c6:	4602      	mov	r2, r0
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	33b0      	adds	r3, #176	; 0xb0
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092ec:	4611      	mov	r1, r2
 80092ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	32b0      	adds	r2, #176	; 0xb0
 800930c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009310:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009318:	2303      	movs	r3, #3
 800931a:	e025      	b.n	8009368 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	33b0      	adds	r3, #176	; 0xb0
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d01a      	beq.n	8009366 <USBD_CDC_EP0_RxReady+0x6c>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009336:	2bff      	cmp	r3, #255	; 0xff
 8009338:	d015      	beq.n	8009366 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	33b0      	adds	r3, #176	; 0xb0
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009352:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800935a:	b292      	uxth	r2, r2
 800935c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	22ff      	movs	r2, #255	; 0xff
 8009362:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009378:	2182      	movs	r1, #130	; 0x82
 800937a:	4818      	ldr	r0, [pc, #96]	; (80093dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800937c:	f000 fd49 	bl	8009e12 <USBD_GetEpDesc>
 8009380:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009382:	2101      	movs	r1, #1
 8009384:	4815      	ldr	r0, [pc, #84]	; (80093dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009386:	f000 fd44 	bl	8009e12 <USBD_GetEpDesc>
 800938a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800938c:	2181      	movs	r1, #129	; 0x81
 800938e:	4813      	ldr	r0, [pc, #76]	; (80093dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009390:	f000 fd3f 	bl	8009e12 <USBD_GetEpDesc>
 8009394:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2210      	movs	r2, #16
 80093a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d006      	beq.n	80093b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093b0:	711a      	strb	r2, [r3, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d006      	beq.n	80093ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c4:	711a      	strb	r2, [r3, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2243      	movs	r2, #67	; 0x43
 80093ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	2000006c 	.word	0x2000006c

080093e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093e8:	2182      	movs	r1, #130	; 0x82
 80093ea:	4818      	ldr	r0, [pc, #96]	; (800944c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093ec:	f000 fd11 	bl	8009e12 <USBD_GetEpDesc>
 80093f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093f2:	2101      	movs	r1, #1
 80093f4:	4815      	ldr	r0, [pc, #84]	; (800944c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80093f6:	f000 fd0c 	bl	8009e12 <USBD_GetEpDesc>
 80093fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093fc:	2181      	movs	r1, #129	; 0x81
 80093fe:	4813      	ldr	r0, [pc, #76]	; (800944c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009400:	f000 fd07 	bl	8009e12 <USBD_GetEpDesc>
 8009404:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2210      	movs	r2, #16
 8009410:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2200      	movs	r2, #0
 800941c:	711a      	strb	r2, [r3, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f042 0202 	orr.w	r2, r2, #2
 8009424:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d006      	beq.n	800943a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	711a      	strb	r2, [r3, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f042 0202 	orr.w	r2, r2, #2
 8009438:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2243      	movs	r2, #67	; 0x43
 800943e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	2000006c 	.word	0x2000006c

08009450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009458:	2182      	movs	r1, #130	; 0x82
 800945a:	4818      	ldr	r0, [pc, #96]	; (80094bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800945c:	f000 fcd9 	bl	8009e12 <USBD_GetEpDesc>
 8009460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009462:	2101      	movs	r1, #1
 8009464:	4815      	ldr	r0, [pc, #84]	; (80094bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009466:	f000 fcd4 	bl	8009e12 <USBD_GetEpDesc>
 800946a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800946c:	2181      	movs	r1, #129	; 0x81
 800946e:	4813      	ldr	r0, [pc, #76]	; (80094bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009470:	f000 fccf 	bl	8009e12 <USBD_GetEpDesc>
 8009474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2210      	movs	r2, #16
 8009480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d006      	beq.n	8009496 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2200      	movs	r2, #0
 800948c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009490:	711a      	strb	r2, [r3, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a4:	711a      	strb	r2, [r3, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2243      	movs	r2, #67	; 0x43
 80094ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	2000006c 	.word	0x2000006c

080094c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	220a      	movs	r2, #10
 80094cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094ce:	4b03      	ldr	r3, [pc, #12]	; (80094dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000028 	.word	0x20000028

080094e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e009      	b.n	8009508 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	33b0      	adds	r3, #176	; 0xb0
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	32b0      	adds	r2, #176	; 0xb0
 800952a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009536:	2303      	movs	r3, #3
 8009538:	e008      	b.n	800954c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	32b0      	adds	r2, #176	; 0xb0
 800956c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009570:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	e004      	b.n	8009586 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	32b0      	adds	r2, #176	; 0xb0
 80095a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095aa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80095ac:	2301      	movs	r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e025      	b.n	8009606 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11f      	bne.n	8009604 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80095cc:	4b10      	ldr	r3, [pc, #64]	; (8009610 <USBD_CDC_TransmitPacket+0x7c>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f003 020f 	and.w	r2, r3, #15
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4403      	add	r3, r0
 80095e6:	3318      	adds	r3, #24
 80095e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <USBD_CDC_TransmitPacket+0x7c>)
 80095ec:	7819      	ldrb	r1, [r3, #0]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f004 fc23 	bl	800de46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200000af 	.word	0x200000af

08009614 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32b0      	adds	r2, #176	; 0xb0
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	32b0      	adds	r2, #176	; 0xb0
 8009636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800963e:	2303      	movs	r3, #3
 8009640:	e018      	b.n	8009674 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7c1b      	ldrb	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <USBD_CDC_ReceivePacket+0x68>)
 800964c:	7819      	ldrb	r1, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f004 fc15 	bl	800de88 <USBD_LL_PrepareReceive>
 800965e:	e008      	b.n	8009672 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <USBD_CDC_ReceivePacket+0x68>)
 8009662:	7819      	ldrb	r1, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800966a:	2340      	movs	r3, #64	; 0x40
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f004 fc0b 	bl	800de88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	200000b0 	.word	0x200000b0

08009680 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009694:	2303      	movs	r3, #3
 8009696:	e01f      	b.n	80096d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	79fa      	ldrb	r2, [r7, #7]
 80096ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f004 fa81 	bl	800dbd4 <USBD_LL_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e025      	b.n	8009744 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	32ae      	adds	r2, #174	; 0xae
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00f      	beq.n	8009734 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	32ae      	adds	r2, #174	; 0xae
 800971e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	f107 020e 	add.w	r2, r7, #14
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	4602      	mov	r2, r0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f004 fa8d 	bl	800dc74 <USBD_LL_Start>
 800975a:	4603      	mov	r3, r0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800976c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800976e:	4618      	mov	r0, r3
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	460b      	mov	r3, r1
 8009784:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	4611      	mov	r1, r2
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	78fa      	ldrb	r2, [r7, #3]
 80097cc:	4611      	mov	r1, r2
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80097d8:	2303      	movs	r3, #3
 80097da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 f932 	bl	800aa62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800980c:	461a      	mov	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800981a:	f003 031f 	and.w	r3, r3, #31
 800981e:	2b02      	cmp	r3, #2
 8009820:	d01a      	beq.n	8009858 <USBD_LL_SetupStage+0x72>
 8009822:	2b02      	cmp	r3, #2
 8009824:	d822      	bhi.n	800986c <USBD_LL_SetupStage+0x86>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <USBD_LL_SetupStage+0x4a>
 800982a:	2b01      	cmp	r3, #1
 800982c:	d00a      	beq.n	8009844 <USBD_LL_SetupStage+0x5e>
 800982e:	e01d      	b.n	800986c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fb5f 	bl	8009efc <USBD_StdDevReq>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
      break;
 8009842:	e020      	b.n	8009886 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fbc7 	bl	8009fe0 <USBD_StdItfReq>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
      break;
 8009856:	e016      	b.n	8009886 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fc29 	bl	800a0b8 <USBD_StdEPReq>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
      break;
 800986a:	e00c      	b.n	8009886 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009872:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009876:	b2db      	uxtb	r3, r3
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f004 fa5a 	bl	800dd34 <USBD_LL_StallEP>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
      break;
 8009884:	bf00      	nop
  }

  return ret;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	460b      	mov	r3, r1
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80098a2:	7afb      	ldrb	r3, [r7, #11]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d16e      	bne.n	8009986 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	f040 8098 	bne.w	80099ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d913      	bls.n	80098f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	1ad2      	subs	r2, r2, r3
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	4293      	cmp	r3, r2
 80098e0:	bf28      	it	cs
 80098e2:	4613      	movcs	r3, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f001 f9ae 	bl	800ac4a <USBD_CtlContinueRx>
 80098ee:	e07d      	b.n	80099ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098f6:	f003 031f 	and.w	r3, r3, #31
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d014      	beq.n	8009928 <USBD_LL_DataOutStage+0x98>
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d81d      	bhi.n	800993e <USBD_LL_DataOutStage+0xae>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <USBD_LL_DataOutStage+0x7c>
 8009906:	2b01      	cmp	r3, #1
 8009908:	d003      	beq.n	8009912 <USBD_LL_DataOutStage+0x82>
 800990a:	e018      	b.n	800993e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	75bb      	strb	r3, [r7, #22]
            break;
 8009910:	e018      	b.n	8009944 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009918:	b2db      	uxtb	r3, r3
 800991a:	4619      	mov	r1, r3
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 fa5e 	bl	8009dde <USBD_CoreFindIF>
 8009922:	4603      	mov	r3, r0
 8009924:	75bb      	strb	r3, [r7, #22]
            break;
 8009926:	e00d      	b.n	8009944 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800992e:	b2db      	uxtb	r3, r3
 8009930:	4619      	mov	r1, r3
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fa60 	bl	8009df8 <USBD_CoreFindEP>
 8009938:	4603      	mov	r3, r0
 800993a:	75bb      	strb	r3, [r7, #22]
            break;
 800993c:	e002      	b.n	8009944 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	75bb      	strb	r3, [r7, #22]
            break;
 8009942:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009944:	7dbb      	ldrb	r3, [r7, #22]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d119      	bne.n	800997e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b03      	cmp	r3, #3
 8009954:	d113      	bne.n	800997e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009956:	7dba      	ldrb	r2, [r7, #22]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	32ae      	adds	r2, #174	; 0xae
 800995c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009966:	7dba      	ldrb	r2, [r7, #22]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800996e:	7dba      	ldrb	r2, [r7, #22]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	32ae      	adds	r2, #174	; 0xae
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f001 f974 	bl	800ac6c <USBD_CtlSendStatus>
 8009984:	e032      	b.n	80099ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998c:	b2db      	uxtb	r3, r3
 800998e:	4619      	mov	r1, r3
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fa31 	bl	8009df8 <USBD_CoreFindEP>
 8009996:	4603      	mov	r3, r0
 8009998:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800999a:	7dbb      	ldrb	r3, [r7, #22]
 800999c:	2bff      	cmp	r3, #255	; 0xff
 800999e:	d025      	beq.n	80099ec <USBD_LL_DataOutStage+0x15c>
 80099a0:	7dbb      	ldrb	r3, [r7, #22]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d122      	bne.n	80099ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d117      	bne.n	80099e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099b2:	7dba      	ldrb	r2, [r7, #22]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	32ae      	adds	r2, #174	; 0xae
 80099b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00f      	beq.n	80099e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099c2:	7dba      	ldrb	r2, [r7, #22]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80099ca:	7dba      	ldrb	r2, [r7, #22]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	32ae      	adds	r2, #174	; 0xae
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	7afa      	ldrb	r2, [r7, #11]
 80099d8:	4611      	mov	r1, r2
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	4798      	blx	r3
 80099de:	4603      	mov	r3, r0
 80099e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	e000      	b.n	80099ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b086      	sub	sp, #24
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	460b      	mov	r3, r1
 8009a00:	607a      	str	r2, [r7, #4]
 8009a02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009a04:	7afb      	ldrb	r3, [r7, #11]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d16f      	bne.n	8009aea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3314      	adds	r3, #20
 8009a0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d15a      	bne.n	8009ad0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d914      	bls.n	8009a50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f001 f8d6 	bl	800abee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a42:	2300      	movs	r3, #0
 8009a44:	2200      	movs	r2, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f004 fa1d 	bl	800de88 <USBD_LL_PrepareReceive>
 8009a4e:	e03f      	b.n	8009ad0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	68da      	ldr	r2, [r3, #12]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d11c      	bne.n	8009a96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d316      	bcc.n	8009a96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d20f      	bcs.n	8009a96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a76:	2200      	movs	r2, #0
 8009a78:	2100      	movs	r1, #0
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f001 f8b7 	bl	800abee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f004 f9fa 	bl	800de88 <USBD_LL_PrepareReceive>
 8009a94:	e01c      	b.n	8009ad0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d10f      	bne.n	8009ac2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ac2:	2180      	movs	r1, #128	; 0x80
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f004 f935 	bl	800dd34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f001 f8e1 	bl	800ac92 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d03a      	beq.n	8009b50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fe42 	bl	8009764 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ae8:	e032      	b.n	8009b50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	4619      	mov	r1, r3
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f97f 	bl	8009df8 <USBD_CoreFindEP>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2bff      	cmp	r3, #255	; 0xff
 8009b02:	d025      	beq.n	8009b50 <USBD_LL_DataInStage+0x15a>
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d122      	bne.n	8009b50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d11c      	bne.n	8009b50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b16:	7dfa      	ldrb	r2, [r7, #23]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	32ae      	adds	r2, #174	; 0xae
 8009b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d014      	beq.n	8009b50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b26:	7dfa      	ldrb	r2, [r7, #23]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b2e:	7dfa      	ldrb	r2, [r7, #23]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	32ae      	adds	r2, #174	; 0xae
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	7afa      	ldrb	r2, [r7, #11]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	4798      	blx	r3
 8009b42:	4603      	mov	r3, r0
 8009b44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b46:	7dbb      	ldrb	r3, [r7, #22]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b4c:	7dbb      	ldrb	r3, [r7, #22]
 8009b4e:	e000      	b.n	8009b52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d014      	beq.n	8009bc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	6852      	ldr	r2, [r2, #4]
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	4798      	blx	r3
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f004 f86f 	bl	800dcaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2240      	movs	r2, #64	; 0x40
 8009bd8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	2200      	movs	r2, #0
 8009be0:	2180      	movs	r1, #128	; 0x80
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f004 f861 	bl	800dcaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2240      	movs	r2, #64	; 0x40
 8009bf2:	621a      	str	r2, [r3, #32]

  return ret;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	78fa      	ldrb	r2, [r7, #3]
 8009c0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2204      	movs	r2, #4
 8009c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	d106      	bne.n	8009c6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d110      	bne.n	8009cb0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00b      	beq.n	8009cb0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	32ae      	adds	r2, #174	; 0xae
 8009cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e01c      	b.n	8009d16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d115      	bne.n	8009d14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	32ae      	adds	r2, #174	; 0xae
 8009cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32ae      	adds	r2, #174	; 0xae
 8009d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0a:	6a1b      	ldr	r3, [r3, #32]
 8009d0c:	78fa      	ldrb	r2, [r7, #3]
 8009d0e:	4611      	mov	r1, r2
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	32ae      	adds	r2, #174	; 0xae
 8009d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e01c      	b.n	8009d7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d115      	bne.n	8009d78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32ae      	adds	r2, #174	; 0xae
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	32ae      	adds	r2, #174	; 0xae
 8009d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	4611      	mov	r1, r2
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6852      	ldr	r2, [r2, #4]
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	4798      	blx	r3
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009dea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b086      	sub	sp, #24
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d920      	bls.n	8009e7c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e42:	e013      	b.n	8009e6c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e44:	f107 030a 	add.w	r3, r7, #10
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6978      	ldr	r0, [r7, #20]
 8009e4c:	f000 f81b 	bl	8009e86 <USBD_GetNextDesc>
 8009e50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	785b      	ldrb	r3, [r3, #1]
 8009e56:	2b05      	cmp	r3, #5
 8009e58:	d108      	bne.n	8009e6c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	789b      	ldrb	r3, [r3, #2]
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d008      	beq.n	8009e7a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	897b      	ldrh	r3, [r7, #10]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d8e5      	bhi.n	8009e44 <USBD_GetEpDesc+0x32>
 8009e78:	e000      	b.n	8009e7c <USBD_GetEpDesc+0x6a>
          break;
 8009e7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e7c:	693b      	ldr	r3, [r7, #16]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	881a      	ldrh	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	4413      	add	r3, r2
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4413      	add	r3, r2
 8009eb0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ede:	8a3b      	ldrh	r3, [r7, #16]
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	b21a      	sxth	r2, r3
 8009ee4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	b21b      	sxth	r3, r3
 8009eec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009eee:	89fb      	ldrh	r3, [r7, #14]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d005      	beq.n	8009f22 <USBD_StdDevReq+0x26>
 8009f16:	2b40      	cmp	r3, #64	; 0x40
 8009f18:	d857      	bhi.n	8009fca <USBD_StdDevReq+0xce>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00f      	beq.n	8009f3e <USBD_StdDevReq+0x42>
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d153      	bne.n	8009fca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	32ae      	adds	r2, #174	; 0xae
 8009f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f3c:	e04a      	b.n	8009fd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b09      	cmp	r3, #9
 8009f44:	d83b      	bhi.n	8009fbe <USBD_StdDevReq+0xc2>
 8009f46:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <USBD_StdDevReq+0x50>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009fa1 	.word	0x08009fa1
 8009f50:	08009fb5 	.word	0x08009fb5
 8009f54:	08009fbf 	.word	0x08009fbf
 8009f58:	08009fab 	.word	0x08009fab
 8009f5c:	08009fbf 	.word	0x08009fbf
 8009f60:	08009f7f 	.word	0x08009f7f
 8009f64:	08009f75 	.word	0x08009f75
 8009f68:	08009fbf 	.word	0x08009fbf
 8009f6c:	08009f97 	.word	0x08009f97
 8009f70:	08009f89 	.word	0x08009f89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa3c 	bl	800a3f4 <USBD_GetDescriptor>
          break;
 8009f7c:	e024      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fbcb 	bl	800a71c <USBD_SetAddress>
          break;
 8009f86:	e01f      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fc0a 	bl	800a7a4 <USBD_SetConfig>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]
          break;
 8009f94:	e018      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fcad 	bl	800a8f8 <USBD_GetConfig>
          break;
 8009f9e:	e013      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fcde 	bl	800a964 <USBD_GetStatus>
          break;
 8009fa8:	e00e      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fd0d 	bl	800a9cc <USBD_SetFeature>
          break;
 8009fb2:	e009      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fd31 	bl	800aa1e <USBD_ClrFeature>
          break;
 8009fbc:	e004      	b.n	8009fc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fd88 	bl	800aad6 <USBD_CtlError>
          break;
 8009fc6:	bf00      	nop
      }
      break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fd82 	bl	800aad6 <USBD_CtlError>
      break;
 8009fd2:	bf00      	nop
  }

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop

08009fe0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d005      	beq.n	800a006 <USBD_StdItfReq+0x26>
 8009ffa:	2b40      	cmp	r3, #64	; 0x40
 8009ffc:	d852      	bhi.n	800a0a4 <USBD_StdItfReq+0xc4>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <USBD_StdItfReq+0x26>
 800a002:	2b20      	cmp	r3, #32
 800a004:	d14e      	bne.n	800a0a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	2b02      	cmp	r3, #2
 800a012:	d840      	bhi.n	800a096 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	889b      	ldrh	r3, [r3, #4]
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d836      	bhi.n	800a08c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	889b      	ldrh	r3, [r3, #4]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fed9 	bl	8009dde <USBD_CoreFindIF>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	2bff      	cmp	r3, #255	; 0xff
 800a034:	d01d      	beq.n	800a072 <USBD_StdItfReq+0x92>
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d11a      	bne.n	800a072 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a03c:	7bba      	ldrb	r2, [r7, #14]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	32ae      	adds	r2, #174	; 0xae
 800a042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00f      	beq.n	800a06c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a04c:	7bba      	ldrb	r2, [r7, #14]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a054:	7bba      	ldrb	r2, [r7, #14]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	32ae      	adds	r2, #174	; 0xae
 800a05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4798      	blx	r3
 800a066:	4603      	mov	r3, r0
 800a068:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a06a:	e004      	b.n	800a076 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a06c:	2303      	movs	r3, #3
 800a06e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a070:	e001      	b.n	800a076 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a072:	2303      	movs	r3, #3
 800a074:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	88db      	ldrh	r3, [r3, #6]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d110      	bne.n	800a0a0 <USBD_StdItfReq+0xc0>
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10d      	bne.n	800a0a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fdf1 	bl	800ac6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a08a:	e009      	b.n	800a0a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fd21 	bl	800aad6 <USBD_CtlError>
          break;
 800a094:	e004      	b.n	800a0a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fd1c 	bl	800aad6 <USBD_CtlError>
          break;
 800a09e:	e000      	b.n	800a0a2 <USBD_StdItfReq+0xc2>
          break;
 800a0a0:	bf00      	nop
      }
      break;
 800a0a2:	e004      	b.n	800a0ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fd15 	bl	800aad6 <USBD_CtlError>
      break;
 800a0ac:	bf00      	nop
  }

  return ret;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	889b      	ldrh	r3, [r3, #4]
 800a0ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0d4:	2b40      	cmp	r3, #64	; 0x40
 800a0d6:	d007      	beq.n	800a0e8 <USBD_StdEPReq+0x30>
 800a0d8:	2b40      	cmp	r3, #64	; 0x40
 800a0da:	f200 817f 	bhi.w	800a3dc <USBD_StdEPReq+0x324>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d02a      	beq.n	800a138 <USBD_StdEPReq+0x80>
 800a0e2:	2b20      	cmp	r3, #32
 800a0e4:	f040 817a 	bne.w	800a3dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff fe83 	bl	8009df8 <USBD_CoreFindEP>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0f6:	7b7b      	ldrb	r3, [r7, #13]
 800a0f8:	2bff      	cmp	r3, #255	; 0xff
 800a0fa:	f000 8174 	beq.w	800a3e6 <USBD_StdEPReq+0x32e>
 800a0fe:	7b7b      	ldrb	r3, [r7, #13]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f040 8170 	bne.w	800a3e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a106:	7b7a      	ldrb	r2, [r7, #13]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a10e:	7b7a      	ldrb	r2, [r7, #13]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	32ae      	adds	r2, #174	; 0xae
 800a114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8163 	beq.w	800a3e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a120:	7b7a      	ldrb	r2, [r7, #13]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	; 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	4798      	blx	r3
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a136:	e156      	b.n	800a3e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	785b      	ldrb	r3, [r3, #1]
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d008      	beq.n	800a152 <USBD_StdEPReq+0x9a>
 800a140:	2b03      	cmp	r3, #3
 800a142:	f300 8145 	bgt.w	800a3d0 <USBD_StdEPReq+0x318>
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 809b 	beq.w	800a282 <USBD_StdEPReq+0x1ca>
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d03c      	beq.n	800a1ca <USBD_StdEPReq+0x112>
 800a150:	e13e      	b.n	800a3d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d002      	beq.n	800a164 <USBD_StdEPReq+0xac>
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d016      	beq.n	800a190 <USBD_StdEPReq+0xd8>
 800a162:	e02c      	b.n	800a1be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <USBD_StdEPReq+0xce>
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	2b80      	cmp	r3, #128	; 0x80
 800a16e:	d00a      	beq.n	800a186 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f003 fddd 	bl	800dd34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a17a:	2180      	movs	r1, #128	; 0x80
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f003 fdd9 	bl	800dd34 <USBD_LL_StallEP>
 800a182:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a184:	e020      	b.n	800a1c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fca4 	bl	800aad6 <USBD_CtlError>
              break;
 800a18e:	e01b      	b.n	800a1c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	885b      	ldrh	r3, [r3, #2]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10e      	bne.n	800a1b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <USBD_StdEPReq+0xfe>
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b80      	cmp	r3, #128	; 0x80
 800a1a2:	d008      	beq.n	800a1b6 <USBD_StdEPReq+0xfe>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	88db      	ldrh	r3, [r3, #6]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d104      	bne.n	800a1b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 fdbf 	bl	800dd34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fd58 	bl	800ac6c <USBD_CtlSendStatus>

              break;
 800a1bc:	e004      	b.n	800a1c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fc88 	bl	800aad6 <USBD_CtlError>
              break;
 800a1c6:	bf00      	nop
          }
          break;
 800a1c8:	e107      	b.n	800a3da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d002      	beq.n	800a1dc <USBD_StdEPReq+0x124>
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d016      	beq.n	800a208 <USBD_StdEPReq+0x150>
 800a1da:	e04b      	b.n	800a274 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00d      	beq.n	800a1fe <USBD_StdEPReq+0x146>
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	2b80      	cmp	r3, #128	; 0x80
 800a1e6:	d00a      	beq.n	800a1fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f003 fda1 	bl	800dd34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1f2:	2180      	movs	r1, #128	; 0x80
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f003 fd9d 	bl	800dd34 <USBD_LL_StallEP>
 800a1fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1fc:	e040      	b.n	800a280 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fc68 	bl	800aad6 <USBD_CtlError>
              break;
 800a206:	e03b      	b.n	800a280 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	885b      	ldrh	r3, [r3, #2]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d136      	bne.n	800a27e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f003 fda7 	bl	800dd72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fd21 	bl	800ac6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a22a:	7bbb      	ldrb	r3, [r7, #14]
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fde2 	bl	8009df8 <USBD_CoreFindEP>
 800a234:	4603      	mov	r3, r0
 800a236:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a238:	7b7b      	ldrb	r3, [r7, #13]
 800a23a:	2bff      	cmp	r3, #255	; 0xff
 800a23c:	d01f      	beq.n	800a27e <USBD_StdEPReq+0x1c6>
 800a23e:	7b7b      	ldrb	r3, [r7, #13]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d11c      	bne.n	800a27e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a244:	7b7a      	ldrb	r2, [r7, #13]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a24c:	7b7a      	ldrb	r2, [r7, #13]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32ae      	adds	r2, #174	; 0xae
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d010      	beq.n	800a27e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a25c:	7b7a      	ldrb	r2, [r7, #13]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	32ae      	adds	r2, #174	; 0xae
 800a262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a272:	e004      	b.n	800a27e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fc2d 	bl	800aad6 <USBD_CtlError>
              break;
 800a27c:	e000      	b.n	800a280 <USBD_StdEPReq+0x1c8>
              break;
 800a27e:	bf00      	nop
          }
          break;
 800a280:	e0ab      	b.n	800a3da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d002      	beq.n	800a294 <USBD_StdEPReq+0x1dc>
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d032      	beq.n	800a2f8 <USBD_StdEPReq+0x240>
 800a292:	e097      	b.n	800a3c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <USBD_StdEPReq+0x1f2>
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	2b80      	cmp	r3, #128	; 0x80
 800a29e:	d004      	beq.n	800a2aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fc17 	bl	800aad6 <USBD_CtlError>
                break;
 800a2a8:	e091      	b.n	800a3ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	da0b      	bge.n	800a2ca <USBD_StdEPReq+0x212>
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	3310      	adds	r3, #16
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	e00b      	b.n	800a2e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2ca:	7bbb      	ldrb	r3, [r7, #14]
 800a2cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	4413      	add	r3, r2
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fc61 	bl	800abb8 <USBD_CtlSendData>
              break;
 800a2f6:	e06a      	b.n	800a3ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	da11      	bge.n	800a324 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	f003 020f 	and.w	r2, r3, #15
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	440b      	add	r3, r1
 800a312:	3324      	adds	r3, #36	; 0x24
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d117      	bne.n	800a34a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fbda 	bl	800aad6 <USBD_CtlError>
                  break;
 800a322:	e054      	b.n	800a3ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a324:	7bbb      	ldrb	r3, [r7, #14]
 800a326:	f003 020f 	and.w	r2, r3, #15
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d104      	bne.n	800a34a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fbc7 	bl	800aad6 <USBD_CtlError>
                  break;
 800a348:	e041      	b.n	800a3ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a34a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	da0b      	bge.n	800a36a <USBD_StdEPReq+0x2b2>
 800a352:	7bbb      	ldrb	r3, [r7, #14]
 800a354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	3310      	adds	r3, #16
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	4413      	add	r3, r2
 800a366:	3304      	adds	r3, #4
 800a368:	e00b      	b.n	800a382 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	4413      	add	r3, r2
 800a380:	3304      	adds	r3, #4
 800a382:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <USBD_StdEPReq+0x2d8>
 800a38a:	7bbb      	ldrb	r3, [r7, #14]
 800a38c:	2b80      	cmp	r3, #128	; 0x80
 800a38e:	d103      	bne.n	800a398 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	e00e      	b.n	800a3b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f003 fd07 	bl	800ddb0 <USBD_LL_IsStallEP>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e002      	b.n	800a3b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fbfb 	bl	800abb8 <USBD_CtlSendData>
              break;
 800a3c2:	e004      	b.n	800a3ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fb85 	bl	800aad6 <USBD_CtlError>
              break;
 800a3cc:	bf00      	nop
          }
          break;
 800a3ce:	e004      	b.n	800a3da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fb7f 	bl	800aad6 <USBD_CtlError>
          break;
 800a3d8:	bf00      	nop
      }
      break;
 800a3da:	e005      	b.n	800a3e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fb79 	bl	800aad6 <USBD_CtlError>
      break;
 800a3e4:	e000      	b.n	800a3e8 <USBD_StdEPReq+0x330>
      break;
 800a3e6:	bf00      	nop
  }

  return ret;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	885b      	ldrh	r3, [r3, #2]
 800a40e:	0a1b      	lsrs	r3, r3, #8
 800a410:	b29b      	uxth	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	2b0e      	cmp	r3, #14
 800a416:	f200 8152 	bhi.w	800a6be <USBD_GetDescriptor+0x2ca>
 800a41a:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <USBD_GetDescriptor+0x2c>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a491 	.word	0x0800a491
 800a424:	0800a4a9 	.word	0x0800a4a9
 800a428:	0800a4e9 	.word	0x0800a4e9
 800a42c:	0800a6bf 	.word	0x0800a6bf
 800a430:	0800a6bf 	.word	0x0800a6bf
 800a434:	0800a65f 	.word	0x0800a65f
 800a438:	0800a68b 	.word	0x0800a68b
 800a43c:	0800a6bf 	.word	0x0800a6bf
 800a440:	0800a6bf 	.word	0x0800a6bf
 800a444:	0800a6bf 	.word	0x0800a6bf
 800a448:	0800a6bf 	.word	0x0800a6bf
 800a44c:	0800a6bf 	.word	0x0800a6bf
 800a450:	0800a6bf 	.word	0x0800a6bf
 800a454:	0800a6bf 	.word	0x0800a6bf
 800a458:	0800a45d 	.word	0x0800a45d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00b      	beq.n	800a480 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	7c12      	ldrb	r2, [r2, #16]
 800a474:	f107 0108 	add.w	r1, r7, #8
 800a478:	4610      	mov	r0, r2
 800a47a:	4798      	blx	r3
 800a47c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a47e:	e126      	b.n	800a6ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fb27 	bl	800aad6 <USBD_CtlError>
        err++;
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	3301      	adds	r3, #1
 800a48c:	72fb      	strb	r3, [r7, #11]
      break;
 800a48e:	e11e      	b.n	800a6ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	7c12      	ldrb	r2, [r2, #16]
 800a49c:	f107 0108 	add.w	r1, r7, #8
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4798      	blx	r3
 800a4a4:	60f8      	str	r0, [r7, #12]
      break;
 800a4a6:	e112      	b.n	800a6ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7c1b      	ldrb	r3, [r3, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10d      	bne.n	800a4cc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	f107 0208 	add.w	r2, r7, #8
 800a4bc:	4610      	mov	r0, r2
 800a4be:	4798      	blx	r3
 800a4c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4ca:	e100      	b.n	800a6ce <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	f107 0208 	add.w	r2, r7, #8
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	701a      	strb	r2, [r3, #0]
      break;
 800a4e6:	e0f2      	b.n	800a6ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	f200 80ac 	bhi.w	800a64c <USBD_GetDescriptor+0x258>
 800a4f4:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <USBD_GetDescriptor+0x108>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a515 	.word	0x0800a515
 800a500:	0800a549 	.word	0x0800a549
 800a504:	0800a57d 	.word	0x0800a57d
 800a508:	0800a5b1 	.word	0x0800a5b1
 800a50c:	0800a5e5 	.word	0x0800a5e5
 800a510:	0800a619 	.word	0x0800a619
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00b      	beq.n	800a538 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	7c12      	ldrb	r2, [r2, #16]
 800a52c:	f107 0108 	add.w	r1, r7, #8
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
 800a534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a536:	e091      	b.n	800a65c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 facb 	bl	800aad6 <USBD_CtlError>
            err++;
 800a540:	7afb      	ldrb	r3, [r7, #11]
 800a542:	3301      	adds	r3, #1
 800a544:	72fb      	strb	r3, [r7, #11]
          break;
 800a546:	e089      	b.n	800a65c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00b      	beq.n	800a56c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	7c12      	ldrb	r2, [r2, #16]
 800a560:	f107 0108 	add.w	r1, r7, #8
 800a564:	4610      	mov	r0, r2
 800a566:	4798      	blx	r3
 800a568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a56a:	e077      	b.n	800a65c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fab1 	bl	800aad6 <USBD_CtlError>
            err++;
 800a574:	7afb      	ldrb	r3, [r7, #11]
 800a576:	3301      	adds	r3, #1
 800a578:	72fb      	strb	r3, [r7, #11]
          break;
 800a57a:	e06f      	b.n	800a65c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00b      	beq.n	800a5a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	7c12      	ldrb	r2, [r2, #16]
 800a594:	f107 0108 	add.w	r1, r7, #8
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a59e:	e05d      	b.n	800a65c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fa97 	bl	800aad6 <USBD_CtlError>
            err++;
 800a5a8:	7afb      	ldrb	r3, [r7, #11]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ae:	e055      	b.n	800a65c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00b      	beq.n	800a5d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	7c12      	ldrb	r2, [r2, #16]
 800a5c8:	f107 0108 	add.w	r1, r7, #8
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4798      	blx	r3
 800a5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5d2:	e043      	b.n	800a65c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa7d 	bl	800aad6 <USBD_CtlError>
            err++;
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5e2:	e03b      	b.n	800a65c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00b      	beq.n	800a608 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	7c12      	ldrb	r2, [r2, #16]
 800a5fc:	f107 0108 	add.w	r1, r7, #8
 800a600:	4610      	mov	r0, r2
 800a602:	4798      	blx	r3
 800a604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a606:	e029      	b.n	800a65c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fa63 	bl	800aad6 <USBD_CtlError>
            err++;
 800a610:	7afb      	ldrb	r3, [r7, #11]
 800a612:	3301      	adds	r3, #1
 800a614:	72fb      	strb	r3, [r7, #11]
          break;
 800a616:	e021      	b.n	800a65c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	7c12      	ldrb	r2, [r2, #16]
 800a630:	f107 0108 	add.w	r1, r7, #8
 800a634:	4610      	mov	r0, r2
 800a636:	4798      	blx	r3
 800a638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a63a:	e00f      	b.n	800a65c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa49 	bl	800aad6 <USBD_CtlError>
            err++;
 800a644:	7afb      	ldrb	r3, [r7, #11]
 800a646:	3301      	adds	r3, #1
 800a648:	72fb      	strb	r3, [r7, #11]
          break;
 800a64a:	e007      	b.n	800a65c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fa41 	bl	800aad6 <USBD_CtlError>
          err++;
 800a654:	7afb      	ldrb	r3, [r7, #11]
 800a656:	3301      	adds	r3, #1
 800a658:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a65a:	bf00      	nop
      }
      break;
 800a65c:	e037      	b.n	800a6ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	7c1b      	ldrb	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d109      	bne.n	800a67a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66e:	f107 0208 	add.w	r2, r7, #8
 800a672:	4610      	mov	r0, r2
 800a674:	4798      	blx	r3
 800a676:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a678:	e029      	b.n	800a6ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fa2a 	bl	800aad6 <USBD_CtlError>
        err++;
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	3301      	adds	r3, #1
 800a686:	72fb      	strb	r3, [r7, #11]
      break;
 800a688:	e021      	b.n	800a6ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	7c1b      	ldrb	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10d      	bne.n	800a6ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	f107 0208 	add.w	r2, r7, #8
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4798      	blx	r3
 800a6a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	2207      	movs	r2, #7
 800a6aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6ac:	e00f      	b.n	800a6ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa10 	bl	800aad6 <USBD_CtlError>
        err++;
 800a6b6:	7afb      	ldrb	r3, [r7, #11]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a6bc:	e007      	b.n	800a6ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fa08 	bl	800aad6 <USBD_CtlError>
      err++;
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	72fb      	strb	r3, [r7, #11]
      break;
 800a6cc:	bf00      	nop
  }

  if (err != 0U)
 800a6ce:	7afb      	ldrb	r3, [r7, #11]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d11e      	bne.n	800a712 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	88db      	ldrh	r3, [r3, #6]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d016      	beq.n	800a70a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a6dc:	893b      	ldrh	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00e      	beq.n	800a700 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	88da      	ldrh	r2, [r3, #6]
 800a6e6:	893b      	ldrh	r3, [r7, #8]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	bf28      	it	cs
 800a6ec:	4613      	movcs	r3, r2
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6f2:	893b      	ldrh	r3, [r7, #8]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fa5d 	bl	800abb8 <USBD_CtlSendData>
 800a6fe:	e009      	b.n	800a714 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f9e7 	bl	800aad6 <USBD_CtlError>
 800a708:	e004      	b.n	800a714 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 faae 	bl	800ac6c <USBD_CtlSendStatus>
 800a710:	e000      	b.n	800a714 <USBD_GetDescriptor+0x320>
    return;
 800a712:	bf00      	nop
  }
}
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop

0800a71c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	889b      	ldrh	r3, [r3, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d131      	bne.n	800a792 <USBD_SetAddress+0x76>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	88db      	ldrh	r3, [r3, #6]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d12d      	bne.n	800a792 <USBD_SetAddress+0x76>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	885b      	ldrh	r3, [r3, #2]
 800a73a:	2b7f      	cmp	r3, #127	; 0x7f
 800a73c:	d829      	bhi.n	800a792 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a748:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b03      	cmp	r3, #3
 800a754:	d104      	bne.n	800a760 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f9bc 	bl	800aad6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75e:	e01d      	b.n	800a79c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7bfa      	ldrb	r2, [r7, #15]
 800a764:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f003 fb4b 	bl	800de08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fa7a 	bl	800ac6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d004      	beq.n	800a788 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a786:	e009      	b.n	800a79c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a790:	e004      	b.n	800a79c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f99e 	bl	800aad6 <USBD_CtlError>
  }
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	885b      	ldrh	r3, [r3, #2]
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	4b4e      	ldr	r3, [pc, #312]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a7ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7bc:	4b4d      	ldr	r3, [pc, #308]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d905      	bls.n	800a7d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f985 	bl	800aad6 <USBD_CtlError>
    return USBD_FAIL;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e08c      	b.n	800a8ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d002      	beq.n	800a7e2 <USBD_SetConfig+0x3e>
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d029      	beq.n	800a834 <USBD_SetConfig+0x90>
 800a7e0:	e075      	b.n	800a8ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7e2:	4b44      	ldr	r3, [pc, #272]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d020      	beq.n	800a82c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7ea:	4b42      	ldr	r3, [pc, #264]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7f4:	4b3f      	ldr	r3, [pc, #252]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7fe ffbd 	bl	800977a <USBD_SetClassConfig>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f962 	bl	800aad6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2202      	movs	r2, #2
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a81a:	e065      	b.n	800a8e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fa25 	bl	800ac6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2203      	movs	r2, #3
 800a826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a82a:	e05d      	b.n	800a8e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fa1d 	bl	800ac6c <USBD_CtlSendStatus>
      break;
 800a832:	e059      	b.n	800a8e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a834:	4b2f      	ldr	r3, [pc, #188]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d112      	bne.n	800a862 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a844:	4b2b      	ldr	r3, [pc, #172]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a84e:	4b29      	ldr	r3, [pc, #164]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7fe ffac 	bl	80097b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fa06 	bl	800ac6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a860:	e042      	b.n	800a8e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a862:	4b24      	ldr	r3, [pc, #144]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d02a      	beq.n	800a8c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7fe ff9a 	bl	80097b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a87e:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a888:	4b1a      	ldr	r3, [pc, #104]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7fe ff73 	bl	800977a <USBD_SetClassConfig>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00f      	beq.n	800a8be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f918 	bl	800aad6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7fe ff7f 	bl	80097b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8bc:	e014      	b.n	800a8e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f9d4 	bl	800ac6c <USBD_CtlSendStatus>
      break;
 800a8c4:	e010      	b.n	800a8e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f9d0 	bl	800ac6c <USBD_CtlSendStatus>
      break;
 800a8cc:	e00c      	b.n	800a8e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f900 	bl	800aad6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <USBD_SetConfig+0x150>)
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7fe ff68 	bl	80097b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e6:	bf00      	nop
  }

  return ret;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000898 	.word	0x20000898

0800a8f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	88db      	ldrh	r3, [r3, #6]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d004      	beq.n	800a914 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f8e2 	bl	800aad6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a912:	e023      	b.n	800a95c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	dc02      	bgt.n	800a926 <USBD_GetConfig+0x2e>
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc03      	bgt.n	800a92c <USBD_GetConfig+0x34>
 800a924:	e015      	b.n	800a952 <USBD_GetConfig+0x5a>
 800a926:	2b03      	cmp	r3, #3
 800a928:	d00b      	beq.n	800a942 <USBD_GetConfig+0x4a>
 800a92a:	e012      	b.n	800a952 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3308      	adds	r3, #8
 800a936:	2201      	movs	r2, #1
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f93c 	bl	800abb8 <USBD_CtlSendData>
        break;
 800a940:	e00c      	b.n	800a95c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	3304      	adds	r3, #4
 800a946:	2201      	movs	r2, #1
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f934 	bl	800abb8 <USBD_CtlSendData>
        break;
 800a950:	e004      	b.n	800a95c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f8be 	bl	800aad6 <USBD_CtlError>
        break;
 800a95a:	bf00      	nop
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	3b01      	subs	r3, #1
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d81e      	bhi.n	800a9ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d004      	beq.n	800a98e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f8a5 	bl	800aad6 <USBD_CtlError>
        break;
 800a98c:	e01a      	b.n	800a9c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f043 0202 	orr.w	r2, r3, #2
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f900 	bl	800abb8 <USBD_CtlSendData>
      break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f88a 	bl	800aad6 <USBD_CtlError>
      break;
 800a9c2:	bf00      	nop
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	885b      	ldrh	r3, [r3, #2]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d107      	bne.n	800a9ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f940 	bl	800ac6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9ec:	e013      	b.n	800aa16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	885b      	ldrh	r3, [r3, #2]
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d10b      	bne.n	800aa0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	889b      	ldrh	r3, [r3, #4]
 800a9fa:	0a1b      	lsrs	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f930 	bl	800ac6c <USBD_CtlSendStatus>
}
 800aa0c:	e003      	b.n	800aa16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f860 	bl	800aad6 <USBD_CtlError>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	3b01      	subs	r3, #1
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d80b      	bhi.n	800aa4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	885b      	ldrh	r3, [r3, #2]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d10c      	bne.n	800aa58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f910 	bl	800ac6c <USBD_CtlSendStatus>
      }
      break;
 800aa4c:	e004      	b.n	800aa58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f840 	bl	800aad6 <USBD_CtlError>
      break;
 800aa56:	e000      	b.n	800aa5a <USBD_ClrFeature+0x3c>
      break;
 800aa58:	bf00      	nop
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	781a      	ldrb	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	781a      	ldrb	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7ff fa17 	bl	8009ec0 <SWAPBYTE>
 800aa92:	4603      	mov	r3, r0
 800aa94:	461a      	mov	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fa0a 	bl	8009ec0 <SWAPBYTE>
 800aaac:	4603      	mov	r3, r0
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3301      	adds	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f7ff f9fd 	bl	8009ec0 <SWAPBYTE>
 800aac6:	4603      	mov	r3, r0
 800aac8:	461a      	mov	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	80da      	strh	r2, [r3, #6]
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aae0:	2180      	movs	r1, #128	; 0x80
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f003 f926 	bl	800dd34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aae8:	2100      	movs	r1, #0
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f003 f922 	bl	800dd34 <USBD_LL_StallEP>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d036      	beq.n	800ab7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ab12:	6938      	ldr	r0, [r7, #16]
 800ab14:	f000 f836 	bl	800ab84 <USBD_GetLen>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	7812      	ldrb	r2, [r2, #0]
 800ab30:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	3301      	adds	r3, #1
 800ab36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	2203      	movs	r2, #3
 800ab40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	3301      	adds	r3, #1
 800ab46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab48:	e013      	b.n	800ab72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	4413      	add	r3, r2
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	7812      	ldrb	r2, [r2, #0]
 800ab54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	613b      	str	r3, [r7, #16]
    idx++;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	4413      	add	r3, r2
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e7      	bne.n	800ab4a <USBD_GetString+0x52>
 800ab7a:	e000      	b.n	800ab7e <USBD_GetString+0x86>
    return;
 800ab7c:	bf00      	nop
  }
}
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab94:	e005      	b.n	800aba2 <USBD_GetLen+0x1e>
  {
    len++;
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f5      	bne.n	800ab96 <USBD_GetLen+0x12>
  }

  return len;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	2100      	movs	r1, #0
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f003 f931 	bl	800de46 <USBD_LL_Transmit>

  return USBD_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	2100      	movs	r1, #0
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f003 f920 	bl	800de46 <USBD_LL_Transmit>

  return USBD_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2203      	movs	r2, #3
 800ac20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f003 f924 	bl	800de88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f003 f913 	bl	800de88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2204      	movs	r2, #4
 800ac78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2100      	movs	r1, #0
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f003 f8df 	bl	800de46 <USBD_LL_Transmit>

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2205      	movs	r2, #5
 800ac9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aca2:	2300      	movs	r3, #0
 800aca4:	2200      	movs	r2, #0
 800aca6:	2100      	movs	r1, #0
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f003 f8ed 	bl	800de88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	4a08      	ldr	r2, [pc, #32]	; (800ace8 <disk_status+0x30>)
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	79fa      	ldrb	r2, [r7, #7]
 800acd0:	4905      	ldr	r1, [pc, #20]	; (800ace8 <disk_status+0x30>)
 800acd2:	440a      	add	r2, r1
 800acd4:	7a12      	ldrb	r2, [r2, #8]
 800acd6:	4610      	mov	r0, r2
 800acd8:	4798      	blx	r3
 800acda:	4603      	mov	r3, r0
 800acdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	200008c4 	.word	0x200008c4

0800acec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	4a0d      	ldr	r2, [pc, #52]	; (800ad34 <disk_initialize+0x48>)
 800acfe:	5cd3      	ldrb	r3, [r2, r3]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d111      	bne.n	800ad28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	4a0b      	ldr	r2, [pc, #44]	; (800ad34 <disk_initialize+0x48>)
 800ad08:	2101      	movs	r1, #1
 800ad0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	4a09      	ldr	r2, [pc, #36]	; (800ad34 <disk_initialize+0x48>)
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	79fa      	ldrb	r2, [r7, #7]
 800ad1a:	4906      	ldr	r1, [pc, #24]	; (800ad34 <disk_initialize+0x48>)
 800ad1c:	440a      	add	r2, r1
 800ad1e:	7a12      	ldrb	r2, [r2, #8]
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	200008c4 	.word	0x200008c4

0800ad38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad38:	b590      	push	{r4, r7, lr}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	607a      	str	r2, [r7, #4]
 800ad42:	603b      	str	r3, [r7, #0]
 800ad44:	4603      	mov	r3, r0
 800ad46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	4a0a      	ldr	r2, [pc, #40]	; (800ad74 <disk_read+0x3c>)
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	689c      	ldr	r4, [r3, #8]
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	4a07      	ldr	r2, [pc, #28]	; (800ad74 <disk_read+0x3c>)
 800ad58:	4413      	add	r3, r2
 800ad5a:	7a18      	ldrb	r0, [r3, #8]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	68b9      	ldr	r1, [r7, #8]
 800ad62:	47a0      	blx	r4
 800ad64:	4603      	mov	r3, r0
 800ad66:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}
 800ad72:	bf00      	nop
 800ad74:	200008c4 	.word	0x200008c4

0800ad78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60b9      	str	r1, [r7, #8]
 800ad80:	607a      	str	r2, [r7, #4]
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <disk_write+0x3c>)
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68dc      	ldr	r4, [r3, #12]
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	4a07      	ldr	r2, [pc, #28]	; (800adb4 <disk_write+0x3c>)
 800ad98:	4413      	add	r3, r2
 800ad9a:	7a18      	ldrb	r0, [r3, #8]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	68b9      	ldr	r1, [r7, #8]
 800ada2:	47a0      	blx	r4
 800ada4:	4603      	mov	r3, r0
 800ada6:	75fb      	strb	r3, [r7, #23]
  return res;
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd90      	pop	{r4, r7, pc}
 800adb2:	bf00      	nop
 800adb4:	200008c4 	.word	0x200008c4

0800adb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	603a      	str	r2, [r7, #0]
 800adc2:	71fb      	strb	r3, [r7, #7]
 800adc4:	460b      	mov	r3, r1
 800adc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800adc8:	79fb      	ldrb	r3, [r7, #7]
 800adca:	4a09      	ldr	r2, [pc, #36]	; (800adf0 <disk_ioctl+0x38>)
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	79fa      	ldrb	r2, [r7, #7]
 800add6:	4906      	ldr	r1, [pc, #24]	; (800adf0 <disk_ioctl+0x38>)
 800add8:	440a      	add	r2, r1
 800adda:	7a10      	ldrb	r0, [r2, #8]
 800addc:	79b9      	ldrb	r1, [r7, #6]
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	4798      	blx	r3
 800ade2:	4603      	mov	r3, r0
 800ade4:	73fb      	strb	r3, [r7, #15]
  return res;
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	200008c4 	.word	0x200008c4

0800adf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3301      	adds	r3, #1
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae04:	89fb      	ldrh	r3, [r7, #14]
 800ae06:	021b      	lsls	r3, r3, #8
 800ae08:	b21a      	sxth	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b21b      	sxth	r3, r3
 800ae10:	4313      	orrs	r3, r2
 800ae12:	b21b      	sxth	r3, r3
 800ae14:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ae16:	89fb      	ldrh	r3, [r7, #14]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3303      	adds	r3, #3
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	021b      	lsls	r3, r3, #8
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	3202      	adds	r2, #2
 800ae3c:	7812      	ldrb	r2, [r2, #0]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	3201      	adds	r2, #1
 800ae4a:	7812      	ldrb	r2, [r2, #0]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	7812      	ldrb	r2, [r2, #0]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	460b      	mov	r3, r1
 800ae74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	887a      	ldrh	r2, [r7, #2]
 800ae7e:	b2d2      	uxtb	r2, r2
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	887b      	ldrh	r3, [r7, #2]
 800ae84:	0a1b      	lsrs	r3, r3, #8
 800ae86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	887a      	ldrh	r2, [r7, #2]
 800ae90:	b2d2      	uxtb	r2, r2
 800ae92:	701a      	strb	r2, [r3, #0]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	b2d2      	uxtb	r2, r2
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	607a      	str	r2, [r7, #4]
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	b2d2      	uxtb	r2, r2
 800aec6:	701a      	strb	r2, [r3, #0]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	b2d2      	uxtb	r2, r2
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	0a1b      	lsrs	r3, r3, #8
 800aede:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	b2d2      	uxtb	r2, r2
 800aeea:	701a      	strb	r2, [r3, #0]
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00d      	beq.n	800af2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	1c53      	adds	r3, r2, #1
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	1c59      	adds	r1, r3, #1
 800af1c:	6179      	str	r1, [r7, #20]
 800af1e:	7812      	ldrb	r2, [r2, #0]
 800af20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3b01      	subs	r3, #1
 800af26:	607b      	str	r3, [r7, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f1      	bne.n	800af12 <mem_cpy+0x1a>
	}
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800af3a:	b480      	push	{r7}
 800af3c:	b087      	sub	sp, #28
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	617a      	str	r2, [r7, #20]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3b01      	subs	r3, #1
 800af5a:	607b      	str	r3, [r7, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1f3      	bne.n	800af4a <mem_set+0x10>
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800af70:	b480      	push	{r7}
 800af72:	b089      	sub	sp, #36	; 0x24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	61fa      	str	r2, [r7, #28]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	4619      	mov	r1, r3
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	61ba      	str	r2, [r7, #24]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	1acb      	subs	r3, r1, r3
 800af9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	607b      	str	r3, [r7, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <mem_cmp+0x40>
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0eb      	beq.n	800af88 <mem_cmp+0x18>

	return r;
 800afb0:	697b      	ldr	r3, [r7, #20]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3724      	adds	r7, #36	; 0x24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800afc8:	e002      	b.n	800afd0 <chk_chr+0x12>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3301      	adds	r3, #1
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d005      	beq.n	800afe4 <chk_chr+0x26>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d1f2      	bne.n	800afca <chk_chr+0xc>
	return *str;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	781b      	ldrb	r3, [r3, #0]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800affe:	2300      	movs	r3, #0
 800b000:	60bb      	str	r3, [r7, #8]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	e029      	b.n	800b05c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b008:	4a27      	ldr	r2, [pc, #156]	; (800b0a8 <chk_lock+0xb4>)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	011b      	lsls	r3, r3, #4
 800b00e:	4413      	add	r3, r2
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d01d      	beq.n	800b052 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b016:	4a24      	ldr	r2, [pc, #144]	; (800b0a8 <chk_lock+0xb4>)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	011b      	lsls	r3, r3, #4
 800b01c:	4413      	add	r3, r2
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d116      	bne.n	800b056 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b028:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <chk_lock+0xb4>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	4413      	add	r3, r2
 800b030:	3304      	adds	r3, #4
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b038:	429a      	cmp	r2, r3
 800b03a:	d10c      	bne.n	800b056 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b03c:	4a1a      	ldr	r2, [pc, #104]	; (800b0a8 <chk_lock+0xb4>)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	4413      	add	r3, r2
 800b044:	3308      	adds	r3, #8
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d102      	bne.n	800b056 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b050:	e007      	b.n	800b062 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b052:	2301      	movs	r3, #1
 800b054:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3301      	adds	r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d9d2      	bls.n	800b008 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d109      	bne.n	800b07c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <chk_lock+0x80>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d101      	bne.n	800b078 <chk_lock+0x84>
 800b074:	2300      	movs	r3, #0
 800b076:	e010      	b.n	800b09a <chk_lock+0xa6>
 800b078:	2312      	movs	r3, #18
 800b07a:	e00e      	b.n	800b09a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d108      	bne.n	800b094 <chk_lock+0xa0>
 800b082:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <chk_lock+0xb4>)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	011b      	lsls	r3, r3, #4
 800b088:	4413      	add	r3, r2
 800b08a:	330c      	adds	r3, #12
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b092:	d101      	bne.n	800b098 <chk_lock+0xa4>
 800b094:	2310      	movs	r3, #16
 800b096:	e000      	b.n	800b09a <chk_lock+0xa6>
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	200008a4 	.word	0x200008a4

0800b0ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	607b      	str	r3, [r7, #4]
 800b0b6:	e002      	b.n	800b0be <enq_lock+0x12>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	607b      	str	r3, [r7, #4]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d806      	bhi.n	800b0d2 <enq_lock+0x26>
 800b0c4:	4a09      	ldr	r2, [pc, #36]	; (800b0ec <enq_lock+0x40>)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	4413      	add	r3, r2
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1f2      	bne.n	800b0b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	bf14      	ite	ne
 800b0d8:	2301      	movne	r3, #1
 800b0da:	2300      	moveq	r3, #0
 800b0dc:	b2db      	uxtb	r3, r3
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	200008a4 	.word	0x200008a4

0800b0f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	e01f      	b.n	800b140 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b100:	4a41      	ldr	r2, [pc, #260]	; (800b208 <inc_lock+0x118>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	4413      	add	r3, r2
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d113      	bne.n	800b13a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b112:	4a3d      	ldr	r2, [pc, #244]	; (800b208 <inc_lock+0x118>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	4413      	add	r3, r2
 800b11a:	3304      	adds	r3, #4
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b122:	429a      	cmp	r2, r3
 800b124:	d109      	bne.n	800b13a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b126:	4a38      	ldr	r2, [pc, #224]	; (800b208 <inc_lock+0x118>)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	4413      	add	r3, r2
 800b12e:	3308      	adds	r3, #8
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b136:	429a      	cmp	r2, r3
 800b138:	d006      	beq.n	800b148 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3301      	adds	r3, #1
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d9dc      	bls.n	800b100 <inc_lock+0x10>
 800b146:	e000      	b.n	800b14a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b148:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d132      	bne.n	800b1b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b150:	2300      	movs	r3, #0
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e002      	b.n	800b15c <inc_lock+0x6c>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3301      	adds	r3, #1
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d806      	bhi.n	800b170 <inc_lock+0x80>
 800b162:	4a29      	ldr	r2, [pc, #164]	; (800b208 <inc_lock+0x118>)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	4413      	add	r3, r2
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1f2      	bne.n	800b156 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d101      	bne.n	800b17a <inc_lock+0x8a>
 800b176:	2300      	movs	r3, #0
 800b178:	e040      	b.n	800b1fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	4922      	ldr	r1, [pc, #136]	; (800b208 <inc_lock+0x118>)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	440b      	add	r3, r1
 800b186:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	689a      	ldr	r2, [r3, #8]
 800b18c:	491e      	ldr	r1, [pc, #120]	; (800b208 <inc_lock+0x118>)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	011b      	lsls	r3, r3, #4
 800b192:	440b      	add	r3, r1
 800b194:	3304      	adds	r3, #4
 800b196:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695a      	ldr	r2, [r3, #20]
 800b19c:	491a      	ldr	r1, [pc, #104]	; (800b208 <inc_lock+0x118>)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	011b      	lsls	r3, r3, #4
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b1a8:	4a17      	ldr	r2, [pc, #92]	; (800b208 <inc_lock+0x118>)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	011b      	lsls	r3, r3, #4
 800b1ae:	4413      	add	r3, r2
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <inc_lock+0xe0>
 800b1bc:	4a12      	ldr	r2, [pc, #72]	; (800b208 <inc_lock+0x118>)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	011b      	lsls	r3, r3, #4
 800b1c2:	4413      	add	r3, r2
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <inc_lock+0xe0>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	e015      	b.n	800b1fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d108      	bne.n	800b1e8 <inc_lock+0xf8>
 800b1d6:	4a0c      	ldr	r2, [pc, #48]	; (800b208 <inc_lock+0x118>)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	4413      	add	r3, r2
 800b1de:	330c      	adds	r3, #12
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	e001      	b.n	800b1ec <inc_lock+0xfc>
 800b1e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1ec:	4906      	ldr	r1, [pc, #24]	; (800b208 <inc_lock+0x118>)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	011b      	lsls	r3, r3, #4
 800b1f2:	440b      	add	r3, r1
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3301      	adds	r3, #1
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	200008a4 	.word	0x200008a4

0800b20c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3b01      	subs	r3, #1
 800b218:	607b      	str	r3, [r7, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d825      	bhi.n	800b26c <dec_lock+0x60>
		n = Files[i].ctr;
 800b220:	4a17      	ldr	r2, [pc, #92]	; (800b280 <dec_lock+0x74>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	011b      	lsls	r3, r3, #4
 800b226:	4413      	add	r3, r2
 800b228:	330c      	adds	r3, #12
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b22e:	89fb      	ldrh	r3, [r7, #14]
 800b230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b234:	d101      	bne.n	800b23a <dec_lock+0x2e>
 800b236:	2300      	movs	r3, #0
 800b238:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b23a:	89fb      	ldrh	r3, [r7, #14]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <dec_lock+0x3a>
 800b240:	89fb      	ldrh	r3, [r7, #14]
 800b242:	3b01      	subs	r3, #1
 800b244:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b246:	4a0e      	ldr	r2, [pc, #56]	; (800b280 <dec_lock+0x74>)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	4413      	add	r3, r2
 800b24e:	330c      	adds	r3, #12
 800b250:	89fa      	ldrh	r2, [r7, #14]
 800b252:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b254:	89fb      	ldrh	r3, [r7, #14]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <dec_lock+0x5a>
 800b25a:	4a09      	ldr	r2, [pc, #36]	; (800b280 <dec_lock+0x74>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	4413      	add	r3, r2
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	737b      	strb	r3, [r7, #13]
 800b26a:	e001      	b.n	800b270 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b26c:	2302      	movs	r3, #2
 800b26e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b270:	7b7b      	ldrb	r3, [r7, #13]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	200008a4 	.word	0x200008a4

0800b284 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	e010      	b.n	800b2b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b292:	4a0d      	ldr	r2, [pc, #52]	; (800b2c8 <clear_lock+0x44>)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	4413      	add	r3, r2
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d105      	bne.n	800b2ae <clear_lock+0x2a>
 800b2a2:	4a09      	ldr	r2, [pc, #36]	; (800b2c8 <clear_lock+0x44>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	4413      	add	r3, r2
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d9eb      	bls.n	800b292 <clear_lock+0xe>
	}
}
 800b2ba:	bf00      	nop
 800b2bc:	bf00      	nop
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	200008a4 	.word	0x200008a4

0800b2cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	78db      	ldrb	r3, [r3, #3]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d034      	beq.n	800b34a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	7858      	ldrb	r0, [r3, #1]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	f7ff fd40 	bl	800ad78 <disk_write>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	73fb      	strb	r3, [r7, #15]
 800b302:	e022      	b.n	800b34a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	1ad2      	subs	r2, r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	429a      	cmp	r2, r3
 800b318:	d217      	bcs.n	800b34a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	789b      	ldrb	r3, [r3, #2]
 800b31e:	613b      	str	r3, [r7, #16]
 800b320:	e010      	b.n	800b344 <sync_window+0x78>
					wsect += fs->fsize;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	4413      	add	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	7858      	ldrb	r0, [r3, #1]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b336:	2301      	movs	r3, #1
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	f7ff fd1d 	bl	800ad78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	3b01      	subs	r3, #1
 800b342:	613b      	str	r3, [r7, #16]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d8eb      	bhi.n	800b322 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d01b      	beq.n	800b3a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ffad 	bl	800b2cc <sync_window>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d113      	bne.n	800b3a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	7858      	ldrb	r0, [r3, #1]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b386:	2301      	movs	r3, #1
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	f7ff fcd5 	bl	800ad38 <disk_read>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b394:	f04f 33ff 	mov.w	r3, #4294967295
 800b398:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff ff87 	bl	800b2cc <sync_window>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d158      	bne.n	800b47a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d148      	bne.n	800b462 <sync_fs+0xb2>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	791b      	ldrb	r3, [r3, #4]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d144      	bne.n	800b462 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3330      	adds	r3, #48	; 0x30
 800b3dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff fda9 	bl	800af3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3330      	adds	r3, #48	; 0x30
 800b3ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7ff fd38 	bl	800ae6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3330      	adds	r3, #48	; 0x30
 800b3fe:	4921      	ldr	r1, [pc, #132]	; (800b484 <sync_fs+0xd4>)
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff fd4d 	bl	800aea0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3330      	adds	r3, #48	; 0x30
 800b40a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b40e:	491e      	ldr	r1, [pc, #120]	; (800b488 <sync_fs+0xd8>)
 800b410:	4618      	mov	r0, r3
 800b412:	f7ff fd45 	bl	800aea0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3330      	adds	r3, #48	; 0x30
 800b41a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f7ff fd3b 	bl	800aea0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3330      	adds	r3, #48	; 0x30
 800b42e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7ff fd31 	bl	800aea0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	7858      	ldrb	r0, [r3, #1]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	2301      	movs	r3, #1
 800b458:	f7ff fc8e 	bl	800ad78 <disk_write>
			fs->fsi_flag = 0;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff fca4 	bl	800adb8 <disk_ioctl>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <sync_fs+0xca>
 800b476:	2301      	movs	r3, #1
 800b478:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	41615252 	.word	0x41615252
 800b488:	61417272 	.word	0x61417272

0800b48c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	3b02      	subs	r3, #2
 800b49a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	3b02      	subs	r3, #2
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d301      	bcc.n	800b4ac <clust2sect+0x20>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e008      	b.n	800b4be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	895b      	ldrh	r3, [r3, #10]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	fb03 f202 	mul.w	r2, r3, r2
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	4413      	add	r3, r2
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	370c      	adds	r7, #12
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b086      	sub	sp, #24
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d904      	bls.n	800b4ea <get_fat+0x20>
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d302      	bcc.n	800b4f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	e08f      	b.n	800b610 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d062      	beq.n	800b5c4 <get_fat+0xfa>
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	dc7c      	bgt.n	800b5fc <get_fat+0x132>
 800b502:	2b01      	cmp	r3, #1
 800b504:	d002      	beq.n	800b50c <get_fat+0x42>
 800b506:	2b02      	cmp	r3, #2
 800b508:	d042      	beq.n	800b590 <get_fat+0xc6>
 800b50a:	e077      	b.n	800b5fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6a1a      	ldr	r2, [r3, #32]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	0a5b      	lsrs	r3, r3, #9
 800b522:	4413      	add	r3, r2
 800b524:	4619      	mov	r1, r3
 800b526:	6938      	ldr	r0, [r7, #16]
 800b528:	f7ff ff14 	bl	800b354 <move_window>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d167      	bne.n	800b602 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	60fa      	str	r2, [r7, #12]
 800b538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4413      	add	r3, r2
 800b540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b544:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	6a1a      	ldr	r2, [r3, #32]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	0a5b      	lsrs	r3, r3, #9
 800b54e:	4413      	add	r3, r2
 800b550:	4619      	mov	r1, r3
 800b552:	6938      	ldr	r0, [r7, #16]
 800b554:	f7ff fefe 	bl	800b354 <move_window>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d153      	bne.n	800b606 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4413      	add	r3, r2
 800b568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b56c:	021b      	lsls	r3, r3, #8
 800b56e:	461a      	mov	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4313      	orrs	r3, r2
 800b574:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <get_fat+0xbc>
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	091b      	lsrs	r3, r3, #4
 800b584:	e002      	b.n	800b58c <get_fat+0xc2>
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b58c:	617b      	str	r3, [r7, #20]
			break;
 800b58e:	e03f      	b.n	800b610 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	6a1a      	ldr	r2, [r3, #32]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	0a1b      	lsrs	r3, r3, #8
 800b598:	4413      	add	r3, r2
 800b59a:	4619      	mov	r1, r3
 800b59c:	6938      	ldr	r0, [r7, #16]
 800b59e:	f7ff fed9 	bl	800b354 <move_window>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d130      	bne.n	800b60a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5b6:	4413      	add	r3, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fc1b 	bl	800adf4 <ld_word>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	617b      	str	r3, [r7, #20]
			break;
 800b5c2:	e025      	b.n	800b610 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	6a1a      	ldr	r2, [r3, #32]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	09db      	lsrs	r3, r3, #7
 800b5cc:	4413      	add	r3, r2
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6938      	ldr	r0, [r7, #16]
 800b5d2:	f7ff febf 	bl	800b354 <move_window>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d118      	bne.n	800b60e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b5ea:	4413      	add	r3, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fc19 	bl	800ae24 <ld_dword>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b5f8:	617b      	str	r3, [r7, #20]
			break;
 800b5fa:	e009      	b.n	800b610 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	617b      	str	r3, [r7, #20]
 800b600:	e006      	b.n	800b610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b602:	bf00      	nop
 800b604:	e004      	b.n	800b610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b606:	bf00      	nop
 800b608:	e002      	b.n	800b610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b60a:	bf00      	nop
 800b60c:	e000      	b.n	800b610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b60e:	bf00      	nop
		}
	}

	return val;
 800b610:	697b      	ldr	r3, [r7, #20]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b61a:	b590      	push	{r4, r7, lr}
 800b61c:	b089      	sub	sp, #36	; 0x24
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b626:	2302      	movs	r3, #2
 800b628:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	f240 80d9 	bls.w	800b7e4 <put_fat+0x1ca>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	429a      	cmp	r2, r3
 800b63a:	f080 80d3 	bcs.w	800b7e4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2b03      	cmp	r3, #3
 800b644:	f000 8096 	beq.w	800b774 <put_fat+0x15a>
 800b648:	2b03      	cmp	r3, #3
 800b64a:	f300 80cb 	bgt.w	800b7e4 <put_fat+0x1ca>
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d002      	beq.n	800b658 <put_fat+0x3e>
 800b652:	2b02      	cmp	r3, #2
 800b654:	d06e      	beq.n	800b734 <put_fat+0x11a>
 800b656:	e0c5      	b.n	800b7e4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	61bb      	str	r3, [r7, #24]
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	085b      	lsrs	r3, r3, #1
 800b660:	69ba      	ldr	r2, [r7, #24]
 800b662:	4413      	add	r3, r2
 800b664:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a1a      	ldr	r2, [r3, #32]
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	0a5b      	lsrs	r3, r3, #9
 800b66e:	4413      	add	r3, r2
 800b670:	4619      	mov	r1, r3
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f7ff fe6e 	bl	800b354 <move_window>
 800b678:	4603      	mov	r3, r0
 800b67a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b67c:	7ffb      	ldrb	r3, [r7, #31]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f040 80a9 	bne.w	800b7d6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	1c59      	adds	r1, r3, #1
 800b68e:	61b9      	str	r1, [r7, #24]
 800b690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b694:	4413      	add	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00d      	beq.n	800b6be <put_fat+0xa4>
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b25b      	sxtb	r3, r3
 800b6a8:	f003 030f 	and.w	r3, r3, #15
 800b6ac:	b25a      	sxtb	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	b25b      	sxtb	r3, r3
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	b25b      	sxtb	r3, r3
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	e001      	b.n	800b6c2 <put_fat+0xa8>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6a1a      	ldr	r2, [r3, #32]
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	0a5b      	lsrs	r3, r3, #9
 800b6d4:	4413      	add	r3, r2
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff fe3b 	bl	800b354 <move_window>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6e2:	7ffb      	ldrb	r3, [r7, #31]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d178      	bne.n	800b7da <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f4:	4413      	add	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <put_fat+0xf0>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	091b      	lsrs	r3, r3, #4
 800b706:	b2db      	uxtb	r3, r3
 800b708:	e00e      	b.n	800b728 <put_fat+0x10e>
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b25b      	sxtb	r3, r3
 800b710:	f023 030f 	bic.w	r3, r3, #15
 800b714:	b25a      	sxtb	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	0a1b      	lsrs	r3, r3, #8
 800b71a:	b25b      	sxtb	r3, r3
 800b71c:	f003 030f 	and.w	r3, r3, #15
 800b720:	b25b      	sxtb	r3, r3
 800b722:	4313      	orrs	r3, r2
 800b724:	b25b      	sxtb	r3, r3
 800b726:	b2db      	uxtb	r3, r3
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	70da      	strb	r2, [r3, #3]
			break;
 800b732:	e057      	b.n	800b7e4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a1a      	ldr	r2, [r3, #32]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	0a1b      	lsrs	r3, r3, #8
 800b73c:	4413      	add	r3, r2
 800b73e:	4619      	mov	r1, r3
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7ff fe07 	bl	800b354 <move_window>
 800b746:	4603      	mov	r3, r0
 800b748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b74a:	7ffb      	ldrb	r3, [r7, #31]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d146      	bne.n	800b7de <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b75e:	4413      	add	r3, r2
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	b292      	uxth	r2, r2
 800b764:	4611      	mov	r1, r2
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fb7f 	bl	800ae6a <st_word>
			fs->wflag = 1;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	70da      	strb	r2, [r3, #3]
			break;
 800b772:	e037      	b.n	800b7e4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a1a      	ldr	r2, [r3, #32]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	09db      	lsrs	r3, r3, #7
 800b77c:	4413      	add	r3, r2
 800b77e:	4619      	mov	r1, r3
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f7ff fde7 	bl	800b354 <move_window>
 800b786:	4603      	mov	r3, r0
 800b788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b78a:	7ffb      	ldrb	r3, [r7, #31]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d128      	bne.n	800b7e2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b7a4:	4413      	add	r3, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff fb3c 	bl	800ae24 <ld_dword>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b7b2:	4323      	orrs	r3, r4
 800b7b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b7c4:	4413      	add	r3, r2
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fb69 	bl	800aea0 <st_dword>
			fs->wflag = 1;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	70da      	strb	r2, [r3, #3]
			break;
 800b7d4:	e006      	b.n	800b7e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7d6:	bf00      	nop
 800b7d8:	e004      	b.n	800b7e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7da:	bf00      	nop
 800b7dc:	e002      	b.n	800b7e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7de:	bf00      	nop
 800b7e0:	e000      	b.n	800b7e4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7e2:	bf00      	nop
		}
	}
	return res;
 800b7e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3724      	adds	r7, #36	; 0x24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd90      	pop	{r4, r7, pc}

0800b7ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b088      	sub	sp, #32
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d904      	bls.n	800b814 <remove_chain+0x26>
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	429a      	cmp	r2, r3
 800b812:	d301      	bcc.n	800b818 <remove_chain+0x2a>
 800b814:	2302      	movs	r3, #2
 800b816:	e04b      	b.n	800b8b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	69b8      	ldr	r0, [r7, #24]
 800b826:	f7ff fef8 	bl	800b61a <put_fat>
 800b82a:	4603      	mov	r3, r0
 800b82c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b82e:	7ffb      	ldrb	r3, [r7, #31]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <remove_chain+0x4a>
 800b834:	7ffb      	ldrb	r3, [r7, #31]
 800b836:	e03b      	b.n	800b8b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7ff fe45 	bl	800b4ca <get_fat>
 800b840:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d031      	beq.n	800b8ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d101      	bne.n	800b852 <remove_chain+0x64>
 800b84e:	2302      	movs	r3, #2
 800b850:	e02e      	b.n	800b8b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d101      	bne.n	800b85e <remove_chain+0x70>
 800b85a:	2301      	movs	r3, #1
 800b85c:	e028      	b.n	800b8b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b85e:	2200      	movs	r2, #0
 800b860:	68b9      	ldr	r1, [r7, #8]
 800b862:	69b8      	ldr	r0, [r7, #24]
 800b864:	f7ff fed9 	bl	800b61a <put_fat>
 800b868:	4603      	mov	r3, r0
 800b86a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b86c:	7ffb      	ldrb	r3, [r7, #31]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <remove_chain+0x88>
 800b872:	7ffb      	ldrb	r3, [r7, #31]
 800b874:	e01c      	b.n	800b8b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	691a      	ldr	r2, [r3, #16]
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	3b02      	subs	r3, #2
 800b880:	429a      	cmp	r2, r3
 800b882:	d20b      	bcs.n	800b89c <remove_chain+0xae>
			fs->free_clst++;
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	791b      	ldrb	r3, [r3, #4]
 800b892:	f043 0301 	orr.w	r3, r3, #1
 800b896:	b2da      	uxtb	r2, r3
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d3c6      	bcc.n	800b838 <remove_chain+0x4a>
 800b8aa:	e000      	b.n	800b8ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b8ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10d      	bne.n	800b8ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d004      	beq.n	800b8e4 <create_chain+0x2c>
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d31b      	bcc.n	800b91c <create_chain+0x64>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	61bb      	str	r3, [r7, #24]
 800b8e8:	e018      	b.n	800b91c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fdec 	bl	800b4ca <get_fat>
 800b8f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d801      	bhi.n	800b8fe <create_chain+0x46>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e070      	b.n	800b9e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d101      	bne.n	800b90a <create_chain+0x52>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	e06a      	b.n	800b9e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	695b      	ldr	r3, [r3, #20]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	429a      	cmp	r2, r3
 800b912:	d201      	bcs.n	800b918 <create_chain+0x60>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	e063      	b.n	800b9e0 <create_chain+0x128>
		scl = clst;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	3301      	adds	r3, #1
 800b924:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	69fa      	ldr	r2, [r7, #28]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d307      	bcc.n	800b940 <create_chain+0x88>
				ncl = 2;
 800b930:	2302      	movs	r3, #2
 800b932:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d901      	bls.n	800b940 <create_chain+0x88>
 800b93c:	2300      	movs	r3, #0
 800b93e:	e04f      	b.n	800b9e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff fdc1 	bl	800b4ca <get_fat>
 800b948:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00e      	beq.n	800b96e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d003      	beq.n	800b95e <create_chain+0xa6>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95c:	d101      	bne.n	800b962 <create_chain+0xaa>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	e03e      	b.n	800b9e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	429a      	cmp	r2, r3
 800b968:	d1da      	bne.n	800b920 <create_chain+0x68>
 800b96a:	2300      	movs	r3, #0
 800b96c:	e038      	b.n	800b9e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b96e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	69f9      	ldr	r1, [r7, #28]
 800b976:	6938      	ldr	r0, [r7, #16]
 800b978:	f7ff fe4f 	bl	800b61a <put_fat>
 800b97c:	4603      	mov	r3, r0
 800b97e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b980:	7dfb      	ldrb	r3, [r7, #23]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d109      	bne.n	800b99a <create_chain+0xe2>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b98c:	69fa      	ldr	r2, [r7, #28]
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	6938      	ldr	r0, [r7, #16]
 800b992:	f7ff fe42 	bl	800b61a <put_fat>
 800b996:	4603      	mov	r3, r0
 800b998:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d116      	bne.n	800b9ce <create_chain+0x116>
		fs->last_clst = ncl;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	691a      	ldr	r2, [r3, #16]
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	3b02      	subs	r3, #2
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d804      	bhi.n	800b9be <create_chain+0x106>
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	1e5a      	subs	r2, r3, #1
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	791b      	ldrb	r3, [r3, #4]
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	711a      	strb	r2, [r3, #4]
 800b9cc:	e007      	b.n	800b9de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d102      	bne.n	800b9da <create_chain+0x122>
 800b9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d8:	e000      	b.n	800b9dc <create_chain+0x124>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	0a5b      	lsrs	r3, r3, #9
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	8952      	ldrh	r2, [r2, #10]
 800ba08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	1d1a      	adds	r2, r3, #4
 800ba12:	613a      	str	r2, [r7, #16]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <clmt_clust+0x3a>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e010      	b.n	800ba44 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ba22:	697a      	ldr	r2, [r7, #20]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d307      	bcc.n	800ba3a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	3304      	adds	r3, #4
 800ba36:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba38:	e7e9      	b.n	800ba0e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ba3a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	4413      	add	r3, r2
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	371c      	adds	r7, #28
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba66:	d204      	bcs.n	800ba72 <dir_sdi+0x22>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f003 031f 	and.w	r3, r3, #31
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ba72:	2302      	movs	r3, #2
 800ba74:	e063      	b.n	800bb3e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d106      	bne.n	800ba96 <dir_sdi+0x46>
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d902      	bls.n	800ba96 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10c      	bne.n	800bab6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	095b      	lsrs	r3, r3, #5
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	8912      	ldrh	r2, [r2, #8]
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d301      	bcc.n	800baac <dir_sdi+0x5c>
 800baa8:	2302      	movs	r3, #2
 800baaa:	e048      	b.n	800bb3e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	61da      	str	r2, [r3, #28]
 800bab4:	e029      	b.n	800bb0a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	895b      	ldrh	r3, [r3, #10]
 800baba:	025b      	lsls	r3, r3, #9
 800babc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800babe:	e019      	b.n	800baf4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6979      	ldr	r1, [r7, #20]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7ff fd00 	bl	800b4ca <get_fat>
 800baca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d101      	bne.n	800bad8 <dir_sdi+0x88>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e032      	b.n	800bb3e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d904      	bls.n	800bae8 <dir_sdi+0x98>
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	697a      	ldr	r2, [r7, #20]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d301      	bcc.n	800baec <dir_sdi+0x9c>
 800bae8:	2302      	movs	r3, #2
 800baea:	e028      	b.n	800bb3e <dir_sdi+0xee>
			ofs -= csz;
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d2e1      	bcs.n	800bac0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bafc:	6979      	ldr	r1, [r7, #20]
 800bafe:	6938      	ldr	r0, [r7, #16]
 800bb00:	f7ff fcc4 	bl	800b48c <clust2sect>
 800bb04:	4602      	mov	r2, r0
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	69db      	ldr	r3, [r3, #28]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <dir_sdi+0xcc>
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e010      	b.n	800bb3e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	69da      	ldr	r2, [r3, #28]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	0a5b      	lsrs	r3, r3, #9
 800bb24:	441a      	add	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb36:	441a      	add	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b086      	sub	sp, #24
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	3320      	adds	r3, #32
 800bb5c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <dir_next+0x28>
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb6c:	d301      	bcc.n	800bb72 <dir_next+0x2c>
 800bb6e:	2304      	movs	r3, #4
 800bb70:	e0aa      	b.n	800bcc8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f040 8098 	bne.w	800bcae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10b      	bne.n	800bba8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	095b      	lsrs	r3, r3, #5
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	8912      	ldrh	r2, [r2, #8]
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	f0c0 8088 	bcc.w	800bcae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	61da      	str	r2, [r3, #28]
 800bba4:	2304      	movs	r3, #4
 800bba6:	e08f      	b.n	800bcc8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	0a5b      	lsrs	r3, r3, #9
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	8952      	ldrh	r2, [r2, #10]
 800bbb0:	3a01      	subs	r2, #1
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d17a      	bne.n	800bcae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f7ff fc82 	bl	800b4ca <get_fat>
 800bbc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d801      	bhi.n	800bbd2 <dir_next+0x8c>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	e07a      	b.n	800bcc8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd8:	d101      	bne.n	800bbde <dir_next+0x98>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e074      	b.n	800bcc8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d358      	bcc.n	800bc9a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d104      	bne.n	800bbf8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	61da      	str	r2, [r3, #28]
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	e067      	b.n	800bcc8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f7ff fe59 	bl	800b8b8 <create_chain>
 800bc06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <dir_next+0xcc>
 800bc0e:	2307      	movs	r3, #7
 800bc10:	e05a      	b.n	800bcc8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <dir_next+0xd6>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e055      	b.n	800bcc8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc22:	d101      	bne.n	800bc28 <dir_next+0xe2>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e04f      	b.n	800bcc8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f7ff fb4f 	bl	800b2cc <sync_window>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <dir_next+0xf2>
 800bc34:	2301      	movs	r3, #1
 800bc36:	e047      	b.n	800bcc8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3330      	adds	r3, #48	; 0x30
 800bc3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff f979 	bl	800af3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc48:	2300      	movs	r3, #0
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	6979      	ldr	r1, [r7, #20]
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7ff fc1c 	bl	800b48c <clust2sect>
 800bc54:	4602      	mov	r2, r0
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc5a:	e012      	b.n	800bc82 <dir_next+0x13c>
						fs->wflag = 1;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f7ff fb32 	bl	800b2cc <sync_window>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <dir_next+0x12c>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e02a      	b.n	800bcc8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	3301      	adds	r3, #1
 800bc76:	613b      	str	r3, [r7, #16]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	895b      	ldrh	r3, [r3, #10]
 800bc86:	461a      	mov	r2, r3
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d3e6      	bcc.n	800bc5c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	1ad2      	subs	r2, r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bca0:	6979      	ldr	r1, [r7, #20]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f7ff fbf2 	bl	800b48c <clust2sect>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc0:	441a      	add	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bce0:	2100      	movs	r1, #0
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff feb4 	bl	800ba50 <dir_sdi>
 800bce8:	4603      	mov	r3, r0
 800bcea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d12b      	bne.n	800bd4a <dir_alloc+0x7a>
		n = 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f7ff fb29 	bl	800b354 <move_window>
 800bd02:	4603      	mov	r3, r0
 800bd04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d11d      	bne.n	800bd48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2be5      	cmp	r3, #229	; 0xe5
 800bd14:	d004      	beq.n	800bd20 <dir_alloc+0x50>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d107      	bne.n	800bd30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	3301      	adds	r3, #1
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d102      	bne.n	800bd34 <dir_alloc+0x64>
 800bd2e:	e00c      	b.n	800bd4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bd34:	2101      	movs	r1, #1
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff ff05 	bl	800bb46 <dir_next>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0d7      	beq.n	800bcf6 <dir_alloc+0x26>
 800bd46:	e000      	b.n	800bd4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bd48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d101      	bne.n	800bd54 <dir_alloc+0x84>
 800bd50:	2307      	movs	r3, #7
 800bd52:	75fb      	strb	r3, [r7, #23]
	return res;
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b084      	sub	sp, #16
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	331a      	adds	r3, #26
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff f841 	bl	800adf4 <ld_word>
 800bd72:	4603      	mov	r3, r0
 800bd74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d109      	bne.n	800bd92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	3314      	adds	r3, #20
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff f836 	bl	800adf4 <ld_word>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	041b      	lsls	r3, r3, #16
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd92:	68fb      	ldr	r3, [r7, #12]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	331a      	adds	r3, #26
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	b292      	uxth	r2, r2
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff f859 	bl	800ae6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2b03      	cmp	r3, #3
 800bdbe:	d109      	bne.n	800bdd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f103 0214 	add.w	r2, r3, #20
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	0c1b      	lsrs	r3, r3, #16
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f7ff f84b 	bl	800ae6a <st_word>
	}
}
 800bdd4:	bf00      	nop
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bdea:	2100      	movs	r1, #0
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff fe2f 	bl	800ba50 <dir_sdi>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <dir_find+0x24>
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	e03e      	b.n	800be7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	69db      	ldr	r3, [r3, #28]
 800be04:	4619      	mov	r1, r3
 800be06:	6938      	ldr	r0, [r7, #16]
 800be08:	f7ff faa4 	bl	800b354 <move_window>
 800be0c:	4603      	mov	r3, r0
 800be0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800be10:	7dfb      	ldrb	r3, [r7, #23]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d12f      	bne.n	800be76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <dir_find+0x4e>
 800be24:	2304      	movs	r3, #4
 800be26:	75fb      	strb	r3, [r7, #23]
 800be28:	e028      	b.n	800be7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	330b      	adds	r3, #11
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be36:	b2da      	uxtb	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	330b      	adds	r3, #11
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	f003 0308 	and.w	r3, r3, #8
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <dir_find+0x86>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a18      	ldr	r0, [r3, #32]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3324      	adds	r3, #36	; 0x24
 800be54:	220b      	movs	r2, #11
 800be56:	4619      	mov	r1, r3
 800be58:	f7ff f88a 	bl	800af70 <mem_cmp>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800be62:	2100      	movs	r1, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7ff fe6e 	bl	800bb46 <dir_next>
 800be6a:	4603      	mov	r3, r0
 800be6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0c5      	beq.n	800be00 <dir_find+0x24>
 800be74:	e002      	b.n	800be7c <dir_find+0xa0>
		if (res != FR_OK) break;
 800be76:	bf00      	nop
 800be78:	e000      	b.n	800be7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800be7a:	bf00      	nop

	return res;
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800be94:	2101      	movs	r1, #1
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff ff1a 	bl	800bcd0 <dir_alloc>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d11c      	bne.n	800bee0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	4619      	mov	r1, r3
 800beac:	68b8      	ldr	r0, [r7, #8]
 800beae:	f7ff fa51 	bl	800b354 <move_window>
 800beb2:	4603      	mov	r3, r0
 800beb4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d111      	bne.n	800bee0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	2220      	movs	r2, #32
 800bec2:	2100      	movs	r1, #0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff f838 	bl	800af3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a18      	ldr	r0, [r3, #32]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3324      	adds	r3, #36	; 0x24
 800bed2:	220b      	movs	r2, #11
 800bed4:	4619      	mov	r1, r3
 800bed6:	f7ff f80f 	bl	800aef8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2201      	movs	r2, #1
 800bede:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3324      	adds	r3, #36	; 0x24
 800bf00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bf02:	220b      	movs	r2, #11
 800bf04:	2120      	movs	r1, #32
 800bf06:	68b8      	ldr	r0, [r7, #8]
 800bf08:	f7ff f817 	bl	800af3a <mem_set>
	si = i = 0; ni = 8;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	61fb      	str	r3, [r7, #28]
 800bf14:	2308      	movs	r3, #8
 800bf16:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	61fa      	str	r2, [r7, #28]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4413      	add	r3, r2
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bf26:	7efb      	ldrb	r3, [r7, #27]
 800bf28:	2b20      	cmp	r3, #32
 800bf2a:	d94e      	bls.n	800bfca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bf2c:	7efb      	ldrb	r3, [r7, #27]
 800bf2e:	2b2f      	cmp	r3, #47	; 0x2f
 800bf30:	d006      	beq.n	800bf40 <create_name+0x54>
 800bf32:	7efb      	ldrb	r3, [r7, #27]
 800bf34:	2b5c      	cmp	r3, #92	; 0x5c
 800bf36:	d110      	bne.n	800bf5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bf38:	e002      	b.n	800bf40 <create_name+0x54>
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	61fb      	str	r3, [r7, #28]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	4413      	add	r3, r2
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	2b2f      	cmp	r3, #47	; 0x2f
 800bf4a:	d0f6      	beq.n	800bf3a <create_name+0x4e>
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	4413      	add	r3, r2
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b5c      	cmp	r3, #92	; 0x5c
 800bf56:	d0f0      	beq.n	800bf3a <create_name+0x4e>
			break;
 800bf58:	e038      	b.n	800bfcc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bf5a:	7efb      	ldrb	r3, [r7, #27]
 800bf5c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf5e:	d003      	beq.n	800bf68 <create_name+0x7c>
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d30c      	bcc.n	800bf82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b0b      	cmp	r3, #11
 800bf6c:	d002      	beq.n	800bf74 <create_name+0x88>
 800bf6e:	7efb      	ldrb	r3, [r7, #27]
 800bf70:	2b2e      	cmp	r3, #46	; 0x2e
 800bf72:	d001      	beq.n	800bf78 <create_name+0x8c>
 800bf74:	2306      	movs	r3, #6
 800bf76:	e044      	b.n	800c002 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bf78:	2308      	movs	r3, #8
 800bf7a:	613b      	str	r3, [r7, #16]
 800bf7c:	230b      	movs	r3, #11
 800bf7e:	617b      	str	r3, [r7, #20]
			continue;
 800bf80:	e022      	b.n	800bfc8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bf82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	da04      	bge.n	800bf94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bf8a:	7efb      	ldrb	r3, [r7, #27]
 800bf8c:	3b80      	subs	r3, #128	; 0x80
 800bf8e:	4a1f      	ldr	r2, [pc, #124]	; (800c00c <create_name+0x120>)
 800bf90:	5cd3      	ldrb	r3, [r2, r3]
 800bf92:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bf94:	7efb      	ldrb	r3, [r7, #27]
 800bf96:	4619      	mov	r1, r3
 800bf98:	481d      	ldr	r0, [pc, #116]	; (800c010 <create_name+0x124>)
 800bf9a:	f7ff f810 	bl	800afbe <chk_chr>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <create_name+0xbc>
 800bfa4:	2306      	movs	r3, #6
 800bfa6:	e02c      	b.n	800c002 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bfa8:	7efb      	ldrb	r3, [r7, #27]
 800bfaa:	2b60      	cmp	r3, #96	; 0x60
 800bfac:	d905      	bls.n	800bfba <create_name+0xce>
 800bfae:	7efb      	ldrb	r3, [r7, #27]
 800bfb0:	2b7a      	cmp	r3, #122	; 0x7a
 800bfb2:	d802      	bhi.n	800bfba <create_name+0xce>
 800bfb4:	7efb      	ldrb	r3, [r7, #27]
 800bfb6:	3b20      	subs	r3, #32
 800bfb8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	613a      	str	r2, [r7, #16]
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	7efa      	ldrb	r2, [r7, #27]
 800bfc6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bfc8:	e7a6      	b.n	800bf18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bfca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	441a      	add	r2, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <create_name+0xf4>
 800bfdc:	2306      	movs	r3, #6
 800bfde:	e010      	b.n	800c002 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2be5      	cmp	r3, #229	; 0xe5
 800bfe6:	d102      	bne.n	800bfee <create_name+0x102>
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2205      	movs	r2, #5
 800bfec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bfee:	7efb      	ldrb	r3, [r7, #27]
 800bff0:	2b20      	cmp	r3, #32
 800bff2:	d801      	bhi.n	800bff8 <create_name+0x10c>
 800bff4:	2204      	movs	r2, #4
 800bff6:	e000      	b.n	800bffa <create_name+0x10e>
 800bff8:	2200      	movs	r2, #0
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	330b      	adds	r3, #11
 800bffe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c000:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c002:	4618      	mov	r0, r3
 800c004:	3720      	adds	r7, #32
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	0800ee30 	.word	0x0800ee30
 800c010:	0800ed8c 	.word	0x0800ed8c

0800c014 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c028:	e002      	b.n	800c030 <follow_path+0x1c>
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	3301      	adds	r3, #1
 800c02e:	603b      	str	r3, [r7, #0]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2b2f      	cmp	r3, #47	; 0x2f
 800c036:	d0f8      	beq.n	800c02a <follow_path+0x16>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b5c      	cmp	r3, #92	; 0x5c
 800c03e:	d0f4      	beq.n	800c02a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	2200      	movs	r2, #0
 800c044:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b1f      	cmp	r3, #31
 800c04c:	d80a      	bhi.n	800c064 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2280      	movs	r2, #128	; 0x80
 800c052:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c056:	2100      	movs	r1, #0
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff fcf9 	bl	800ba50 <dir_sdi>
 800c05e:	4603      	mov	r3, r0
 800c060:	75fb      	strb	r3, [r7, #23]
 800c062:	e043      	b.n	800c0ec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c064:	463b      	mov	r3, r7
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff ff3f 	bl	800beec <create_name>
 800c06e:	4603      	mov	r3, r0
 800c070:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c072:	7dfb      	ldrb	r3, [r7, #23]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d134      	bne.n	800c0e2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff feaf 	bl	800bddc <dir_find>
 800c07e:	4603      	mov	r3, r0
 800c080:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c088:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c08a:	7dfb      	ldrb	r3, [r7, #23]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00a      	beq.n	800c0a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	2b04      	cmp	r3, #4
 800c094:	d127      	bne.n	800c0e6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c096:	7afb      	ldrb	r3, [r7, #11]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d122      	bne.n	800c0e6 <follow_path+0xd2>
 800c0a0:	2305      	movs	r3, #5
 800c0a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c0a4:	e01f      	b.n	800c0e6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d11c      	bne.n	800c0ea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	799b      	ldrb	r3, [r3, #6]
 800c0b4:	f003 0310 	and.w	r3, r3, #16
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c0bc:	2305      	movs	r3, #5
 800c0be:	75fb      	strb	r3, [r7, #23]
 800c0c0:	e014      	b.n	800c0ec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d0:	4413      	add	r3, r2
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff fe42 	bl	800bd5e <ld_clust>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c0e0:	e7c0      	b.n	800c064 <follow_path+0x50>
			if (res != FR_OK) break;
 800c0e2:	bf00      	nop
 800c0e4:	e002      	b.n	800c0ec <follow_path+0xd8>
				break;
 800c0e6:	bf00      	nop
 800c0e8:	e000      	b.n	800c0ec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0ea:	bf00      	nop
			}
		}
	}

	return res;
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b087      	sub	sp, #28
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c102:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d031      	beq.n	800c170 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	e002      	b.n	800c11a <get_ldnumber+0x24>
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	3301      	adds	r3, #1
 800c118:	617b      	str	r3, [r7, #20]
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d903      	bls.n	800c12a <get_ldnumber+0x34>
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	2b3a      	cmp	r3, #58	; 0x3a
 800c128:	d1f4      	bne.n	800c114 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b3a      	cmp	r3, #58	; 0x3a
 800c130:	d11c      	bne.n	800c16c <get_ldnumber+0x76>
			tp = *path;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	60fa      	str	r2, [r7, #12]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	3b30      	subs	r3, #48	; 0x30
 800c142:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b09      	cmp	r3, #9
 800c148:	d80e      	bhi.n	800c168 <get_ldnumber+0x72>
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d10a      	bne.n	800c168 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d107      	bne.n	800c168 <get_ldnumber+0x72>
					vol = (int)i;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	3301      	adds	r3, #1
 800c160:	617b      	str	r3, [r7, #20]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	e002      	b.n	800c172 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c16c:	2300      	movs	r3, #0
 800c16e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c170:	693b      	ldr	r3, [r7, #16]
}
 800c172:	4618      	mov	r0, r3
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	70da      	strb	r2, [r3, #3]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f04f 32ff 	mov.w	r2, #4294967295
 800c196:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff f8da 	bl	800b354 <move_window>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <check_fs+0x2a>
 800c1a6:	2304      	movs	r3, #4
 800c1a8:	e038      	b.n	800c21c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3330      	adds	r3, #48	; 0x30
 800c1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fe1e 	bl	800adf4 <ld_word>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d001      	beq.n	800c1c8 <check_fs+0x48>
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e029      	b.n	800c21c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1ce:	2be9      	cmp	r3, #233	; 0xe9
 800c1d0:	d009      	beq.n	800c1e6 <check_fs+0x66>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1d8:	2beb      	cmp	r3, #235	; 0xeb
 800c1da:	d11e      	bne.n	800c21a <check_fs+0x9a>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c1e2:	2b90      	cmp	r3, #144	; 0x90
 800c1e4:	d119      	bne.n	800c21a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3330      	adds	r3, #48	; 0x30
 800c1ea:	3336      	adds	r3, #54	; 0x36
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fe19 	bl	800ae24 <ld_dword>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1f8:	4a0a      	ldr	r2, [pc, #40]	; (800c224 <check_fs+0xa4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d101      	bne.n	800c202 <check_fs+0x82>
 800c1fe:	2300      	movs	r3, #0
 800c200:	e00c      	b.n	800c21c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3330      	adds	r3, #48	; 0x30
 800c206:	3352      	adds	r3, #82	; 0x52
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fe0b 	bl	800ae24 <ld_dword>
 800c20e:	4603      	mov	r3, r0
 800c210:	4a05      	ldr	r2, [pc, #20]	; (800c228 <check_fs+0xa8>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d101      	bne.n	800c21a <check_fs+0x9a>
 800c216:	2300      	movs	r3, #0
 800c218:	e000      	b.n	800c21c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c21a:	2302      	movs	r3, #2
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	00544146 	.word	0x00544146
 800c228:	33544146 	.word	0x33544146

0800c22c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b096      	sub	sp, #88	; 0x58
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	4613      	mov	r3, r2
 800c238:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2200      	movs	r2, #0
 800c23e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7ff ff58 	bl	800c0f6 <get_ldnumber>
 800c246:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	da01      	bge.n	800c252 <find_volume+0x26>
 800c24e:	230b      	movs	r3, #11
 800c250:	e22d      	b.n	800c6ae <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c252:	4aa1      	ldr	r2, [pc, #644]	; (800c4d8 <find_volume+0x2ac>)
 800c254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c25a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <find_volume+0x3a>
 800c262:	230c      	movs	r3, #12
 800c264:	e223      	b.n	800c6ae <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c26a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	f023 0301 	bic.w	r3, r3, #1
 800c272:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01a      	beq.n	800c2b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	4618      	mov	r0, r3
 800c282:	f7fe fd19 	bl	800acb8 <disk_status>
 800c286:	4603      	mov	r3, r0
 800c288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c290:	f003 0301 	and.w	r3, r3, #1
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10c      	bne.n	800c2b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <find_volume+0x82>
 800c29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2a2:	f003 0304 	and.w	r3, r3, #4
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c2aa:	230a      	movs	r3, #10
 800c2ac:	e1ff      	b.n	800c6ae <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e1fd      	b.n	800c6ae <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	785b      	ldrb	r3, [r3, #1]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fe fd11 	bl	800acec <disk_initialize>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e1e6      	b.n	800c6ae <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d007      	beq.n	800c2f6 <find_volume+0xca>
 800c2e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2ea:	f003 0304 	and.w	r3, r3, #4
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c2f2:	230a      	movs	r3, #10
 800c2f4:	e1db      	b.n	800c6ae <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c2fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2fe:	f7ff ff3f 	bl	800c180 <check_fs>
 800c302:	4603      	mov	r3, r0
 800c304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d149      	bne.n	800c3a4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c310:	2300      	movs	r3, #0
 800c312:	643b      	str	r3, [r7, #64]	; 0x40
 800c314:	e01e      	b.n	800c354 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31e:	011b      	lsls	r3, r3, #4
 800c320:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c324:	4413      	add	r3, r2
 800c326:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	3304      	adds	r3, #4
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d006      	beq.n	800c340 <find_volume+0x114>
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	3308      	adds	r3, #8
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe fd74 	bl	800ae24 <ld_dword>
 800c33c:	4602      	mov	r2, r0
 800c33e:	e000      	b.n	800c342 <find_volume+0x116>
 800c340:	2200      	movs	r2, #0
 800c342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	3358      	adds	r3, #88	; 0x58
 800c348:	443b      	add	r3, r7
 800c34a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c350:	3301      	adds	r3, #1
 800c352:	643b      	str	r3, [r7, #64]	; 0x40
 800c354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c356:	2b03      	cmp	r3, #3
 800c358:	d9dd      	bls.n	800c316 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c35a:	2300      	movs	r3, #0
 800c35c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <find_volume+0x13e>
 800c364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c366:	3b01      	subs	r3, #1
 800c368:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	3358      	adds	r3, #88	; 0x58
 800c370:	443b      	add	r3, r7
 800c372:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c376:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <find_volume+0x15e>
 800c37e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c382:	f7ff fefd 	bl	800c180 <check_fs>
 800c386:	4603      	mov	r3, r0
 800c388:	e000      	b.n	800c38c <find_volume+0x160>
 800c38a:	2303      	movs	r3, #3
 800c38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c394:	2b01      	cmp	r3, #1
 800c396:	d905      	bls.n	800c3a4 <find_volume+0x178>
 800c398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c39a:	3301      	adds	r3, #1
 800c39c:	643b      	str	r3, [r7, #64]	; 0x40
 800c39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	d9e2      	bls.n	800c36a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3a8:	2b04      	cmp	r3, #4
 800c3aa:	d101      	bne.n	800c3b0 <find_volume+0x184>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e17e      	b.n	800c6ae <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d901      	bls.n	800c3bc <find_volume+0x190>
 800c3b8:	230d      	movs	r3, #13
 800c3ba:	e178      	b.n	800c6ae <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	3330      	adds	r3, #48	; 0x30
 800c3c0:	330b      	adds	r3, #11
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe fd16 	bl	800adf4 <ld_word>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3ce:	d001      	beq.n	800c3d4 <find_volume+0x1a8>
 800c3d0:	230d      	movs	r3, #13
 800c3d2:	e16c      	b.n	800c6ae <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	3330      	adds	r3, #48	; 0x30
 800c3d8:	3316      	adds	r3, #22
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fd0a 	bl	800adf4 <ld_word>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <find_volume+0x1cc>
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ec:	3330      	adds	r3, #48	; 0x30
 800c3ee:	3324      	adds	r3, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fd17 	bl	800ae24 <ld_dword>
 800c3f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3fc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	789b      	ldrb	r3, [r3, #2]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d005      	beq.n	800c41c <find_volume+0x1f0>
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	789b      	ldrb	r3, [r3, #2]
 800c414:	2b02      	cmp	r3, #2
 800c416:	d001      	beq.n	800c41c <find_volume+0x1f0>
 800c418:	230d      	movs	r3, #13
 800c41a:	e148      	b.n	800c6ae <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	789b      	ldrb	r3, [r3, #2]
 800c420:	461a      	mov	r2, r3
 800c422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c424:	fb02 f303 	mul.w	r3, r2, r3
 800c428:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c430:	b29a      	uxth	r2, r3
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	895b      	ldrh	r3, [r3, #10]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d008      	beq.n	800c450 <find_volume+0x224>
 800c43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c440:	895b      	ldrh	r3, [r3, #10]
 800c442:	461a      	mov	r2, r3
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	895b      	ldrh	r3, [r3, #10]
 800c448:	3b01      	subs	r3, #1
 800c44a:	4013      	ands	r3, r2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <find_volume+0x228>
 800c450:	230d      	movs	r3, #13
 800c452:	e12c      	b.n	800c6ae <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c456:	3330      	adds	r3, #48	; 0x30
 800c458:	3311      	adds	r3, #17
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fe fcca 	bl	800adf4 <ld_word>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	891b      	ldrh	r3, [r3, #8]
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	b29b      	uxth	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <find_volume+0x24e>
 800c476:	230d      	movs	r3, #13
 800c478:	e119      	b.n	800c6ae <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47c:	3330      	adds	r3, #48	; 0x30
 800c47e:	3313      	adds	r3, #19
 800c480:	4618      	mov	r0, r3
 800c482:	f7fe fcb7 	bl	800adf4 <ld_word>
 800c486:	4603      	mov	r3, r0
 800c488:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d106      	bne.n	800c49e <find_volume+0x272>
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	3330      	adds	r3, #48	; 0x30
 800c494:	3320      	adds	r3, #32
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe fcc4 	bl	800ae24 <ld_dword>
 800c49c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	3330      	adds	r3, #48	; 0x30
 800c4a2:	330e      	adds	r3, #14
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe fca5 	bl	800adf4 <ld_word>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c4ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <find_volume+0x28c>
 800c4b4:	230d      	movs	r3, #13
 800c4b6:	e0fa      	b.n	800c6ae <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c4b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4bc:	4413      	add	r3, r2
 800c4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4c0:	8912      	ldrh	r2, [r2, #8]
 800c4c2:	0912      	lsrs	r2, r2, #4
 800c4c4:	b292      	uxth	r2, r2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c4ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d204      	bcs.n	800c4dc <find_volume+0x2b0>
 800c4d2:	230d      	movs	r3, #13
 800c4d4:	e0eb      	b.n	800c6ae <find_volume+0x482>
 800c4d6:	bf00      	nop
 800c4d8:	2000089c 	.word	0x2000089c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c4dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e4:	8952      	ldrh	r2, [r2, #10]
 800c4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d101      	bne.n	800c4f6 <find_volume+0x2ca>
 800c4f2:	230d      	movs	r3, #13
 800c4f4:	e0db      	b.n	800c6ae <find_volume+0x482>
		fmt = FS_FAT32;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c502:	4293      	cmp	r3, r2
 800c504:	d802      	bhi.n	800c50c <find_volume+0x2e0>
 800c506:	2302      	movs	r3, #2
 800c508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c512:	4293      	cmp	r3, r2
 800c514:	d802      	bhi.n	800c51c <find_volume+0x2f0>
 800c516:	2301      	movs	r3, #1
 800c518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	1c9a      	adds	r2, r3, #2
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c528:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c52a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c52e:	441a      	add	r2, r3
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c538:	441a      	add	r2, r3
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c53e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c542:	2b03      	cmp	r3, #3
 800c544:	d11e      	bne.n	800c584 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	3330      	adds	r3, #48	; 0x30
 800c54a:	332a      	adds	r3, #42	; 0x2a
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe fc51 	bl	800adf4 <ld_word>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <find_volume+0x330>
 800c558:	230d      	movs	r3, #13
 800c55a:	e0a8      	b.n	800c6ae <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	891b      	ldrh	r3, [r3, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <find_volume+0x33c>
 800c564:	230d      	movs	r3, #13
 800c566:	e0a2      	b.n	800c6ae <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56a:	3330      	adds	r3, #48	; 0x30
 800c56c:	332c      	adds	r3, #44	; 0x2c
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe fc58 	bl	800ae24 <ld_dword>
 800c574:	4602      	mov	r2, r0
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	647b      	str	r3, [r7, #68]	; 0x44
 800c582:	e01f      	b.n	800c5c4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c586:	891b      	ldrh	r3, [r3, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <find_volume+0x364>
 800c58c:	230d      	movs	r3, #13
 800c58e:	e08e      	b.n	800c6ae <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	6a1a      	ldr	r2, [r3, #32]
 800c594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c596:	441a      	add	r2, r3
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d103      	bne.n	800c5ac <find_volume+0x380>
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	e00a      	b.n	800c5c2 <find_volume+0x396>
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	695a      	ldr	r2, [r3, #20]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	4413      	add	r3, r2
 800c5b6:	085a      	lsrs	r2, r3, #1
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c5c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c5ce:	0a5b      	lsrs	r3, r3, #9
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d201      	bcs.n	800c5d8 <find_volume+0x3ac>
 800c5d4:	230d      	movs	r3, #13
 800c5d6:	e06a      	b.n	800c6ae <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	f04f 32ff 	mov.w	r2, #4294967295
 800c5de:	611a      	str	r2, [r3, #16]
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	691a      	ldr	r2, [r3, #16]
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	2280      	movs	r2, #128	; 0x80
 800c5ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c5ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d149      	bne.n	800c68a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	3330      	adds	r3, #48	; 0x30
 800c5fa:	3330      	adds	r3, #48	; 0x30
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fe fbf9 	bl	800adf4 <ld_word>
 800c602:	4603      	mov	r3, r0
 800c604:	2b01      	cmp	r3, #1
 800c606:	d140      	bne.n	800c68a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60a:	3301      	adds	r3, #1
 800c60c:	4619      	mov	r1, r3
 800c60e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c610:	f7fe fea0 	bl	800b354 <move_window>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d137      	bne.n	800c68a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	2200      	movs	r2, #0
 800c61e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	3330      	adds	r3, #48	; 0x30
 800c624:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fe fbe3 	bl	800adf4 <ld_word>
 800c62e:	4603      	mov	r3, r0
 800c630:	461a      	mov	r2, r3
 800c632:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c636:	429a      	cmp	r2, r3
 800c638:	d127      	bne.n	800c68a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	3330      	adds	r3, #48	; 0x30
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fe fbf0 	bl	800ae24 <ld_dword>
 800c644:	4603      	mov	r3, r0
 800c646:	4a1c      	ldr	r2, [pc, #112]	; (800c6b8 <find_volume+0x48c>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d11e      	bne.n	800c68a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	3330      	adds	r3, #48	; 0x30
 800c650:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c654:	4618      	mov	r0, r3
 800c656:	f7fe fbe5 	bl	800ae24 <ld_dword>
 800c65a:	4603      	mov	r3, r0
 800c65c:	4a17      	ldr	r2, [pc, #92]	; (800c6bc <find_volume+0x490>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d113      	bne.n	800c68a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	3330      	adds	r3, #48	; 0x30
 800c666:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fbda 	bl	800ae24 <ld_dword>
 800c670:	4602      	mov	r2, r0
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	3330      	adds	r3, #48	; 0x30
 800c67a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe fbd0 	bl	800ae24 <ld_dword>
 800c684:	4602      	mov	r2, r0
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c690:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c692:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <find_volume+0x494>)
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	3301      	adds	r3, #1
 800c698:	b29a      	uxth	r2, r3
 800c69a:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <find_volume+0x494>)
 800c69c:	801a      	strh	r2, [r3, #0]
 800c69e:	4b08      	ldr	r3, [pc, #32]	; (800c6c0 <find_volume+0x494>)
 800c6a0:	881a      	ldrh	r2, [r3, #0]
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c6a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6a8:	f7fe fdec 	bl	800b284 <clear_lock>
#endif
	return FR_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3758      	adds	r7, #88	; 0x58
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	41615252 	.word	0x41615252
 800c6bc:	61417272 	.word	0x61417272
 800c6c0:	200008a0 	.word	0x200008a0

0800c6c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c6ce:	2309      	movs	r3, #9
 800c6d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d01c      	beq.n	800c712 <validate+0x4e>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d018      	beq.n	800c712 <validate+0x4e>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d013      	beq.n	800c712 <validate+0x4e>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	889a      	ldrh	r2, [r3, #4]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	88db      	ldrh	r3, [r3, #6]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d10c      	bne.n	800c712 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fada 	bl	800acb8 <disk_status>
 800c704:	4603      	mov	r3, r0
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <validate+0x4e>
			res = FR_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c712:	7bfb      	ldrb	r3, [r7, #15]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d102      	bne.n	800c71e <validate+0x5a>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	e000      	b.n	800c720 <validate+0x5c>
 800c71e:	2300      	movs	r3, #0
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	6013      	str	r3, [r2, #0]
	return res;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
	...

0800c730 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	4613      	mov	r3, r2
 800c73c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c742:	f107 0310 	add.w	r3, r7, #16
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff fcd5 	bl	800c0f6 <get_ldnumber>
 800c74c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	2b00      	cmp	r3, #0
 800c752:	da01      	bge.n	800c758 <f_mount+0x28>
 800c754:	230b      	movs	r3, #11
 800c756:	e02b      	b.n	800c7b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c758:	4a17      	ldr	r2, [pc, #92]	; (800c7b8 <f_mount+0x88>)
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c760:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c768:	69b8      	ldr	r0, [r7, #24]
 800c76a:	f7fe fd8b 	bl	800b284 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	2200      	movs	r2, #0
 800c772:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	490d      	ldr	r1, [pc, #52]	; (800c7b8 <f_mount+0x88>)
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <f_mount+0x66>
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d001      	beq.n	800c79a <f_mount+0x6a>
 800c796:	2300      	movs	r3, #0
 800c798:	e00a      	b.n	800c7b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c79a:	f107 010c 	add.w	r1, r7, #12
 800c79e:	f107 0308 	add.w	r3, r7, #8
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff fd41 	bl	800c22c <find_volume>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3720      	adds	r7, #32
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	2000089c 	.word	0x2000089c

0800c7bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b098      	sub	sp, #96	; 0x60
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <f_open+0x18>
 800c7d0:	2309      	movs	r3, #9
 800c7d2:	e1ad      	b.n	800cb30 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c7dc:	79fa      	ldrb	r2, [r7, #7]
 800c7de:	f107 0110 	add.w	r1, r7, #16
 800c7e2:	f107 0308 	add.w	r3, r7, #8
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff fd20 	bl	800c22c <find_volume>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c7f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f040 8191 	bne.w	800cb1e <f_open+0x362>
		dj.obj.fs = fs;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c800:	68ba      	ldr	r2, [r7, #8]
 800c802:	f107 0314 	add.w	r3, r7, #20
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fc03 	bl	800c014 <follow_path>
 800c80e:	4603      	mov	r3, r0
 800c810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d11a      	bne.n	800c852 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c81c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c820:	b25b      	sxtb	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	da03      	bge.n	800c82e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c826:	2306      	movs	r3, #6
 800c828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c82c:	e011      	b.n	800c852 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c82e:	79fb      	ldrb	r3, [r7, #7]
 800c830:	f023 0301 	bic.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	bf14      	ite	ne
 800c838:	2301      	movne	r3, #1
 800c83a:	2300      	moveq	r3, #0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	461a      	mov	r2, r3
 800c840:	f107 0314 	add.w	r3, r7, #20
 800c844:	4611      	mov	r1, r2
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fbd4 	bl	800aff4 <chk_lock>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	f003 031c 	and.w	r3, r3, #28
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d07f      	beq.n	800c95c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c85c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c860:	2b00      	cmp	r3, #0
 800c862:	d017      	beq.n	800c894 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c868:	2b04      	cmp	r3, #4
 800c86a:	d10e      	bne.n	800c88a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c86c:	f7fe fc1e 	bl	800b0ac <enq_lock>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d006      	beq.n	800c884 <f_open+0xc8>
 800c876:	f107 0314 	add.w	r3, r7, #20
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff fb03 	bl	800be86 <dir_register>
 800c880:	4603      	mov	r3, r0
 800c882:	e000      	b.n	800c886 <f_open+0xca>
 800c884:	2312      	movs	r3, #18
 800c886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c88a:	79fb      	ldrb	r3, [r7, #7]
 800c88c:	f043 0308 	orr.w	r3, r3, #8
 800c890:	71fb      	strb	r3, [r7, #7]
 800c892:	e010      	b.n	800c8b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c894:	7ebb      	ldrb	r3, [r7, #26]
 800c896:	f003 0311 	and.w	r3, r3, #17
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <f_open+0xea>
					res = FR_DENIED;
 800c89e:	2307      	movs	r3, #7
 800c8a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c8a4:	e007      	b.n	800c8b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <f_open+0xfa>
 800c8b0:	2308      	movs	r3, #8
 800c8b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c8b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d168      	bne.n	800c990 <f_open+0x1d4>
 800c8be:	79fb      	ldrb	r3, [r7, #7]
 800c8c0:	f003 0308 	and.w	r3, r3, #8
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d063      	beq.n	800c990 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c8c8:	f7fb fcd2 	bl	8008270 <get_fattime>
 800c8cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d0:	330e      	adds	r3, #14
 800c8d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe fae3 	bl	800aea0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8dc:	3316      	adds	r3, #22
 800c8de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fe fadd 	bl	800aea0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e8:	330b      	adds	r3, #11
 800c8ea:	2220      	movs	r2, #32
 800c8ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fa32 	bl	800bd5e <ld_clust>
 800c8fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c900:	2200      	movs	r2, #0
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fa4a 	bl	800bd9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90a:	331c      	adds	r3, #28
 800c90c:	2100      	movs	r1, #0
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fac6 	bl	800aea0 <st_dword>
					fs->wflag = 1;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	2201      	movs	r2, #1
 800c918:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d037      	beq.n	800c990 <f_open+0x1d4>
						dw = fs->winsect;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c924:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c926:	f107 0314 	add.w	r3, r7, #20
 800c92a:	2200      	movs	r2, #0
 800c92c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe ff5d 	bl	800b7ee <remove_chain>
 800c934:	4603      	mov	r3, r0
 800c936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c93a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d126      	bne.n	800c990 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fd04 	bl	800b354 <move_window>
 800c94c:	4603      	mov	r3, r0
 800c94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c956:	3a01      	subs	r2, #1
 800c958:	60da      	str	r2, [r3, #12]
 800c95a:	e019      	b.n	800c990 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c960:	2b00      	cmp	r3, #0
 800c962:	d115      	bne.n	800c990 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c964:	7ebb      	ldrb	r3, [r7, #26]
 800c966:	f003 0310 	and.w	r3, r3, #16
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c96e:	2304      	movs	r3, #4
 800c970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c974:	e00c      	b.n	800c990 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c976:	79fb      	ldrb	r3, [r7, #7]
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d007      	beq.n	800c990 <f_open+0x1d4>
 800c980:	7ebb      	ldrb	r3, [r7, #26]
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <f_open+0x1d4>
						res = FR_DENIED;
 800c98a:	2307      	movs	r3, #7
 800c98c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c994:	2b00      	cmp	r3, #0
 800c996:	d128      	bne.n	800c9ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d003      	beq.n	800c9aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c9a2:	79fb      	ldrb	r3, [r7, #7]
 800c9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	f023 0301 	bic.w	r3, r3, #1
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	bf14      	ite	ne
 800c9c2:	2301      	movne	r3, #1
 800c9c4:	2300      	moveq	r3, #0
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	f107 0314 	add.w	r3, r7, #20
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fb8d 	bl	800b0f0 <inc_lock>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d102      	bne.n	800c9ea <f_open+0x22e>
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f040 8095 	bne.w	800cb1e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff f9af 	bl	800bd5e <ld_clust>
 800ca00:	4602      	mov	r2, r0
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ca06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca08:	331c      	adds	r3, #28
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe fa0a 	bl	800ae24 <ld_dword>
 800ca10:	4602      	mov	r2, r0
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	88da      	ldrh	r2, [r3, #6]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	79fa      	ldrb	r2, [r7, #7]
 800ca2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3330      	adds	r3, #48	; 0x30
 800ca46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe fa74 	bl	800af3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	f003 0320 	and.w	r3, r3, #32
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d060      	beq.n	800cb1e <f_open+0x362>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d05c      	beq.n	800cb1e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	895b      	ldrh	r3, [r3, #10]
 800ca70:	025b      	lsls	r3, r3, #9
 800ca72:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	657b      	str	r3, [r7, #84]	; 0x54
 800ca80:	e016      	b.n	800cab0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fd1f 	bl	800b4ca <get_fat>
 800ca8c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ca8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d802      	bhi.n	800ca9a <f_open+0x2de>
 800ca94:	2302      	movs	r3, #2
 800ca96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ca9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa0:	d102      	bne.n	800caa8 <f_open+0x2ec>
 800caa2:	2301      	movs	r3, #1
 800caa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800caa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800caaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	657b      	str	r3, [r7, #84]	; 0x54
 800cab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <f_open+0x304>
 800cab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800caba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d8e0      	bhi.n	800ca82 <f_open+0x2c6>
				}
				fp->clust = clst;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cac4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d127      	bne.n	800cb1e <f_open+0x362>
 800cace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d022      	beq.n	800cb1e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe fcd5 	bl	800b48c <clust2sect>
 800cae2:	6478      	str	r0, [r7, #68]	; 0x44
 800cae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <f_open+0x336>
						res = FR_INT_ERR;
 800caea:	2302      	movs	r3, #2
 800caec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800caf0:	e015      	b.n	800cb1e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800caf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf4:	0a5a      	lsrs	r2, r3, #9
 800caf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caf8:	441a      	add	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	7858      	ldrb	r0, [r3, #1]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6a1a      	ldr	r2, [r3, #32]
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	f7fe f913 	bl	800ad38 <disk_read>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <f_open+0x362>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cb1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <f_open+0x370>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cb2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3760      	adds	r7, #96	; 0x60
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08e      	sub	sp, #56	; 0x38
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f107 0214 	add.w	r2, r7, #20
 800cb56:	4611      	mov	r1, r2
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff fdb3 	bl	800c6c4 <validate>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d107      	bne.n	800cb7c <f_read+0x44>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	7d5b      	ldrb	r3, [r3, #21]
 800cb70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cb74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <f_read+0x4a>
 800cb7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb80:	e115      	b.n	800cdae <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	7d1b      	ldrb	r3, [r3, #20]
 800cb86:	f003 0301 	and.w	r3, r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <f_read+0x5a>
 800cb8e:	2307      	movs	r3, #7
 800cb90:	e10d      	b.n	800cdae <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	68da      	ldr	r2, [r3, #12]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	f240 80fe 	bls.w	800cda4 <f_read+0x26c>
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cbac:	e0fa      	b.n	800cda4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f040 80c6 	bne.w	800cd48 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	0a5b      	lsrs	r3, r3, #9
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	8952      	ldrh	r2, [r2, #10]
 800cbc6:	3a01      	subs	r2, #1
 800cbc8:	4013      	ands	r3, r2
 800cbca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d12f      	bne.n	800cc32 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d103      	bne.n	800cbe2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	633b      	str	r3, [r7, #48]	; 0x30
 800cbe0:	e013      	b.n	800cc0a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d007      	beq.n	800cbfa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7fe fef9 	bl	800b9e8 <clmt_clust>
 800cbf6:	6338      	str	r0, [r7, #48]	; 0x30
 800cbf8:	e007      	b.n	800cc0a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	4619      	mov	r1, r3
 800cc02:	4610      	mov	r0, r2
 800cc04:	f7fe fc61 	bl	800b4ca <get_fat>
 800cc08:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d804      	bhi.n	800cc1a <f_read+0xe2>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2202      	movs	r2, #2
 800cc14:	755a      	strb	r2, [r3, #21]
 800cc16:	2302      	movs	r3, #2
 800cc18:	e0c9      	b.n	800cdae <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc20:	d104      	bne.n	800cc2c <f_read+0xf4>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2201      	movs	r2, #1
 800cc26:	755a      	strb	r2, [r3, #21]
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e0c0      	b.n	800cdae <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc30:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	4619      	mov	r1, r3
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	f7fe fc26 	bl	800b48c <clust2sect>
 800cc40:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d104      	bne.n	800cc52 <f_read+0x11a>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	755a      	strb	r2, [r3, #21]
 800cc4e:	2302      	movs	r3, #2
 800cc50:	e0ad      	b.n	800cdae <f_read+0x276>
			sect += csect;
 800cc52:	69ba      	ldr	r2, [r7, #24]
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	4413      	add	r3, r2
 800cc58:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	0a5b      	lsrs	r3, r3, #9
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d039      	beq.n	800ccda <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	4413      	add	r3, r2
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	8952      	ldrh	r2, [r2, #10]
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d905      	bls.n	800cc80 <f_read+0x148>
					cc = fs->csize - csect;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	895b      	ldrh	r3, [r3, #10]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	1ad3      	subs	r3, r2, r3
 800cc7e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	7858      	ldrb	r0, [r3, #1]
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc8a:	f7fe f855 	bl	800ad38 <disk_read>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d004      	beq.n	800cc9e <f_read+0x166>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	755a      	strb	r2, [r3, #21]
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e087      	b.n	800cdae <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	7d1b      	ldrb	r3, [r3, #20]
 800cca2:	b25b      	sxtb	r3, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	da14      	bge.n	800ccd2 <f_read+0x19a>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6a1a      	ldr	r2, [r3, #32]
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d90d      	bls.n	800ccd2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6a1a      	ldr	r2, [r3, #32]
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	025b      	lsls	r3, r3, #9
 800ccc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccc2:	18d0      	adds	r0, r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3330      	adds	r3, #48	; 0x30
 800ccc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cccc:	4619      	mov	r1, r3
 800ccce:	f7fe f913 	bl	800aef8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	025b      	lsls	r3, r3, #9
 800ccd6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ccd8:	e050      	b.n	800cd7c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
 800ccde:	69ba      	ldr	r2, [r7, #24]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d02e      	beq.n	800cd42 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	7d1b      	ldrb	r3, [r3, #20]
 800cce8:	b25b      	sxtb	r3, r3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	da18      	bge.n	800cd20 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	7858      	ldrb	r0, [r3, #1]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6a1a      	ldr	r2, [r3, #32]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f7fe f83b 	bl	800ad78 <disk_write>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d004      	beq.n	800cd12 <f_read+0x1da>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	755a      	strb	r2, [r3, #21]
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e04d      	b.n	800cdae <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	7d1b      	ldrb	r3, [r3, #20]
 800cd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	7858      	ldrb	r0, [r3, #1]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	69ba      	ldr	r2, [r7, #24]
 800cd2e:	f7fe f803 	bl	800ad38 <disk_read>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d004      	beq.n	800cd42 <f_read+0x20a>
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	755a      	strb	r2, [r3, #21]
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e035      	b.n	800cdae <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cd54:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cd56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d901      	bls.n	800cd62 <f_read+0x22a>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd70:	4413      	add	r3, r2
 800cd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd74:	4619      	mov	r1, r3
 800cd76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd78:	f7fe f8be 	bl	800aef8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cd7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	4413      	add	r3, r2
 800cd82:	627b      	str	r3, [r7, #36]	; 0x24
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	699a      	ldr	r2, [r3, #24]
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	441a      	add	r2, r3
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	619a      	str	r2, [r3, #24]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	441a      	add	r2, r3
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f47f af01 	bne.w	800cbae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3738      	adds	r7, #56	; 0x38
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b08c      	sub	sp, #48	; 0x30
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f107 0210 	add.w	r2, r7, #16
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fc74 	bl	800c6c4 <validate>
 800cddc:	4603      	mov	r3, r0
 800cdde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cde2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d107      	bne.n	800cdfa <f_write+0x44>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	7d5b      	ldrb	r3, [r3, #21]
 800cdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <f_write+0x4a>
 800cdfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdfe:	e14b      	b.n	800d098 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	7d1b      	ldrb	r3, [r3, #20]
 800ce04:	f003 0302 	and.w	r3, r3, #2
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <f_write+0x5a>
 800ce0c:	2307      	movs	r3, #7
 800ce0e:	e143      	b.n	800d098 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	699a      	ldr	r2, [r3, #24]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	441a      	add	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	f080 812d 	bcs.w	800d07c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	43db      	mvns	r3, r3
 800ce28:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ce2a:	e127      	b.n	800d07c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f040 80e3 	bne.w	800d000 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	0a5b      	lsrs	r3, r3, #9
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	8952      	ldrh	r2, [r2, #10]
 800ce44:	3a01      	subs	r2, #1
 800ce46:	4013      	ands	r3, r2
 800ce48:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d143      	bne.n	800ced8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10c      	bne.n	800ce72 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d11a      	bne.n	800ce9a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe fd25 	bl	800b8b8 <create_chain>
 800ce6e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce70:	e013      	b.n	800ce9a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d007      	beq.n	800ce8a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f7fe fdb1 	bl	800b9e8 <clmt_clust>
 800ce86:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce88:	e007      	b.n	800ce9a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	4619      	mov	r1, r3
 800ce92:	4610      	mov	r0, r2
 800ce94:	f7fe fd10 	bl	800b8b8 <create_chain>
 800ce98:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 80f2 	beq.w	800d086 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d104      	bne.n	800ceb2 <f_write+0xfc>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2202      	movs	r2, #2
 800ceac:	755a      	strb	r2, [r3, #21]
 800ceae:	2302      	movs	r3, #2
 800ceb0:	e0f2      	b.n	800d098 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb8:	d104      	bne.n	800cec4 <f_write+0x10e>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2201      	movs	r2, #1
 800cebe:	755a      	strb	r2, [r3, #21]
 800cec0:	2301      	movs	r3, #1
 800cec2:	e0e9      	b.n	800d098 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cec8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <f_write+0x122>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ced6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	7d1b      	ldrb	r3, [r3, #20]
 800cedc:	b25b      	sxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	da18      	bge.n	800cf14 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	7858      	ldrb	r0, [r3, #1]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a1a      	ldr	r2, [r3, #32]
 800cef0:	2301      	movs	r3, #1
 800cef2:	f7fd ff41 	bl	800ad78 <disk_write>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <f_write+0x150>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2201      	movs	r2, #1
 800cf00:	755a      	strb	r2, [r3, #21]
 800cf02:	2301      	movs	r3, #1
 800cf04:	e0c8      	b.n	800d098 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	7d1b      	ldrb	r3, [r3, #20]
 800cf0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cf14:	693a      	ldr	r2, [r7, #16]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	f7fe fab5 	bl	800b48c <clust2sect>
 800cf22:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d104      	bne.n	800cf34 <f_write+0x17e>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	755a      	strb	r2, [r3, #21]
 800cf30:	2302      	movs	r3, #2
 800cf32:	e0b1      	b.n	800d098 <f_write+0x2e2>
			sect += csect;
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	4413      	add	r3, r2
 800cf3a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	0a5b      	lsrs	r3, r3, #9
 800cf40:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d03c      	beq.n	800cfc2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cf48:	69ba      	ldr	r2, [r7, #24]
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	8952      	ldrh	r2, [r2, #10]
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d905      	bls.n	800cf62 <f_write+0x1ac>
					cc = fs->csize - csect;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	895b      	ldrh	r3, [r3, #10]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	7858      	ldrb	r0, [r3, #1]
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	697a      	ldr	r2, [r7, #20]
 800cf6a:	69f9      	ldr	r1, [r7, #28]
 800cf6c:	f7fd ff04 	bl	800ad78 <disk_write>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d004      	beq.n	800cf80 <f_write+0x1ca>
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	755a      	strb	r2, [r3, #21]
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e08b      	b.n	800d098 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	6a1a      	ldr	r2, [r3, #32]
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	6a3a      	ldr	r2, [r7, #32]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d915      	bls.n	800cfba <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6a1a      	ldr	r2, [r3, #32]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	025b      	lsls	r3, r3, #9
 800cf9e:	69fa      	ldr	r2, [r7, #28]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	f7fd ffa6 	bl	800aef8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	025b      	lsls	r3, r3, #9
 800cfbe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cfc0:	e03f      	b.n	800d042 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d016      	beq.n	800cffa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	699a      	ldr	r2, [r3, #24]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d210      	bcs.n	800cffa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	7858      	ldrb	r0, [r3, #1]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	f7fd fea7 	bl	800ad38 <disk_read>
 800cfea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d004      	beq.n	800cffa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2201      	movs	r2, #1
 800cff4:	755a      	strb	r2, [r3, #21]
 800cff6:	2301      	movs	r3, #1
 800cff8:	e04e      	b.n	800d098 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d008:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d00c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	429a      	cmp	r2, r3
 800d014:	d901      	bls.n	800d01a <f_write+0x264>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d028:	4413      	add	r3, r2
 800d02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02c:	69f9      	ldr	r1, [r7, #28]
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fd ff62 	bl	800aef8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	7d1b      	ldrb	r3, [r3, #20]
 800d038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	4413      	add	r3, r2
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	699a      	ldr	r2, [r3, #24]
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	441a      	add	r2, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	619a      	str	r2, [r3, #24]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	68da      	ldr	r2, [r3, #12]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	429a      	cmp	r2, r3
 800d060:	bf38      	it	cc
 800d062:	461a      	movcc	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	60da      	str	r2, [r3, #12]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	441a      	add	r2, r3
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f47f aed4 	bne.w	800ce2c <f_write+0x76>
 800d084:	e000      	b.n	800d088 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d086:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	7d1b      	ldrb	r3, [r3, #20]
 800d08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d090:	b2da      	uxtb	r2, r3
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3730      	adds	r7, #48	; 0x30
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f107 0208 	add.w	r2, r7, #8
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fb07 	bl	800c6c4 <validate>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d0ba:	7dfb      	ldrb	r3, [r7, #23]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d168      	bne.n	800d192 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	7d1b      	ldrb	r3, [r3, #20]
 800d0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d062      	beq.n	800d192 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7d1b      	ldrb	r3, [r3, #20]
 800d0d0:	b25b      	sxtb	r3, r3
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	da15      	bge.n	800d102 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	7858      	ldrb	r0, [r3, #1]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a1a      	ldr	r2, [r3, #32]
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	f7fd fe47 	bl	800ad78 <disk_write>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <f_sync+0x54>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e04f      	b.n	800d194 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	7d1b      	ldrb	r3, [r3, #20]
 800d0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0fc:	b2da      	uxtb	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d102:	f7fb f8b5 	bl	8008270 <get_fattime>
 800d106:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f7fe f91f 	bl	800b354 <move_window>
 800d116:	4603      	mov	r3, r0
 800d118:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d11a:	7dfb      	ldrb	r3, [r7, #23]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d138      	bne.n	800d192 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d124:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	330b      	adds	r3, #11
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	330b      	adds	r3, #11
 800d130:	f042 0220 	orr.w	r2, r2, #32
 800d134:	b2d2      	uxtb	r2, r2
 800d136:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	461a      	mov	r2, r3
 800d142:	68f9      	ldr	r1, [r7, #12]
 800d144:	f7fe fe2a 	bl	800bd9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f103 021c 	add.w	r2, r3, #28
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	4619      	mov	r1, r3
 800d154:	4610      	mov	r0, r2
 800d156:	f7fd fea3 	bl	800aea0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3316      	adds	r3, #22
 800d15e:	6939      	ldr	r1, [r7, #16]
 800d160:	4618      	mov	r0, r3
 800d162:	f7fd fe9d 	bl	800aea0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3312      	adds	r3, #18
 800d16a:	2100      	movs	r1, #0
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fd fe7c 	bl	800ae6a <st_word>
					fs->wflag = 1;
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	2201      	movs	r2, #1
 800d176:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe f918 	bl	800b3b0 <sync_fs>
 800d180:	4603      	mov	r3, r0
 800d182:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	7d1b      	ldrb	r3, [r3, #20]
 800d188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d192:	7dfb      	ldrb	r3, [r7, #23]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f7ff ff7b 	bl	800d0a0 <f_sync>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d118      	bne.n	800d1e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f107 0208 	add.w	r2, r7, #8
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff fa81 	bl	800c6c4 <validate>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10c      	bne.n	800d1e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe f81b 	bl	800b20c <dec_lock>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b092      	sub	sp, #72	; 0x48
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d1fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d200:	f107 030c 	add.w	r3, r7, #12
 800d204:	2200      	movs	r2, #0
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff f810 	bl	800c22c <find_volume>
 800d20c:	4603      	mov	r3, r0
 800d20e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d212:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d216:	2b00      	cmp	r3, #0
 800d218:	f040 8099 	bne.w	800d34e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d21c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d224:	691a      	ldr	r2, [r3, #16]
 800d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d228:	695b      	ldr	r3, [r3, #20]
 800d22a:	3b02      	subs	r3, #2
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d804      	bhi.n	800d23a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	691a      	ldr	r2, [r3, #16]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	e089      	b.n	800d34e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d23a:	2300      	movs	r3, #0
 800d23c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d128      	bne.n	800d298 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d246:	2302      	movs	r3, #2
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d24e:	f107 0314 	add.w	r3, r7, #20
 800d252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d254:	4618      	mov	r0, r3
 800d256:	f7fe f938 	bl	800b4ca <get_fat>
 800d25a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d262:	d103      	bne.n	800d26c <f_getfree+0x7c>
 800d264:	2301      	movs	r3, #1
 800d266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d26a:	e063      	b.n	800d334 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d103      	bne.n	800d27a <f_getfree+0x8a>
 800d272:	2302      	movs	r3, #2
 800d274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d278:	e05c      	b.n	800d334 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d102      	bne.n	800d286 <f_getfree+0x96>
 800d280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d282:	3301      	adds	r3, #1
 800d284:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d288:	3301      	adds	r3, #1
 800d28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d292:	429a      	cmp	r2, r3
 800d294:	d3db      	bcc.n	800d24e <f_getfree+0x5e>
 800d296:	e04d      	b.n	800d334 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	695b      	ldr	r3, [r3, #20]
 800d29c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
 800d2a2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d113      	bne.n	800d2da <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	63ba      	str	r2, [r7, #56]	; 0x38
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	f7fe f84a 	bl	800b354 <move_window>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d2c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d131      	bne.n	800d332 <f_getfree+0x142>
							p = fs->win;
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	3330      	adds	r3, #48	; 0x30
 800d2d2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d2d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2d8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d10f      	bne.n	800d302 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d2e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2e4:	f7fd fd86 	bl	800adf4 <ld_word>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d102      	bne.n	800d2f4 <f_getfree+0x104>
 800d2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f6:	3302      	adds	r3, #2
 800d2f8:	633b      	str	r3, [r7, #48]	; 0x30
 800d2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fc:	3b02      	subs	r3, #2
 800d2fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d300:	e010      	b.n	800d324 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d304:	f7fd fd8e 	bl	800ae24 <ld_dword>
 800d308:	4603      	mov	r3, r0
 800d30a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d102      	bne.n	800d318 <f_getfree+0x128>
 800d312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d314:	3301      	adds	r3, #1
 800d316:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	3304      	adds	r3, #4
 800d31c:	633b      	str	r3, [r7, #48]	; 0x30
 800d31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d320:	3b04      	subs	r3, #4
 800d322:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d326:	3b01      	subs	r3, #1
 800d328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1bd      	bne.n	800d2ac <f_getfree+0xbc>
 800d330:	e000      	b.n	800d334 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d332:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d338:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d33e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	791a      	ldrb	r2, [r3, #4]
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	f042 0201 	orr.w	r2, r2, #1
 800d34a:	b2d2      	uxtb	r2, r2
 800d34c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d34e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d352:	4618      	mov	r0, r3
 800d354:	3748      	adds	r7, #72	; 0x48
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b088      	sub	sp, #32
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d36e:	e01b      	b.n	800d3a8 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d370:	f107 0310 	add.w	r3, r7, #16
 800d374:	f107 0114 	add.w	r1, r7, #20
 800d378:	2201      	movs	r2, #1
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7ff fbdc 	bl	800cb38 <f_read>
		if (rc != 1) break;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d116      	bne.n	800d3b4 <f_gets+0x5a>
		c = s[0];
 800d386:	7d3b      	ldrb	r3, [r7, #20]
 800d388:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	2b0d      	cmp	r3, #13
 800d38e:	d100      	bne.n	800d392 <f_gets+0x38>
 800d390:	e00a      	b.n	800d3a8 <f_gets+0x4e>
		*p++ = c;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	1c5a      	adds	r2, r3, #1
 800d396:	61ba      	str	r2, [r7, #24]
 800d398:	7dfa      	ldrb	r2, [r7, #23]
 800d39a:	701a      	strb	r2, [r3, #0]
		n++;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d3a2:	7dfb      	ldrb	r3, [r7, #23]
 800d3a4:	2b0a      	cmp	r3, #10
 800d3a6:	d007      	beq.n	800d3b8 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	dbde      	blt.n	800d370 <f_gets+0x16>
 800d3b2:	e002      	b.n	800d3ba <f_gets+0x60>
		if (rc != 1) break;
 800d3b4:	bf00      	nop
 800d3b6:	e000      	b.n	800d3ba <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d3b8:	bf00      	nop
	}
	*p = 0;
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <f_gets+0x70>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	e000      	b.n	800d3cc <f_gets+0x72>
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d3ea:	4b1f      	ldr	r3, [pc, #124]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d3ec:	7a5b      	ldrb	r3, [r3, #9]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d131      	bne.n	800d458 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d3f4:	4b1c      	ldr	r3, [pc, #112]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d3f6:	7a5b      	ldrb	r3, [r3, #9]
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4b1a      	ldr	r3, [pc, #104]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d3fe:	2100      	movs	r1, #0
 800d400:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d402:	4b19      	ldr	r3, [pc, #100]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d404:	7a5b      	ldrb	r3, [r3, #9]
 800d406:	b2db      	uxtb	r3, r3
 800d408:	4a17      	ldr	r2, [pc, #92]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	4413      	add	r3, r2
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d412:	4b15      	ldr	r3, [pc, #84]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d414:	7a5b      	ldrb	r3, [r3, #9]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	461a      	mov	r2, r3
 800d41a:	4b13      	ldr	r3, [pc, #76]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d41c:	4413      	add	r3, r2
 800d41e:	79fa      	ldrb	r2, [r7, #7]
 800d420:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d422:	4b11      	ldr	r3, [pc, #68]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d424:	7a5b      	ldrb	r3, [r3, #9]
 800d426:	b2db      	uxtb	r3, r3
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	b2d1      	uxtb	r1, r2
 800d42c:	4a0e      	ldr	r2, [pc, #56]	; (800d468 <FATFS_LinkDriverEx+0x94>)
 800d42e:	7251      	strb	r1, [r2, #9]
 800d430:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d432:	7dbb      	ldrb	r3, [r7, #22]
 800d434:	3330      	adds	r3, #48	; 0x30
 800d436:	b2da      	uxtb	r2, r3
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	3301      	adds	r3, #1
 800d440:	223a      	movs	r2, #58	; 0x3a
 800d442:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	3302      	adds	r3, #2
 800d448:	222f      	movs	r2, #47	; 0x2f
 800d44a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	3303      	adds	r3, #3
 800d450:	2200      	movs	r2, #0
 800d452:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d454:	2300      	movs	r3, #0
 800d456:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d458:	7dfb      	ldrb	r3, [r7, #23]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	371c      	adds	r7, #28
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	200008c4 	.word	0x200008c4

0800d46c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d476:	2200      	movs	r2, #0
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff ffaa 	bl	800d3d4 <FATFS_LinkDriverEx>
 800d480:	4603      	mov	r3, r0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
	...

0800d48c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d490:	2200      	movs	r2, #0
 800d492:	4912      	ldr	r1, [pc, #72]	; (800d4dc <MX_USB_DEVICE_Init+0x50>)
 800d494:	4812      	ldr	r0, [pc, #72]	; (800d4e0 <MX_USB_DEVICE_Init+0x54>)
 800d496:	f7fc f8f3 	bl	8009680 <USBD_Init>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d4a0:	f7f3 ff8c 	bl	80013bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d4a4:	490f      	ldr	r1, [pc, #60]	; (800d4e4 <MX_USB_DEVICE_Init+0x58>)
 800d4a6:	480e      	ldr	r0, [pc, #56]	; (800d4e0 <MX_USB_DEVICE_Init+0x54>)
 800d4a8:	f7fc f91a 	bl	80096e0 <USBD_RegisterClass>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d4b2:	f7f3 ff83 	bl	80013bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d4b6:	490c      	ldr	r1, [pc, #48]	; (800d4e8 <MX_USB_DEVICE_Init+0x5c>)
 800d4b8:	4809      	ldr	r0, [pc, #36]	; (800d4e0 <MX_USB_DEVICE_Init+0x54>)
 800d4ba:	f7fc f811 	bl	80094e0 <USBD_CDC_RegisterInterface>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d4c4:	f7f3 ff7a 	bl	80013bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d4c8:	4805      	ldr	r0, [pc, #20]	; (800d4e0 <MX_USB_DEVICE_Init+0x54>)
 800d4ca:	f7fc f93f 	bl	800974c <USBD_Start>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d4d4:	f7f3 ff72 	bl	80013bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d4d8:	bf00      	nop
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	200000c8 	.word	0x200000c8
 800d4e0:	200008d0 	.word	0x200008d0
 800d4e4:	20000034 	.word	0x20000034
 800d4e8:	200000b4 	.word	0x200000b4

0800d4ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4905      	ldr	r1, [pc, #20]	; (800d508 <CDC_Init_FS+0x1c>)
 800d4f4:	4805      	ldr	r0, [pc, #20]	; (800d50c <CDC_Init_FS+0x20>)
 800d4f6:	f7fc f80d 	bl	8009514 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d4fa:	4905      	ldr	r1, [pc, #20]	; (800d510 <CDC_Init_FS+0x24>)
 800d4fc:	4803      	ldr	r0, [pc, #12]	; (800d50c <CDC_Init_FS+0x20>)
 800d4fe:	f7fc f82b 	bl	8009558 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d502:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d504:	4618      	mov	r0, r3
 800d506:	bd80      	pop	{r7, pc}
 800d508:	200013ac 	.word	0x200013ac
 800d50c:	200008d0 	.word	0x200008d0
 800d510:	20000bac 	.word	0x20000bac

0800d514 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d514:	b480      	push	{r7}
 800d516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d518:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
 800d530:	4613      	mov	r3, r2
 800d532:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	2b23      	cmp	r3, #35	; 0x23
 800d538:	d84a      	bhi.n	800d5d0 <CDC_Control_FS+0xac>
 800d53a:	a201      	add	r2, pc, #4	; (adr r2, 800d540 <CDC_Control_FS+0x1c>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d5d1 	.word	0x0800d5d1
 800d544:	0800d5d1 	.word	0x0800d5d1
 800d548:	0800d5d1 	.word	0x0800d5d1
 800d54c:	0800d5d1 	.word	0x0800d5d1
 800d550:	0800d5d1 	.word	0x0800d5d1
 800d554:	0800d5d1 	.word	0x0800d5d1
 800d558:	0800d5d1 	.word	0x0800d5d1
 800d55c:	0800d5d1 	.word	0x0800d5d1
 800d560:	0800d5d1 	.word	0x0800d5d1
 800d564:	0800d5d1 	.word	0x0800d5d1
 800d568:	0800d5d1 	.word	0x0800d5d1
 800d56c:	0800d5d1 	.word	0x0800d5d1
 800d570:	0800d5d1 	.word	0x0800d5d1
 800d574:	0800d5d1 	.word	0x0800d5d1
 800d578:	0800d5d1 	.word	0x0800d5d1
 800d57c:	0800d5d1 	.word	0x0800d5d1
 800d580:	0800d5d1 	.word	0x0800d5d1
 800d584:	0800d5d1 	.word	0x0800d5d1
 800d588:	0800d5d1 	.word	0x0800d5d1
 800d58c:	0800d5d1 	.word	0x0800d5d1
 800d590:	0800d5d1 	.word	0x0800d5d1
 800d594:	0800d5d1 	.word	0x0800d5d1
 800d598:	0800d5d1 	.word	0x0800d5d1
 800d59c:	0800d5d1 	.word	0x0800d5d1
 800d5a0:	0800d5d1 	.word	0x0800d5d1
 800d5a4:	0800d5d1 	.word	0x0800d5d1
 800d5a8:	0800d5d1 	.word	0x0800d5d1
 800d5ac:	0800d5d1 	.word	0x0800d5d1
 800d5b0:	0800d5d1 	.word	0x0800d5d1
 800d5b4:	0800d5d1 	.word	0x0800d5d1
 800d5b8:	0800d5d1 	.word	0x0800d5d1
 800d5bc:	0800d5d1 	.word	0x0800d5d1
 800d5c0:	0800d5d1 	.word	0x0800d5d1
 800d5c4:	0800d5d1 	.word	0x0800d5d1
 800d5c8:	0800d5d1 	.word	0x0800d5d1
 800d5cc:	0800d5d1 	.word	0x0800d5d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d5d0:	bf00      	nop
  }

  return (USBD_OK);
 800d5d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	4818      	ldr	r0, [pc, #96]	; (800d650 <CDC_Receive_FS+0x70>)
 800d5ee:	f7fb ffb3 	bl	8009558 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d5f2:	4817      	ldr	r0, [pc, #92]	; (800d650 <CDC_Receive_FS+0x70>)
 800d5f4:	f7fc f80e 	bl	8009614 <USBD_CDC_ReceivePacket>

  for(int i = 0; i < *Len; i++)
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60fb      	str	r3, [r7, #12]
 800d5fc:	e016      	b.n	800d62c <CDC_Receive_FS+0x4c>
  {
	  Buf[i] = toupper(Buf[i]);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	4413      	add	r3, r2
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	4618      	mov	r0, r3
 800d608:	f000 fdae 	bl	800e168 <toupper>
 800d60c:	4601      	mov	r1, r0
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	4413      	add	r3, r2
 800d614:	b2ca      	uxtb	r2, r1
 800d616:	701a      	strb	r2, [r3, #0]
	  test_enable = Buf[i];
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	4413      	add	r3, r2
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	461a      	mov	r2, r3
 800d622:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <CDC_Receive_FS+0x74>)
 800d624:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < *Len; i++)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	429a      	cmp	r2, r3
 800d634:	d8e3      	bhi.n	800d5fe <CDC_Receive_FS+0x1e>
  }

  CDC_Transmit_FS(Buf,*Len);
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f80a 	bl	800d658 <CDC_Transmit_FS>



  return (USBD_OK);
 800d644:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	200008d0 	.word	0x200008d0
 800d654:	20000778 	.word	0x20000778

0800d658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d668:	4b0d      	ldr	r3, [pc, #52]	; (800d6a0 <CDC_Transmit_FS+0x48>)
 800d66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d66e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e00b      	b.n	800d696 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d67e:	887b      	ldrh	r3, [r7, #2]
 800d680:	461a      	mov	r2, r3
 800d682:	6879      	ldr	r1, [r7, #4]
 800d684:	4806      	ldr	r0, [pc, #24]	; (800d6a0 <CDC_Transmit_FS+0x48>)
 800d686:	f7fb ff45 	bl	8009514 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d68a:	4805      	ldr	r0, [pc, #20]	; (800d6a0 <CDC_Transmit_FS+0x48>)
 800d68c:	f7fb ff82 	bl	8009594 <USBD_CDC_TransmitPacket>
 800d690:	4603      	mov	r3, r0
 800d692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d694:	7bfb      	ldrb	r3, [r7, #15]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	200008d0 	.word	0x200008d0

0800d6a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b087      	sub	sp, #28
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	371c      	adds	r7, #28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
	...

0800d6c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	6039      	str	r1, [r7, #0]
 800d6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2212      	movs	r2, #18
 800d6d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d6da:	4b03      	ldr	r3, [pc, #12]	; (800d6e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	200000e8 	.word	0x200000e8

0800d6ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	6039      	str	r1, [r7, #0]
 800d6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	2204      	movs	r2, #4
 800d6fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d6fe:	4b03      	ldr	r3, [pc, #12]	; (800d70c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	20000108 	.word	0x20000108

0800d710 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	6039      	str	r1, [r7, #0]
 800d71a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d71c:	79fb      	ldrb	r3, [r7, #7]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d105      	bne.n	800d72e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	4907      	ldr	r1, [pc, #28]	; (800d744 <USBD_FS_ProductStrDescriptor+0x34>)
 800d726:	4808      	ldr	r0, [pc, #32]	; (800d748 <USBD_FS_ProductStrDescriptor+0x38>)
 800d728:	f7fd f9e6 	bl	800aaf8 <USBD_GetString>
 800d72c:	e004      	b.n	800d738 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	4904      	ldr	r1, [pc, #16]	; (800d744 <USBD_FS_ProductStrDescriptor+0x34>)
 800d732:	4805      	ldr	r0, [pc, #20]	; (800d748 <USBD_FS_ProductStrDescriptor+0x38>)
 800d734:	f7fd f9e0 	bl	800aaf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d738:	4b02      	ldr	r3, [pc, #8]	; (800d744 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20001bac 	.word	0x20001bac
 800d748:	0800edd0 	.word	0x0800edd0

0800d74c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	4603      	mov	r3, r0
 800d754:	6039      	str	r1, [r7, #0]
 800d756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	4904      	ldr	r1, [pc, #16]	; (800d76c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d75c:	4804      	ldr	r0, [pc, #16]	; (800d770 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d75e:	f7fd f9cb 	bl	800aaf8 <USBD_GetString>
  return USBD_StrDesc;
 800d762:	4b02      	ldr	r3, [pc, #8]	; (800d76c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d764:	4618      	mov	r0, r3
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20001bac 	.word	0x20001bac
 800d770:	0800ede8 	.word	0x0800ede8

0800d774 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	4603      	mov	r3, r0
 800d77c:	6039      	str	r1, [r7, #0]
 800d77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	221a      	movs	r2, #26
 800d784:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d786:	f000 f855 	bl	800d834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d78a:	4b02      	ldr	r3, [pc, #8]	; (800d794 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	2000010c 	.word	0x2000010c

0800d798 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	4603      	mov	r3, r0
 800d7a0:	6039      	str	r1, [r7, #0]
 800d7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d105      	bne.n	800d7b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	4907      	ldr	r1, [pc, #28]	; (800d7cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7ae:	4808      	ldr	r0, [pc, #32]	; (800d7d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7b0:	f7fd f9a2 	bl	800aaf8 <USBD_GetString>
 800d7b4:	e004      	b.n	800d7c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d7b6:	683a      	ldr	r2, [r7, #0]
 800d7b8:	4904      	ldr	r1, [pc, #16]	; (800d7cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d7ba:	4805      	ldr	r0, [pc, #20]	; (800d7d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d7bc:	f7fd f99c 	bl	800aaf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7c0:	4b02      	ldr	r3, [pc, #8]	; (800d7cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20001bac 	.word	0x20001bac
 800d7d0:	0800edfc 	.word	0x0800edfc

0800d7d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	4603      	mov	r3, r0
 800d7dc:	6039      	str	r1, [r7, #0]
 800d7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d105      	bne.n	800d7f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	4907      	ldr	r1, [pc, #28]	; (800d808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7ea:	4808      	ldr	r0, [pc, #32]	; (800d80c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7ec:	f7fd f984 	bl	800aaf8 <USBD_GetString>
 800d7f0:	e004      	b.n	800d7fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	4904      	ldr	r1, [pc, #16]	; (800d808 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d7f6:	4805      	ldr	r0, [pc, #20]	; (800d80c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7f8:	f7fd f97e 	bl	800aaf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7fc:	4b02      	ldr	r3, [pc, #8]	; (800d808 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20001bac 	.word	0x20001bac
 800d80c:	0800ee08 	.word	0x0800ee08

0800d810 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	220c      	movs	r2, #12
 800d820:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d822:	4b03      	ldr	r3, [pc, #12]	; (800d830 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d824:	4618      	mov	r0, r3
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	200000fc 	.word	0x200000fc

0800d834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d83a:	4b0f      	ldr	r3, [pc, #60]	; (800d878 <Get_SerialNum+0x44>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d840:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <Get_SerialNum+0x48>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d846:	4b0e      	ldr	r3, [pc, #56]	; (800d880 <Get_SerialNum+0x4c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4413      	add	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d009      	beq.n	800d86e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d85a:	2208      	movs	r2, #8
 800d85c:	4909      	ldr	r1, [pc, #36]	; (800d884 <Get_SerialNum+0x50>)
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 f814 	bl	800d88c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d864:	2204      	movs	r2, #4
 800d866:	4908      	ldr	r1, [pc, #32]	; (800d888 <Get_SerialNum+0x54>)
 800d868:	68b8      	ldr	r0, [r7, #8]
 800d86a:	f000 f80f 	bl	800d88c <IntToUnicode>
  }
}
 800d86e:	bf00      	nop
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	1ff07a10 	.word	0x1ff07a10
 800d87c:	1ff07a14 	.word	0x1ff07a14
 800d880:	1ff07a18 	.word	0x1ff07a18
 800d884:	2000010e 	.word	0x2000010e
 800d888:	2000011e 	.word	0x2000011e

0800d88c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b087      	sub	sp, #28
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	4613      	mov	r3, r2
 800d898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d89a:	2300      	movs	r3, #0
 800d89c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d89e:	2300      	movs	r3, #0
 800d8a0:	75fb      	strb	r3, [r7, #23]
 800d8a2:	e027      	b.n	800d8f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	0f1b      	lsrs	r3, r3, #28
 800d8a8:	2b09      	cmp	r3, #9
 800d8aa:	d80b      	bhi.n	800d8c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	0f1b      	lsrs	r3, r3, #28
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	7dfb      	ldrb	r3, [r7, #23]
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3230      	adds	r2, #48	; 0x30
 800d8be:	b2d2      	uxtb	r2, r2
 800d8c0:	701a      	strb	r2, [r3, #0]
 800d8c2:	e00a      	b.n	800d8da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	0f1b      	lsrs	r3, r3, #28
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	7dfb      	ldrb	r3, [r7, #23]
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	440b      	add	r3, r1
 800d8d4:	3237      	adds	r2, #55	; 0x37
 800d8d6:	b2d2      	uxtb	r2, r2
 800d8d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	011b      	lsls	r3, r3, #4
 800d8de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d8e0:	7dfb      	ldrb	r3, [r7, #23]
 800d8e2:	005b      	lsls	r3, r3, #1
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d8ee:	7dfb      	ldrb	r3, [r7, #23]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	75fb      	strb	r3, [r7, #23]
 800d8f4:	7dfa      	ldrb	r2, [r7, #23]
 800d8f6:	79fb      	ldrb	r3, [r7, #7]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d3d3      	bcc.n	800d8a4 <IntToUnicode+0x18>
  }
}
 800d8fc:	bf00      	nop
 800d8fe:	bf00      	nop
 800d900:	371c      	adds	r7, #28
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
	...

0800d90c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b0aa      	sub	sp, #168	; 0xa8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d914:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	605a      	str	r2, [r3, #4]
 800d91e:	609a      	str	r2, [r3, #8]
 800d920:	60da      	str	r2, [r3, #12]
 800d922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d924:	f107 0314 	add.w	r3, r7, #20
 800d928:	2280      	movs	r2, #128	; 0x80
 800d92a:	2100      	movs	r1, #0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 fc7f 	bl	800e230 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d93a:	d151      	bne.n	800d9e0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d93c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d940:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d942:	2300      	movs	r3, #0
 800d944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d948:	f107 0314 	add.w	r3, r7, #20
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7f7 f8f5 	bl	8004b3c <HAL_RCCEx_PeriphCLKConfig>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d001      	beq.n	800d95c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d958:	f7f3 fd30 	bl	80013bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d95c:	4b22      	ldr	r3, [pc, #136]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d960:	4a21      	ldr	r2, [pc, #132]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d962:	f043 0301 	orr.w	r3, r3, #1
 800d966:	6313      	str	r3, [r2, #48]	; 0x30
 800d968:	4b1f      	ldr	r3, [pc, #124]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96c:	f003 0301 	and.w	r3, r3, #1
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d974:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d97c:	2302      	movs	r3, #2
 800d97e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d982:	2300      	movs	r3, #0
 800d984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d988:	2303      	movs	r3, #3
 800d98a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d98e:	230a      	movs	r3, #10
 800d990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d994:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800d998:	4619      	mov	r1, r3
 800d99a:	4814      	ldr	r0, [pc, #80]	; (800d9ec <HAL_PCD_MspInit+0xe0>)
 800d99c:	f7f4 fd74 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d9a0:	4b11      	ldr	r3, [pc, #68]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a4:	4a10      	ldr	r2, [pc, #64]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9aa:	6353      	str	r3, [r2, #52]	; 0x34
 800d9ac:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b4:	60fb      	str	r3, [r7, #12]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	4b0b      	ldr	r3, [pc, #44]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9bc:	4a0a      	ldr	r2, [pc, #40]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d9be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d9c2:	6453      	str	r3, [r2, #68]	; 0x44
 800d9c4:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <HAL_PCD_MspInit+0xdc>)
 800d9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9cc:	60bb      	str	r3, [r7, #8]
 800d9ce:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	2043      	movs	r0, #67	; 0x43
 800d9d6:	f7f4 fd20 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d9da:	2043      	movs	r0, #67	; 0x43
 800d9dc:	f7f4 fd39 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d9e0:	bf00      	nop
 800d9e2:	37a8      	adds	r7, #168	; 0xa8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	40023800 	.word	0x40023800
 800d9ec:	40020000 	.word	0x40020000

0800d9f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f7fb feed 	bl	80097e6 <USBD_LL_SetupStage>
}
 800da0c:	bf00      	nop
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	460b      	mov	r3, r1
 800da1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800da26:	78fa      	ldrb	r2, [r7, #3]
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	4613      	mov	r3, r2
 800da2c:	00db      	lsls	r3, r3, #3
 800da2e:	4413      	add	r3, r2
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	440b      	add	r3, r1
 800da34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	78fb      	ldrb	r3, [r7, #3]
 800da3c:	4619      	mov	r1, r3
 800da3e:	f7fb ff27 	bl	8009890 <USBD_LL_DataOutStage>
}
 800da42:	bf00      	nop
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	460b      	mov	r3, r1
 800da54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800da5c:	78fa      	ldrb	r2, [r7, #3]
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	4613      	mov	r3, r2
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	4413      	add	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	440b      	add	r3, r1
 800da6a:	334c      	adds	r3, #76	; 0x4c
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	4619      	mov	r1, r3
 800da72:	f7fb ffc0 	bl	80099f6 <USBD_LL_DataInStage>
}
 800da76:	bf00      	nop
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fc f8f4 	bl	8009c7a <USBD_LL_SOF>
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b084      	sub	sp, #16
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800daa2:	2301      	movs	r3, #1
 800daa4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d102      	bne.n	800dab4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
 800dab2:	e008      	b.n	800dac6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d102      	bne.n	800dac2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dabc:	2301      	movs	r3, #1
 800dabe:	73fb      	strb	r3, [r7, #15]
 800dac0:	e001      	b.n	800dac6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dac2:	f7f3 fc7b 	bl	80013bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dacc:	7bfa      	ldrb	r2, [r7, #15]
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fc f894 	bl	8009bfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fc f83c 	bl	8009b5a <USBD_LL_Reset>
}
 800dae2:	bf00      	nop
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
	...

0800daec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fc f88f 	bl	8009c1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	6812      	ldr	r2, [r2, #0]
 800db0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db12:	f043 0301 	orr.w	r3, r3, #1
 800db16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d005      	beq.n	800db2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db20:	4b04      	ldr	r3, [pc, #16]	; (800db34 <HAL_PCD_SuspendCallback+0x48>)
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	4a03      	ldr	r2, [pc, #12]	; (800db34 <HAL_PCD_SuspendCallback+0x48>)
 800db26:	f043 0306 	orr.w	r3, r3, #6
 800db2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	e000ed00 	.word	0xe000ed00

0800db38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db46:	4618      	mov	r0, r3
 800db48:	f7fc f87f 	bl	8009c4a <USBD_LL_Resume>
}
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db66:	78fa      	ldrb	r2, [r7, #3]
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fc f8d7 	bl	8009d1e <USBD_LL_IsoOUTIncomplete>
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	460b      	mov	r3, r1
 800db82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db8a:	78fa      	ldrb	r2, [r7, #3]
 800db8c:	4611      	mov	r1, r2
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fc f893 	bl	8009cba <USBD_LL_IsoINIncomplete>
}
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fc f8e9 	bl	8009d82 <USBD_LL_DevConnected>
}
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fc f8e6 	bl	8009d98 <USBD_LL_DevDisconnected>
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d13f      	bne.n	800dc64 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dbe4:	4a22      	ldr	r2, [pc, #136]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4a20      	ldr	r2, [pc, #128]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dbf0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dbf4:	4b1e      	ldr	r3, [pc, #120]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dbf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dbfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dbfc:	4b1c      	ldr	r3, [pc, #112]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dbfe:	2206      	movs	r2, #6
 800dc00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc02:	4b1b      	ldr	r3, [pc, #108]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc04:	2202      	movs	r2, #2
 800dc06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc08:	4b19      	ldr	r3, [pc, #100]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc0e:	4b18      	ldr	r3, [pc, #96]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc10:	2202      	movs	r2, #2
 800dc12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc14:	4b16      	ldr	r3, [pc, #88]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc16:	2200      	movs	r2, #0
 800dc18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc1a:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc20:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800dc26:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc2c:	4b10      	ldr	r3, [pc, #64]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc32:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc38:	480d      	ldr	r0, [pc, #52]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc3a:	f7f4 ff1c 	bl	8002a76 <HAL_PCD_Init>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d001      	beq.n	800dc48 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800dc44:	f7f3 fbba 	bl	80013bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dc48:	2180      	movs	r1, #128	; 0x80
 800dc4a:	4809      	ldr	r0, [pc, #36]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc4c:	f7f6 f997 	bl	8003f7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dc50:	2240      	movs	r2, #64	; 0x40
 800dc52:	2100      	movs	r1, #0
 800dc54:	4806      	ldr	r0, [pc, #24]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc56:	f7f6 f94b 	bl	8003ef0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dc5a:	2280      	movs	r2, #128	; 0x80
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	4804      	ldr	r0, [pc, #16]	; (800dc70 <USBD_LL_Init+0x9c>)
 800dc60:	f7f6 f946 	bl	8003ef0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20001dac 	.word	0x20001dac

0800dc74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f5 f817 	bl	8002cbe <HAL_PCD_Start>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f97e 	bl	800df98 <USBD_Get_USB_Status>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	4608      	mov	r0, r1
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	4603      	mov	r3, r0
 800dcba:	70fb      	strb	r3, [r7, #3]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	70bb      	strb	r3, [r7, #2]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcd2:	78bb      	ldrb	r3, [r7, #2]
 800dcd4:	883a      	ldrh	r2, [r7, #0]
 800dcd6:	78f9      	ldrb	r1, [r7, #3]
 800dcd8:	f7f5 fd04 	bl	80036e4 <HAL_PCD_EP_Open>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f958 	bl	800df98 <USBD_Get_USB_Status>
 800dce8:	4603      	mov	r3, r0
 800dcea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd10:	78fa      	ldrb	r2, [r7, #3]
 800dd12:	4611      	mov	r1, r2
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7f5 fd4d 	bl	80037b4 <HAL_PCD_EP_Close>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd1e:	7bfb      	ldrb	r3, [r7, #15]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f000 f939 	bl	800df98 <USBD_Get_USB_Status>
 800dd26:	4603      	mov	r3, r0
 800dd28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd4e:	78fa      	ldrb	r2, [r7, #3]
 800dd50:	4611      	mov	r1, r2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7f5 fe25 	bl	80039a2 <HAL_PCD_EP_SetStall>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 f91a 	bl	800df98 <USBD_Get_USB_Status>
 800dd64:	4603      	mov	r3, r0
 800dd66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd68:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd8c:	78fa      	ldrb	r2, [r7, #3]
 800dd8e:	4611      	mov	r1, r2
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f5 fe6a 	bl	8003a6a <HAL_PCD_EP_ClrStall>
 800dd96:	4603      	mov	r3, r0
 800dd98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f8fb 	bl	800df98 <USBD_Get_USB_Status>
 800dda2:	4603      	mov	r3, r0
 800dda4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ddc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ddc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	da0b      	bge.n	800dde4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ddcc:	78fb      	ldrb	r3, [r7, #3]
 800ddce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddd2:	68f9      	ldr	r1, [r7, #12]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	4413      	add	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	440b      	add	r3, r1
 800ddde:	333e      	adds	r3, #62	; 0x3e
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	e00b      	b.n	800ddfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dde4:	78fb      	ldrb	r3, [r7, #3]
 800dde6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddea:	68f9      	ldr	r1, [r7, #12]
 800ddec:	4613      	mov	r3, r2
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	4413      	add	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	440b      	add	r3, r1
 800ddf6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ddfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	460b      	mov	r3, r1
 800de12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de22:	78fa      	ldrb	r2, [r7, #3]
 800de24:	4611      	mov	r1, r2
 800de26:	4618      	mov	r0, r3
 800de28:	f7f5 fc37 	bl	800369a <HAL_PCD_SetAddress>
 800de2c:	4603      	mov	r3, r0
 800de2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de30:	7bfb      	ldrb	r3, [r7, #15]
 800de32:	4618      	mov	r0, r3
 800de34:	f000 f8b0 	bl	800df98 <USBD_Get_USB_Status>
 800de38:	4603      	mov	r3, r0
 800de3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b086      	sub	sp, #24
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	603b      	str	r3, [r7, #0]
 800de52:	460b      	mov	r3, r1
 800de54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de56:	2300      	movs	r3, #0
 800de58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de5a:	2300      	movs	r3, #0
 800de5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800de64:	7af9      	ldrb	r1, [r7, #11]
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	f7f5 fd50 	bl	800390e <HAL_PCD_EP_Transmit>
 800de6e:	4603      	mov	r3, r0
 800de70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	4618      	mov	r0, r3
 800de76:	f000 f88f 	bl	800df98 <USBD_Get_USB_Status>
 800de7a:	4603      	mov	r3, r0
 800de7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3718      	adds	r7, #24
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b086      	sub	sp, #24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	607a      	str	r2, [r7, #4]
 800de92:	603b      	str	r3, [r7, #0]
 800de94:	460b      	mov	r3, r1
 800de96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dea6:	7af9      	ldrb	r1, [r7, #11]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	f7f5 fccc 	bl	8003848 <HAL_PCD_EP_Receive>
 800deb0:	4603      	mov	r3, r0
 800deb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 f86e 	bl	800df98 <USBD_Get_USB_Status>
 800debc:	4603      	mov	r3, r0
 800debe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dec0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b082      	sub	sp, #8
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	460b      	mov	r3, r1
 800ded4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dedc:	78fa      	ldrb	r2, [r7, #3]
 800dede:	4611      	mov	r1, r2
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7f5 fcfc 	bl	80038de <HAL_PCD_EP_GetRxCount>
 800dee6:	4603      	mov	r3, r0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	460b      	mov	r3, r1
 800defa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800defc:	78fb      	ldrb	r3, [r7, #3]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <HAL_PCDEx_LPM_Callback+0x18>
 800df02:	2b01      	cmp	r3, #1
 800df04:	d01f      	beq.n	800df46 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800df06:	e03b      	b.n	800df80 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d007      	beq.n	800df20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800df10:	f000 f83c 	bl	800df8c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df14:	4b1c      	ldr	r3, [pc, #112]	; (800df88 <HAL_PCDEx_LPM_Callback+0x98>)
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	4a1b      	ldr	r2, [pc, #108]	; (800df88 <HAL_PCDEx_LPM_Callback+0x98>)
 800df1a:	f023 0306 	bic.w	r3, r3, #6
 800df1e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	6812      	ldr	r2, [r2, #0]
 800df2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df32:	f023 0301 	bic.w	r3, r3, #1
 800df36:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fb fe83 	bl	8009c4a <USBD_LL_Resume>
    break;
 800df44:	e01c      	b.n	800df80 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	6812      	ldr	r2, [r2, #0]
 800df54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df58:	f043 0301 	orr.w	r3, r3, #1
 800df5c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800df64:	4618      	mov	r0, r3
 800df66:	f7fb fe5a 	bl	8009c1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d005      	beq.n	800df7e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df72:	4b05      	ldr	r3, [pc, #20]	; (800df88 <HAL_PCDEx_LPM_Callback+0x98>)
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	4a04      	ldr	r2, [pc, #16]	; (800df88 <HAL_PCDEx_LPM_Callback+0x98>)
 800df78:	f043 0306 	orr.w	r3, r3, #6
 800df7c:	6113      	str	r3, [r2, #16]
    break;
 800df7e:	bf00      	nop
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	e000ed00 	.word	0xe000ed00

0800df8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800df90:	f7f2 fe4c 	bl	8000c2c <SystemClock_Config>
}
 800df94:	bf00      	nop
 800df96:	bd80      	pop	{r7, pc}

0800df98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	4603      	mov	r3, r0
 800dfa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfa6:	79fb      	ldrb	r3, [r7, #7]
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d817      	bhi.n	800dfdc <USBD_Get_USB_Status+0x44>
 800dfac:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <USBD_Get_USB_Status+0x1c>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800dfc5 	.word	0x0800dfc5
 800dfb8:	0800dfcb 	.word	0x0800dfcb
 800dfbc:	0800dfd1 	.word	0x0800dfd1
 800dfc0:	0800dfd7 	.word	0x0800dfd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc8:	e00b      	b.n	800dfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	73fb      	strb	r3, [r7, #15]
    break;
 800dfce:	e008      	b.n	800dfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfd4:	e005      	b.n	800dfe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800dfda:	e002      	b.n	800dfe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	73fb      	strb	r3, [r7, #15]
    break;
 800dfe0:	bf00      	nop
  }
  return usb_status;
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <malloc>:
 800dff0:	4b02      	ldr	r3, [pc, #8]	; (800dffc <malloc+0xc>)
 800dff2:	4601      	mov	r1, r0
 800dff4:	6818      	ldr	r0, [r3, #0]
 800dff6:	f000 b82b 	b.w	800e050 <_malloc_r>
 800dffa:	bf00      	nop
 800dffc:	20000174 	.word	0x20000174

0800e000 <free>:
 800e000:	4b02      	ldr	r3, [pc, #8]	; (800e00c <free+0xc>)
 800e002:	4601      	mov	r1, r0
 800e004:	6818      	ldr	r0, [r3, #0]
 800e006:	f000 b957 	b.w	800e2b8 <_free_r>
 800e00a:	bf00      	nop
 800e00c:	20000174 	.word	0x20000174

0800e010 <sbrk_aligned>:
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	4e0e      	ldr	r6, [pc, #56]	; (800e04c <sbrk_aligned+0x3c>)
 800e014:	460c      	mov	r4, r1
 800e016:	6831      	ldr	r1, [r6, #0]
 800e018:	4605      	mov	r5, r0
 800e01a:	b911      	cbnz	r1, 800e022 <sbrk_aligned+0x12>
 800e01c:	f000 f910 	bl	800e240 <_sbrk_r>
 800e020:	6030      	str	r0, [r6, #0]
 800e022:	4621      	mov	r1, r4
 800e024:	4628      	mov	r0, r5
 800e026:	f000 f90b 	bl	800e240 <_sbrk_r>
 800e02a:	1c43      	adds	r3, r0, #1
 800e02c:	d00a      	beq.n	800e044 <sbrk_aligned+0x34>
 800e02e:	1cc4      	adds	r4, r0, #3
 800e030:	f024 0403 	bic.w	r4, r4, #3
 800e034:	42a0      	cmp	r0, r4
 800e036:	d007      	beq.n	800e048 <sbrk_aligned+0x38>
 800e038:	1a21      	subs	r1, r4, r0
 800e03a:	4628      	mov	r0, r5
 800e03c:	f000 f900 	bl	800e240 <_sbrk_r>
 800e040:	3001      	adds	r0, #1
 800e042:	d101      	bne.n	800e048 <sbrk_aligned+0x38>
 800e044:	f04f 34ff 	mov.w	r4, #4294967295
 800e048:	4620      	mov	r0, r4
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	200022b8 	.word	0x200022b8

0800e050 <_malloc_r>:
 800e050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e054:	1ccd      	adds	r5, r1, #3
 800e056:	f025 0503 	bic.w	r5, r5, #3
 800e05a:	3508      	adds	r5, #8
 800e05c:	2d0c      	cmp	r5, #12
 800e05e:	bf38      	it	cc
 800e060:	250c      	movcc	r5, #12
 800e062:	2d00      	cmp	r5, #0
 800e064:	4607      	mov	r7, r0
 800e066:	db01      	blt.n	800e06c <_malloc_r+0x1c>
 800e068:	42a9      	cmp	r1, r5
 800e06a:	d905      	bls.n	800e078 <_malloc_r+0x28>
 800e06c:	230c      	movs	r3, #12
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	2600      	movs	r6, #0
 800e072:	4630      	mov	r0, r6
 800e074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e14c <_malloc_r+0xfc>
 800e07c:	f000 f868 	bl	800e150 <__malloc_lock>
 800e080:	f8d8 3000 	ldr.w	r3, [r8]
 800e084:	461c      	mov	r4, r3
 800e086:	bb5c      	cbnz	r4, 800e0e0 <_malloc_r+0x90>
 800e088:	4629      	mov	r1, r5
 800e08a:	4638      	mov	r0, r7
 800e08c:	f7ff ffc0 	bl	800e010 <sbrk_aligned>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	4604      	mov	r4, r0
 800e094:	d155      	bne.n	800e142 <_malloc_r+0xf2>
 800e096:	f8d8 4000 	ldr.w	r4, [r8]
 800e09a:	4626      	mov	r6, r4
 800e09c:	2e00      	cmp	r6, #0
 800e09e:	d145      	bne.n	800e12c <_malloc_r+0xdc>
 800e0a0:	2c00      	cmp	r4, #0
 800e0a2:	d048      	beq.n	800e136 <_malloc_r+0xe6>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	4631      	mov	r1, r6
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	eb04 0903 	add.w	r9, r4, r3
 800e0ae:	f000 f8c7 	bl	800e240 <_sbrk_r>
 800e0b2:	4581      	cmp	r9, r0
 800e0b4:	d13f      	bne.n	800e136 <_malloc_r+0xe6>
 800e0b6:	6821      	ldr	r1, [r4, #0]
 800e0b8:	1a6d      	subs	r5, r5, r1
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff ffa7 	bl	800e010 <sbrk_aligned>
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	d037      	beq.n	800e136 <_malloc_r+0xe6>
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	442b      	add	r3, r5
 800e0ca:	6023      	str	r3, [r4, #0]
 800e0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d038      	beq.n	800e146 <_malloc_r+0xf6>
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	42a2      	cmp	r2, r4
 800e0d8:	d12b      	bne.n	800e132 <_malloc_r+0xe2>
 800e0da:	2200      	movs	r2, #0
 800e0dc:	605a      	str	r2, [r3, #4]
 800e0de:	e00f      	b.n	800e100 <_malloc_r+0xb0>
 800e0e0:	6822      	ldr	r2, [r4, #0]
 800e0e2:	1b52      	subs	r2, r2, r5
 800e0e4:	d41f      	bmi.n	800e126 <_malloc_r+0xd6>
 800e0e6:	2a0b      	cmp	r2, #11
 800e0e8:	d917      	bls.n	800e11a <_malloc_r+0xca>
 800e0ea:	1961      	adds	r1, r4, r5
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	6025      	str	r5, [r4, #0]
 800e0f0:	bf18      	it	ne
 800e0f2:	6059      	strne	r1, [r3, #4]
 800e0f4:	6863      	ldr	r3, [r4, #4]
 800e0f6:	bf08      	it	eq
 800e0f8:	f8c8 1000 	streq.w	r1, [r8]
 800e0fc:	5162      	str	r2, [r4, r5]
 800e0fe:	604b      	str	r3, [r1, #4]
 800e100:	4638      	mov	r0, r7
 800e102:	f104 060b 	add.w	r6, r4, #11
 800e106:	f000 f829 	bl	800e15c <__malloc_unlock>
 800e10a:	f026 0607 	bic.w	r6, r6, #7
 800e10e:	1d23      	adds	r3, r4, #4
 800e110:	1af2      	subs	r2, r6, r3
 800e112:	d0ae      	beq.n	800e072 <_malloc_r+0x22>
 800e114:	1b9b      	subs	r3, r3, r6
 800e116:	50a3      	str	r3, [r4, r2]
 800e118:	e7ab      	b.n	800e072 <_malloc_r+0x22>
 800e11a:	42a3      	cmp	r3, r4
 800e11c:	6862      	ldr	r2, [r4, #4]
 800e11e:	d1dd      	bne.n	800e0dc <_malloc_r+0x8c>
 800e120:	f8c8 2000 	str.w	r2, [r8]
 800e124:	e7ec      	b.n	800e100 <_malloc_r+0xb0>
 800e126:	4623      	mov	r3, r4
 800e128:	6864      	ldr	r4, [r4, #4]
 800e12a:	e7ac      	b.n	800e086 <_malloc_r+0x36>
 800e12c:	4634      	mov	r4, r6
 800e12e:	6876      	ldr	r6, [r6, #4]
 800e130:	e7b4      	b.n	800e09c <_malloc_r+0x4c>
 800e132:	4613      	mov	r3, r2
 800e134:	e7cc      	b.n	800e0d0 <_malloc_r+0x80>
 800e136:	230c      	movs	r3, #12
 800e138:	603b      	str	r3, [r7, #0]
 800e13a:	4638      	mov	r0, r7
 800e13c:	f000 f80e 	bl	800e15c <__malloc_unlock>
 800e140:	e797      	b.n	800e072 <_malloc_r+0x22>
 800e142:	6025      	str	r5, [r4, #0]
 800e144:	e7dc      	b.n	800e100 <_malloc_r+0xb0>
 800e146:	605b      	str	r3, [r3, #4]
 800e148:	deff      	udf	#255	; 0xff
 800e14a:	bf00      	nop
 800e14c:	200022b4 	.word	0x200022b4

0800e150 <__malloc_lock>:
 800e150:	4801      	ldr	r0, [pc, #4]	; (800e158 <__malloc_lock+0x8>)
 800e152:	f000 b8af 	b.w	800e2b4 <__retarget_lock_acquire_recursive>
 800e156:	bf00      	nop
 800e158:	200023f8 	.word	0x200023f8

0800e15c <__malloc_unlock>:
 800e15c:	4801      	ldr	r0, [pc, #4]	; (800e164 <__malloc_unlock+0x8>)
 800e15e:	f000 b8aa 	b.w	800e2b6 <__retarget_lock_release_recursive>
 800e162:	bf00      	nop
 800e164:	200023f8 	.word	0x200023f8

0800e168 <toupper>:
 800e168:	4b03      	ldr	r3, [pc, #12]	; (800e178 <toupper+0x10>)
 800e16a:	5c1b      	ldrb	r3, [r3, r0]
 800e16c:	f003 0303 	and.w	r3, r3, #3
 800e170:	2b02      	cmp	r3, #2
 800e172:	bf08      	it	eq
 800e174:	3820      	subeq	r0, #32
 800e176:	4770      	bx	lr
 800e178:	0800eeb1 	.word	0x0800eeb1

0800e17c <siprintf>:
 800e17c:	b40e      	push	{r1, r2, r3}
 800e17e:	b500      	push	{lr}
 800e180:	b09c      	sub	sp, #112	; 0x70
 800e182:	ab1d      	add	r3, sp, #116	; 0x74
 800e184:	9002      	str	r0, [sp, #8]
 800e186:	9006      	str	r0, [sp, #24]
 800e188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e18c:	4809      	ldr	r0, [pc, #36]	; (800e1b4 <siprintf+0x38>)
 800e18e:	9107      	str	r1, [sp, #28]
 800e190:	9104      	str	r1, [sp, #16]
 800e192:	4909      	ldr	r1, [pc, #36]	; (800e1b8 <siprintf+0x3c>)
 800e194:	f853 2b04 	ldr.w	r2, [r3], #4
 800e198:	9105      	str	r1, [sp, #20]
 800e19a:	6800      	ldr	r0, [r0, #0]
 800e19c:	9301      	str	r3, [sp, #4]
 800e19e:	a902      	add	r1, sp, #8
 800e1a0:	f000 f930 	bl	800e404 <_svfiprintf_r>
 800e1a4:	9b02      	ldr	r3, [sp, #8]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	701a      	strb	r2, [r3, #0]
 800e1aa:	b01c      	add	sp, #112	; 0x70
 800e1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1b0:	b003      	add	sp, #12
 800e1b2:	4770      	bx	lr
 800e1b4:	20000174 	.word	0x20000174
 800e1b8:	ffff0208 	.word	0xffff0208

0800e1bc <_vsniprintf_r>:
 800e1bc:	b530      	push	{r4, r5, lr}
 800e1be:	4614      	mov	r4, r2
 800e1c0:	2c00      	cmp	r4, #0
 800e1c2:	b09b      	sub	sp, #108	; 0x6c
 800e1c4:	4605      	mov	r5, r0
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	da05      	bge.n	800e1d6 <_vsniprintf_r+0x1a>
 800e1ca:	238b      	movs	r3, #139	; 0x8b
 800e1cc:	6003      	str	r3, [r0, #0]
 800e1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d2:	b01b      	add	sp, #108	; 0x6c
 800e1d4:	bd30      	pop	{r4, r5, pc}
 800e1d6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e1da:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e1de:	bf14      	ite	ne
 800e1e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e1e4:	4623      	moveq	r3, r4
 800e1e6:	9302      	str	r3, [sp, #8]
 800e1e8:	9305      	str	r3, [sp, #20]
 800e1ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1ee:	9100      	str	r1, [sp, #0]
 800e1f0:	9104      	str	r1, [sp, #16]
 800e1f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e1f6:	4669      	mov	r1, sp
 800e1f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e1fa:	f000 f903 	bl	800e404 <_svfiprintf_r>
 800e1fe:	1c43      	adds	r3, r0, #1
 800e200:	bfbc      	itt	lt
 800e202:	238b      	movlt	r3, #139	; 0x8b
 800e204:	602b      	strlt	r3, [r5, #0]
 800e206:	2c00      	cmp	r4, #0
 800e208:	d0e3      	beq.n	800e1d2 <_vsniprintf_r+0x16>
 800e20a:	9b00      	ldr	r3, [sp, #0]
 800e20c:	2200      	movs	r2, #0
 800e20e:	701a      	strb	r2, [r3, #0]
 800e210:	e7df      	b.n	800e1d2 <_vsniprintf_r+0x16>
	...

0800e214 <vsniprintf>:
 800e214:	b507      	push	{r0, r1, r2, lr}
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	4613      	mov	r3, r2
 800e21a:	460a      	mov	r2, r1
 800e21c:	4601      	mov	r1, r0
 800e21e:	4803      	ldr	r0, [pc, #12]	; (800e22c <vsniprintf+0x18>)
 800e220:	6800      	ldr	r0, [r0, #0]
 800e222:	f7ff ffcb 	bl	800e1bc <_vsniprintf_r>
 800e226:	b003      	add	sp, #12
 800e228:	f85d fb04 	ldr.w	pc, [sp], #4
 800e22c:	20000174 	.word	0x20000174

0800e230 <memset>:
 800e230:	4402      	add	r2, r0
 800e232:	4603      	mov	r3, r0
 800e234:	4293      	cmp	r3, r2
 800e236:	d100      	bne.n	800e23a <memset+0xa>
 800e238:	4770      	bx	lr
 800e23a:	f803 1b01 	strb.w	r1, [r3], #1
 800e23e:	e7f9      	b.n	800e234 <memset+0x4>

0800e240 <_sbrk_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d06      	ldr	r5, [pc, #24]	; (800e25c <_sbrk_r+0x1c>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	f7f3 fc84 	bl	8001b58 <_sbrk>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_sbrk_r+0x1a>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_sbrk_r+0x1a>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	200023f4 	.word	0x200023f4

0800e260 <__errno>:
 800e260:	4b01      	ldr	r3, [pc, #4]	; (800e268 <__errno+0x8>)
 800e262:	6818      	ldr	r0, [r3, #0]
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	20000174 	.word	0x20000174

0800e26c <__libc_init_array>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	4d0d      	ldr	r5, [pc, #52]	; (800e2a4 <__libc_init_array+0x38>)
 800e270:	4c0d      	ldr	r4, [pc, #52]	; (800e2a8 <__libc_init_array+0x3c>)
 800e272:	1b64      	subs	r4, r4, r5
 800e274:	10a4      	asrs	r4, r4, #2
 800e276:	2600      	movs	r6, #0
 800e278:	42a6      	cmp	r6, r4
 800e27a:	d109      	bne.n	800e290 <__libc_init_array+0x24>
 800e27c:	4d0b      	ldr	r5, [pc, #44]	; (800e2ac <__libc_init_array+0x40>)
 800e27e:	4c0c      	ldr	r4, [pc, #48]	; (800e2b0 <__libc_init_array+0x44>)
 800e280:	f000 fbae 	bl	800e9e0 <_init>
 800e284:	1b64      	subs	r4, r4, r5
 800e286:	10a4      	asrs	r4, r4, #2
 800e288:	2600      	movs	r6, #0
 800e28a:	42a6      	cmp	r6, r4
 800e28c:	d105      	bne.n	800e29a <__libc_init_array+0x2e>
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	f855 3b04 	ldr.w	r3, [r5], #4
 800e294:	4798      	blx	r3
 800e296:	3601      	adds	r6, #1
 800e298:	e7ee      	b.n	800e278 <__libc_init_array+0xc>
 800e29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29e:	4798      	blx	r3
 800e2a0:	3601      	adds	r6, #1
 800e2a2:	e7f2      	b.n	800e28a <__libc_init_array+0x1e>
 800e2a4:	0800efec 	.word	0x0800efec
 800e2a8:	0800efec 	.word	0x0800efec
 800e2ac:	0800efec 	.word	0x0800efec
 800e2b0:	0800eff0 	.word	0x0800eff0

0800e2b4 <__retarget_lock_acquire_recursive>:
 800e2b4:	4770      	bx	lr

0800e2b6 <__retarget_lock_release_recursive>:
 800e2b6:	4770      	bx	lr

0800e2b8 <_free_r>:
 800e2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ba:	2900      	cmp	r1, #0
 800e2bc:	d044      	beq.n	800e348 <_free_r+0x90>
 800e2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2c2:	9001      	str	r0, [sp, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f1a1 0404 	sub.w	r4, r1, #4
 800e2ca:	bfb8      	it	lt
 800e2cc:	18e4      	addlt	r4, r4, r3
 800e2ce:	f7ff ff3f 	bl	800e150 <__malloc_lock>
 800e2d2:	4a1e      	ldr	r2, [pc, #120]	; (800e34c <_free_r+0x94>)
 800e2d4:	9801      	ldr	r0, [sp, #4]
 800e2d6:	6813      	ldr	r3, [r2, #0]
 800e2d8:	b933      	cbnz	r3, 800e2e8 <_free_r+0x30>
 800e2da:	6063      	str	r3, [r4, #4]
 800e2dc:	6014      	str	r4, [r2, #0]
 800e2de:	b003      	add	sp, #12
 800e2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2e4:	f7ff bf3a 	b.w	800e15c <__malloc_unlock>
 800e2e8:	42a3      	cmp	r3, r4
 800e2ea:	d908      	bls.n	800e2fe <_free_r+0x46>
 800e2ec:	6825      	ldr	r5, [r4, #0]
 800e2ee:	1961      	adds	r1, r4, r5
 800e2f0:	428b      	cmp	r3, r1
 800e2f2:	bf01      	itttt	eq
 800e2f4:	6819      	ldreq	r1, [r3, #0]
 800e2f6:	685b      	ldreq	r3, [r3, #4]
 800e2f8:	1949      	addeq	r1, r1, r5
 800e2fa:	6021      	streq	r1, [r4, #0]
 800e2fc:	e7ed      	b.n	800e2da <_free_r+0x22>
 800e2fe:	461a      	mov	r2, r3
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	b10b      	cbz	r3, 800e308 <_free_r+0x50>
 800e304:	42a3      	cmp	r3, r4
 800e306:	d9fa      	bls.n	800e2fe <_free_r+0x46>
 800e308:	6811      	ldr	r1, [r2, #0]
 800e30a:	1855      	adds	r5, r2, r1
 800e30c:	42a5      	cmp	r5, r4
 800e30e:	d10b      	bne.n	800e328 <_free_r+0x70>
 800e310:	6824      	ldr	r4, [r4, #0]
 800e312:	4421      	add	r1, r4
 800e314:	1854      	adds	r4, r2, r1
 800e316:	42a3      	cmp	r3, r4
 800e318:	6011      	str	r1, [r2, #0]
 800e31a:	d1e0      	bne.n	800e2de <_free_r+0x26>
 800e31c:	681c      	ldr	r4, [r3, #0]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	6053      	str	r3, [r2, #4]
 800e322:	440c      	add	r4, r1
 800e324:	6014      	str	r4, [r2, #0]
 800e326:	e7da      	b.n	800e2de <_free_r+0x26>
 800e328:	d902      	bls.n	800e330 <_free_r+0x78>
 800e32a:	230c      	movs	r3, #12
 800e32c:	6003      	str	r3, [r0, #0]
 800e32e:	e7d6      	b.n	800e2de <_free_r+0x26>
 800e330:	6825      	ldr	r5, [r4, #0]
 800e332:	1961      	adds	r1, r4, r5
 800e334:	428b      	cmp	r3, r1
 800e336:	bf04      	itt	eq
 800e338:	6819      	ldreq	r1, [r3, #0]
 800e33a:	685b      	ldreq	r3, [r3, #4]
 800e33c:	6063      	str	r3, [r4, #4]
 800e33e:	bf04      	itt	eq
 800e340:	1949      	addeq	r1, r1, r5
 800e342:	6021      	streq	r1, [r4, #0]
 800e344:	6054      	str	r4, [r2, #4]
 800e346:	e7ca      	b.n	800e2de <_free_r+0x26>
 800e348:	b003      	add	sp, #12
 800e34a:	bd30      	pop	{r4, r5, pc}
 800e34c:	200022b4 	.word	0x200022b4

0800e350 <__ssputs_r>:
 800e350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e354:	688e      	ldr	r6, [r1, #8]
 800e356:	461f      	mov	r7, r3
 800e358:	42be      	cmp	r6, r7
 800e35a:	680b      	ldr	r3, [r1, #0]
 800e35c:	4682      	mov	sl, r0
 800e35e:	460c      	mov	r4, r1
 800e360:	4690      	mov	r8, r2
 800e362:	d82c      	bhi.n	800e3be <__ssputs_r+0x6e>
 800e364:	898a      	ldrh	r2, [r1, #12]
 800e366:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e36a:	d026      	beq.n	800e3ba <__ssputs_r+0x6a>
 800e36c:	6965      	ldr	r5, [r4, #20]
 800e36e:	6909      	ldr	r1, [r1, #16]
 800e370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e374:	eba3 0901 	sub.w	r9, r3, r1
 800e378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e37c:	1c7b      	adds	r3, r7, #1
 800e37e:	444b      	add	r3, r9
 800e380:	106d      	asrs	r5, r5, #1
 800e382:	429d      	cmp	r5, r3
 800e384:	bf38      	it	cc
 800e386:	461d      	movcc	r5, r3
 800e388:	0553      	lsls	r3, r2, #21
 800e38a:	d527      	bpl.n	800e3dc <__ssputs_r+0x8c>
 800e38c:	4629      	mov	r1, r5
 800e38e:	f7ff fe5f 	bl	800e050 <_malloc_r>
 800e392:	4606      	mov	r6, r0
 800e394:	b360      	cbz	r0, 800e3f0 <__ssputs_r+0xa0>
 800e396:	6921      	ldr	r1, [r4, #16]
 800e398:	464a      	mov	r2, r9
 800e39a:	f000 fadb 	bl	800e954 <memcpy>
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	6126      	str	r6, [r4, #16]
 800e3ac:	6165      	str	r5, [r4, #20]
 800e3ae:	444e      	add	r6, r9
 800e3b0:	eba5 0509 	sub.w	r5, r5, r9
 800e3b4:	6026      	str	r6, [r4, #0]
 800e3b6:	60a5      	str	r5, [r4, #8]
 800e3b8:	463e      	mov	r6, r7
 800e3ba:	42be      	cmp	r6, r7
 800e3bc:	d900      	bls.n	800e3c0 <__ssputs_r+0x70>
 800e3be:	463e      	mov	r6, r7
 800e3c0:	6820      	ldr	r0, [r4, #0]
 800e3c2:	4632      	mov	r2, r6
 800e3c4:	4641      	mov	r1, r8
 800e3c6:	f000 faab 	bl	800e920 <memmove>
 800e3ca:	68a3      	ldr	r3, [r4, #8]
 800e3cc:	1b9b      	subs	r3, r3, r6
 800e3ce:	60a3      	str	r3, [r4, #8]
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	4433      	add	r3, r6
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3dc:	462a      	mov	r2, r5
 800e3de:	f000 fac7 	bl	800e970 <_realloc_r>
 800e3e2:	4606      	mov	r6, r0
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d1e0      	bne.n	800e3aa <__ssputs_r+0x5a>
 800e3e8:	6921      	ldr	r1, [r4, #16]
 800e3ea:	4650      	mov	r0, sl
 800e3ec:	f7ff ff64 	bl	800e2b8 <_free_r>
 800e3f0:	230c      	movs	r3, #12
 800e3f2:	f8ca 3000 	str.w	r3, [sl]
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3fc:	81a3      	strh	r3, [r4, #12]
 800e3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e402:	e7e9      	b.n	800e3d8 <__ssputs_r+0x88>

0800e404 <_svfiprintf_r>:
 800e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	4698      	mov	r8, r3
 800e40a:	898b      	ldrh	r3, [r1, #12]
 800e40c:	061b      	lsls	r3, r3, #24
 800e40e:	b09d      	sub	sp, #116	; 0x74
 800e410:	4607      	mov	r7, r0
 800e412:	460d      	mov	r5, r1
 800e414:	4614      	mov	r4, r2
 800e416:	d50e      	bpl.n	800e436 <_svfiprintf_r+0x32>
 800e418:	690b      	ldr	r3, [r1, #16]
 800e41a:	b963      	cbnz	r3, 800e436 <_svfiprintf_r+0x32>
 800e41c:	2140      	movs	r1, #64	; 0x40
 800e41e:	f7ff fe17 	bl	800e050 <_malloc_r>
 800e422:	6028      	str	r0, [r5, #0]
 800e424:	6128      	str	r0, [r5, #16]
 800e426:	b920      	cbnz	r0, 800e432 <_svfiprintf_r+0x2e>
 800e428:	230c      	movs	r3, #12
 800e42a:	603b      	str	r3, [r7, #0]
 800e42c:	f04f 30ff 	mov.w	r0, #4294967295
 800e430:	e0d0      	b.n	800e5d4 <_svfiprintf_r+0x1d0>
 800e432:	2340      	movs	r3, #64	; 0x40
 800e434:	616b      	str	r3, [r5, #20]
 800e436:	2300      	movs	r3, #0
 800e438:	9309      	str	r3, [sp, #36]	; 0x24
 800e43a:	2320      	movs	r3, #32
 800e43c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e440:	f8cd 800c 	str.w	r8, [sp, #12]
 800e444:	2330      	movs	r3, #48	; 0x30
 800e446:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e5ec <_svfiprintf_r+0x1e8>
 800e44a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e44e:	f04f 0901 	mov.w	r9, #1
 800e452:	4623      	mov	r3, r4
 800e454:	469a      	mov	sl, r3
 800e456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e45a:	b10a      	cbz	r2, 800e460 <_svfiprintf_r+0x5c>
 800e45c:	2a25      	cmp	r2, #37	; 0x25
 800e45e:	d1f9      	bne.n	800e454 <_svfiprintf_r+0x50>
 800e460:	ebba 0b04 	subs.w	fp, sl, r4
 800e464:	d00b      	beq.n	800e47e <_svfiprintf_r+0x7a>
 800e466:	465b      	mov	r3, fp
 800e468:	4622      	mov	r2, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	4638      	mov	r0, r7
 800e46e:	f7ff ff6f 	bl	800e350 <__ssputs_r>
 800e472:	3001      	adds	r0, #1
 800e474:	f000 80a9 	beq.w	800e5ca <_svfiprintf_r+0x1c6>
 800e478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e47a:	445a      	add	r2, fp
 800e47c:	9209      	str	r2, [sp, #36]	; 0x24
 800e47e:	f89a 3000 	ldrb.w	r3, [sl]
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 80a1 	beq.w	800e5ca <_svfiprintf_r+0x1c6>
 800e488:	2300      	movs	r3, #0
 800e48a:	f04f 32ff 	mov.w	r2, #4294967295
 800e48e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e492:	f10a 0a01 	add.w	sl, sl, #1
 800e496:	9304      	str	r3, [sp, #16]
 800e498:	9307      	str	r3, [sp, #28]
 800e49a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e49e:	931a      	str	r3, [sp, #104]	; 0x68
 800e4a0:	4654      	mov	r4, sl
 800e4a2:	2205      	movs	r2, #5
 800e4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a8:	4850      	ldr	r0, [pc, #320]	; (800e5ec <_svfiprintf_r+0x1e8>)
 800e4aa:	f7f1 fec1 	bl	8000230 <memchr>
 800e4ae:	9a04      	ldr	r2, [sp, #16]
 800e4b0:	b9d8      	cbnz	r0, 800e4ea <_svfiprintf_r+0xe6>
 800e4b2:	06d0      	lsls	r0, r2, #27
 800e4b4:	bf44      	itt	mi
 800e4b6:	2320      	movmi	r3, #32
 800e4b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4bc:	0711      	lsls	r1, r2, #28
 800e4be:	bf44      	itt	mi
 800e4c0:	232b      	movmi	r3, #43	; 0x2b
 800e4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e4cc:	d015      	beq.n	800e4fa <_svfiprintf_r+0xf6>
 800e4ce:	9a07      	ldr	r2, [sp, #28]
 800e4d0:	4654      	mov	r4, sl
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	f04f 0c0a 	mov.w	ip, #10
 800e4d8:	4621      	mov	r1, r4
 800e4da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4de:	3b30      	subs	r3, #48	; 0x30
 800e4e0:	2b09      	cmp	r3, #9
 800e4e2:	d94d      	bls.n	800e580 <_svfiprintf_r+0x17c>
 800e4e4:	b1b0      	cbz	r0, 800e514 <_svfiprintf_r+0x110>
 800e4e6:	9207      	str	r2, [sp, #28]
 800e4e8:	e014      	b.n	800e514 <_svfiprintf_r+0x110>
 800e4ea:	eba0 0308 	sub.w	r3, r0, r8
 800e4ee:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	9304      	str	r3, [sp, #16]
 800e4f6:	46a2      	mov	sl, r4
 800e4f8:	e7d2      	b.n	800e4a0 <_svfiprintf_r+0x9c>
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	1d19      	adds	r1, r3, #4
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	9103      	str	r1, [sp, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	bfbb      	ittet	lt
 800e506:	425b      	neglt	r3, r3
 800e508:	f042 0202 	orrlt.w	r2, r2, #2
 800e50c:	9307      	strge	r3, [sp, #28]
 800e50e:	9307      	strlt	r3, [sp, #28]
 800e510:	bfb8      	it	lt
 800e512:	9204      	strlt	r2, [sp, #16]
 800e514:	7823      	ldrb	r3, [r4, #0]
 800e516:	2b2e      	cmp	r3, #46	; 0x2e
 800e518:	d10c      	bne.n	800e534 <_svfiprintf_r+0x130>
 800e51a:	7863      	ldrb	r3, [r4, #1]
 800e51c:	2b2a      	cmp	r3, #42	; 0x2a
 800e51e:	d134      	bne.n	800e58a <_svfiprintf_r+0x186>
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	1d1a      	adds	r2, r3, #4
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	9203      	str	r2, [sp, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	bfb8      	it	lt
 800e52c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e530:	3402      	adds	r4, #2
 800e532:	9305      	str	r3, [sp, #20]
 800e534:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e5fc <_svfiprintf_r+0x1f8>
 800e538:	7821      	ldrb	r1, [r4, #0]
 800e53a:	2203      	movs	r2, #3
 800e53c:	4650      	mov	r0, sl
 800e53e:	f7f1 fe77 	bl	8000230 <memchr>
 800e542:	b138      	cbz	r0, 800e554 <_svfiprintf_r+0x150>
 800e544:	9b04      	ldr	r3, [sp, #16]
 800e546:	eba0 000a 	sub.w	r0, r0, sl
 800e54a:	2240      	movs	r2, #64	; 0x40
 800e54c:	4082      	lsls	r2, r0
 800e54e:	4313      	orrs	r3, r2
 800e550:	3401      	adds	r4, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	4825      	ldr	r0, [pc, #148]	; (800e5f0 <_svfiprintf_r+0x1ec>)
 800e55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e55e:	2206      	movs	r2, #6
 800e560:	f7f1 fe66 	bl	8000230 <memchr>
 800e564:	2800      	cmp	r0, #0
 800e566:	d038      	beq.n	800e5da <_svfiprintf_r+0x1d6>
 800e568:	4b22      	ldr	r3, [pc, #136]	; (800e5f4 <_svfiprintf_r+0x1f0>)
 800e56a:	bb1b      	cbnz	r3, 800e5b4 <_svfiprintf_r+0x1b0>
 800e56c:	9b03      	ldr	r3, [sp, #12]
 800e56e:	3307      	adds	r3, #7
 800e570:	f023 0307 	bic.w	r3, r3, #7
 800e574:	3308      	adds	r3, #8
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57a:	4433      	add	r3, r6
 800e57c:	9309      	str	r3, [sp, #36]	; 0x24
 800e57e:	e768      	b.n	800e452 <_svfiprintf_r+0x4e>
 800e580:	fb0c 3202 	mla	r2, ip, r2, r3
 800e584:	460c      	mov	r4, r1
 800e586:	2001      	movs	r0, #1
 800e588:	e7a6      	b.n	800e4d8 <_svfiprintf_r+0xd4>
 800e58a:	2300      	movs	r3, #0
 800e58c:	3401      	adds	r4, #1
 800e58e:	9305      	str	r3, [sp, #20]
 800e590:	4619      	mov	r1, r3
 800e592:	f04f 0c0a 	mov.w	ip, #10
 800e596:	4620      	mov	r0, r4
 800e598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59c:	3a30      	subs	r2, #48	; 0x30
 800e59e:	2a09      	cmp	r2, #9
 800e5a0:	d903      	bls.n	800e5aa <_svfiprintf_r+0x1a6>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0c6      	beq.n	800e534 <_svfiprintf_r+0x130>
 800e5a6:	9105      	str	r1, [sp, #20]
 800e5a8:	e7c4      	b.n	800e534 <_svfiprintf_r+0x130>
 800e5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e7f0      	b.n	800e596 <_svfiprintf_r+0x192>
 800e5b4:	ab03      	add	r3, sp, #12
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4b0f      	ldr	r3, [pc, #60]	; (800e5f8 <_svfiprintf_r+0x1f4>)
 800e5bc:	a904      	add	r1, sp, #16
 800e5be:	4638      	mov	r0, r7
 800e5c0:	f3af 8000 	nop.w
 800e5c4:	1c42      	adds	r2, r0, #1
 800e5c6:	4606      	mov	r6, r0
 800e5c8:	d1d6      	bne.n	800e578 <_svfiprintf_r+0x174>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	065b      	lsls	r3, r3, #25
 800e5ce:	f53f af2d 	bmi.w	800e42c <_svfiprintf_r+0x28>
 800e5d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5d4:	b01d      	add	sp, #116	; 0x74
 800e5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5da:	ab03      	add	r3, sp, #12
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	462a      	mov	r2, r5
 800e5e0:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <_svfiprintf_r+0x1f4>)
 800e5e2:	a904      	add	r1, sp, #16
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	f000 f879 	bl	800e6dc <_printf_i>
 800e5ea:	e7eb      	b.n	800e5c4 <_svfiprintf_r+0x1c0>
 800e5ec:	0800efb1 	.word	0x0800efb1
 800e5f0:	0800efbb 	.word	0x0800efbb
 800e5f4:	00000000 	.word	0x00000000
 800e5f8:	0800e351 	.word	0x0800e351
 800e5fc:	0800efb7 	.word	0x0800efb7

0800e600 <_printf_common>:
 800e600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e604:	4616      	mov	r6, r2
 800e606:	4699      	mov	r9, r3
 800e608:	688a      	ldr	r2, [r1, #8]
 800e60a:	690b      	ldr	r3, [r1, #16]
 800e60c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e610:	4293      	cmp	r3, r2
 800e612:	bfb8      	it	lt
 800e614:	4613      	movlt	r3, r2
 800e616:	6033      	str	r3, [r6, #0]
 800e618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e61c:	4607      	mov	r7, r0
 800e61e:	460c      	mov	r4, r1
 800e620:	b10a      	cbz	r2, 800e626 <_printf_common+0x26>
 800e622:	3301      	adds	r3, #1
 800e624:	6033      	str	r3, [r6, #0]
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	0699      	lsls	r1, r3, #26
 800e62a:	bf42      	ittt	mi
 800e62c:	6833      	ldrmi	r3, [r6, #0]
 800e62e:	3302      	addmi	r3, #2
 800e630:	6033      	strmi	r3, [r6, #0]
 800e632:	6825      	ldr	r5, [r4, #0]
 800e634:	f015 0506 	ands.w	r5, r5, #6
 800e638:	d106      	bne.n	800e648 <_printf_common+0x48>
 800e63a:	f104 0a19 	add.w	sl, r4, #25
 800e63e:	68e3      	ldr	r3, [r4, #12]
 800e640:	6832      	ldr	r2, [r6, #0]
 800e642:	1a9b      	subs	r3, r3, r2
 800e644:	42ab      	cmp	r3, r5
 800e646:	dc26      	bgt.n	800e696 <_printf_common+0x96>
 800e648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e64c:	1e13      	subs	r3, r2, #0
 800e64e:	6822      	ldr	r2, [r4, #0]
 800e650:	bf18      	it	ne
 800e652:	2301      	movne	r3, #1
 800e654:	0692      	lsls	r2, r2, #26
 800e656:	d42b      	bmi.n	800e6b0 <_printf_common+0xb0>
 800e658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e65c:	4649      	mov	r1, r9
 800e65e:	4638      	mov	r0, r7
 800e660:	47c0      	blx	r8
 800e662:	3001      	adds	r0, #1
 800e664:	d01e      	beq.n	800e6a4 <_printf_common+0xa4>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	6922      	ldr	r2, [r4, #16]
 800e66a:	f003 0306 	and.w	r3, r3, #6
 800e66e:	2b04      	cmp	r3, #4
 800e670:	bf02      	ittt	eq
 800e672:	68e5      	ldreq	r5, [r4, #12]
 800e674:	6833      	ldreq	r3, [r6, #0]
 800e676:	1aed      	subeq	r5, r5, r3
 800e678:	68a3      	ldr	r3, [r4, #8]
 800e67a:	bf0c      	ite	eq
 800e67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e680:	2500      	movne	r5, #0
 800e682:	4293      	cmp	r3, r2
 800e684:	bfc4      	itt	gt
 800e686:	1a9b      	subgt	r3, r3, r2
 800e688:	18ed      	addgt	r5, r5, r3
 800e68a:	2600      	movs	r6, #0
 800e68c:	341a      	adds	r4, #26
 800e68e:	42b5      	cmp	r5, r6
 800e690:	d11a      	bne.n	800e6c8 <_printf_common+0xc8>
 800e692:	2000      	movs	r0, #0
 800e694:	e008      	b.n	800e6a8 <_printf_common+0xa8>
 800e696:	2301      	movs	r3, #1
 800e698:	4652      	mov	r2, sl
 800e69a:	4649      	mov	r1, r9
 800e69c:	4638      	mov	r0, r7
 800e69e:	47c0      	blx	r8
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	d103      	bne.n	800e6ac <_printf_common+0xac>
 800e6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ac:	3501      	adds	r5, #1
 800e6ae:	e7c6      	b.n	800e63e <_printf_common+0x3e>
 800e6b0:	18e1      	adds	r1, r4, r3
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	2030      	movs	r0, #48	; 0x30
 800e6b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6ba:	4422      	add	r2, r4
 800e6bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6c4:	3302      	adds	r3, #2
 800e6c6:	e7c7      	b.n	800e658 <_printf_common+0x58>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4649      	mov	r1, r9
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	47c0      	blx	r8
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	d0e6      	beq.n	800e6a4 <_printf_common+0xa4>
 800e6d6:	3601      	adds	r6, #1
 800e6d8:	e7d9      	b.n	800e68e <_printf_common+0x8e>
	...

0800e6dc <_printf_i>:
 800e6dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e0:	7e0f      	ldrb	r7, [r1, #24]
 800e6e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6e4:	2f78      	cmp	r7, #120	; 0x78
 800e6e6:	4691      	mov	r9, r2
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	469a      	mov	sl, r3
 800e6ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6f2:	d807      	bhi.n	800e704 <_printf_i+0x28>
 800e6f4:	2f62      	cmp	r7, #98	; 0x62
 800e6f6:	d80a      	bhi.n	800e70e <_printf_i+0x32>
 800e6f8:	2f00      	cmp	r7, #0
 800e6fa:	f000 80d4 	beq.w	800e8a6 <_printf_i+0x1ca>
 800e6fe:	2f58      	cmp	r7, #88	; 0x58
 800e700:	f000 80c0 	beq.w	800e884 <_printf_i+0x1a8>
 800e704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e70c:	e03a      	b.n	800e784 <_printf_i+0xa8>
 800e70e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e712:	2b15      	cmp	r3, #21
 800e714:	d8f6      	bhi.n	800e704 <_printf_i+0x28>
 800e716:	a101      	add	r1, pc, #4	; (adr r1, 800e71c <_printf_i+0x40>)
 800e718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e71c:	0800e775 	.word	0x0800e775
 800e720:	0800e789 	.word	0x0800e789
 800e724:	0800e705 	.word	0x0800e705
 800e728:	0800e705 	.word	0x0800e705
 800e72c:	0800e705 	.word	0x0800e705
 800e730:	0800e705 	.word	0x0800e705
 800e734:	0800e789 	.word	0x0800e789
 800e738:	0800e705 	.word	0x0800e705
 800e73c:	0800e705 	.word	0x0800e705
 800e740:	0800e705 	.word	0x0800e705
 800e744:	0800e705 	.word	0x0800e705
 800e748:	0800e88d 	.word	0x0800e88d
 800e74c:	0800e7b5 	.word	0x0800e7b5
 800e750:	0800e847 	.word	0x0800e847
 800e754:	0800e705 	.word	0x0800e705
 800e758:	0800e705 	.word	0x0800e705
 800e75c:	0800e8af 	.word	0x0800e8af
 800e760:	0800e705 	.word	0x0800e705
 800e764:	0800e7b5 	.word	0x0800e7b5
 800e768:	0800e705 	.word	0x0800e705
 800e76c:	0800e705 	.word	0x0800e705
 800e770:	0800e84f 	.word	0x0800e84f
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	1d1a      	adds	r2, r3, #4
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	602a      	str	r2, [r5, #0]
 800e77c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e784:	2301      	movs	r3, #1
 800e786:	e09f      	b.n	800e8c8 <_printf_i+0x1ec>
 800e788:	6820      	ldr	r0, [r4, #0]
 800e78a:	682b      	ldr	r3, [r5, #0]
 800e78c:	0607      	lsls	r7, r0, #24
 800e78e:	f103 0104 	add.w	r1, r3, #4
 800e792:	6029      	str	r1, [r5, #0]
 800e794:	d501      	bpl.n	800e79a <_printf_i+0xbe>
 800e796:	681e      	ldr	r6, [r3, #0]
 800e798:	e003      	b.n	800e7a2 <_printf_i+0xc6>
 800e79a:	0646      	lsls	r6, r0, #25
 800e79c:	d5fb      	bpl.n	800e796 <_printf_i+0xba>
 800e79e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e7a2:	2e00      	cmp	r6, #0
 800e7a4:	da03      	bge.n	800e7ae <_printf_i+0xd2>
 800e7a6:	232d      	movs	r3, #45	; 0x2d
 800e7a8:	4276      	negs	r6, r6
 800e7aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7ae:	485a      	ldr	r0, [pc, #360]	; (800e918 <_printf_i+0x23c>)
 800e7b0:	230a      	movs	r3, #10
 800e7b2:	e012      	b.n	800e7da <_printf_i+0xfe>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	6820      	ldr	r0, [r4, #0]
 800e7b8:	1d19      	adds	r1, r3, #4
 800e7ba:	6029      	str	r1, [r5, #0]
 800e7bc:	0605      	lsls	r5, r0, #24
 800e7be:	d501      	bpl.n	800e7c4 <_printf_i+0xe8>
 800e7c0:	681e      	ldr	r6, [r3, #0]
 800e7c2:	e002      	b.n	800e7ca <_printf_i+0xee>
 800e7c4:	0641      	lsls	r1, r0, #25
 800e7c6:	d5fb      	bpl.n	800e7c0 <_printf_i+0xe4>
 800e7c8:	881e      	ldrh	r6, [r3, #0]
 800e7ca:	4853      	ldr	r0, [pc, #332]	; (800e918 <_printf_i+0x23c>)
 800e7cc:	2f6f      	cmp	r7, #111	; 0x6f
 800e7ce:	bf0c      	ite	eq
 800e7d0:	2308      	moveq	r3, #8
 800e7d2:	230a      	movne	r3, #10
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7da:	6865      	ldr	r5, [r4, #4]
 800e7dc:	60a5      	str	r5, [r4, #8]
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	bfa2      	ittt	ge
 800e7e2:	6821      	ldrge	r1, [r4, #0]
 800e7e4:	f021 0104 	bicge.w	r1, r1, #4
 800e7e8:	6021      	strge	r1, [r4, #0]
 800e7ea:	b90e      	cbnz	r6, 800e7f0 <_printf_i+0x114>
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	d04b      	beq.n	800e888 <_printf_i+0x1ac>
 800e7f0:	4615      	mov	r5, r2
 800e7f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7f6:	fb03 6711 	mls	r7, r3, r1, r6
 800e7fa:	5dc7      	ldrb	r7, [r0, r7]
 800e7fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e800:	4637      	mov	r7, r6
 800e802:	42bb      	cmp	r3, r7
 800e804:	460e      	mov	r6, r1
 800e806:	d9f4      	bls.n	800e7f2 <_printf_i+0x116>
 800e808:	2b08      	cmp	r3, #8
 800e80a:	d10b      	bne.n	800e824 <_printf_i+0x148>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	07de      	lsls	r6, r3, #31
 800e810:	d508      	bpl.n	800e824 <_printf_i+0x148>
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	6861      	ldr	r1, [r4, #4]
 800e816:	4299      	cmp	r1, r3
 800e818:	bfde      	ittt	le
 800e81a:	2330      	movle	r3, #48	; 0x30
 800e81c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e820:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e824:	1b52      	subs	r2, r2, r5
 800e826:	6122      	str	r2, [r4, #16]
 800e828:	f8cd a000 	str.w	sl, [sp]
 800e82c:	464b      	mov	r3, r9
 800e82e:	aa03      	add	r2, sp, #12
 800e830:	4621      	mov	r1, r4
 800e832:	4640      	mov	r0, r8
 800e834:	f7ff fee4 	bl	800e600 <_printf_common>
 800e838:	3001      	adds	r0, #1
 800e83a:	d14a      	bne.n	800e8d2 <_printf_i+0x1f6>
 800e83c:	f04f 30ff 	mov.w	r0, #4294967295
 800e840:	b004      	add	sp, #16
 800e842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	f043 0320 	orr.w	r3, r3, #32
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	4833      	ldr	r0, [pc, #204]	; (800e91c <_printf_i+0x240>)
 800e850:	2778      	movs	r7, #120	; 0x78
 800e852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e856:	6823      	ldr	r3, [r4, #0]
 800e858:	6829      	ldr	r1, [r5, #0]
 800e85a:	061f      	lsls	r7, r3, #24
 800e85c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e860:	d402      	bmi.n	800e868 <_printf_i+0x18c>
 800e862:	065f      	lsls	r7, r3, #25
 800e864:	bf48      	it	mi
 800e866:	b2b6      	uxthmi	r6, r6
 800e868:	07df      	lsls	r7, r3, #31
 800e86a:	bf48      	it	mi
 800e86c:	f043 0320 	orrmi.w	r3, r3, #32
 800e870:	6029      	str	r1, [r5, #0]
 800e872:	bf48      	it	mi
 800e874:	6023      	strmi	r3, [r4, #0]
 800e876:	b91e      	cbnz	r6, 800e880 <_printf_i+0x1a4>
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	f023 0320 	bic.w	r3, r3, #32
 800e87e:	6023      	str	r3, [r4, #0]
 800e880:	2310      	movs	r3, #16
 800e882:	e7a7      	b.n	800e7d4 <_printf_i+0xf8>
 800e884:	4824      	ldr	r0, [pc, #144]	; (800e918 <_printf_i+0x23c>)
 800e886:	e7e4      	b.n	800e852 <_printf_i+0x176>
 800e888:	4615      	mov	r5, r2
 800e88a:	e7bd      	b.n	800e808 <_printf_i+0x12c>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	6826      	ldr	r6, [r4, #0]
 800e890:	6961      	ldr	r1, [r4, #20]
 800e892:	1d18      	adds	r0, r3, #4
 800e894:	6028      	str	r0, [r5, #0]
 800e896:	0635      	lsls	r5, r6, #24
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	d501      	bpl.n	800e8a0 <_printf_i+0x1c4>
 800e89c:	6019      	str	r1, [r3, #0]
 800e89e:	e002      	b.n	800e8a6 <_printf_i+0x1ca>
 800e8a0:	0670      	lsls	r0, r6, #25
 800e8a2:	d5fb      	bpl.n	800e89c <_printf_i+0x1c0>
 800e8a4:	8019      	strh	r1, [r3, #0]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	6123      	str	r3, [r4, #16]
 800e8aa:	4615      	mov	r5, r2
 800e8ac:	e7bc      	b.n	800e828 <_printf_i+0x14c>
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	1d1a      	adds	r2, r3, #4
 800e8b2:	602a      	str	r2, [r5, #0]
 800e8b4:	681d      	ldr	r5, [r3, #0]
 800e8b6:	6862      	ldr	r2, [r4, #4]
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	4628      	mov	r0, r5
 800e8bc:	f7f1 fcb8 	bl	8000230 <memchr>
 800e8c0:	b108      	cbz	r0, 800e8c6 <_printf_i+0x1ea>
 800e8c2:	1b40      	subs	r0, r0, r5
 800e8c4:	6060      	str	r0, [r4, #4]
 800e8c6:	6863      	ldr	r3, [r4, #4]
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8d0:	e7aa      	b.n	800e828 <_printf_i+0x14c>
 800e8d2:	6923      	ldr	r3, [r4, #16]
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	4649      	mov	r1, r9
 800e8d8:	4640      	mov	r0, r8
 800e8da:	47d0      	blx	sl
 800e8dc:	3001      	adds	r0, #1
 800e8de:	d0ad      	beq.n	800e83c <_printf_i+0x160>
 800e8e0:	6823      	ldr	r3, [r4, #0]
 800e8e2:	079b      	lsls	r3, r3, #30
 800e8e4:	d413      	bmi.n	800e90e <_printf_i+0x232>
 800e8e6:	68e0      	ldr	r0, [r4, #12]
 800e8e8:	9b03      	ldr	r3, [sp, #12]
 800e8ea:	4298      	cmp	r0, r3
 800e8ec:	bfb8      	it	lt
 800e8ee:	4618      	movlt	r0, r3
 800e8f0:	e7a6      	b.n	800e840 <_printf_i+0x164>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	4632      	mov	r2, r6
 800e8f6:	4649      	mov	r1, r9
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	47d0      	blx	sl
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	d09d      	beq.n	800e83c <_printf_i+0x160>
 800e900:	3501      	adds	r5, #1
 800e902:	68e3      	ldr	r3, [r4, #12]
 800e904:	9903      	ldr	r1, [sp, #12]
 800e906:	1a5b      	subs	r3, r3, r1
 800e908:	42ab      	cmp	r3, r5
 800e90a:	dcf2      	bgt.n	800e8f2 <_printf_i+0x216>
 800e90c:	e7eb      	b.n	800e8e6 <_printf_i+0x20a>
 800e90e:	2500      	movs	r5, #0
 800e910:	f104 0619 	add.w	r6, r4, #25
 800e914:	e7f5      	b.n	800e902 <_printf_i+0x226>
 800e916:	bf00      	nop
 800e918:	0800efc2 	.word	0x0800efc2
 800e91c:	0800efd3 	.word	0x0800efd3

0800e920 <memmove>:
 800e920:	4288      	cmp	r0, r1
 800e922:	b510      	push	{r4, lr}
 800e924:	eb01 0402 	add.w	r4, r1, r2
 800e928:	d902      	bls.n	800e930 <memmove+0x10>
 800e92a:	4284      	cmp	r4, r0
 800e92c:	4623      	mov	r3, r4
 800e92e:	d807      	bhi.n	800e940 <memmove+0x20>
 800e930:	1e43      	subs	r3, r0, #1
 800e932:	42a1      	cmp	r1, r4
 800e934:	d008      	beq.n	800e948 <memmove+0x28>
 800e936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e93a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e93e:	e7f8      	b.n	800e932 <memmove+0x12>
 800e940:	4402      	add	r2, r0
 800e942:	4601      	mov	r1, r0
 800e944:	428a      	cmp	r2, r1
 800e946:	d100      	bne.n	800e94a <memmove+0x2a>
 800e948:	bd10      	pop	{r4, pc}
 800e94a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e94e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e952:	e7f7      	b.n	800e944 <memmove+0x24>

0800e954 <memcpy>:
 800e954:	440a      	add	r2, r1
 800e956:	4291      	cmp	r1, r2
 800e958:	f100 33ff 	add.w	r3, r0, #4294967295
 800e95c:	d100      	bne.n	800e960 <memcpy+0xc>
 800e95e:	4770      	bx	lr
 800e960:	b510      	push	{r4, lr}
 800e962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e96a:	4291      	cmp	r1, r2
 800e96c:	d1f9      	bne.n	800e962 <memcpy+0xe>
 800e96e:	bd10      	pop	{r4, pc}

0800e970 <_realloc_r>:
 800e970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e974:	4680      	mov	r8, r0
 800e976:	4614      	mov	r4, r2
 800e978:	460e      	mov	r6, r1
 800e97a:	b921      	cbnz	r1, 800e986 <_realloc_r+0x16>
 800e97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e980:	4611      	mov	r1, r2
 800e982:	f7ff bb65 	b.w	800e050 <_malloc_r>
 800e986:	b92a      	cbnz	r2, 800e994 <_realloc_r+0x24>
 800e988:	f7ff fc96 	bl	800e2b8 <_free_r>
 800e98c:	4625      	mov	r5, r4
 800e98e:	4628      	mov	r0, r5
 800e990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e994:	f000 f81b 	bl	800e9ce <_malloc_usable_size_r>
 800e998:	4284      	cmp	r4, r0
 800e99a:	4607      	mov	r7, r0
 800e99c:	d802      	bhi.n	800e9a4 <_realloc_r+0x34>
 800e99e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9a2:	d812      	bhi.n	800e9ca <_realloc_r+0x5a>
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	4640      	mov	r0, r8
 800e9a8:	f7ff fb52 	bl	800e050 <_malloc_r>
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d0ed      	beq.n	800e98e <_realloc_r+0x1e>
 800e9b2:	42bc      	cmp	r4, r7
 800e9b4:	4622      	mov	r2, r4
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	bf28      	it	cs
 800e9ba:	463a      	movcs	r2, r7
 800e9bc:	f7ff ffca 	bl	800e954 <memcpy>
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4640      	mov	r0, r8
 800e9c4:	f7ff fc78 	bl	800e2b8 <_free_r>
 800e9c8:	e7e1      	b.n	800e98e <_realloc_r+0x1e>
 800e9ca:	4635      	mov	r5, r6
 800e9cc:	e7df      	b.n	800e98e <_realloc_r+0x1e>

0800e9ce <_malloc_usable_size_r>:
 800e9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9d2:	1f18      	subs	r0, r3, #4
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	bfbc      	itt	lt
 800e9d8:	580b      	ldrlt	r3, [r1, r0]
 800e9da:	18c0      	addlt	r0, r0, r3
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <_init>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	bf00      	nop
 800e9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e6:	bc08      	pop	{r3}
 800e9e8:	469e      	mov	lr, r3
 800e9ea:	4770      	bx	lr

0800e9ec <_fini>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	bf00      	nop
 800e9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9f2:	bc08      	pop	{r3}
 800e9f4:	469e      	mov	lr, r3
 800e9f6:	4770      	bx	lr
